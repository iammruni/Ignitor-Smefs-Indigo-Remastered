// dear imgui, v1.50 WIP
// (main code and documentation)

// See ImGui::ShowTestWindow() in imgui_demo.cpp for demo code.
// Newcomers, read 'Programmer guide' below for notes on how to setup ImGui in your codebase.
// Get latest version at https://github.com/ocornut/imgui
// Releases change-log at https://github.com/ocornut/imgui/releases
// Gallery (please post your screenshots/video there!): https://github.com/ocornut/imgui/issues/772
// Developed by Omar Cornut and every direct or indirect contributors to the GitHub.
// This library is free but I need your support to sustain development and maintenance.
// If you work for a company, please consider financial support, e.g: https://www.patreon.com/imgui

/*

 Index
 - MISSION STATEMENT
 - END-USER GUIDE
 - PROGRAMMER GUIDE (read me!)
 - API BREAKING CHANGES (read me when you update!)
 - FREQUENTLY ASKED QUESTIONS (FAQ), TIPS
   - How can I help?
   - How do I update to a newer version of ImGui?
   - What is ImTextureID and how do I display an image?
   - I integrated ImGui in my engine and the text or lines are blurry..
   - I integrated ImGui in my engine and some elements are clipping or disappearing when I move windows around..
   - How can I have multiple widgets with the same label? Can I have widget without a label? (Yes). A primer on the purpose of labels/IDs.
   - How can I tell when ImGui wants my mouse/keyboard inputs and when I can pass them to my application?
   - How can I load a different font than the default?
   - How can I easily use icons in my application?
   - How can I load multiple fonts?
   - How can I display and input non-latin characters such as Chinese, Japanese, Korean, Cyrillic?
   - How can I use the drawing facilities without an ImGui window? (using ImDrawList API)
 - ISSUES & TODO-LIST
 - CODE


 MISSION STATEMENT
 =================

 - easy to use to create code-driven and data-driven tools
 - easy to use to create ad hoc short-lived tools and long-lived, more elaborate tools
 - easy to hack and improve
 - minimize screen real-estate usage
 - minimize setup and maintenance
 - minimize state storage on user side
 - portable, minimize dependencies, run on target (consoles, phones, etc.)
 - efficient runtime (NB- we do allocate when "growing" content - creating a window / opening a tree node for the first time, etc. - but a typical frame won't allocate anything)
 - read about immediate-mode gui principles @ http://mollyrocket.com/861, http://mollyrocket.com/forums/index.html

 Designed for developers and content-creators, not the typical end-user! Some of the weaknesses includes:
 - doesn't look fancy, doesn't animate
 - limited layout features, intricate layouts are typically crafted in code
 - occasionally uses statically sized buffers for string manipulations - won't crash, but some very long pieces of text may be clipped. functions like ImGui::TextUnformatted() don't have such restriction.


 END-USER GUIDE
 ==============

 - double-click title bar to collapse window
 - click upper right corner to close a window, available when 'bool* p_open' is passed to ImGui::Begin()
 - click and drag on lower right corner to resize window
 - click and drag on any empty space to move window
 - double-click/double-tap on lower right corner grip to auto-fit to content
 - TAB/SHIFT+TAB to cycle through keyboard editable fields
 - use mouse wheel to scroll
 - use CTRL+mouse wheel to zoom window contents (if IO.FontAllowScaling is true)
 - CTRL+Click on a slider or drag box to input value as text
 - text editor:
   - Hold SHIFT or use mouse to select text.
   - CTRL+Left/Right to word jump
   - CTRL+Shift+Left/Right to select words
   - CTRL+A our Double-Click to select all
   - CTRL+X,CTRL+C,CTRL+V to use OS clipboard
   - CTRL+Z,CTRL+Y to undo/redo
   - ESCAPE to revert text to its original value
   - You can apply arithmetic operators +,*,/ on numerical values. Use +- to subtract (because - would set a negative value!)


 PROGRAMMER GUIDE
 ================

 - read the FAQ below this section!
 - your code creates the UI, if your code doesn't run the UI is gone! == very dynamic UI, no construction/destructions steps, less data retention on your side, no state duplication, less sync, less bugs.
 - call and read ImGui::ShowTestWindow() for demo code demonstrating most features.
 - see examples/ folder for standalone sample applications. Prefer reading examples/opengl2_example/ first as it is the simplest.
   you may be able to grab and copy a ready made imgui_impl_*** file from the examples/.
 - customization: PushStyleColor()/PushStyleVar() or the style editor to tweak the look of the interface (e.g. if you want a more compact UI or a different color scheme).

 - getting started:
   - init: call ImGui::GetIO() to retrieve the ImGuiIO structure and fill the fields marked 'Settings'.
   - init: call io.Fonts->GetTexDataAsRGBA32(...) and load the font texture pixels into graphics memory.
   - every frame:
      1/ in your mainloop or right after you got your keyboard/mouse info, call ImGui::GetIO() and fill the fields marked 'Input'
      2/ call ImGui::NewFrame() as early as you can!
      3/ use any ImGui function you want between NewFrame() and Render()
      4/ call ImGui::Render() as late as you can to end the frame and finalize render data. it will call your RenderDrawListFn handler that you set in the IO structure.
         (if you don't need to render, you still need to call Render() and ignore the callback, or call EndFrame() instead. if you call neither some aspects of windows focusing/moving will appear broken.)
   - all rendering information are stored into command-lists until ImGui::Render() is called.
   - ImGui never touches or know about your GPU state. the only function that knows about GPU is the RenderDrawListFn handler that you provide.
   - effectively it means you can create widgets at any time in your code, regardless of considerations of being in "update" vs "render" phases of your own application.
   - refer to the examples applications in the examples/ folder for instruction on how to setup your code.
   - a typical application skeleton may be:

        // Application init
        ImGuiIO& io = ImGui::GetIO();
        io.DisplaySize.x = 1920.0f;
        io.DisplaySize.y = 1280.0f;
        io.IniFilename = "imgui.ini";
        io.RenderDrawListsFn = my_render_function;  // Setup a render function, or set to NULL and call GetDrawData() after Render() to access the render data.
        // TODO: Fill others settings of the io structure

        // Load texture atlas
        // There is a default font so you don't need to care about choosing a font yet
        unsigned char* pixels;
        int width, height;
        io.Fonts->GetTexDataAsRGBA32(pixels, &width, &height);
        // TODO: At this points you've got a texture pointed to by 'pixels' and you need to upload that your your graphic system
        // TODO: Store your texture pointer/identifier (whatever your engine uses) in 'io.Fonts->TexID'

        // Application main loop
        while (true)
        {
            // 1) get low-level inputs (e.g. on Win32, GetKeyboardState(), or poll your events, etc.)
            // TODO: fill all fields of IO structure and call NewFrame
            ImGuiIO& io = ImGui::GetIO();
            io.DeltaTime = 1.0f/60.0f;
            io.MousePos = mouse_pos;
            io.MouseDown[0] = mouse_button_0;
            io.MouseDown[1] = mouse_button_1;
            io.KeysDown[i] = ...

            // 2) call NewFrame(), after this point you can use ImGui::* functions anytime
            ImGui::NewFrame();

            // 3) most of your application code here
            MyGameUpdate(); // may use any ImGui functions, e.g. ImGui::Begin("My window"); ImGui::Text("Hello, world!"); ImGui::End();
            MyGameRender(); // may use any ImGui functions

            // 4) render & swap video buffers
            ImGui::Render();
            SwapBuffers();
        }

   - You can read back 'io.WantCaptureMouse', 'io.WantCaptureKeybord' etc. flags from the IO structure to tell how ImGui intends to use your
     inputs and to know if you should share them or hide them from the rest of your application. Read the FAQ below for more information.


 API BREAKING CHANGES
 ====================

 Occasionally introducing changes that are breaking the API. The breakage are generally minor and easy to fix.
 Here is a change-log of API breaking changes, if you are using one of the functions listed, expect to have to fix some code.
 Also read releases logs https://github.com/ocornut/imgui/releases for more details.

 - 2017/05/01 (1.50) - Renamed ImDrawList::PathFill() to ImDrawList::PathFillConvex() for clarity.
 - 2016/11/06 (1.50) - BeginChild(const char*) now applies the stack id to the provided label, consistently with other functions as it should always have been. It shouldn't affect you unless (extremely unlikely) you were appending multiple times to a same child from different locations of the stack id. If that's the case, generate an id with GetId() and use it instead of passing string to BeginChild().
 - 2016/10/15 (1.50) - avoid 'void* user_data' parameter to io.SetClipboardTextFn/io.GetClipboardTextFn pointers. We pass io.ClipboardUserData to it.
 - 2016/09/25 (1.50) - style.WindowTitleAlign is now a ImVec2 (ImGuiAlign enum was removed). set to (0.5f,0.5f) for horizontal+vertical centering, (0.0f,0.0f) for upper-left, etc.
 - 2016/07/30 (1.50) - SameLine(x) with x>0.0f is now relative to left of column/group if any, and not always to left of window. This was sort of always the intent and hopefully breakage should be minimal.
 - 2016/05/12 (1.49) - title bar (using ImGuiCol_TitleBg/ImGuiCol_TitleBgActive colors) isn't rendered over a window background (ImGuiCol_WindowBg color) anymore. 
                       If your TitleBg/TitleBgActive alpha was 1.0f or you are using the default theme it will not affect you. 
                       However if your TitleBg/TitleBgActive alpha was <1.0f you need to tweak your custom theme to readjust for the fact that we don't draw a WindowBg background behind the title bar.
                       This helper function will convert an old TitleBg/TitleBgActive color into a new one with the same visual output, given the OLD color and the OLD WindowBg color.
                           ImVec4 ConvertTitleBgCol(const ImVec4& win_bg_col, const ImVec4& title_bg_col)
                           {
                               float new_a = 1.0f - ((1.0f - win_bg_col.w) * (1.0f - title_bg_col.w)), k = title_bg_col.w / new_a;
                               return ImVec4((win_bg_col.x * win_bg_col.w + title_bg_col.x) * k, (win_bg_col.y * win_bg_col.w + title_bg_col.y) * k, (win_bg_col.z * win_bg_col.w + title_bg_col.z) * k, new_a);
                           }
                       If this is confusing, pick the RGB value from title bar from an old screenshot and apply this as TitleBg/TitleBgActive. Or you may just create TitleBgActive from a tweaked TitleBg color.
 - 2016/05/07 (1.49) - removed confusing set of GetInternalState(), GetInternalStateSize(), SetInternalState() functions. Now using CreateContext(), DestroyContext(), GetCurrentContext(), SetCurrentContext().
 - 2016/05/02 (1.49) - renamed SetNextTreeNodeOpened() to SetNextTreeNodeOpen(), no redirection.
 - 2016/05/01 (1.49) - obsoleted old signature of CollapsingHeader(const char* label, const char* str_id = NULL, bool display_frame = true, bool default_open = false) as extra parameters were badly designed and rarely used. You can replace the "default_open = true" flag in new API with CollapsingHeader(label, ImGuiTreeNodeFlags_DefaultOpen).
 - 2016/04/26 (1.49) - changed ImDrawList::PushClipRect(ImVec4 rect) to ImDraw::PushClipRect(Imvec2 min,ImVec2 max,bool intersect_with_current_clip_rect=false). Note that higher-level ImGui::PushClipRect() is preferable because it will clip at logic/widget level, whereas ImDrawList::PushClipRect() only affect your renderer.
 - 2016/04/03 (1.48) - removed style.WindowFillAlphaDefault setting which was redundant. Bake default BG alpha inside style.Colors[ImGuiCol_WindowBg] and all other Bg color values. (ref github issue #337).
 - 2016/04/03 (1.48) - renamed ImGuiCol_TooltipBg to ImGuiCol_PopupBg, used by popups/menus and tooltips. popups/menus were previously using ImGuiCol_WindowBg. (ref github issue #337)
 - 2016/03/21 (1.48) - renamed GetWindowFont() to GetFont(), GetWindowFontSize() to GetFontSize(). Kept inline redirection function (will obsolete).
 - 2016/03/02 (1.48) - InputText() completion/history/always callbacks: if you modify the text buffer manually (without using DeleteChars()/InsertChars() helper) you need to maintain the BufTextLen field. added an assert.
 - 2016/01/23 (1.48) - fixed not honoring exact width passed to PushItemWidth(), previously it would add extra FramePadding.x*2 over that width. if you had manual pixel-perfect alignment in place it might affect you.
 - 2015/12/27 (1.48) - fixed ImDrawList::AddRect() which used to render a rectangle 1 px too large on each axis.
 - 2015/12/04 (1.47) - renamed Color() helpers to ValueColor() - dangerously named, rarely used and probably to be made obsolete.
 - 2015/08/29 (1.45) - with the addition of horizontal scrollbar we made various fixes to inconsistencies with dealing with cursor position.
                       GetCursorPos()/SetCursorPos() functions now include the scrolled amount. It shouldn't affect the majority of users, but take note that SetCursorPosX(100.0f) puts you at +100 from the starting x position which may include scrolling, not at +100 from the window left side.
                       GetContentRegionMax()/GetWindowContentRegionMin()/GetWindowContentRegionMax() functions allow include the scrolled amount. Typically those were used in cases where no scrolling would happen so it may not be a problem, but watch out!
 - 2015/08/29 (1.45) - renamed style.ScrollbarWidth to style.ScrollbarSize
 - 2015/08/05 (1.44) - split imgui.cpp into extra files: imgui_demo.cpp imgui_draw.cpp imgui_internal.h that you need to add to your project.
 - 2015/07/18 (1.44) - fixed angles in ImDrawList::PathArcTo(), PathArcToFast() (introduced in 1.43) being off by an extra PI for no justifiable reason
 - 2015/07/14 (1.43) - add new ImFontAtlas::AddFont() API. For the old AddFont***, moved the 'font_no' parameter of ImFontAtlas::AddFont** functions to the ImFontConfig structure.
                       you need to render your textured triangles with bilinear filtering to benefit from sub-pixel positioning of text.
 - 2015/07/08 (1.43) - switched rendering data to use indexed rendering. this is saving a fair amount of CPU/GPU and enables us to get anti-aliasing for a marginal cost.
                       this necessary change will break your rendering function! the fix should be very easy. sorry for that :(
                     - if you are using a vanilla copy of one of the imgui_impl_XXXX.cpp provided in the example, you just need to update your copy and you can ignore the rest.
                     - the signature of the io.RenderDrawListsFn handler has changed!
                            ImGui_XXXX_RenderDrawLists(ImDrawList** const cmd_lists, int cmd_lists_count)
                       became:
                            ImGui_XXXX_RenderDrawLists(ImDrawData* draw_data).
                              argument   'cmd_lists'        -> 'draw_data->CmdLists'
                              argument   'cmd_lists_count'  -> 'draw_data->CmdListsCount'
                              ImDrawList 'commands'         -> 'CmdBuffer'
                              ImDrawList 'vtx_buffer'       -> 'VtxBuffer'
                              ImDrawList  n/a               -> 'IdxBuffer' (new)
                              ImDrawCmd  'vtx_count'        -> 'ElemCount'
                              ImDrawCmd  'clip_rect'        -> 'ClipRect'
                              ImDrawCmd  'user_callback'    -> 'UserCallback'
                              ImDrawCmd  'texture_id'       -> 'TextureId'
                     - each ImDrawList now contains both a vertex buffer and an index buffer. For each command, render ElemCount/3 triangles using indices from the index buffer.
                     - if you REALLY cannot render indexed primitives, you can call the draw_data->DeIndexAllBuffers() method to de-index the buffers. This is slow and a waste of CPU/GPU. Prefer using indexed rendering!
                     - refer to code in the examples/ folder or ask on the GitHub if you are unsure of how to upgrade. please upgrade!
 - 2015/07/10 (1.43) - changed SameLine() parameters from int to float.
 - 2015/07/02 (1.42) - renamed SetScrollPosHere() to SetScrollFromCursorPos(). Kept inline redirection function (will obsolete).
 - 2015/07/02 (1.42) - renamed GetScrollPosY() to GetScrollY(). Necessary to reduce confusion along with other scrolling functions, because positions (e.g. cursor position) are not equivalent to scrolling amount.
 - 2015/06/14 (1.41) - changed ImageButton() default bg_col parameter from (0,0,0,1) (black) to (0,0,0,0) (transparent) - makes a difference when texture have transparence
 - 2015/06/14 (1.41) - changed Selectable() API from (label, selected, size) to (label, selected, flags, size). Size override should have been rarely be used. Sorry!
 - 2015/05/31 (1.40) - renamed GetWindowCollapsed() to IsWindowCollapsed() for consistency. Kept inline redirection function (will obsolete).
 - 2015/05/31 (1.40) - renamed IsRectClipped() to IsRectVisible() for consistency. Note that return value is opposite! Kept inline redirection function (will obsolete).
 - 2015/05/27 (1.40) - removed the third 'repeat_if_held' parameter from Button() - sorry! it was rarely used and inconsistent. Use PushButtonRepeat(true) / PopButtonRepeat() to enable repeat on desired buttons.
 - 2015/05/11 (1.40) - changed BeginPopup() API, takes a string identifier instead of a bool. ImGui needs to manage the open/closed state of popups. Call OpenPopup() to actually set the "open" state of a popup. BeginPopup() returns true if the popup is opened.
 - 2015/05/03 (1.40) - removed style.AutoFitPadding, using style.WindowPadding makes more sense (the default values were already the same).
 - 2015/04/13 (1.38) - renamed IsClipped() to IsRectClipped(). Kept inline redirection function until 1.50.
 - 2015/04/09 (1.38) - renamed ImDrawList::AddArc() to ImDrawList::AddArcFast() for compatibility with future API
 - 2015/04/03 (1.38) - removed ImGuiCol_CheckHovered, ImGuiCol_CheckActive, replaced with the more general ImGuiCol_FrameBgHovered, ImGuiCol_FrameBgActive.
 - 2014/04/03 (1.38) - removed support for passing -FLT_MAX..+FLT_MAX as the range for a SliderFloat(). Use DragFloat() or Inputfloat() instead.
 - 2015/03/17 (1.36) - renamed GetItemBoxMin()/GetItemBoxMax()/IsMouseHoveringBox() to GetItemRectMin()/GetItemRectMax()/IsMouseHoveringRect(). Kept inline redirection function until 1.50.
 - 2015/03/15 (1.36) - renamed style.TreeNodeSpacing to style.IndentSpacing, ImGuiStyleVar_TreeNodeSpacing to ImGuiStyleVar_IndentSpacing
 - 2015/03/13 (1.36) - renamed GetWindowIsFocused() to IsWindowFocused(). Kept inline redirection function until 1.50.
 - 2015/03/08 (1.35) - renamed style.ScrollBarWidth to style.ScrollbarWidth (casing)
 - 2015/02/27 (1.34) - renamed OpenNextNode(bool) to SetNextTreeNodeOpened(bool, ImGuiSetCond). Kept inline redirection function until 1.50.
 - 2015/02/27 (1.34) - renamed ImGuiSetCondition_*** to ImGuiSetCond_***, and _FirstUseThisSession becomes _Once.
 - 2015/02/11 (1.32) - changed text input callback ImGuiTextEditCallback return type from void-->int. reserved for future use, return 0 for now.
 - 2015/02/10 (1.32) - renamed GetItemWidth() to CalcItemWidth() to clarify its evolving behavior
 - 2015/02/08 (1.31) - renamed GetTextLineSpacing() to GetTextLineHeightWithSpacing()
 - 2015/02/01 (1.31) - removed IO.MemReallocFn (unused)
 - 2015/01/19 (1.30) - renamed ImGuiStorage::GetIntPtr()/GetFloatPtr() to GetIntRef()/GetIntRef() because Ptr was conflicting with actual pointer storage functions.
 - 2015/01/11 (1.30) - big font/image API change! now loads TTF file. allow for multiple fonts. no need for a PNG loader.
              (1.30) - removed GetDefaultFontData(). uses io.Fonts->GetTextureData*() API to retrieve uncompressed pixels.
                       this sequence:
                           const void* png_data;
                           unsigned int png_size;
                           ImGui::GetDefaultFontData(NULL, NULL, &png_data, &png_size);
                           // <Copy to GPU>
                       became:
                           unsigned char* pixels;
                           int width, height;
                           io.Fonts->GetTexDataAsRGBA32(&pixels, &width, &height);
                           // <Copy to GPU>
                           io.Fonts->TexID = (your_texture_identifier);
                       you now have much more flexibility to load multiple TTF fonts and manage the texture buffer for internal needs.
                       it is now recommended that you sample the font texture with bilinear interpolation.
              (1.30) - added texture identifier in ImDrawCmd passed to your render function (we can now render images). make sure to set io.Fonts->TexID.
              (1.30) - removed IO.PixelCenterOffset (unnecessary, can be handled in user projection matrix)
              (1.30) - removed ImGui::IsItemFocused() in favor of ImGui::IsItemActive() which handles all widgets
 - 2014/12/10 (1.18) - removed SetNewWindowDefaultPos() in favor of new generic API SetNextWindowPos(pos, ImGuiSetCondition_FirstUseEver)
 - 2014/11/28 (1.17) - moved IO.Font*** options to inside the IO.Font-> structure (FontYOffset, FontTexUvForWhite, FontBaseScale, FontFallbackGlyph)
 - 2014/11/26 (1.17) - reworked syntax of IMGUI_ONCE_UPON_A_FRAME helper macro to increase compiler compatibility
 - 2014/11/07 (1.15) - renamed IsHovered() to IsItemHovered()
 - 2014/10/02 (1.14) - renamed IMGUI_INCLUDE_IMGUI_USER_CPP to IMGUI_INCLUDE_IMGUI_USER_INL and imgui_user.cpp to imgui_user.inl (more IDE friendly)
 - 2014/09/25 (1.13) - removed 'text_end' parameter from IO.SetClipboardTextFn (the string is now always zero-terminated for simplicity)
 - 2014/09/24 (1.12) - renamed SetFontScale() to SetWindowFontScale()
 - 2014/09/24 (1.12) - moved IM_MALLOC/IM_REALLOC/IM_FREE preprocessor defines to IO.MemAllocFn/IO.MemReallocFn/IO.MemFreeFn
 - 2014/08/30 (1.09) - removed IO.FontHeight (now computed automatically)
 - 2014/08/30 (1.09) - moved IMGUI_FONT_TEX_UV_FOR_WHITE preprocessor define to IO.FontTexUvForWhite
 - 2014/08/28 (1.09) - changed the behavior of IO.PixelCenterOffset following various rendering fixes


 FREQUENTLY ASKED QUESTIONS (FAQ), TIPS
 ======================================

 Q: How can I help?
 A: - If you are experienced enough with ImGui and with C/C++, look at the todo list and see how you want/can help!
    - Become a Patron/donate. Convince your company to become a Patron or provide serious funding for development time.

 Q: How do I update to a newer version of ImGui?
 A: Overwrite the following files:
      imgui.cpp
      imgui.h
      imgui_demo.cpp
      imgui_draw.cpp
      imgui_internal.h
      stb_rect_pack.h
      stb_textedit.h
      stb_truetype.h
    Don't overwrite imconfig.h if you have made modification to your copy.
    Check the "API BREAKING CHANGES" sections for a list of occasional API breaking changes. If you have a problem with a function, search for its name
    in the code, there will likely be a comment about it. Please report any issue to the GitHub page!

 Q: What is ImTextureID and how do I display an image?
 A: ImTextureID is a void* used to pass renderer-agnostic texture references around until it hits your render function.
    ImGui knows nothing about what those bits represent, it just passes them around. It is up to you to decide what you want the void* to carry!
    It could be an identifier to your OpenGL texture (cast GLuint to void*), a pointer to your custom engine material (cast MyMaterial* to void*), etc.
    At the end of the chain, your renderer takes this void* to cast it back into whatever it needs to select a current texture to render.
    Refer to examples applications, where each renderer (in a imgui_impl_xxxx.cpp file) is treating ImTextureID as a different thing.
    (c++ tip: OpenGL uses integers to identify textures. You can safely store an integer into a void*, just cast it to void*, don't take it's address!)
    To display a custom image/texture within an ImGui window, you may use ImGui::Image(), ImGui::ImageButton(), ImDrawList::AddImage() functions.
    ImGui will generate the geometry and draw calls using the ImTextureID that you passed and which your renderer can use.
    It is your responsibility to get textures uploaded to your GPU.

 Q: I integrated ImGui in my engine and the text or lines are blurry..
 A: In your Render function, try translating your projection matrix by (0.5f,0.5f) or (0.375f,0.375f).
    Also make sure your orthographic projection matrix and io.DisplaySize matches your actual framebuffer dimension.

 Q: I integrated ImGui in my engine and some elements are clipping or disappearing when I move windows around..
 A: Most likely you are mishandling the clipping rectangles in your render function. Rectangles provided by ImGui are defined as (x1=left,y1=top,x2=right,y2=bottom) and NOT as (x1,y1,width,height).

 Q: Can I have multiple widgets with the same label? Can I have widget without a label? (Yes)
 A: Yes. A primer on the use of labels/IDs in ImGui..

   - Elements that are not clickable, such as Text() items don't need an ID.

   - Interactive widgets require state to be carried over multiple frames (most typically ImGui often needs to remember what is the "active" widget).
     to do so they need a unique ID. unique ID are typically derived from a string label, an integer index or a pointer.

       Button("OK");        // Label = "OK",     ID = hash of "OK"
       Button("Cancel");    // Label = "Cancel", ID = hash of "Cancel"

   - ID are uniquely scoped within windows, tree nodes, etc. so no conflict can happen if you have two buttons called "OK" in two different windows
     or in two different locations of a tree.

   - If you have a same ID twice in the same location, you'll have a conflict:

       Button("OK");
       Button("OK");           // ID collision! Both buttons will be treated as the same.

     Fear not! this is easy to solve and there are many ways to solve it!

   - When passing a label you can optionally specify extra unique ID information within string itself. This helps solving the simpler collision cases.
     use "##" to pass a complement to the ID that won't be visible to the end-user:

       Button("Play");         // Label = "Play",   ID = hash of "Play"
       Button("Play##foo1");   // Label = "Play",   ID = hash of "Play##foo1" (different from above)
       Button("Play##foo2");   // Label = "Play",   ID = hash of "Play##foo2" (different from above)

   - If you want to completely hide the label, but still need an ID:

       Checkbox("##On", &b);   // Label = "",       ID = hash of "##On" (no label!)

   - Occasionally/rarely you might want change a label while preserving a constant ID. This allows you to animate labels.
     For example you may want to include varying information in a window title bar (and windows are uniquely identified by their ID.. obviously)
     Use "###" to pass a label that isn't part of ID:

       Button("Hello###ID";   // Label = "Hello",  ID = hash of "ID"
       Button("World###ID";   // Label = "World",  ID = hash of "ID" (same as above)

       sprintf(buf, "My game (%f FPS)###MyGame");
       Begin(buf);            // Variable label,   ID = hash of "MyGame"

   - Use PushID() / PopID() to create scopes and avoid ID conflicts within the same Window.
     This is the most convenient way of distinguishing ID if you are iterating and creating many UI elements.
     You can push a pointer, a string or an integer value. Remember that ID are formed from the concatenation of everything in the ID stack!

       for (int i = 0; i < 100; i++)
       {
         PushID(i);
         Button("Click");   // Label = "Click",  ID = hash of integer + "label" (unique)
         PopID();
       }

       for (int i = 0; i < 100; i++)
       {
         MyObject* obj = Objects[i];
         PushID(obj);
         Button("Click");   // Label = "Click",  ID = hash of pointer + "label" (unique)
         PopID();
       }

       for (int i = 0; i < 100; i++)
       {
         MyObject* obj = Objects[i];
         PushID(obj->Name);
         Button("Click");   // Label = "Click",  ID = hash of string + "label" (unique)
         PopID();
       }

   - More example showing that you can stack multiple prefixes into the ID stack:

       Button("Click");     // Label = "Click",  ID = hash of "Click"
       PushID("node");
       Button("Click");     // Label = "Click",  ID = hash of "node" + "Click"
         PushID(my_ptr);
           Button("Click"); // Label = "Click",  ID = hash of "node" + ptr + "Click"
         PopID();
       PopID();

   - Tree nodes implicitly creates a scope for you by calling PushID().

       Button("Click");     // Label = "Click",  ID = hash of "Click"
       if (TreeNode("node"))
       {
         Button("Click");   // Label = "Click",  ID = hash of "node" + "Click"
         TreePop();
       }

   - When working with trees, ID are used to preserve the open/close state of each tree node.
     Depending on your use cases you may want to use strings, indices or pointers as ID.
      e.g. when displaying a single object that may change over time (1-1 relationship), using a static string as ID will preserve your node open/closed state when the targeted object change.
      e.g. when displaying a list of objects, using indices or pointers as ID will preserve the node open/closed state differently. experiment and see what makes more sense!

 Q: How can I tell when ImGui wants my mouse/keyboard inputs and when I can pass them to my application?
 A: You can read the 'io.WantCaptureXXX' flags in the ImGuiIO structure. Preferably read them after calling ImGui::NewFrame() to avoid those flags lagging by one frame, but either should be fine.
    When 'io.WantCaptureMouse' or 'io.WantCaptureKeyboard' flags are set you may want to discard/hide the inputs from the rest of your application.
    When 'io.WantInputsCharacters' is set to may want to notify your OS to popup an on-screen keyboard, if available.
    ImGui is tracking dragging and widget activity that may occur outside the boundary of a window, so 'io.WantCaptureMouse' is a more accurate and complete than testing for ImGui::IsMouseHoveringAnyWindow().
    (Advanced note: text input releases focus on Return 'KeyDown', so the following Return 'KeyUp' event that your application receive will typically have 'io.WantcaptureKeyboard=false'. 
     Depending on your application logic it may or not be inconvenient. You might want to track which key-downs were for ImGui (e.g. with an array of bool) and filter out the corresponding key-ups.)

 Q: How can I load a different font than the default? (default is an embedded version of ProggyClean.ttf, rendered at size 13)
 A: Use the font atlas to load the TTF file you want:

      ImGuiIO& io = ImGui::GetIO();
      io.Fonts->AddFontFromFileTTF("myfontfile.ttf", size_in_pixels);
      io.Fonts->GetTexDataAsRGBA32() or GetTexDataAsAlpha8()

 Q: How can I easily use icons in my application?
 A: The most convenient and practical way is to merge an icon font such as FontAwesome inside you main font. Then you can refer to icons within your strings.
    Read 'How can I load multiple fonts?' and the file 'extra_fonts/README.txt' for instructions.

 Q: How can I load multiple fonts?
 A: Use the font atlas to pack them into a single texture:
    (Read extra_fonts/README.txt and the code in ImFontAtlas for more details.)

      ImGuiIO& io = ImGui::GetIO();
      ImFont* font0 = io.Fonts->AddFontDefault();
      ImFont* font1 = io.Fonts->AddFontFromFileTTF("myfontfile.ttf", size_in_pixels);
      ImFont* font2 = io.Fonts->AddFontFromFileTTF("myfontfile2.ttf", size_in_pixels);
      io.Fonts->GetTexDataAsRGBA32() or GetTexDataAsAlpha8()
      // the first loaded font gets used by default
      // use ImGui::PushFont()/ImGui::PopFont() to change the font at runtime

      // Options
      ImFontConfig config;
      config.OversampleH = 3;
      config.OversampleV = 1;
      config.GlyphExtraSpacing.x = 1.0f;
      io.Fonts->LoadFromFileTTF("myfontfile.ttf", size_pixels, &config);

      // Combine multiple fonts into one (e.g. for icon fonts)
      ImWchar ranges[] = { 0xf000, 0xf3ff, 0 };
      ImFontConfig config;
      config.MergeMode = true;
      io.Fonts->AddFontDefault();
      io.Fonts->LoadFromFileTTF("fontawesome-webfont.ttf", 16.0f, &config, ranges); // Merge icon font
      io.Fonts->LoadFromFileTTF("myfontfile.ttf", size_pixels, NULL, &config, io.Fonts->GetGlyphRangesJapanese()); // Merge japanese glyphs

 Q: How can I display and input non-Latin characters such as Chinese, Japanese, Korean, Cyrillic?
 A: When loading a font, pass custom Unicode ranges to specify the glyphs to load. 
    All your strings needs to use UTF-8 encoding. Specifying literal in your source code using a local code page (such as CP-923 for Japanese or CP-1251 for Cyrillic) will not work.
    In C++11 you can encode a string literal in UTF-8 by using the u8"hello" syntax. Otherwise you can convert yourself to UTF-8 or load text data from file already saved as UTF-8.
    You can also try to remap your local codepage characters to their Unicode codepoint using font->AddRemapChar(), but international users may have problems reading/editing your source code.

      io.Fonts->AddFontFromFileTTF("myfontfile.ttf", size_in_pixels, NULL, io.Fonts->GetGlyphRangesJapanese());  // Load Japanese characters
      io.Fonts->GetTexDataAsRGBA32() or GetTexDataAsAlpha8()
      io.ImeWindowHandle = MY_HWND;      // To input using Microsoft IME, give ImGui the hwnd of your application

    As for text input, depends on you passing the right character code to io.AddInputCharacter(). The example applications do that.

 Q: How can I use the drawing facilities without an ImGui window? (using ImDrawList API)
 A: The easiest way is to create a dummy window. Call Begin() with NoTitleBar|NoResize|NoMove|NoScrollbar|NoSavedSettings|NoInputs flag, zero background alpha, 
    then retrieve the ImDrawList* via GetWindowDrawList() and draw to it in any way you like.

 - tip: the construct 'IMGUI_ONCE_UPON_A_FRAME { ... }' will run the block of code only once a frame. You can use it to quickly add custom UI in the middle of a deep nested inner loop in your code.
 - tip: you can create widgets without a Begin()/End() block, they will go in an implicit window called "Debug"
 - tip: you can call Begin() multiple times with the same name during the same frame, it will keep appending to the same window. this is also useful to set yourself in the context of another window (to get/set other settings)
 - tip: you can call Render() multiple times (e.g for VR renders).
 - tip: call and read the ShowTestWindow() code in imgui_demo.cpp for more example of how to use ImGui!


 ISSUES & TODO-LIST
 ==================
 Issue numbers (#) refer to github issues listed at https://github.com/ocornut/imgui/issues
 The list below consist mostly of ideas noted down before they are requested/discussed by users (at which point it usually moves to the github)

 - doc: add a proper documentation+regression testing system (#435)
 - window: add a way for very transient windows (non-saved, temporary overlay over hundreds of objects) to "clean" up from the global window list. perhaps a lightweight explicit cleanup pass.
 - window: calling SetNextWindowSize() every frame with <= 0 doesn't do anything, may be useful to allow (particularly when used for a single axis) (#690)
 - window: auto-fit feedback loop when user relies on any dynamic layout (window width multiplier, column) appears weird to end-user. clarify.
 - window: allow resizing of child windows (possibly given min/max for each axis?)
 - window: background options for child windows, border option (disable rounding)
 - window: add a way to clear an existing window instead of appending (e.g. for tooltip override using a consistent api rather than the deferred tooltip)
 - window: resizing from any sides? + mouse cursor directives for app.
!- window: begin with *p_open == false should return false.
 - window: get size/pos helpers given names (see discussion in #249)
 - window: a collapsed window can be stuck behind the main menu bar?
 - window: when window is small, prioritize resize button over close button.
 - window: detect extra End() call that pop the "Debug" window out and assert at call site instead of later.
 - window/tooltip: allow to set the width of a tooltip to allow TextWrapped() etc. while keeping the height automatic.
 - window: increase minimum size of a window with menus or fix the menu rendering so that it doesn't look odd.
 - draw-list: maintaining bounding box per command would allow to merge draw command when clipping isn't relied on (typical non-scrolling window or non-overflowing column would merge with previous command).
!- scrolling: allow immediately effective change of scroll if we haven't appended items yet
 - splitter/separator: formalize the splitter idiom into an official api (we want to handle n-way split) (#319)
 - widgets: display mode: widget-label, label-widget (aligned on column or using fixed size), label-newline-tab-widget etc.
 - widgets: clean up widgets internal toward exposing everything.
 - widgets: add disabled and read-only modes (#211)
 - main: considering adding an Init() function? some constructs are awkward in the implementation because of the lack of them.
!- main: make it so that a frame with no window registered won't refocus every window on subsequent frames (~bump LastFrameActive of all windows).
 - main: IsItemHovered() make it more consistent for various type of widgets, widgets with multiple components, etc. also effectively IsHovered() region sometimes differs from hot region, e.g tree nodes
 - main: IsItemHovered() info stored in a stack? so that 'if TreeNode() { Text; TreePop; } if IsHovered' return the hover state of the TreeNode?
 - input text: clean up the mess caused by converting UTF-8 <> wchar. the code is rather inefficient right now and super fragile.
 - input text: reorganize event handling, allow CharFilter to modify buffers, allow multiple events? (#541)
 - input text: expose CursorPos in char filter event (#816)
 - input text: flag to disable live update of the user buffer (also applies to float/int text input) 
 - input text: resize behavior - field could stretch when being edited? hover tooltip shows more text?
 - input text: add ImGuiInputTextFlags_EnterToApply? (off #218)
 - input text: add discard flag (e.g. ImGuiInputTextFlags_DiscardActiveBuffer) or make it easier to clear active focus for text replacement during edition (#725)
 - input text multi-line: don't directly call AddText() which does an unnecessary vertex reserve for character count prior to clipping. and/or more line-based clipping to AddText(). and/or reorganize TextUnformatted/RenderText for more efficiency for large text (e.g TextUnformatted could clip and log separately, etc).
 - input text multi-line: way to dynamically grow the buffer without forcing the user to initially allocate for worse case (follow up on #200)
 - input text multi-line: line numbers? status bar? (follow up on #200)
 - input text multi-line: behave better when user changes input buffer while editing is active (even though it is illegal behavior). namely, the change of buffer can create a scrollbar glitch (#725)
 - input text: allow centering/positioning text so that ctrl+clicking Drag or Slider keeps the textual value at the same pixel position.
 - input number: optional range min/max for Input*() functions
 - input number: holding [-]/[+] buttons could increase the step speed non-linearly (or user-controlled)
 - input number: use mouse wheel to step up/down
 - input number: applying arithmetics ops (+,-,*,/) messes up with text edit undo stack.
 - button: provide a button that looks framed.
 - text: proper alignment options
 - image/image button: misalignment on padded/bordered button?
 - image/image button: parameters are confusing, image() has tint_col,border_col whereas imagebutton() has bg_col/tint_col. Even thou they are different parameters ordering could be more consistent. can we fix that?
 - layout: horizontal layout helper (#97)
 - layout: horizontal flow until no space left (#404)
 - layout: more generic alignment state (left/right/centered) for single items?
 - layout: clean up the InputFloatN/SliderFloatN/ColorEdit4 layout code. item width should include frame padding.
 - layout: BeginGroup() needs a border option.
 - columns: declare column set (each column: fixed size, %, fill, distribute default size among fills) (#513, #125)
 - columns: add a conditional parameter to SetColumnOffset() (#513, #125)
 - columns: separator function or parameter that works within the column (currently Separator() bypass all columns) (#125)
 - columns: columns header to act as button (~sort op) and allow resize/reorder (#513, #125)
 - columns: user specify columns size (#513, #125)
 - columns: flag to add horizontal separator above/below?
 - columns/layout: setup minimum line height (equivalent of automatically calling AlignFirstTextHeightToWidgets)
 - combo: sparse combo boxes (via function call?) / iterators
 - combo: contents should extends to fit label if combo widget is small
 - combo/listbox: keyboard control. need InputText-like non-active focus + key handling. considering keyboard for custom listbox (pr #203)
 - listbox: multiple selection
 - listbox: user may want to initial scroll to focus on the one selected value?
 - listbox: keyboard navigation.
 - listbox: scrolling should track modified selection.
!- popups/menus: clarify usage of popups id, how MenuItem/Selectable closing parent popups affects the ID, etc. this is quite fishy needs improvement! (#331, #402)
 - popups: add variant using global identifier similar to Begin/End (#402)
 - popups: border options. richer api like BeginChild() perhaps? (#197)
 - tooltip: tooltip that doesn't fit in entire screen seems to lose their "last preferred button" and may teleport when moving mouse
 - menus: local shortcuts, global shortcuts (#456, #126)
 - menus: icons
 - menus: menubars: some sort of priority / effect of main menu-bar on desktop size?
 - menus: calling BeginMenu() twice with a same name doesn't seem to append nicely
 - statusbar: add a per-window status bar helper similar to what menubar does.
 - tabs (#261, #351)
 - separator: separator on the initial position of a window is not visible (cursorpos.y <= clippos.y)
!- color: the color helpers/typing is a mess and needs sorting out.
 - color: add a better color picker (#346)
 - node/graph editor (#306)
 - pie menus patterns (#434)
 - drag'n drop, dragging helpers (carry dragging info, visualize drag source before clicking, drop target, etc.) (#143, #479)
 - plot: PlotLines() should use the polygon-stroke facilities (currently issues with averaging normals)
 - plot: make it easier for user to draw extra stuff into the graph (e.g: draw basis, highlight certain points, 2d plots, multiple plots)
 - plot: "smooth" automatic scale over time, user give an input 0.0(full user scale) 1.0(full derived from value)
 - plot: add a helper e.g. Plot(char* label, float value, float time_span=2.0f) that stores values and Plot them for you - probably another function name. and/or automatically allow to plot ANY displayed value (more reliance on stable ID)
 - slider: allow using the [-]/[+] buttons used by InputFloat()/InputInt()
 - slider: initial absolute click is imprecise. change to relative movement slider (same as scrollbar).
 - slider: add dragging-based widgets to edit values with mouse (on 2 axises), saving screen real-estate.
 - slider: tint background based on value (e.g. v_min -> v_max, or use 0.0f either side of the sign)
 - slider & drag: int data passing through a float
 - drag float: up/down axis
 - drag float: added leeway on edge (e.g. a few invisible steps past the clamp limits)
 - tree node / optimization: avoid formatting when clipped.
 - tree node: tree-node/header right-most side doesn't take account of horizontal scrolling.
 - tree node: add treenode/treepush int variants? not there because (void*) cast from int warns on some platforms/settings?
 - tree node: try to apply scrolling at time of TreePop() if node was just opened and end of node is past scrolling limits?
 - tree node / selectable render mismatch which is visible if you use them both next to each other (e.g. cf. property viewer)
 - tree node: tweak color scheme to distinguish headers from selected tree node (#581)
 - textwrapped: figure out better way to use TextWrapped() in an always auto-resize context (tooltip, etc.) (#249)
 - settings: write more decent code to allow saving/loading new fields
 - settings: api for per-tool simple persistent data (bool,int,float,columns sizes,etc.) in .ini file
 - style: add window shadows.
 - style/optimization: store rounded corners in texture to use 1 quad per corner (filled and wireframe) to lower the cost of rounding.
 - style: color-box not always square?
 - style: a concept of "compact style" that the end-user can easily rely on (e.g. PushStyleCompact()?) that maps to other settings? avoid implementing duplicate helpers such as SmallCheckbox(), etc.
 - style: try to make PushStyleVar() more robust to incorrect parameters (to be more friendly to edit & continues situation).
 - style: global scale setting.
 - style: WindowPadding needs to be EVEN needs the 0.5 multiplier probably have a subtle effect on clip rectangle
 - text: simple markup language for color change?
 - font: dynamic font atlas to avoid baking huge ranges into bitmap and make scaling easier.
 - font: small opt: for monospace font (like the defalt one) we can trim IndexXAdvance as long as trailing value is == FallbackXAdvance
 - font: add support for kerning, probably optional. perhaps default to (32..128)^2 matrix ~ 36KB then hash fallback.
 - font: add a simpler CalcTextSizeA() api? current one ok but not welcome if user needs to call it directly (without going through ImGui::CalcTextSize)
 - font: fix AddRemapChar() to work before font has been built.
 - log: LogButtons() options for specifying depth and/or hiding depth slider
 - log: have more control over the log scope (e.g. stop logging when leaving current tree node scope)
 - log: be able to log anything (e.g. right-click on a window/tree-node, shows context menu? log into tty/file/clipboard)
 - log: let user copy any window content to clipboard easily (CTRL+C on windows? while moving it? context menu?). code is commented because it fails with multiple Begin/End pairs.
 - filters: set a current filter that tree node can automatically query to hide themselves
 - filters: handle wildcards (with implicit leading/trailing *), regexps
 - shortcuts: add a shortcut api, e.g. parse "&Save" and/or "Save (CTRL+S)", pass in to widgets or provide simple ways to use (button=activate, input=focus)
!- keyboard: tooltip & combo boxes are messing up / not honoring keyboard tabbing
 - keyboard: full keyboard navigation and focus. (#323)
 - focus: preserve ActiveId/focus stack state, e.g. when opening a menu and close it, previously selected InputText() focus gets restored (#622)
 - focus: SetKeyboardFocusHere() on with >= 0 offset could be done on same frame (else latch and modulate on beginning of next frame)
 - input: rework IO system to be able to pass actual ordered/timestamped events. (~#335, #71)
 - input: allow to decide and pass explicit double-clicks (e.g. for windows by the CS_DBLCLKS style).
 - input: support track pad style scrolling & slider edit.
 - misc: provide a way to compile out the entire implementation while providing a dummy API (e.g. #define IMGUI_DUMMY_IMPL)
 - misc: double-clicking on title bar to minimize isn't consistent, perhaps move to single-click on left-most collapse icon?
 - misc: provide HoveredTime and ActivatedTime to ease the creation of animations.
 - style editor: have a more global HSV setter (e.g. alter hue on all elements). consider replacing active/hovered by offset in HSV space? (#438)
 - style editor: color child window height expressed in multiple of line height.
 - remote: make a system like RemoteImGui first-class citizen/project (#75)
 - drawlist: move Font, FontSize, FontTexUvWhitePixel inside ImDrawList and make it self-contained (apart from drawing settings?)
 - drawlist: end-user probably can't call Clear() directly because we expect a texture to be pushed in the stack.
 - examples: directx9: save/restore device state more thoroughly.
 - examples: window minimize, maximize (#583)
 - optimization: add a flag to disable most of rendering, for the case where the user expect to skip it (#335)
 - optimization: use another hash function than crc32, e.g. FNV1a
 - optimization/render: merge command-lists with same clip-rect into one even if they aren't sequential? (as long as in-between clip rectangle don't overlap)?
 - optimization: turn some the various stack vectors into statically-sized arrays
 - optimization: better clipping for multi-component widgets
*/

#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif

#include "imgui.h"
#define IMGUI_DEFINE_MATH_OPERATORS
#define IMGUI_DEFINE_PLACEMENT_NEW
#include "imgui_internal.h"

#include <ctype.h>      // toupper, isprint
#include <stdlib.h>     // NULL, malloc, free, qsort, atoi
#include <stdio.h>      // vsnprintf, sscanf, printf
#include <limits.h>     // INT_MIN, INT_MAX
#if defined(_MSC_VER) && _MSC_VER <= 1500 // MSVC 2008 or earlier
#include <stddef.h>     // intptr_t
#else
#include <stdint.h>     // intptr_t
#endif

#ifdef _MSC_VER
#pragma warning (disable: 4127) // condition expression is constant
#pragma warning (disable: 4505) // unreferenced local function has been removed (stb stuff)
#pragma warning (disable: 4996) // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen
#endif

// Clang warnings with -Weverything
#ifdef __clang__
#pragma clang diagnostic ignored "-Wold-style-cast"         // warning : use of old-style cast                              // yes, they are more terse.
#pragma clang diagnostic ignored "-Wfloat-equal"            // warning : comparing floating point with == or != is unsafe   // storing and comparing against same constants (typically 0.0f) is ok.
#pragma clang diagnostic ignored "-Wformat-nonliteral"      // warning : format string is not a string literal              // passing non-literal to vsnformat(). yes, user passing incorrect format strings can crash the code.
#pragma clang diagnostic ignored "-Wexit-time-destructors"  // warning : declaration requires an exit-time destructor       // exit-time destruction order is undefined. if MemFree() leads to users code that has been disabled before exit it might cause problems. ImGui coding style welcomes static/globals.
#pragma clang diagnostic ignored "-Wglobal-constructors"    // warning : declaration requires a global destructor           // similar to above, not sure what the exact difference it.
#pragma clang diagnostic ignored "-Wsign-conversion"        // warning : implicit conversion changes signedness             //
#pragma clang diagnostic ignored "-Wformat-pedantic"        // warning : format specifies type 'void *' but the argument has type 'xxxx *' // unreasonable, would lead to casting every %p arg to void*. probably enabled by -pedantic. 
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast" // warning : cast to 'void *' from smaller integer type 'int' //
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-function"          // warning: 'xxxx' defined but not used
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"      // warning: cast to pointer from integer of different size
#pragma GCC diagnostic ignored "-Wformat"                   // warning: format '%p' expects argument of type 'void*', but argument 6 has type 'ImGuiWindow*'
#pragma GCC diagnostic ignored "-Wdouble-promotion"         // warning: implicit conversion from 'float' to 'double' when passing argument to function
#pragma GCC diagnostic ignored "-Wconversion"               // warning: conversion to 'xxxx' from 'xxxx' may alter its value
#pragma GCC diagnostic ignored "-Wcast-qual"                // warning: cast from type 'xxxx' to type 'xxxx' casts away qualifiers
#endif

//-------------------------------------------------------------------------
// Forward Declarations
//-------------------------------------------------------------------------

static void             LogRenderedText(const ImVec2& ref_pos, const char* text, const char* text_end = NULL);

static void             PushMultiItemsWidths(int components, float w_full = 0.0f);
static float            GetDraggedColumnOffset(int column_index);

static bool             IsKeyPressedMap(ImGuiKey key, bool repeat = true);

static ImFont*          GetDefaultFont();
static void             SetCurrentFont(ImFont* font);
static void             SetCurrentWindow(ImGuiWindow* window);
static void             SetWindowScrollY(ImGuiWindow* window, float new_scroll_y);
static void             SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiSetCond cond);
static void             SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiSetCond cond);
static void             SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiSetCond cond);
static ImGuiWindow*     FindHoveredWindow(ImVec2 pos, bool excluding_childs);
static ImGuiWindow*     CreateNewWindow(const char* name, ImVec2 size, ImGuiWindowFlags flags);
static inline bool      IsWindowContentHoverable(ImGuiWindow* window);
static void             ClearSetNextWindowData();
static void             CheckStacksSize(ImGuiWindow* window, bool write);
static void             Scrollbar(ImGuiWindow* window, bool horizontal);

static void             AddDrawListToRenderList(ImVector<ImDrawList*>& out_render_list, ImDrawList* draw_list);
static void             AddWindowToRenderList(ImVector<ImDrawList*>& out_render_list, ImGuiWindow* window);
static void             AddWindowToSortedBuffer(ImVector<ImGuiWindow*>& out_sorted_windows, ImGuiWindow* window);

static ImGuiIniData*    FindWindowSettings(const char* name);
static ImGuiIniData*    AddWindowSettings(const char* name);
static void             LoadIniSettingsFromDisk(const char* ini_filename);
static void             SaveIniSettingsToDisk(const char* ini_filename);
static void             MarkIniSettingsDirty();

static void             PushColumnClipRect(int column_index = -1);
static ImRect           GetVisibleRect();

static bool             BeginPopupEx(const char* str_id, ImGuiWindowFlags extra_flags);
static void             CloseInactivePopups();
static void             ClosePopupToLevel(int remaining);
static void             ClosePopup(ImGuiID id);
static bool             IsPopupOpen(ImGuiID id);
static ImGuiWindow*     GetFrontMostModalRootWindow();
static ImVec2           FindBestPopupWindowPos(const ImVec2& base_pos, const ImVec2& size, int* last_dir, const ImRect& rect_to_avoid);

static bool             InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data);
static int              InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end);
static ImVec2           InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const ImWchar** remaining = NULL, ImVec2* out_offset = NULL, bool stop_on_new_line = false);

static inline void      DataTypeFormatString(ImGuiDataType data_type, void* data_ptr, const char* display_format, char* buf, int buf_size);
static inline void      DataTypeFormatString(ImGuiDataType data_type, void* data_ptr, int decimal_precision, char* buf, int buf_size);
static void             DataTypeApplyOp(ImGuiDataType data_type, int op, void* value1, const void* value2);
static bool             DataTypeApplyOpFromText(const char* buf, const char* initial_value_buf, ImGuiDataType data_type, void* data_ptr, const char* scalar_format);

//-----------------------------------------------------------------------------
// Platform dependent default implementations
//-----------------------------------------------------------------------------

static const char*      GetClipboardTextFn_DefaultImpl(void* user_data);
static void             SetClipboardTextFn_DefaultImpl(void* user_data, const char* text);
static void             ImeSetInputScreenPosFn_DefaultImpl(int x, int y);

//-----------------------------------------------------------------------------
// Context
//-----------------------------------------------------------------------------

// Default font atlas storage .
// New contexts always point by default to this font atlas. It can be changed by reassigning the GetIO().Fonts variable.
static ImFontAtlas      GImDefaultFontAtlas;

// Default context storage + current context pointer.
// Implicitely used by all ImGui functions. Always assumed to be != NULL. Change to a different context by calling ImGui::SetCurrentContext()
// ImGui is currently not thread-safe because of this variable. If you want thread-safety to allow N threads to access N different contexts, you might work around it by:
// - Having multiple instances of the ImGui code compiled inside different namespace (easiest/safest, if you have a finite number of contexts)
// - or: Changing this variable to be TLS. You may #define GImGui in imconfig.h for further custom hackery. Future development aim to make this context pointer explicit to all calls. Also read https://github.com/ocornut/imgui/issues/586
#ifndef GImGui
static ImGuiContext     GImDefaultContext;
ImGuiContext*           GImGui = &GImDefaultContext;
#endif

//-----------------------------------------------------------------------------
// User facing structures
//-----------------------------------------------------------------------------

ImGuiStyle::ImGuiStyle()
{
    Alpha                   = 1.0f;             // Global alpha applies to everything in ImGui
    WindowPadding           = ImVec2(8,8);      // Padding within a window
    WindowMinSize           = ImVec2(32,32);    // Minimum window size
    WindowRounding          = 9.0f;             // Radius of window corners rounding. Set to 0.0f to have rectangular windows
    WindowTitleAlign        = ImVec2(0.0f,0.5f);// Alignment for title bar text
    ChildWindowRounding     = 0.0f;             // Radius of child window corners rounding. Set to 0.0f to have rectangular child windows
    FramePadding            = ImVec2(4,3);      // Padding within a framed rectangle (used by most widgets)
    FrameRounding           = 0.0f;             // Radius of frame corners rounding. Set to 0.0f to have rectangular frames (used by most widgets).
    ItemSpacing             = ImVec2(8,4);      // Horizontal and vertical spacing between widgets/lines
    ItemInnerSpacing        = ImVec2(4,4);      // Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label)
    TouchExtraPadding       = ImVec2(0,0);      // Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!
    IndentSpacing           = 21.0f;            // Horizontal spacing when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).
    ColumnsMinSpacing       = 6.0f;             // Minimum horizontal spacing between two columns
    ScrollbarSize           = 16.0f;            // Width of the vertical scrollbar, Height of the horizontal scrollbar
    ScrollbarRounding       = 9.0f;             // Radius of grab corners rounding for scrollbar
    GrabMinSize             = 10.0f;            // Minimum width/height of a grab box for slider/scrollbar
    GrabRounding            = 0.0f;             // Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.
    ButtonTextAlign         = ImVec2(0.5f,0.5f);// Alignment of button text when button is larger than text.
    DisplayWindowPadding    = ImVec2(22,22);    // Window positions are clamped to be visible within the display area by at least this amount. Only covers regular windows.
    DisplaySafeAreaPadding  = ImVec2(4,4);      // If you cannot see the edge of your screen (e.g. on a TV) increase the safe area padding. Covers popups/tooltips as well regular windows.
    AntiAliasedLines        = true;             // Enable anti-aliasing on lines/borders. Disable if you are really short on CPU/GPU.
    AntiAliasedShapes       = true;             // Enable anti-aliasing on filled shapes (rounded rectangles, circles, etc.)
    CurveTessellationTol    = 1.25f;            // Tessellation tolerance. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.

    Colors[ImGuiCol_Text]                   = ImVec4(0.90f, 0.90f, 0.90f, 1.00f);
    Colors[ImGuiCol_TextDisabled]           = ImVec4(0.60f, 0.60f, 0.60f, 1.00f);
    Colors[ImGuiCol_WindowBg]               = ImVec4(0.00f, 0.00f, 0.00f, 0.70f);
    Colors[ImGuiCol_ChildWindowBg]          = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
    Colors[ImGuiCol_PopupBg]                = ImVec4(0.05f, 0.05f, 0.10f, 0.90f);
    Colors[ImGuiCol_Border]                 = ImVec4(0.70f, 0.70f, 0.70f, 0.65f);
    Colors[ImGuiCol_BorderShadow]           = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
    Colors[ImGuiCol_FrameBg]                = ImVec4(0.80f, 0.80f, 0.80f, 0.30f);   // Background of checkbox, radio button, plot, slider, text input
    Colors[ImGuiCol_FrameBgHovered]         = ImVec4(0.90f, 0.80f, 0.80f, 0.40f);
    Colors[ImGuiCol_FrameBgActive]          = ImVec4(0.90f, 0.65f, 0.65f, 0.45f);
    Colors[ImGuiCol_TitleBg]                = ImVec4(0.27f, 0.27f, 0.54f, 0.83f);
    Colors[ImGuiCol_TitleBgCollapsed]       = ImVec4(0.40f, 0.40f, 0.80f, 0.20f);
    Colors[ImGuiCol_TitleBgActive]          = ImVec4(0.32f, 0.32f, 0.63f, 0.87f);
    Colors[ImGuiCol_MenuBarBg]              = ImVec4(0.40f, 0.40f, 0.55f, 0.80f);
    Colors[ImGuiCol_ScrollbarBg]            = ImVec4(0.20f, 0.25f, 0.30f, 0.60f);
    Colors[ImGuiCol_ScrollbarGrab]          = ImVec4(0.40f, 0.40f, 0.80f, 0.30f);
    Colors[ImGuiCol_ScrollbarGrabHovered]   = ImVec4(0.40f, 0.40f, 0.80f, 0.40f);
    Colors[ImGuiCol_ScrollbarGrabActive]    = ImVec4(0.80f, 0.50f, 0.50f, 0.40f);
    Colors[ImGuiCol_ComboBg]                = ImVec4(0.20f, 0.20f, 0.20f, 0.99f);
    Colors[ImGuiCol_CheckMark]              = ImVec4(0.90f, 0.90f, 0.90f, 0.50f);
    Colors[ImGuiCol_SliderGrab]             = ImVec4(1.00f, 1.00f, 1.00f, 0.30f);
    Colors[ImGuiCol_SliderGrabActive]       = ImVec4(0.80f, 0.50f, 0.50f, 1.00f);
    Colors[ImGuiCol_Button]                 = ImVec4(0.67f, 0.40f, 0.40f, 0.60f);
    Colors[ImGuiCol_ButtonHovered]          = ImVec4(0.67f, 0.40f, 0.40f, 1.00f);
    Colors[ImGuiCol_ButtonActive]           = ImVec4(0.80f, 0.50f, 0.50f, 1.00f);
    Colors[ImGuiCol_Header]                 = ImVec4(0.40f, 0.40f, 0.90f, 0.45f);
    Colors[ImGuiCol_HeaderHovered]          = ImVec4(0.45f, 0.45f, 0.90f, 0.80f);
    Colors[ImGuiCol_HeaderActive]           = ImVec4(0.53f, 0.53f, 0.87f, 0.80f);
    Colors[ImGuiCol_Column]                 = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);
    Colors[ImGuiCol_ColumnHovered]          = ImVec4(0.70f, 0.60f, 0.60f, 1.00f);
    Colors[ImGuiCol_ColumnActive]           = ImVec4(0.90f, 0.70f, 0.70f, 1.00f);
    Colors[ImGuiCol_ResizeGrip]             = ImVec4(1.00f, 1.00f, 1.00f, 0.30f);
    Colors[ImGuiCol_ResizeGripHovered]      = ImVec4(1.00f, 1.00f, 1.00f, 0.60f);
    Colors[ImGuiCol_ResizeGripActive]       = ImVec4(1.00f, 1.00f, 1.00f, 0.90f);
    Colors[ImGuiCol_CloseButton]            = ImVec4(0.50f, 0.50f, 0.90f, 0.50f);
    Colors[ImGuiCol_CloseButtonHovered]     = ImVec4(0.70f, 0.70f, 0.90f, 0.60f);
    Colors[ImGuiCol_CloseButtonActive]      = ImVec4(0.70f, 0.70f, 0.70f, 1.00f);
    Colors[ImGuiCol_PlotLines]              = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
    Colors[ImGuiCol_PlotLinesHovered]       = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);
    Colors[ImGuiCol_PlotHistogram]          = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);
    Colors[ImGuiCol_PlotHistogramHovered]   = ImVec4(1.00f, 0.60f, 0.00f, 1.00f);
    Colors[ImGuiCol_TextSelectedBg]         = ImVec4(0.00f, 0.00f, 1.00f, 0.35f);
    Colors[ImGuiCol_ModalWindowDarkening]   = ImVec4(0.20f, 0.20f, 0.20f, 0.35f);
}

ImGuiIO::ImGuiIO()
{
    // Most fields are initialized with zero
    memset(this, 0, sizeof(*this));

    DisplaySize = ImVec2(-1.0f, -1.0f);
    DeltaTime = 1.0f/60.0f;
    IniSavingRate = 5.0f;
    IniFilename = "imgui.ini";
    LogFilename = "imgui_log.txt";
    Fonts = &GImDefaultFontAtlas;
    FontGlobalScale = 1.0f;
    FontDefault = NULL;
    DisplayFramebufferScale = ImVec2(1.0f, 1.0f);
    MousePos = ImVec2(-1,-1);
    MousePosPrev = ImVec2(-1,-1);
    MouseDoubleClickTime = 0.30f;
    MouseDoubleClickMaxDist = 6.0f;
    MouseDragThreshold = 6.0f;
    for (int i = 0; i < IM_ARRAYSIZE(MouseDownDuration); i++)
        MouseDownDuration[i] = MouseDownDurationPrev[i] = -1.0f;
    for (int i = 0; i < IM_ARRAYSIZE(KeysDownDuration); i++)
        KeysDownDuration[i] = KeysDownDurationPrev[i] = -1.0f;
    for (int i = 0; i < ImGuiKey_COUNT; i++)
        KeyMap[i] = -1;
    KeyRepeatDelay = 0.250f;
    KeyRepeatRate = 0.050f;
    UserData = NULL;

    // User functions
    RenderDrawListsFn = NULL;
    MemAllocFn = malloc;
    MemFreeFn = free;
    GetClipboardTextFn = GetClipboardTextFn_DefaultImpl;   // Platform dependent default implementations
    SetClipboardTextFn = SetClipboardTextFn_DefaultImpl;
    ClipboardUserData = NULL;
    ImeSetInputScreenPosFn = ImeSetInputScreenPosFn_DefaultImpl;

    // Set OS X style defaults based on __APPLE__ compile time flag
#ifdef __APPLE__
    OSXBehaviors = true;
#endif
}

// Pass in translated ASCII characters for text input.
// - with glfw you can get those from the callback set in glfwSetCharCallback()
// - on Windows you can get those using ToAscii+keyboard state, or via the WM_CHAR message
void ImGuiIO::AddInputCharacter(ImWchar c)
{
    const int n = ImStrlenW(InputCharacters);
    if (n + 1 < IM_ARRAYSIZE(InputCharacters))
    {
        InputCharacters[n] = c;
        InputCharacters[n+1] = '\0';
    }
}

void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)
{
    // We can't pass more wchars than ImGuiIO::InputCharacters[] can hold so don't convert more
    const int wchars_buf_len = sizeof(ImGuiIO::InputCharacters) / sizeof(ImWchar);
    ImWchar wchars[wchars_buf_len];
    ImTextStrFromUtf8(wchars, wchars_buf_len, utf8_chars, NULL);
    for (int i = 0; i < wchars_buf_len && wchars[i] != 0; i++)
        AddInputCharacter(wchars[i]);
}

//-----------------------------------------------------------------------------
// HELPERS
//-----------------------------------------------------------------------------

#define IM_F32_TO_INT8_UNBOUND(_VAL)    ((int)((_VAL) * 255.0f + ((_VAL)>=0 ? 0.5f : -0.5f)))   // Unsaturated, for display purpose 
#define IM_F32_TO_INT8_SAT(_VAL)        ((int)(ImSaturate(_VAL) * 255.0f + 0.5f))               // Saturated, always output 0..255

// Play it nice with Windows users. Notepad in 2015 still doesn't display text data with Unix-style \n.
#ifdef _WIN32
#define IM_NEWLINE "\r\n"
#else
#define IM_NEWLINE "\n"
#endif

bool ImIsPointInTriangle(const ImVec2& p, const ImVec2& a, const ImVec2& b, const ImVec2& c)
{
    bool b1 = ((p.x - b.x) * (a.y - b.y) - (p.y - b.y) * (a.x - b.x)) < 0.0f;
    bool b2 = ((p.x - c.x) * (b.y - c.y) - (p.y - c.y) * (b.x - c.x)) < 0.0f;
    bool b3 = ((p.x - a.x) * (c.y - a.y) - (p.y - a.y) * (c.x - a.x)) < 0.0f;
    return ((b1 == b2) && (b2 == b3));
}

int ImStricmp(const char* str1, const char* str2)
{
    int d;
    while ((d = toupper(*str2) - toupper(*str1)) == 0 && *str1) { str1++; str2++; }
    return d;
}

int ImStrnicmp(const char* str1, const char* str2, int count)
{
    int d = 0;
    while (count > 0 && (d = toupper(*str2) - toupper(*str1)) == 0 && *str1) { str1++; str2++; count--; }
    return d;
}

void ImStrncpy(char* dst, const char* src, int count)
{
    if (count < 1) return;
    strncpy(dst, src, (size_t)count);
    dst[count-1] = 0;
}

char* ImStrdup(const char *str)
{
    size_t len = strlen(str) + 1;
    void* buff = ImGui::MemAlloc(len);
    return (char*)memcpy(buff, (const void*)str, len);
}

int ImStrlenW(const ImWchar* str)
{
    int n = 0;
    while (*str++) n++;
    return n;
}

const ImWchar* ImStrbolW(const ImWchar* buf_mid_line, const ImWchar* buf_begin) // find beginning-of-line
{
    while (buf_mid_line > buf_begin && buf_mid_line[-1] != '\n')
        buf_mid_line--;
    return buf_mid_line;
}

const char* ImStristr(const char* haystack, const char* haystack_end, const char* needle, const char* needle_end)
{
    if (!needle_end)
        needle_end = needle + strlen(needle);

    const char un0 = (char)toupper(*needle);
    while ((!haystack_end && *haystack) || (haystack_end && haystack < haystack_end))
    {
        if (toupper(*haystack) == un0)
        {
            const char* b = needle + 1;
            for (const char* a = haystack + 1; b < needle_end; a++, b++)
                if (toupper(*a) != toupper(*b))
                    break;
            if (b == needle_end)
                return haystack;
        }
        haystack++;
    }
    return NULL;
}


// MSVC version appears to return -1 on overflow, whereas glibc appears to return total count (which may be >= buf_size). 
// Ideally we would test for only one of those limits at runtime depending on the behavior the vsnprintf(), but trying to deduct it at compile time sounds like a pandora can of worm.
int ImFormatString(char* buf, int buf_size, const char* fmt, ...)
{
    IM_ASSERT(buf_size > 0);
    va_list args;
    va_start(args, fmt);
    int w = vsnprintf(buf, buf_size, fmt, args);
    va_end(args);
    if (w == -1 || w >= buf_size)
        w = buf_size - 1;
    buf[w] = 0;
    return w;
}

int ImFormatStringV(char* buf, int buf_size, const char* fmt, va_list args)
{
    IM_ASSERT(buf_size > 0);
    int w = vsnprintf(buf, buf_size, fmt, args);
    if (w == -1 || w >= buf_size)
        w = buf_size - 1;
    buf[w] = 0;
    return w;
}

// Pass data_size==0 for zero-terminated strings
// FIXME-OPT: Replace with e.g. FNV1a hash? CRC32 pretty much randomly access 1KB. Need to do proper measurements.
ImU32 ImHash(const void* data, int data_size, ImU32 seed)
{
    static ImU32 crc32_lut[256] = { 0 };
    if (!crc32_lut[1])
    {
        const ImU32 polynomial = 0xEDB88320;
        for (ImU32 i = 0; i < 256; i++)
        {
            ImU32 crc = i;
            for (ImU32 j = 0; j < 8; j++)
                crc = (crc >> 1) ^ (ImU32(-int(crc & 1)) & polynomial);
            crc32_lut[i] = crc;
        }
    }

    seed = ~seed;
    ImU32 crc = seed;
    const unsigned char* current = (const unsigned char*)data;

    if (data_size > 0)
    {
        // Known size
        while (data_size--)
            crc = (crc >> 8) ^ crc32_lut[(crc & 0xFF) ^ *current++];
    }
    else
    {
        // Zero-terminated string
        while (unsigned char c = *current++)
        {
            // We support a syntax of "label###id" where only "###id" is included in the hash, and only "label" gets displayed.
            // Because this syntax is rarely used we are optimizing for the common case.
            // - If we reach ### in the string we discard the hash so far and reset to the seed.
            // - We don't do 'current += 2; continue;' after handling ### to keep the code smaller.
            if (c == '#' && current[0] == '#' && current[1] == '#')
                crc = seed;
            crc = (crc >> 8) ^ crc32_lut[(crc & 0xFF) ^ c];
        }
    }
    return ~crc;
}

//-----------------------------------------------------------------------------
// ImText* helpers
//-----------------------------------------------------------------------------

// Convert UTF-8 to 32-bits character, process single character input.
// Based on stb_from_utf8() from github.com/nothings/stb/
// We handle UTF-8 decoding error by skipping forward.
int ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end)
{
    unsigned int c = (unsigned int)-1;
    const unsigned char* str = (const unsigned char*)in_text;
    if (!(*str & 0x80))
    {
        c = (unsigned int)(*str++);
        *out_char = c;
        return 1;
    }
    if ((*str & 0xe0) == 0xc0)
    {
        *out_char = 0xFFFD; // will be invalid but not end of string
        if (in_text_end && in_text_end - (const char*)str < 2) return 1;
        if (*str < 0xc2) return 2;
        c = (unsigned int)((*str++ & 0x1f) << 6);
        if ((*str & 0xc0) != 0x80) return 2;
        c += (*str++ & 0x3f);
        *out_char = c;
        return 2;
    }
    if ((*str & 0xf0) == 0xe0)
    {
        *out_char = 0xFFFD; // will be invalid but not end of string
        if (in_text_end && in_text_end - (const char*)str < 3) return 1;
        if (*str == 0xe0 && (str[1] < 0xa0 || str[1] > 0xbf)) return 3;
        if (*str == 0xed && str[1] > 0x9f) return 3; // str[1] < 0x80 is checked below
        c = (unsigned int)((*str++ & 0x0f) << 12);
        if ((*str & 0xc0) != 0x80) return 3;
        c += (unsigned int)((*str++ & 0x3f) << 6);
        if ((*str & 0xc0) != 0x80) return 3;
        c += (*str++ & 0x3f);
        *out_char = c;
        return 3;
    }
    if ((*str & 0xf8) == 0xf0)
    {
        *out_char = 0xFFFD; // will be invalid but not end of string
        if (in_text_end && in_text_end - (const char*)str < 4) return 1;
        if (*str > 0xf4) return 4;
        if (*str == 0xf0 && (str[1] < 0x90 || str[1] > 0xbf)) return 4;
        if (*str == 0xf4 && str[1] > 0x8f) return 4; // str[1] < 0x80 is checked below
        c = (unsigned int)((*str++ & 0x07) << 18);
        if ((*str & 0xc0) != 0x80) return 4;
        c += (unsigned int)((*str++ & 0x3f) << 12);
        if ((*str & 0xc0) != 0x80) return 4;
        c += (unsigned int)((*str++ & 0x3f) << 6);
        if ((*str & 0xc0) != 0x80) return 4;
        c += (*str++ & 0x3f);
        // utf-8 encodings of values used in surrogate pairs are invalid
        if ((c & 0xFFFFF800) == 0xD800) return 4;
        *out_char = c;
        return 4;
    }
    *out_char = 0;
    return 0;
}

int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, const char** in_text_remaining)
{
    ImWchar* buf_out = buf;
    ImWchar* buf_end = buf + buf_size;
    while (buf_out < buf_end-1 && (!in_text_end || in_text < in_text_end) && *in_text)
    {
        unsigned int c;
        in_text += ImTextCharFromUtf8(&c, in_text, in_text_end);
        if (c == 0)
            break;
        if (c < 0x10000)    // FIXME: Losing characters that don't fit in 2 bytes
            *buf_out++ = (ImWchar)c;
    }
    *buf_out = 0;
    if (in_text_remaining)
        *in_text_remaining = in_text;
    return (int)(buf_out - buf);
}

int ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end)
{
    int char_count = 0;
    while ((!in_text_end || in_text < in_text_end) && *in_text)
    {
        unsigned int c;
        in_text += ImTextCharFromUtf8(&c, in_text, in_text_end);
        if (c == 0)
            break;
        if (c < 0x10000)
            char_count++;
    }
    return char_count;
}

// Based on stb_to_utf8() from github.com/nothings/stb/
static inline int ImTextCharToUtf8(char* buf, int buf_size, unsigned int c)
{
    if (c < 0x80)
    {
        buf[0] = (char)c;
        return 1;
    }
    if (c < 0x800)
    {
        if (buf_size < 2) return 0;
        buf[0] = (char)(0xc0 + (c >> 6));
        buf[1] = (char)(0x80 + (c & 0x3f));
        return 2;
    }
    if (c >= 0xdc00 && c < 0xe000)
    {
        return 0;
    }
    if (c >= 0xd800 && c < 0xdc00)
    {
        if (buf_size < 4) return 0;
        buf[0] = (char)(0xf0 + (c >> 18));
        buf[1] = (char)(0x80 + ((c >> 12) & 0x3f));
        buf[2] = (char)(0x80 + ((c >> 6) & 0x3f));
        buf[3] = (char)(0x80 + ((c ) & 0x3f));
        return 4;
    }
    //else if (c < 0x10000)
    {
        if (buf_size < 3) return 0;
        buf[0] = (char)(0xe0 + (c >> 12));
        buf[1] = (char)(0x80 + ((c>> 6) & 0x3f));
        buf[2] = (char)(0x80 + ((c ) & 0x3f));
        return 3;
    }
}

static inline int ImTextCountUtf8BytesFromChar(unsigned int c)
{
    if (c < 0x80) return 1;
    if (c < 0x800) return 2;
    if (c >= 0xdc00 && c < 0xe000) return 0;
    if (c >= 0xd800 && c < 0xdc00) return 4;
    return 3;
}

int ImTextStrToUtf8(char* buf, int buf_size, const ImWchar* in_text, const ImWchar* in_text_end)
{
    char* buf_out = buf;
    const char* buf_end = buf + buf_size;
    while (buf_out < buf_end-1 && (!in_text_end || in_text < in_text_end) && *in_text)
    {
        unsigned int c = (unsigned int)(*in_text++);
        if (c < 0x80)
            *buf_out++ = (char)c;
        else
            buf_out += ImTextCharToUtf8(buf_out, (int)(buf_end-buf_out-1), c);
    }
    *buf_out = 0;
    return (int)(buf_out - buf);
}

int ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end)
{
    int bytes_count = 0;
    while ((!in_text_end || in_text < in_text_end) && *in_text)
    {
        unsigned int c = (unsigned int)(*in_text++);
        if (c < 0x80)
            bytes_count++;
        else
            bytes_count += ImTextCountUtf8BytesFromChar(c);
    }
    return bytes_count;
}

ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)
{
    float s = 1.0f/255.0f;
    return ImVec4(
        ((in >> IM_COL32_R_SHIFT) & 0xFF) * s,
        ((in >> IM_COL32_G_SHIFT) & 0xFF) * s,
        ((in >> IM_COL32_B_SHIFT) & 0xFF) * s,
        ((in >> IM_COL32_A_SHIFT) & 0xFF) * s);
}

ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)
{
    ImU32 out;
    out  = ((ImU32)IM_F32_TO_INT8_SAT(in.x)) << IM_COL32_R_SHIFT;
    out |= ((ImU32)IM_F32_TO_INT8_SAT(in.y)) << IM_COL32_G_SHIFT;
    out |= ((ImU32)IM_F32_TO_INT8_SAT(in.z)) << IM_COL32_B_SHIFT;
    out |= ((ImU32)IM_F32_TO_INT8_SAT(in.w)) << IM_COL32_A_SHIFT;
    return out;
}

ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul)  
{ 
    ImVec4 c = GImGui->Style.Colors[idx]; 
    c.w *= GImGui->Style.Alpha * alpha_mul; 
    return ColorConvertFloat4ToU32(c); 
}

ImU32 ImGui::GetColorU32(const ImVec4& col)
{ 
    ImVec4 c = col; 
    c.w *= GImGui->Style.Alpha; 
    return ColorConvertFloat4ToU32(c); 
}

// Convert rgb floats ([0-1],[0-1],[0-1]) to hsv floats ([0-1],[0-1],[0-1]), from Foley & van Dam p592
// Optimized http://lolengine.net/blog/2013/01/13/fast-rgb-to-hsv
void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v)
{
    float K = 0.f;
    if (g < b)
    {
        const float tmp = g; g = b; b = tmp;
        K = -1.f;
    }
    if (r < g)
    {
        const float tmp = r; r = g; g = tmp;
        K = -2.f / 6.f - K;
    }

    const float chroma = r - (g < b ? g : b);
    out_h = fabsf(K + (g - b) / (6.f * chroma + 1e-20f));
    out_s = chroma / (r + 1e-20f);
    out_v = r;
}

// Convert hsv floats ([0-1],[0-1],[0-1]) to rgb floats ([0-1],[0-1],[0-1]), from Foley & van Dam p593
// also http://en.wikipedia.org/wiki/HSL_and_HSV
void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b)
{
    if (s == 0.0f)
    {
        // gray
        out_r = out_g = out_b = v;
        return;
    }

    h = fmodf(h, 1.0f) / (60.0f/360.0f);
    int   i = (int)h;
    float f = h - (float)i;
    float p = v * (1.0f - s);
    float q = v * (1.0f - s * f);
    float t = v * (1.0f - s * (1.0f - f));

    switch (i)
    {
    case 0: out_r = v; out_g = t; out_b = p; break;
    case 1: out_r = q; out_g = v; out_b = p; break;
    case 2: out_r = p; out_g = v; out_b = t; break;
    case 3: out_r = p; out_g = q; out_b = v; break;
    case 4: out_r = t; out_g = p; out_b = v; break;
    case 5: default: out_r = v; out_g = p; out_b = q; break;
    }
}

FILE* ImFileOpen(const char* filename, const char* mode)
{
#if defined(_WIN32) && !defined(__CYGWIN__)
    // We need a fopen() wrapper because MSVC/Windows fopen doesn't handle UTF-8 filenames. Converting both strings from UTF-8 to wchar format (using a single allocation, because we can)
    const int filename_wsize = ImTextCountCharsFromUtf8(filename, NULL) + 1;
    const int mode_wsize = ImTextCountCharsFromUtf8(mode, NULL) + 1;
    ImVector<ImWchar> buf;
    buf.resize(filename_wsize + mode_wsize);
    ImTextStrFromUtf8(&buf[0], filename_wsize, filename, NULL);
    ImTextStrFromUtf8(&buf[filename_wsize], mode_wsize, mode, NULL);
    return _wfopen((wchar_t*)&buf[0], (wchar_t*)&buf[filename_wsize]);
#else
    return fopen(filename, mode);
#endif
}

// Load file content into memory
// Memory allocated with ImGui::MemAlloc(), must be freed by user using ImGui::MemFree()
void* ImFileLoadToMemory(const char* filename, const char* file_open_mode, int* out_file_size, int padding_bytes)
{
    IM_ASSERT(filename && file_open_mode);
    if (out_file_size)
        *out_file_size = 0;

    FILE* f;
    if ((f = ImFileOpen(filename, file_open_mode)) == NULL)
        return NULL;

    long file_size_signed;
    if (fseek(f, 0, SEEK_END) || (file_size_signed = ftell(f)) == -1 || fseek(f, 0, SEEK_SET))
    {
        fclose(f);
        return NULL;
    }

    int file_size = (int)file_size_signed;
    void* file_data = ImGui::MemAlloc(file_size + padding_bytes);
    if (file_data == NULL)
    {
        fclose(f);
        return NULL;
    }
    if (fread(file_data, 1, (size_t)file_size, f) != (size_t)file_size)
    {
        fclose(f);
        ImGui::MemFree(file_data);
        return NULL;
    }
    if (padding_bytes > 0)
        memset((void *)(((char*)file_data) + file_size), 0, padding_bytes);

    fclose(f);
    if (out_file_size)
        *out_file_size = file_size;

    return file_data;
}

//-----------------------------------------------------------------------------
// ImGuiStorage
//-----------------------------------------------------------------------------

// Helper: Key->value storage
void ImGuiStorage::Clear()
{
    Data.clear();
}

// std::lower_bound but without the bullshit
static ImVector<ImGuiStorage::Pair>::iterator LowerBound(ImVector<ImGuiStorage::Pair>& data, ImGuiID key)
{
    ImVector<ImGuiStorage::Pair>::iterator first = data.begin();
    ImVector<ImGuiStorage::Pair>::iterator last = data.end();
    int count = (int)(last - first);
    while (count > 0)
    {
        int count2 = count / 2;
        ImVector<ImGuiStorage::Pair>::iterator mid = first + count2;
        if (mid->key < key)
        {
            first = ++mid;
            count -= count2 + 1;
        }
        else
        {
            count = count2;
        }
    }
    return first;
}

int ImGuiStorage::GetInt(ImGuiID key, int default_val) const
{
    ImVector<Pair>::iterator it = LowerBound(const_cast<ImVector<ImGuiStorage::Pair>&>(Data), key);
    if (it == Data.end() || it->key != key)
        return default_val;
    return it->val_i;
}

bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const
{
    return GetInt(key, default_val ? 1 : 0) != 0;
}

float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const
{
    ImVector<Pair>::iterator it = LowerBound(const_cast<ImVector<ImGuiStorage::Pair>&>(Data), key);
    if (it == Data.end() || it->key != key)
        return default_val;
    return it->val_f;
}

void* ImGuiStorage::GetVoidPtr(ImGuiID key) const
{
    ImVector<Pair>::iterator it = LowerBound(const_cast<ImVector<ImGuiStorage::Pair>&>(Data), key);
    if (it == Data.end() || it->key != key)
        return NULL;
    return it->val_p;
}

// References are only valid until a new value is added to the storage. Calling a Set***() function or a Get***Ref() function invalidates the pointer.
int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val)
{
    ImVector<Pair>::iterator it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
        it = Data.insert(it, Pair(key, default_val));
    return &it->val_i;
}

bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val)
{
    return (bool*)GetIntRef(key, default_val ? 1 : 0);
}

float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val)
{
    ImVector<Pair>::iterator it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
        it = Data.insert(it, Pair(key, default_val));
    return &it->val_f;
}

void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val)
{
    ImVector<Pair>::iterator it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
        it = Data.insert(it, Pair(key, default_val));
    return &it->val_p;
}

// FIXME-OPT: Need a way to reuse the result of lower_bound when doing GetInt()/SetInt() - not too bad because it only happens on explicit interaction (maximum one a frame)
void ImGuiStorage::SetInt(ImGuiID key, int val)
{
    ImVector<Pair>::iterator it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
    {
        Data.insert(it, Pair(key, val));
        return;
    }
    it->val_i = val;
}

void ImGuiStorage::SetBool(ImGuiID key, bool val)
{
    SetInt(key, val ? 1 : 0);
}

void ImGuiStorage::SetFloat(ImGuiID key, float val)
{
    ImVector<Pair>::iterator it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
    {
        Data.insert(it, Pair(key, val));
        return;
    }
    it->val_f = val;
}

void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)
{
    ImVector<Pair>::iterator it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
    {
        Data.insert(it, Pair(key, val));
        return;
    }
    it->val_p = val;
}

void ImGuiStorage::SetAllInt(int v)
{
    for (int i = 0; i < Data.Size; i++)
        Data[i].val_i = v;
}

//-----------------------------------------------------------------------------
// ImGuiTextFilter
//-----------------------------------------------------------------------------

// Helper: Parse and apply text filters. In format "aaaaa[,bbbb][,ccccc]"
ImGuiTextFilter::ImGuiTextFilter(const char* default_filter)
{
    if (default_filter)
    {
        ImStrncpy(InputBuf, default_filter, IM_ARRAYSIZE(InputBuf));
        Build();
    }
    else
    {
        InputBuf[0] = 0;
        CountGrep = 0;
    }
}

bool ImGuiTextFilter::Draw(const char* label, float width)
{
    if (width != 0.0f)
        ImGui::PushItemWidth(width);
    bool value_changed = ImGui::InputText(label, InputBuf, IM_ARRAYSIZE(InputBuf));
    if (width != 0.0f)
        ImGui::PopItemWidth();
    if (value_changed)
        Build();
    return value_changed;
}

void ImGuiTextFilter::TextRange::split(char separator, ImVector<TextRange>& out)
{
    out.resize(0);
    const char* wb = b;
    const char* we = wb;
    while (we < e)
    {
        if (*we == separator)
        {
            out.push_back(TextRange(wb, we));
            wb = we + 1;
        }
        we++;
    }
    if (wb != we)
        out.push_back(TextRange(wb, we));
}

void ImGuiTextFilter::Build()
{
    Filters.resize(0);
    TextRange input_range(InputBuf, InputBuf+strlen(InputBuf));
    input_range.split(',', Filters);

    CountGrep = 0;
    for (int i = 0; i != Filters.Size; i++)
    {
        Filters[i].trim_blanks();
        if (Filters[i].empty())
            continue;
        if (Filters[i].front() != '-')
            CountGrep += 1;
    }
}

bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end) const
{
    if (Filters.empty())
        return true;

    if (text == NULL)
        text = "";

    for (int i = 0; i != Filters.Size; i++)
    {
        const TextRange& f = Filters[i];
        if (f.empty())
            continue;
        if (f.front() == '-')
        {
            // Subtract
            if (ImStristr(text, text_end, f.begin()+1, f.end()) != NULL)
                return false;
        }
        else
        {
            // Grep
            if (ImStristr(text, text_end, f.begin(), f.end()) != NULL)
                return true;
        }
    }

    // Implicit * grep
    if (CountGrep == 0)
        return true;

    return false;
}

//-----------------------------------------------------------------------------
// ImGuiTextBuffer
//-----------------------------------------------------------------------------

// On some platform vsnprintf() takes va_list by reference and modifies it.
// va_copy is the 'correct' way to copy a va_list but Visual Studio prior to 2013 doesn't have it.
#ifndef va_copy
#define va_copy(dest, src) (dest = src)
#endif

// Helper: Text buffer for logging/accumulating text
void ImGuiTextBuffer::appendv(const char* fmt, va_list args)
{
    va_list args_copy;
    va_copy(args_copy, args);

    int len = vsnprintf(NULL, 0, fmt, args);         // FIXME-OPT: could do a first pass write attempt, likely successful on first pass.
    if (len <= 0)
        return;

    const int write_off = Buf.Size;
    const int needed_sz = write_off + len;
    if (write_off + len >= Buf.Capacity)
    {
        int double_capacity = Buf.Capacity * 2;
        Buf.reserve(needed_sz > double_capacity ? needed_sz : double_capacity);
    }

    Buf.resize(needed_sz);
    ImFormatStringV(&Buf[write_off] - 1, len+1, fmt, args_copy);
}

void ImGuiTextBuffer::append(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    appendv(fmt, args);
    va_end(args);
}

//-----------------------------------------------------------------------------
// ImGuiSimpleColumns
//-----------------------------------------------------------------------------

ImGuiSimpleColumns::ImGuiSimpleColumns()
{
    Count = 0;
    Spacing = Width = NextWidth = 0.0f;
    memset(Pos, 0, sizeof(Pos));
    memset(NextWidths, 0, sizeof(NextWidths));
}

void ImGuiSimpleColumns::Update(int count, float spacing, bool clear)
{
    IM_ASSERT(Count <= IM_ARRAYSIZE(Pos));
    Count = count;
    Width = NextWidth = 0.0f;
    Spacing = spacing;
    if (clear) memset(NextWidths, 0, sizeof(NextWidths));
    for (int i = 0; i < Count; i++)
    {
        if (i > 0 && NextWidths[i] > 0.0f)
            Width += Spacing;
        Pos[i] = (float)(int)Width;
        Width += NextWidths[i];
        NextWidths[i] = 0.0f;
    }
}

float ImGuiSimpleColumns::DeclColumns(float w0, float w1, float w2) // not using va_arg because they promote float to double
{
    NextWidth = 0.0f;
    NextWidths[0] = ImMax(NextWidths[0], w0);
    NextWidths[1] = ImMax(NextWidths[1], w1);
    NextWidths[2] = ImMax(NextWidths[2], w2);
    for (int i = 0; i < 3; i++)
        NextWidth += NextWidths[i] + ((i > 0 && NextWidths[i] > 0.0f) ? Spacing : 0.0f);
    return ImMax(Width, NextWidth);
}

float ImGuiSimpleColumns::CalcExtraSpace(float avail_w)
{
    return ImMax(0.0f, avail_w - Width);
}

//-----------------------------------------------------------------------------
// ImGuiListClipper
//-----------------------------------------------------------------------------

static void SetCursorPosYAndSetupDummyPrevLine(float pos_y, float line_height)
{
    // Set cursor position and a few other things so that SetScrollHere() and Columns() can work when seeking cursor. 
    // FIXME: It is problematic that we have to do that here, because custom/equivalent end-user code would stumble on the same issue. Consider moving within SetCursorXXX functions?
    ImGui::SetCursorPosY(pos_y);
    ImGuiWindow* window = ImGui::GetCurrentWindow();
    window->DC.CursorPosPrevLine.y = window->DC.CursorPos.y - line_height;      // Setting those fields so that SetScrollHere() can properly function after the end of our clipper usage.
    window->DC.PrevLineHeight = (line_height - GImGui->Style.ItemSpacing.y);    // If we end up needing more accurate data (to e.g. use SameLine) we may as well make the clipper have a fourth step to let user process and display the last item in their list.
    if (window->DC.ColumnsCount > 1)
        window->DC.ColumnsCellMinY = window->DC.CursorPos.y;                    // Setting this so that cell Y position are set properly
}

// Use case A: Begin() called from constructor with items_height<0, then called again from Sync() in StepNo 1
// Use case B: Begin() called from constructor with items_height>0
// FIXME-LEGACY: Ideally we should remove the Begin/End functions but they are part of the legacy API we still support. This is why some of the code in Step() calling Begin() and reassign some fields, spaghetti style.
void ImGuiListClipper::Begin(int count, float items_height)
{
    StartPosY = ImGui::GetCursorPosY();
    ItemsHeight = items_height;
    ItemsCount = count;
    StepNo = 0;
    DisplayEnd = DisplayStart = -1;
    if (ItemsHeight > 0.0f)
    {
        ImGui::CalcListClipping(ItemsCount, ItemsHeight, &DisplayStart, &DisplayEnd); // calculate how many to clip/display
        if (DisplayStart > 0)
            SetCursorPosYAndSetupDummyPrevLine(StartPosY + DisplayStart * ItemsHeight, ItemsHeight); // advance cursor
        StepNo = 2;
    }
}

void ImGuiListClipper::End()
{
    if (ItemsCount < 0)
        return;
    // In theory here we should assert that ImGui::GetCursorPosY() == StartPosY + DisplayEnd * ItemsHeight, but it feels saner to just seek at the end and not assert/crash the user.
    if (ItemsCount < INT_MAX)
        SetCursorPosYAndSetupDummyPrevLine(StartPosY + ItemsCount * ItemsHeight, ItemsHeight); // advance cursor
    ItemsCount = -1;
    StepNo = 3;
}

bool ImGuiListClipper::Step()
{
    if (ItemsCount == 0 || ImGui::GetCurrentWindowRead()->SkipItems)
    {
        ItemsCount = -1; 
        return false; 
    }
    if (StepNo == 0) // Step 0: the clipper let you process the first element, regardless of it being visible or not, so we can measure the element height.
    {
        DisplayStart = 0;
        DisplayEnd = 1;
        StartPosY = ImGui::GetCursorPosY();
        StepNo = 1;
        return true;
    }
    if (StepNo == 1) // Step 1: the clipper infer height from first element, calculate the actual range of elements to display, and position the cursor before the first element.
    {
        if (ItemsCount == 1) { ItemsCount = -1; return false; }
        float items_height = ImGui::GetCursorPosY() - StartPosY;
        IM_ASSERT(items_height > 0.0f);   // If this triggers, it means Item 0 hasn't moved the cursor vertically
        Begin(ItemsCount-1, items_height);
        DisplayStart++;
        DisplayEnd++;
        StepNo = 3;
        return true;
    }
    if (StepNo == 2) // Step 2: dummy step only required if an explicit items_height was passed to constructor or Begin() and user still call Step(). Does nothing and switch to Step 3.
    {
        IM_ASSERT(DisplayStart >= 0 && DisplayEnd >= 0);
        StepNo = 3;
        return true;
    }
    if (StepNo == 3) // Step 3: the clipper validate that we have reached the expected Y position (corresponding to element DisplayEnd), advance the cursor to the end of the list and then returns 'false' to end the loop.
        End();
    return false;
}

//-----------------------------------------------------------------------------
// ImGuiWindow
//-----------------------------------------------------------------------------

ImGuiWindow::ImGuiWindow(const char* name)
{
    Name = ImStrdup(name);
    ID = ImHash(name, 0);
    IDStack.push_back(ID);
    MoveId = GetID("#MOVE");

    Flags = 0;
    IndexWithinParent = 0;
    PosFloat = Pos = ImVec2(0.0f, 0.0f);
    Size = SizeFull = ImVec2(0.0f, 0.0f);
    SizeContents = SizeContentsExplicit = ImVec2(0.0f, 0.0f);
    WindowPadding = ImVec2(0.0f, 0.0f);
    Scroll = ImVec2(0.0f, 0.0f);
    ScrollTarget = ImVec2(FLT_MAX, FLT_MAX);
    ScrollTargetCenterRatio = ImVec2(0.5f, 0.5f);
    ScrollbarX = ScrollbarY = false;
    ScrollbarSizes = ImVec2(0.0f, 0.0f);
    BorderSize = 0.0f;
    Active = WasActive = false;
    Accessed = false;
    Collapsed = false;
    SkipItems = false;
    BeginCount = 0;
    PopupId = 0;
    AutoFitFramesX = AutoFitFramesY = -1;
    AutoFitOnlyGrows = false;
    AutoPosLastDirection = -1;
    HiddenFrames = 0;
    SetWindowPosAllowFlags = SetWindowSizeAllowFlags = SetWindowCollapsedAllowFlags = ImGuiSetCond_Always | ImGuiSetCond_Once | ImGuiSetCond_FirstUseEver | ImGuiSetCond_Appearing;
    SetWindowPosCenterWanted = false;

    LastFrameActive = -1;
    ItemWidthDefault = 0.0f;
    FontWindowScale = 1.0f;

    DrawList = (ImDrawList*)ImGui::MemAlloc(sizeof(ImDrawList));
    IM_PLACEMENT_NEW(DrawList) ImDrawList();
    DrawList->_OwnerName = Name;
    RootWindow = NULL;
    RootNonPopupWindow = NULL;
    ParentWindow = NULL;

    FocusIdxAllCounter = FocusIdxTabCounter = -1;
    FocusIdxAllRequestCurrent = FocusIdxTabRequestCurrent = INT_MAX;
    FocusIdxAllRequestNext = FocusIdxTabRequestNext = INT_MAX;
}

ImGuiWindow::~ImGuiWindow()
{
    DrawList->~ImDrawList();
    ImGui::MemFree(DrawList);
    DrawList = NULL;
    ImGui::MemFree(Name);
    Name = NULL;
}

ImGuiID ImGuiWindow::GetID(const char* str, const char* str_end)
{
    ImGuiID seed = IDStack.back();
    ImGuiID id = ImHash(str, str_end ? (int)(str_end - str) : 0, seed);
    ImGui::KeepAliveID(id);
    return id;
}

ImGuiID ImGuiWindow::GetID(const void* ptr)
{
    ImGuiID seed = IDStack.back();
    ImGuiID id = ImHash(&ptr, sizeof(void*), seed);
    ImGui::KeepAliveID(id);
    return id;
}

ImGuiID ImGuiWindow::GetIDNoKeepAlive(const char* str, const char* str_end)
{
    ImGuiID seed = IDStack.back();
    return ImHash(str, str_end ? (int)(str_end - str) : 0, seed);
}

//-----------------------------------------------------------------------------
// Internal API exposed in imgui_internal.h
//-----------------------------------------------------------------------------

static void SetCurrentWindow(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    g.CurrentWindow = window;
    if (window)
        g.FontSize = window->CalcFontSize();
}

ImGuiWindow* ImGui::GetParentWindow()
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.CurrentWindowStack.Size >= 2);
    return g.CurrentWindowStack[(unsigned int)g.CurrentWindowStack.Size - 2];
}

void ImGui::SetActiveID(ImGuiID id, ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    g.ActiveId = id;
    g.ActiveIdAllowOverlap = false;
    g.ActiveIdIsJustActivated = true;
    if (id)
        g.ActiveIdIsAlive = true;
    g.ActiveIdWindow = window;
}

void ImGui::ClearActiveID()
{
    SetActiveID(0, NULL);
}

void ImGui::SetHoveredID(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    g.HoveredId = id;
    g.HoveredIdAllowOverlap = false;
}

void ImGui::KeepAliveID(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    if (g.ActiveId == id)
        g.ActiveIdIsAlive = true;
}

// Advance cursor given item size for layout.
void ImGui::ItemSize(const ImVec2& size, float text_offset_y)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    // Always align ourselves on pixel boundaries
    ImGuiContext& g = *GImGui;
    const float line_height = ImMax(window->DC.CurrentLineHeight, size.y);
    const float text_base_offset = ImMax(window->DC.CurrentLineTextBaseOffset, text_offset_y);
    window->DC.CursorPosPrevLine = ImVec2(window->DC.CursorPos.x + size.x, window->DC.CursorPos.y);
    window->DC.CursorPos = ImVec2((float)(int)(window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX), (float)(int)(window->DC.CursorPos.y + line_height + g.Style.ItemSpacing.y));
    window->DC.CursorMaxPos.x = ImMax(window->DC.CursorMaxPos.x, window->DC.CursorPosPrevLine.x);
    window->DC.CursorMaxPos.y = ImMax(window->DC.CursorMaxPos.y, window->DC.CursorPos.y);

    //window->DrawList->AddCircle(window->DC.CursorMaxPos, 3.0f, IM_COL32(255,0,0,255), 4); // Debug

    window->DC.PrevLineHeight = line_height;
    window->DC.PrevLineTextBaseOffset = text_base_offset;
    window->DC.CurrentLineHeight = window->DC.CurrentLineTextBaseOffset = 0.0f;
}

void ImGui::ItemSize(const ImRect& bb, float text_offset_y)
{
    ItemSize(bb.GetSize(), text_offset_y);
}

// Declare item bounding box for clipping and interaction.
// Note that the size can be different than the one provided to ItemSize(). Typically, widgets that spread over available surface
// declares their minimum size requirement to ItemSize() and then use a larger region for drawing/interaction, which is passed to ItemAdd().
bool ImGui::ItemAdd(const ImRect& bb, const ImGuiID* id)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.LastItemId = id ? *id : 0;
    window->DC.LastItemRect = bb;
    window->DC.LastItemHoveredAndUsable = window->DC.LastItemHoveredRect = false;
    if (IsClippedEx(bb, id, false))
        return false;

    // This is a sensible default, but widgets are free to override it after calling ItemAdd()
    ImGuiContext& g = *GImGui;
    if (IsMouseHoveringRect(bb.Min, bb.Max))
    {
        // Matching the behavior of IsHovered() but allow if ActiveId==window->MoveID (we clicked on the window background)
        // So that clicking on items with no active id such as Text() still returns true with IsItemHovered()
        window->DC.LastItemHoveredRect = true;
        if (g.HoveredRootWindow == window->RootWindow)
            if (g.ActiveId == 0 || (id && g.ActiveId == *id) || g.ActiveIdAllowOverlap || (g.ActiveId == window->MoveId))
                if (IsWindowContentHoverable(window))
                    window->DC.LastItemHoveredAndUsable = true;
    }

    return true;
}

bool ImGui::IsClippedEx(const ImRect& bb, const ImGuiID* id, bool clip_even_when_logged)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindowRead();

    if (!bb.Overlaps(window->ClipRect))
        if (!id || *id != GImGui->ActiveId)
            if (clip_even_when_logged || !g.LogEnabled)
                return true;
    return false;
}

// NB: This is an internal helper. The user-facing IsItemHovered() is using data emitted from ItemAdd(), with a slightly different logic.
bool ImGui::IsHovered(const ImRect& bb, ImGuiID id, bool flatten_childs)
{
    ImGuiContext& g = *GImGui;
    if (g.HoveredId == 0 || g.HoveredId == id || g.HoveredIdAllowOverlap)
    {
        ImGuiWindow* window = GetCurrentWindowRead();
        if (g.HoveredWindow == window || (flatten_childs && g.HoveredRootWindow == window->RootWindow))
            if ((g.ActiveId == 0 || g.ActiveId == id || g.ActiveIdAllowOverlap) && IsMouseHoveringRect(bb.Min, bb.Max))
                if (IsWindowContentHoverable(g.HoveredRootWindow))
                    return true;
    }
    return false;
}

bool ImGui::FocusableItemRegister(ImGuiWindow* window, bool is_active, bool tab_stop)
{
    ImGuiContext& g = *GImGui;

    const bool allow_keyboard_focus = window->DC.AllowKeyboardFocus;
    window->FocusIdxAllCounter++;
    if (allow_keyboard_focus)
        window->FocusIdxTabCounter++;

    // Process keyboard input at this point: TAB, Shift-TAB switch focus
    // We can always TAB out of a widget that doesn't allow tabbing in.
    if (tab_stop && window->FocusIdxAllRequestNext == INT_MAX && window->FocusIdxTabRequestNext == INT_MAX && is_active && IsKeyPressedMap(ImGuiKey_Tab))
    {
        // Modulo on index will be applied at the end of frame once we've got the total counter of items.
        window->FocusIdxTabRequestNext = window->FocusIdxTabCounter + (g.IO.KeyShift ? (allow_keyboard_focus ? -1 : 0) : +1);
    }

    if (window->FocusIdxAllCounter == window->FocusIdxAllRequestCurrent)
        return true;

    if (allow_keyboard_focus)
        if (window->FocusIdxTabCounter == window->FocusIdxTabRequestCurrent)
            return true;

    return false;
}

void ImGui::FocusableItemUnregister(ImGuiWindow* window)
{
    window->FocusIdxAllCounter--;
    window->FocusIdxTabCounter--;
}

ImVec2 ImGui::CalcItemSize(ImVec2 size, float default_x, float default_y)
{
    ImGuiContext& g = *GImGui;
    ImVec2 content_max;
    if (size.x < 0.0f || size.y < 0.0f)
        content_max = g.CurrentWindow->Pos + GetContentRegionMax();
    if (size.x <= 0.0f)
        size.x = (size.x == 0.0f) ? default_x : ImMax(content_max.x - g.CurrentWindow->DC.CursorPos.x, 4.0f) + size.x;
    if (size.y <= 0.0f)
        size.y = (size.y == 0.0f) ? default_y : ImMax(content_max.y - g.CurrentWindow->DC.CursorPos.y, 4.0f) + size.y;
    return size;
}

float ImGui::CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x)
{
    if (wrap_pos_x < 0.0f)
        return 0.0f;

    ImGuiWindow* window = GetCurrentWindowRead();
    if (wrap_pos_x == 0.0f)
        wrap_pos_x = GetContentRegionMax().x + window->Pos.x;
    else if (wrap_pos_x > 0.0f)
        wrap_pos_x += window->Pos.x - window->Scroll.x; // wrap_pos_x is provided is window local space

    return ImMax(wrap_pos_x - pos.x, 1.0f);
}

//-----------------------------------------------------------------------------

void* ImGui::MemAlloc(size_t sz)
{
    GImGui->IO.MetricsAllocs++;
    return GImGui->IO.MemAllocFn(sz);
}

void ImGui::MemFree(void* ptr)
{
    if (ptr) GImGui->IO.MetricsAllocs--;
    return GImGui->IO.MemFreeFn(ptr);
}

const char* ImGui::GetClipboardText()
{
    return GImGui->IO.GetClipboardTextFn ? GImGui->IO.GetClipboardTextFn(GImGui->IO.ClipboardUserData) : "";
}

void ImGui::SetClipboardText(const char* text)
{
    if (GImGui->IO.SetClipboardTextFn)
        GImGui->IO.SetClipboardTextFn(GImGui->IO.ClipboardUserData, text);
}

const char* ImGui::GetVersion()
{
    return IMGUI_VERSION;
}

// Internal state access - if you want to share ImGui state between modules (e.g. DLL) or allocate it yourself
// Note that we still point to some static data and members (such as GFontAtlas), so the state instance you end up using will point to the static data within its module
ImGuiContext* ImGui::GetCurrentContext()
{
    return GImGui;
}

void ImGui::SetCurrentContext(ImGuiContext* ctx)
{
#ifdef IMGUI_SET_CURRENT_CONTEXT_FUNC
    IMGUI_SET_CURRENT_CONTEXT_FUNC(ctx); // For custom thread-based hackery you may want to have control over this.
#else
    GImGui = ctx;
#endif
}

ImGuiContext* ImGui::CreateContext(void* (*malloc_fn)(size_t), void (*free_fn)(void*))
{
    if (!malloc_fn) malloc_fn = malloc;
    ImGuiContext* ctx = (ImGuiContext*)malloc_fn(sizeof(ImGuiContext));
    IM_PLACEMENT_NEW(ctx) ImGuiContext();
    ctx->IO.MemAllocFn = malloc_fn;
    ctx->IO.MemFreeFn = free_fn ? free_fn : free;
    return ctx;
}

void ImGui::DestroyContext(ImGuiContext* ctx)
{
    void (*free_fn)(void*) = ctx->IO.MemFreeFn;
    ctx->~ImGuiContext();
    free_fn(ctx);
    if (GImGui == ctx)
        SetCurrentContext(NULL);
}

ImGuiIO& ImGui::GetIO()
{
    return GImGui->IO;
}

ImGuiStyle& ImGui::GetStyle()
{
    return GImGui->Style;
}

// Same value as passed to your RenderDrawListsFn() function. valid after Render() and until the next call to NewFrame()
ImDrawData* ImGui::GetDrawData()
{
    return GImGui->RenderDrawData.Valid ? &GImGui->RenderDrawData : NULL;
}

float ImGui::GetTime()
{
    return GImGui->Time;
}

int ImGui::GetFrameCount()
{
    return GImGui->FrameCount;
}

void ImGui::NewFrame()
{
    ImGuiContext& g = *GImGui;

    // Check user data
    IM_ASSERT(g.IO.DeltaTime >= 0.0f);               // Need a positive DeltaTime (zero is tolerated but will cause some timing issues)
    IM_ASSERT(g.IO.DisplaySize.x >= 0.0f && g.IO.DisplaySize.y >= 0.0f);
    IM_ASSERT(g.IO.Fonts->Fonts.Size > 0);           // Font Atlas not created. Did you call io.Fonts->GetTexDataAsRGBA32 / GetTexDataAsAlpha8 ?
    IM_ASSERT(g.IO.Fonts->Fonts[0]->IsLoaded());     // Font Atlas not created. Did you call io.Fonts->GetTexDataAsRGBA32 / GetTexDataAsAlpha8 ?
    IM_ASSERT(g.Style.CurveTessellationTol > 0.0f);  // Invalid style setting

    if (!g.Initialized)
    {
        // Initialize on first frame
        g.LogClipboard = (ImGuiTextBuffer*)ImGui::MemAlloc(sizeof(ImGuiTextBuffer));
        IM_PLACEMENT_NEW(g.LogClipboard) ImGuiTextBuffer();

        IM_ASSERT(g.Settings.empty());
        LoadIniSettingsFromDisk(g.IO.IniFilename);
        g.Initialized = true;
    }

    SetCurrentFont(GetDefaultFont());
    IM_ASSERT(g.Font->IsLoaded());

    g.Time += g.IO.DeltaTime;
    g.FrameCount += 1;
    g.Tooltip[0] = '\0';
    g.OverlayDrawList.Clear();
    g.OverlayDrawList.PushTextureID(g.IO.Fonts->TexID);
    g.OverlayDrawList.PushClipRectFullScreen();

    // Mark rendering data as invalid to prevent user who may have a handle on it to use it
    g.RenderDrawData.Valid = false;
    g.RenderDrawData.CmdLists = NULL;
    g.RenderDrawData.CmdListsCount = g.RenderDrawData.TotalVtxCount = g.RenderDrawData.TotalIdxCount = 0;

    // Update inputs state
    if (g.IO.MousePos.x < 0 && g.IO.MousePos.y < 0)
        g.IO.MousePos = ImVec2(-9999.0f, -9999.0f);
    if ((g.IO.MousePos.x < 0 && g.IO.MousePos.y < 0) || (g.IO.MousePosPrev.x < 0 && g.IO.MousePosPrev.y < 0))   // if mouse just appeared or disappeared (negative coordinate) we cancel out movement in MouseDelta
        g.IO.MouseDelta = ImVec2(0.0f, 0.0f);
    else
        g.IO.MouseDelta = g.IO.MousePos - g.IO.MousePosPrev;
    g.IO.MousePosPrev = g.IO.MousePos;
    for (int i = 0; i < IM_ARRAYSIZE(g.IO.MouseDown); i++)
    {
        g.IO.MouseClicked[i] = g.IO.MouseDown[i] && g.IO.MouseDownDuration[i] < 0.0f;
        g.IO.MouseReleased[i] = !g.IO.MouseDown[i] && g.IO.MouseDownDuration[i] >= 0.0f;
        g.IO.MouseDownDurationPrev[i] = g.IO.MouseDownDuration[i];
        g.IO.MouseDownDuration[i] = g.IO.MouseDown[i] ? (g.IO.MouseDownDuration[i] < 0.0f ? 0.0f : g.IO.MouseDownDuration[i] + g.IO.DeltaTime) : -1.0f;
        g.IO.MouseDoubleClicked[i] = false;
        if (g.IO.MouseClicked[i])
        {
            if (g.Time - g.IO.MouseClickedTime[i] < g.IO.MouseDoubleClickTime)
            {
                if (ImLengthSqr(g.IO.MousePos - g.IO.MouseClickedPos[i]) < g.IO.MouseDoubleClickMaxDist * g.IO.MouseDoubleClickMaxDist)
                    g.IO.MouseDoubleClicked[i] = true;
                g.IO.MouseClickedTime[i] = -FLT_MAX;    // so the third click isn't turned into a double-click
            }
            else
            {
                g.IO.MouseClickedTime[i] = g.Time;
            }
            g.IO.MouseClickedPos[i] = g.IO.MousePos;
            g.IO.MouseDragMaxDistanceSqr[i] = 0.0f;
        }
        else if (g.IO.MouseDown[i])
        {
            g.IO.MouseDragMaxDistanceSqr[i] = ImMax(g.IO.MouseDragMaxDistanceSqr[i], ImLengthSqr(g.IO.MousePos - g.IO.MouseClickedPos[i]));
        }
    }
    memcpy(g.IO.KeysDownDurationPrev, g.IO.KeysDownDuration, sizeof(g.IO.KeysDownDuration));
    for (int i = 0; i < IM_ARRAYSIZE(g.IO.KeysDown); i++)
        g.IO.KeysDownDuration[i] = g.IO.KeysDown[i] ? (g.IO.KeysDownDuration[i] < 0.0f ? 0.0f : g.IO.KeysDownDuration[i] + g.IO.DeltaTime) : -1.0f;

    // Calculate frame-rate for the user, as a purely luxurious feature
    g.FramerateSecPerFrameAccum += g.IO.DeltaTime - g.FramerateSecPerFrame[g.FramerateSecPerFrameIdx];
    g.FramerateSecPerFrame[g.FramerateSecPerFrameIdx] = g.IO.DeltaTime;
    g.FramerateSecPerFrameIdx = (g.FramerateSecPerFrameIdx + 1) % IM_ARRAYSIZE(g.FramerateSecPerFrame);
    g.IO.Framerate = 1.0f / (g.FramerateSecPerFrameAccum / (float)IM_ARRAYSIZE(g.FramerateSecPerFrame));

    // Clear reference to active widget if the widget isn't alive anymore
    g.HoveredIdPreviousFrame = g.HoveredId;
    g.HoveredId = 0;
    g.HoveredIdAllowOverlap = false;
    if (!g.ActiveIdIsAlive && g.ActiveIdPreviousFrame == g.ActiveId && g.ActiveId != 0)
        ClearActiveID();
    g.ActiveIdPreviousFrame = g.ActiveId;
    g.ActiveIdIsAlive = false;
    g.ActiveIdIsJustActivated = false;

    // Handle user moving window (at the beginning of the frame to avoid input lag or sheering). Only valid for root windows.
    if (g.MovedWindowMoveId && g.MovedWindowMoveId == g.ActiveId)
    {
        KeepAliveID(g.MovedWindowMoveId);
        IM_ASSERT(g.MovedWindow && g.MovedWindow->RootWindow);
        IM_ASSERT(g.MovedWindow->RootWindow->MoveId == g.MovedWindowMoveId);
        if (g.IO.MouseDown[0])
        {
            if (!(g.MovedWindow->Flags & ImGuiWindowFlags_NoMove))
            {
                g.MovedWindow->PosFloat += g.IO.MouseDelta;
                if (!(g.MovedWindow->Flags & ImGuiWindowFlags_NoSavedSettings) && (g.IO.MouseDelta.x != 0.0f || g.IO.MouseDelta.y != 0.0f))
                    MarkIniSettingsDirty();
            }
            FocusWindow(g.MovedWindow);
        }
        else
        {
            ClearActiveID();
            g.MovedWindow = NULL;
            g.MovedWindowMoveId = 0;
        }
    }
    else
    {
        g.MovedWindow = NULL;
        g.MovedWindowMoveId = 0;
    }

    // Delay saving settings so we don't spam disk too much
    if (g.SettingsDirtyTimer > 0.0f)
    {
        g.SettingsDirtyTimer -= g.IO.DeltaTime;
        if (g.SettingsDirtyTimer <= 0.0f)
            SaveIniSettingsToDisk(g.IO.IniFilename);
    }

    // Find the window we are hovering. Child windows can extend beyond the limit of their parent so we need to derive HoveredRootWindow from HoveredWindow
    g.HoveredWindow = g.MovedWindow ? g.MovedWindow : FindHoveredWindow(g.IO.MousePos, false);
    if (g.HoveredWindow && (g.HoveredWindow->Flags & ImGuiWindowFlags_ChildWindow))
        g.HoveredRootWindow = g.HoveredWindow->RootWindow;
    else
        g.HoveredRootWindow = g.MovedWindow ? g.MovedWindow->RootWindow : FindHoveredWindow(g.IO.MousePos, true);

    if (ImGuiWindow* modal_window = GetFrontMostModalRootWindow())
    {
        g.ModalWindowDarkeningRatio = ImMin(g.ModalWindowDarkeningRatio + g.IO.DeltaTime * 6.0f, 1.0f);
        ImGuiWindow* window = g.HoveredRootWindow;
        while (window && window != modal_window)
            window = window->ParentWindow;
        if (!window)
            g.HoveredRootWindow = g.HoveredWindow = NULL;
    }
    else
    {
        g.ModalWindowDarkeningRatio = 0.0f;
    }

    // Are we using inputs? Tell user so they can capture/discard the inputs away from the rest of their application.
    // When clicking outside of a window we assume the click is owned by the application and won't request capture. We need to track click ownership.
    int mouse_earliest_button_down = -1;
    bool mouse_any_down = false;
    for (int i = 0; i < IM_ARRAYSIZE(g.IO.MouseDown); i++)
    {
        if (g.IO.MouseClicked[i])
            g.IO.MouseDownOwned[i] = (g.HoveredWindow != NULL) || (!g.OpenPopupStack.empty());
        mouse_any_down |= g.IO.MouseDown[i];
        if (g.IO.MouseDown[i])
            if (mouse_earliest_button_down == -1 || g.IO.MouseClickedTime[mouse_earliest_button_down] > g.IO.MouseClickedTime[i])
                mouse_earliest_button_down = i;
    }
    bool mouse_avail_to_imgui = (mouse_earliest_button_down == -1) || g.IO.MouseDownOwned[mouse_earliest_button_down];
    if (g.CaptureMouseNextFrame != -1)
        g.IO.WantCaptureMouse = (g.CaptureMouseNextFrame != 0);
    else
        g.IO.WantCaptureMouse = (mouse_avail_to_imgui && (g.HoveredWindow != NULL || mouse_any_down)) || (g.ActiveId != 0) || (!g.OpenPopupStack.empty());
    g.IO.WantCaptureKeyboard = (g.CaptureKeyboardNextFrame != -1) ? (g.CaptureKeyboardNextFrame != 0) : (g.ActiveId != 0);
    g.IO.WantTextInput = (g.ActiveId != 0 && g.InputTextState.Id == g.ActiveId);
    g.MouseCursor = ImGuiMouseCursor_Arrow;
    g.CaptureMouseNextFrame = g.CaptureKeyboardNextFrame = -1;
    g.OsImePosRequest = ImVec2(1.0f, 1.0f); // OS Input Method Editor showing on top-left of our window by default

    // If mouse was first clicked outside of ImGui bounds we also cancel out hovering.
    if (!mouse_avail_to_imgui)
        g.HoveredWindow = g.HoveredRootWindow = NULL;

    // Scale & Scrolling
    if (g.HoveredWindow && g.IO.MouseWheel != 0.0f && !g.HoveredWindow->Collapsed)
    {
        ImGuiWindow* window = g.HoveredWindow;
        if (g.IO.KeyCtrl)
        {
            if (g.IO.FontAllowUserScaling)
            {
                // Zoom / Scale window
                float new_font_scale = ImClamp(window->FontWindowScale + g.IO.MouseWheel * 0.10f, 0.50f, 2.50f);
                float scale = new_font_scale / window->FontWindowScale;
                window->FontWindowScale = new_font_scale;

                const ImVec2 offset = window->Size * (1.0f - scale) * (g.IO.MousePos - window->Pos) / window->Size;
                window->Pos += offset;
                window->PosFloat += offset;
                window->Size *= scale;
                window->SizeFull *= scale;
            }
        }
        else if (!(window->Flags & ImGuiWindowFlags_NoScrollWithMouse))
        {
            // Scroll
            const int scroll_lines = (window->Flags & ImGuiWindowFlags_ComboBox) ? 3 : 5;
            SetWindowScrollY(window, window->Scroll.y - g.IO.MouseWheel * window->CalcFontSize() * scroll_lines);
        }
    }

    // Pressing TAB activate widget focus
    // NB: Don't discard FocusedWindow if it isn't active, so that a window that go on/off programatically won't lose its keyboard focus.
    if (g.ActiveId == 0 && g.FocusedWindow != NULL && g.FocusedWindow->Active && IsKeyPressedMap(ImGuiKey_Tab, false))
        g.FocusedWindow->FocusIdxTabRequestNext = 0;

    // Mark all windows as not visible
    for (int i = 0; i != g.Windows.Size; i++)
    {
        ImGuiWindow* window = g.Windows[i];
        window->WasActive = window->Active;
        window->Active = false;
        window->Accessed = false;
    }

    // Closing the focused window restore focus to the first active root window in descending z-order
    if (g.FocusedWindow && !g.FocusedWindow->WasActive)
        for (int i = g.Windows.Size-1; i >= 0; i--)
            if (g.Windows[i]->WasActive && !(g.Windows[i]->Flags & ImGuiWindowFlags_ChildWindow))
            {
                FocusWindow(g.Windows[i]);
                break;
            }

    // No window should be open at the beginning of the frame.
    // But in order to allow the user to call NewFrame() multiple times without calling Render(), we are doing an explicit clear.
    g.CurrentWindowStack.resize(0);
    g.CurrentPopupStack.resize(0);
    CloseInactivePopups();

    // Create implicit window - we will only render it if the user has added something to it.
    ImGui::SetNextWindowSize(ImVec2(400,400), ImGuiSetCond_FirstUseEver);
    ImGui::Begin("Debug");
}

// NB: behavior of ImGui after Shutdown() is not tested/guaranteed at the moment. This function is merely here to free heap allocations.
void ImGui::Shutdown()
{
    ImGuiContext& g = *GImGui;

    // The fonts atlas can be used prior to calling NewFrame(), so we clear it even if g.Initialized is FALSE (which would happen if we never called NewFrame)
    if (g.IO.Fonts) // Testing for NULL to allow user to NULLify in case of running Shutdown() on multiple contexts. Bit hacky.
        g.IO.Fonts->Clear();

    // Cleanup of other data are conditional on actually having used ImGui.
    if (!g.Initialized)
        return;

    SaveIniSettingsToDisk(g.IO.IniFilename);

    for (int i = 0; i < g.Windows.Size; i++)
    {
        g.Windows[i]->~ImGuiWindow();
        ImGui::MemFree(g.Windows[i]);
    }
    g.Windows.clear();
    g.WindowsSortBuffer.clear();
    g.CurrentWindow = NULL;
    g.CurrentWindowStack.clear();
    g.FocusedWindow = NULL;
    g.HoveredWindow = NULL;
    g.HoveredRootWindow = NULL;
    g.ActiveIdWindow = NULL;
    g.MovedWindow = NULL;
    for (int i = 0; i < g.Settings.Size; i++)
        ImGui::MemFree(g.Settings[i].Name);
    g.Settings.clear();
    g.ColorModifiers.clear();
    g.StyleModifiers.clear();
    g.FontStack.clear();
    g.OpenPopupStack.clear();
    g.CurrentPopupStack.clear();
    g.SetNextWindowSizeConstraintCallback = NULL;
    g.SetNextWindowSizeConstraintCallbackUserData = NULL;
    for (int i = 0; i < IM_ARRAYSIZE(g.RenderDrawLists); i++)
        g.RenderDrawLists[i].clear();
    g.OverlayDrawList.ClearFreeMemory();
    g.ColorEditModeStorage.Clear();
    if (g.PrivateClipboard)
    {
        ImGui::MemFree(g.PrivateClipboard);
        g.PrivateClipboard = NULL;
    }
    g.InputTextState.Text.clear();
    g.InputTextState.InitialText.clear();
    g.InputTextState.TempTextBuffer.clear();

    if (g.LogFile && g.LogFile != stdout)
    {
        fclose(g.LogFile);
        g.LogFile = NULL;
    }
    if (g.LogClipboard)
    {
        g.LogClipboard->~ImGuiTextBuffer();
        ImGui::MemFree(g.LogClipboard);
    }

    g.Initialized = false;
}

static ImGuiIniData* FindWindowSettings(const char* name)
{
    ImGuiContext& g = *GImGui;
    ImGuiID id = ImHash(name, 0);
    for (int i = 0; i != g.Settings.Size; i++)
    {
        ImGuiIniData* ini = &g.Settings[i];
        if (ini->Id == id)
            return ini;
    }
    return NULL;
}

static ImGuiIniData* AddWindowSettings(const char* name)
{
    GImGui->Settings.resize(GImGui->Settings.Size + 1);
    ImGuiIniData* ini = &GImGui->Settings.back();
    ini->Name = ImStrdup(name);
    ini->Id = ImHash(name, 0);
    ini->Collapsed = false;
    ini->Pos = ImVec2(FLT_MAX,FLT_MAX);
    ini->Size = ImVec2(0,0);
    return ini;
}

// Zero-tolerance, poor-man .ini parsing
// FIXME: Write something less rubbish
static void LoadIniSettingsFromDisk(const char* ini_filename)
{
    ImGuiContext& g = *GImGui;
    if (!ini_filename)
        return;

    int file_size;
    char* file_data = (char*)ImFileLoadToMemory(ini_filename, "rb", &file_size, 1);
    if (!file_data)
        return;

    ImGuiIniData* settings = NULL;
    const char* buf_end = file_data + file_size;
    for (const char* line_start = file_data; line_start < buf_end; )
    {
        const char* line_end = line_start;
        while (line_end < buf_end && *line_end != '\n' && *line_end != '\r')
            line_end++;

        if (line_start[0] == '[' && line_end > line_start && line_end[-1] == ']')
        {
            char name[64];
            ImFormatString(name, IM_ARRAYSIZE(name), "%.*s", (int)(line_end-line_start-2), line_start+1);
            settings = FindWindowSettings(name);
            if (!settings)
                settings = AddWindowSettings(name);
        }
        else if (settings)
        {
            float x, y;
            int i;
            if (sscanf(line_start, "Pos=%f,%f", &x, &y) == 2)
                settings->Pos = ImVec2(x, y);
            else if (sscanf(line_start, "Size=%f,%f", &x, &y) == 2)
                settings->Size = ImMax(ImVec2(x, y), g.Style.WindowMinSize);
            else if (sscanf(line_start, "Collapsed=%d", &i) == 1)
                settings->Collapsed = (i != 0);
        }

        line_start = line_end+1;
    }

    ImGui::MemFree(file_data);
}

static void SaveIniSettingsToDisk(const char* ini_filename)
{
    ImGuiContext& g = *GImGui;
    g.SettingsDirtyTimer = 0.0f;
    if (!ini_filename)
        return;

    // Gather data from windows that were active during this session
    for (int i = 0; i != g.Windows.Size; i++)
    {
        ImGuiWindow* window = g.Windows[i];
        if (window->Flags & ImGuiWindowFlags_NoSavedSettings)
            continue;
        ImGuiIniData* settings = FindWindowSettings(window->Name);
        settings->Pos = window->Pos;
        settings->Size = window->SizeFull;
        settings->Collapsed = window->Collapsed;
    }

    // Write .ini file
    // If a window wasn't opened in this session we preserve its settings
    FILE* f = ImFileOpen(ini_filename, "wt");
    if (!f)
        return;
    for (int i = 0; i != g.Settings.Size; i++)
    {
        const ImGuiIniData* settings = &g.Settings[i];
        if (settings->Pos.x == FLT_MAX)
            continue;
        const char* name = settings->Name;
        if (const char* p = strstr(name, "###"))  // Skip to the "###" marker if any. We don't skip past to match the behavior of GetID()
            name = p;
        fprintf(f, "[%s]\n", name);
        fprintf(f, "Pos=%d,%d\n", (int)settings->Pos.x, (int)settings->Pos.y);
        fprintf(f, "Size=%d,%d\n", (int)settings->Size.x, (int)settings->Size.y);
        fprintf(f, "Collapsed=%d\n", settings->Collapsed);
        fprintf(f, "\n");
    }

    fclose(f);
}

static void MarkIniSettingsDirty()
{
    ImGuiContext& g = *GImGui;
    if (g.SettingsDirtyTimer <= 0.0f)
        g.SettingsDirtyTimer = g.IO.IniSavingRate;
}

// FIXME: Add a more explicit sort order in the window structure.
static int ChildWindowComparer(const void* lhs, const void* rhs)
{
    const ImGuiWindow* a = *(const ImGuiWindow**)lhs;
    const ImGuiWindow* b = *(const ImGuiWindow**)rhs;
    if (int d = (a->Flags & ImGuiWindowFlags_Popup) - (b->Flags & ImGuiWindowFlags_Popup))
        return d;
    if (int d = (a->Flags & ImGuiWindowFlags_Tooltip) - (b->Flags & ImGuiWindowFlags_Tooltip))
        return d;
    if (int d = (a->Flags & ImGuiWindowFlags_ComboBox) - (b->Flags & ImGuiWindowFlags_ComboBox))
        return d;
    return (a->IndexWithinParent - b->IndexWithinParent);
}

static void AddWindowToSortedBuffer(ImVector<ImGuiWindow*>& out_sorted_windows, ImGuiWindow* window)
{
    out_sorted_windows.push_back(window);
    if (window->Active)
    {
        int count = window->DC.ChildWindows.Size;
        if (count > 1)
            qsort(window->DC.ChildWindows.begin(), (size_t)count, sizeof(ImGuiWindow*), ChildWindowComparer);
        for (int i = 0; i < count; i++)
        {
            ImGuiWindow* child = window->DC.ChildWindows[i];
            if (child->Active)
                AddWindowToSortedBuffer(out_sorted_windows, child);
        }
    }
}

static void AddDrawListToRenderList(ImVector<ImDrawList*>& out_render_list, ImDrawList* draw_list)
{
    if (draw_list->CmdBuffer.empty())
        return;

    // Remove trailing command if unused
    ImDrawCmd& last_cmd = draw_list->CmdBuffer.back();
    if (last_cmd.ElemCount == 0 && last_cmd.UserCallback == NULL)
    {
        draw_list->CmdBuffer.pop_back();
        if (draw_list->CmdBuffer.empty())
            return;
    }

    // Draw list sanity check. Detect mismatch between PrimReserve() calls and incrementing _VtxCurrentIdx, _VtxWritePtr etc.
    IM_ASSERT(draw_list->VtxBuffer.Size == 0 || draw_list->_VtxWritePtr == draw_list->VtxBuffer.Data + draw_list->VtxBuffer.Size);
    IM_ASSERT(draw_list->IdxBuffer.Size == 0 || draw_list->_IdxWritePtr == draw_list->IdxBuffer.Data + draw_list->IdxBuffer.Size);
    IM_ASSERT((int)draw_list->_VtxCurrentIdx == draw_list->VtxBuffer.Size);

    // Check that draw_list doesn't use more vertices than indexable (default ImDrawIdx = 2 bytes = 64K vertices)
    // If this assert triggers because you are drawing lots of stuff manually, A) workaround by calling BeginChild()/EndChild() to put your draw commands in multiple draw lists, B) #define ImDrawIdx to a 'unsigned int' in imconfig.h and render accordingly.
    IM_ASSERT((int64_t)draw_list->_VtxCurrentIdx <= ((int64_t)1L << (sizeof(ImDrawIdx)*8)));  // Too many vertices in same ImDrawList. See comment above.
    
    out_render_list.push_back(draw_list);
    GImGui->IO.MetricsRenderVertices += draw_list->VtxBuffer.Size;
    GImGui->IO.MetricsRenderIndices += draw_list->IdxBuffer.Size;
}

static void AddWindowToRenderList(ImVector<ImDrawList*>& out_render_list, ImGuiWindow* window)
{
    AddDrawListToRenderList(out_render_list, window->DrawList);
    for (int i = 0; i < window->DC.ChildWindows.Size; i++)
    {
        ImGuiWindow* child = window->DC.ChildWindows[i];
        if (!child->Active) // clipped children may have been marked not active
            continue;
        if ((child->Flags & ImGuiWindowFlags_Popup) && child->HiddenFrames > 0)
            continue;
        AddWindowToRenderList(out_render_list, child);
    }
}

// When using this function it is sane to ensure that float are perfectly rounded to integer values, to that e.g. (int)(max.x-min.x) in user's render produce correct result.
void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DrawList->PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
    window->ClipRect = window->DrawList->_ClipRectStack.back();
}

void ImGui::PopClipRect()
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DrawList->PopClipRect();
    window->ClipRect = window->DrawList->_ClipRectStack.back();
}

// This is normally called by Render(). You may want to call it directly if you want to avoid calling Render() but the gain will be very minimal.
void ImGui::EndFrame()
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.Initialized);                       // Forgot to call ImGui::NewFrame()
    IM_ASSERT(g.FrameCountEnded != g.FrameCount);   // ImGui::EndFrame() called multiple times, or forgot to call ImGui::NewFrame() again

    // Render tooltip
    if (g.Tooltip[0])
    {
        ImGui::BeginTooltip();
        ImGui::TextUnformatted(g.Tooltip);
        ImGui::EndTooltip();
    }

    // Notify OS when our Input Method Editor cursor has moved (e.g. CJK inputs using Microsoft IME)
    if (g.IO.ImeSetInputScreenPosFn && ImLengthSqr(g.OsImePosRequest - g.OsImePosSet) > 0.0001f)
    {
        g.IO.ImeSetInputScreenPosFn((int)g.OsImePosRequest.x, (int)g.OsImePosRequest.y);
        g.OsImePosSet = g.OsImePosRequest;
    }

    // Hide implicit "Debug" window if it hasn't been used
    IM_ASSERT(g.CurrentWindowStack.Size == 1);    // Mismatched Begin()/End() calls
    if (g.CurrentWindow && !g.CurrentWindow->Accessed)
        g.CurrentWindow->Active = false;
    ImGui::End();

    // Click to focus window and start moving (after we're done with all our widgets)
    if (g.ActiveId == 0 && g.HoveredId == 0 && g.IO.MouseClicked[0])
    {
        if (!(g.FocusedWindow && !g.FocusedWindow->WasActive && g.FocusedWindow->Active)) // Unless we just made a popup appear
        {
            if (g.HoveredRootWindow != NULL)
            {
                FocusWindow(g.HoveredWindow);
                if (!(g.HoveredWindow->Flags & ImGuiWindowFlags_NoMove))
                {
                    g.MovedWindow = g.HoveredWindow;
                    g.MovedWindowMoveId = g.HoveredRootWindow->MoveId;
                    SetActiveID(g.MovedWindowMoveId, g.HoveredRootWindow);
                }
            }
            else if (g.FocusedWindow != NULL && GetFrontMostModalRootWindow() == NULL)
            {
                // Clicking on void disable focus
                FocusWindow(NULL);
            }
        }
    }

    // Sort the window list so that all child windows are after their parent
    // We cannot do that on FocusWindow() because childs may not exist yet
    g.WindowsSortBuffer.resize(0);
    g.WindowsSortBuffer.reserve(g.Windows.Size);
    for (int i = 0; i != g.Windows.Size; i++)
    {
        ImGuiWindow* window = g.Windows[i];
        if (window->Active && (window->Flags & ImGuiWindowFlags_ChildWindow))       // if a child is active its parent will add it
            continue;
        AddWindowToSortedBuffer(g.WindowsSortBuffer, window);
    }
    IM_ASSERT(g.Windows.Size == g.WindowsSortBuffer.Size);  // we done something wrong
    g.Windows.swap(g.WindowsSortBuffer);

    // Clear Input data for next frame
    g.IO.MouseWheel = 0.0f;
    memset(g.IO.InputCharacters, 0, sizeof(g.IO.InputCharacters));

    g.FrameCountEnded = g.FrameCount;
}

void ImGui::Render()
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.Initialized);   // Forgot to call ImGui::NewFrame()

    if (g.FrameCountEnded != g.FrameCount)
        ImGui::EndFrame();
    g.FrameCountRendered = g.FrameCount;

    // Skip render altogether if alpha is 0.0
    // Note that vertex buffers have been created and are wasted, so it is best practice that you don't create windows in the first place, or consistently respond to Begin() returning false.
    if (g.Style.Alpha > 0.0f)
    {
        // Gather windows to render
        g.IO.MetricsRenderVertices = g.IO.MetricsRenderIndices = g.IO.MetricsActiveWindows = 0;
        for (int i = 0; i < IM_ARRAYSIZE(g.RenderDrawLists); i++)
            g.RenderDrawLists[i].resize(0);
        for (int i = 0; i != g.Windows.Size; i++)
        {
            ImGuiWindow* window = g.Windows[i];
            if (window->Active && window->HiddenFrames <= 0 && (window->Flags & (ImGuiWindowFlags_ChildWindow)) == 0)
            {
                // FIXME: Generalize this with a proper layering system so e.g. user can draw in specific layers, below text, ..
                g.IO.MetricsActiveWindows++;
                if (window->Flags & ImGuiWindowFlags_Popup)
                    AddWindowToRenderList(g.RenderDrawLists[1], window);
                else if (window->Flags & ImGuiWindowFlags_Tooltip)
                    AddWindowToRenderList(g.RenderDrawLists[2], window);
                else
                    AddWindowToRenderList(g.RenderDrawLists[0], window);
            }
        }

        // Flatten layers
        int n = g.RenderDrawLists[0].Size;
        int flattened_size = n;
        for (int i = 1; i < IM_ARRAYSIZE(g.RenderDrawLists); i++)
            flattened_size += g.RenderDrawLists[i].Size;
        g.RenderDrawLists[0].resize(flattened_size);
        for (int i = 1; i < IM_ARRAYSIZE(g.RenderDrawLists); i++)
        {
            ImVector<ImDrawList*>& layer = g.RenderDrawLists[i];
            if (layer.empty())
                continue;
            memcpy(&g.RenderDrawLists[0][n], &layer[0], layer.Size * sizeof(ImDrawList*));
            n += layer.Size;
        }

        // Draw software mouse cursor if requested
        if (g.IO.MouseDrawCursor)
        {
            const ImGuiMouseCursorData& cursor_data = g.MouseCursorData[g.MouseCursor];
            const ImVec2 pos = g.IO.MousePos - cursor_data.HotOffset;
            const ImVec2 size = cursor_data.Size;
            const ImTextureID tex_id = g.IO.Fonts->TexID;
            g.OverlayDrawList.PushTextureID(tex_id);
            g.OverlayDrawList.AddImage(tex_id, pos+ImVec2(1,0), pos+ImVec2(1,0) + size, cursor_data.TexUvMin[1], cursor_data.TexUvMax[1], IM_COL32(0,0,0,48));        // Shadow
            g.OverlayDrawList.AddImage(tex_id, pos+ImVec2(2,0), pos+ImVec2(2,0) + size, cursor_data.TexUvMin[1], cursor_data.TexUvMax[1], IM_COL32(0,0,0,48));        // Shadow
            g.OverlayDrawList.AddImage(tex_id, pos,             pos + size,             cursor_data.TexUvMin[1], cursor_data.TexUvMax[1], IM_COL32(0,0,0,255));       // Black border
            g.OverlayDrawList.AddImage(tex_id, pos,             pos + size,             cursor_data.TexUvMin[0], cursor_data.TexUvMax[0], IM_COL32(255,255,255,255)); // White fill
            g.OverlayDrawList.PopTextureID();
        }
        if (!g.OverlayDrawList.VtxBuffer.empty())
            AddDrawListToRenderList(g.RenderDrawLists[0], &g.OverlayDrawList);

        // Setup draw data
        g.RenderDrawData.Valid = true;
        g.RenderDrawData.CmdLists = (g.RenderDrawLists[0].Size > 0) ? &g.RenderDrawLists[0][0] : NULL;
        g.RenderDrawData.CmdListsCount = g.RenderDrawLists[0].Size;
        g.RenderDrawData.TotalVtxCount = g.IO.MetricsRenderVertices;
        g.RenderDrawData.TotalIdxCount = g.IO.MetricsRenderIndices;

        // Render. If user hasn't set a callback then they may retrieve the draw data via GetDrawData()
        if (g.RenderDrawData.CmdListsCount > 0 && g.IO.RenderDrawListsFn != NULL)
            g.IO.RenderDrawListsFn(&g.RenderDrawData);
    }
}

const char* ImGui::FindRenderedTextEnd(const char* text, const char* text_end)
{
    const char* text_display_end = text;
    if (!text_end)
        text_end = (const char*)-1;

    while (text_display_end < text_end && *text_display_end != '\0' && (text_display_end[0] != '#' || text_display_end[1] != '#'))
        text_display_end++;
    return text_display_end;
}

// Pass text data straight to log (without being displayed)
void ImGui::LogText(const char* fmt, ...)
{
    ImGuiContext& g = *GImGui;
    if (!g.LogEnabled)
        return;

    va_list args;
    va_start(args, fmt);
    if (g.LogFile)
    {
        vfprintf(g.LogFile, fmt, args);
    }
    else
    {
        g.LogClipboard->appendv(fmt, args);
    }
    va_end(args);
}

// Internal version that takes a position to decide on newline placement and pad items according to their depth.
// We split text into individual lines to add current tree level padding
static void LogRenderedText(const ImVec2& ref_pos, const char* text, const char* text_end)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = ImGui::GetCurrentWindowRead();

    if (!text_end)
        text_end = ImGui::FindRenderedTextEnd(text, text_end);

    const bool log_new_line = ref_pos.y > window->DC.LogLinePosY+1;
    window->DC.LogLinePosY = ref_pos.y;

    const char* text_remaining = text;
    if (g.LogStartDepth > window->DC.TreeDepth)  // Re-adjust padding if we have popped out of our starting depth
        g.LogStartDepth = window->DC.TreeDepth;
    const int tree_depth = (window->DC.TreeDepth - g.LogStartDepth);
    for (;;)
    {
        // Split the string. Each new line (after a '\n') is followed by spacing corresponding to the current depth of our log entry.
        const char* line_end = text_remaining;
        while (line_end < text_end)
            if (*line_end == '\n')
                break;
            else
                line_end++;
        if (line_end >= text_end)
            line_end = NULL;

        const bool is_first_line = (text == text_remaining);
        bool is_last_line = false;
        if (line_end == NULL)
        {
            is_last_line = true;
            line_end = text_end;
        }
        if (line_end != NULL && !(is_last_line && (line_end - text_remaining)==0))
        {
            const int char_count = (int)(line_end - text_remaining);
            if (log_new_line || !is_first_line)
                ImGui::LogText(IM_NEWLINE "%*s%.*s", tree_depth*4, "", char_count, text_remaining);
            else
                ImGui::LogText(" %.*s", char_count, text_remaining);
        }

        if (is_last_line)
            break;
        text_remaining = line_end + 1;
    }
}

// Internal ImGui functions to render text
// RenderText***() functions calls ImDrawList::AddText() calls ImBitmapFont::RenderText()
void ImGui::RenderText(ImVec2 pos, const char* text, const char* text_end, bool hide_text_after_hash)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    // Hide anything after a '##' string
    const char* text_display_end;
    if (hide_text_after_hash)
    {
        text_display_end = FindRenderedTextEnd(text, text_end);
    }
    else
    {
        if (!text_end)
            text_end = text + strlen(text); // FIXME-OPT
        text_display_end = text_end;
    }

    const int text_len = (int)(text_display_end - text);
    if (text_len > 0)
    {
        window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_display_end);
        if (g.LogEnabled)
            LogRenderedText(pos, text, text_display_end);
    }
}

void ImGui::RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_width)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    if (!text_end)
        text_end = text + strlen(text); // FIXME-OPT

    const int text_len = (int)(text_end - text);
    if (text_len > 0)
    {
        window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_end, wrap_width);
        if (g.LogEnabled)
            LogRenderedText(pos, text, text_end);
    }
}

// Default clip_rect uses (pos_min,pos_max)
// Handle clipping on CPU immediately (vs typically let the GPU clip the triangles that are overlapping the clipping rectangle edges)
void ImGui::RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, const char* text_end, const ImVec2* text_size_if_known, const ImVec2& align, const ImRect* clip_rect)
{
    // Hide anything after a '##' string
    const char* text_display_end = FindRenderedTextEnd(text, text_end);
    const int text_len = (int)(text_display_end - text);
    if (text_len == 0)
        return;

    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    // Perform CPU side clipping for single clipped element to avoid using scissor state
    ImVec2 pos = pos_min;
    const ImVec2 text_size = text_size_if_known ? *text_size_if_known : CalcTextSize(text, text_display_end, false, 0.0f);

    const ImVec2* clip_min = clip_rect ? &clip_rect->Min : &pos_min;
    const ImVec2* clip_max = clip_rect ? &clip_rect->Max : &pos_max;
    bool need_clipping = (pos.x + text_size.x >= clip_max->x) || (pos.y + text_size.y >= clip_max->y);
    if (clip_rect) // If we had no explicit clipping rectangle then pos==clip_min
        need_clipping |= (pos.x < clip_min->x) || (pos.y < clip_min->y);

    // Align whole block. We should defer that to the better rendering function when we'll have support for individual line alignment.
    if (align.x > 0.0f) pos.x = ImMax(pos.x, pos.x + (pos_max.x - pos.x - text_size.x) * align.x);
    if (align.y > 0.0f) pos.y = ImMax(pos.y, pos.y + (pos_max.y - pos.y - text_size.y) * align.y);

    // Render
    if (need_clipping)
    {
        ImVec4 fine_clip_rect(clip_min->x, clip_min->y, clip_max->x, clip_max->y);
        window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_display_end, 0.0f, &fine_clip_rect);
    }
    else
    {
        window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_display_end, 0.0f, NULL);
    }
    if (g.LogEnabled)
        LogRenderedText(pos, text, text_display_end);
}

// Render a rectangle shaped with optional rounding and borders
void ImGui::RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)
{
    ImGuiWindow* window = GetCurrentWindow();

    window->DrawList->AddRectFilled(p_min, p_max, fill_col, rounding);
    if (border && (window->Flags & ImGuiWindowFlags_ShowBorders))
    {
        window->DrawList->AddRect(p_min+ImVec2(1,1), p_max+ImVec2(1,1), GetColorU32(ImGuiCol_BorderShadow), rounding);
        window->DrawList->AddRect(p_min, p_max, GetColorU32(ImGuiCol_Border), rounding);
    }
}

// Render a triangle to denote expanded/collapsed state
void ImGui::RenderCollapseTriangle(ImVec2 p_min, bool is_open, float scale)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    const float h = g.FontSize * 1.00f;
    const float r = h * 0.40f * scale;
    ImVec2 center = p_min + ImVec2(h*0.50f, h*0.50f*scale);

    ImVec2 a, b, c;
    if (is_open)
    {
        center.y -= r*0.25f;
        a = center + ImVec2(0,1)*r;
        b = center + ImVec2(-0.866f,-0.5f)*r;
        c = center + ImVec2(0.866f,-0.5f)*r;
    }
    else
    {
        a = center + ImVec2(1,0)*r;
        b = center + ImVec2(-0.500f,0.866f)*r;
        c = center + ImVec2(-0.500f,-0.866f)*r;
    }

    window->DrawList->AddTriangleFilled(a, b, c, GetColorU32(ImGuiCol_Text));
}

void ImGui::RenderBullet(ImVec2 pos)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DrawList->AddCircleFilled(pos, GImGui->FontSize*0.20f, GetColorU32(ImGuiCol_Text), 8);
}

void ImGui::RenderCheckMark(ImVec2 pos, ImU32 col)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    ImVec2 a, b, c;
    float start_x = (float)(int)(g.FontSize * 0.307f + 0.5f);
    float rem_third = (float)(int)((g.FontSize - start_x) / 3.0f);
    a.x = pos.x + 0.5f + start_x;
    b.x = a.x + rem_third;
    c.x = a.x + rem_third * 3.0f;
    b.y = pos.y - 1.0f + (float)(int)(g.Font->Ascent * (g.FontSize / g.Font->FontSize) + 0.5f) + (float)(int)(g.Font->DisplayOffset.y);
    a.y = b.y - rem_third;
    c.y = b.y - rem_third * 2.0f;

    window->DrawList->PathLineTo(a);
    window->DrawList->PathLineTo(b);
    window->DrawList->PathLineTo(c);
    window->DrawList->PathStroke(col, false);
}

// Calculate text size. Text can be multi-line. Optionally ignore text after a ## marker.
// CalcTextSize("") should return ImVec2(0.0f, GImGui->FontSize)
ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width)
{
    ImGuiContext& g = *GImGui;

    const char* text_display_end;
    if (hide_text_after_double_hash)
        text_display_end = FindRenderedTextEnd(text, text_end);      // Hide anything after a '##' string
    else
        text_display_end = text_end;

    ImFont* font = g.Font;
    const float font_size = g.FontSize;
    if (text == text_display_end)
        return ImVec2(0.0f, font_size);
    ImVec2 text_size = font->CalcTextSizeA(font_size, FLT_MAX, wrap_width, text, text_display_end, NULL);

    // Cancel out character spacing for the last character of a line (it is baked into glyph->XAdvance field)
    const float font_scale = font_size / font->FontSize;
    const float character_spacing_x = 1.0f * font_scale;
    if (text_size.x > 0.0f)
        text_size.x -= character_spacing_x;
    text_size.x = (float)(int)(text_size.x + 0.95f);

    return text_size;
}

// Helper to calculate coarse clipping of large list of evenly sized items.
// NB: Prefer using the ImGuiListClipper higher-level helper if you can! Read comments and instructions there on how those use this sort of pattern.
// NB: 'items_count' is only used to clamp the result, if you don't know your count you can use INT_MAX
void ImGui::CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindowRead();
    if (g.LogEnabled)
    {
        // If logging is active, do not perform any clipping
        *out_items_display_start = 0;
        *out_items_display_end = items_count;
        return;
    }
    if (window->SkipItems)
    {
        *out_items_display_start = *out_items_display_end = 0;
        return;
    }

    const ImVec2 pos = window->DC.CursorPos;
    int start = (int)((window->ClipRect.Min.y - pos.y) / items_height);
    int end = (int)((window->ClipRect.Max.y - pos.y) / items_height);
    start = ImClamp(start, 0, items_count);
    end = ImClamp(end + 1, start, items_count);
    *out_items_display_start = start;
    *out_items_display_end = end;
}

// Find window given position, search front-to-back
// FIXME: Note that we have a lag here because WindowRectClipped is updated in Begin() so windows moved by user via SetWindowPos() and not SetNextWindowPos() will have that rectangle lagging by a frame at the time FindHoveredWindow() is called, aka before the next Begin(). Moving window thankfully isn't affected.
static ImGuiWindow* FindHoveredWindow(ImVec2 pos, bool excluding_childs)
{
    ImGuiContext& g = *GImGui;
    for (int i = g.Windows.Size-1; i >= 0; i--)
    {
        ImGuiWindow* window = g.Windows[i];
        if (!window->Active)
            continue;
        if (window->Flags & ImGuiWindowFlags_NoInputs)
            continue;
        if (excluding_childs && (window->Flags & ImGuiWindowFlags_ChildWindow) != 0)
            continue;

        // Using the clipped AABB so a child window will typically be clipped by its parent.
        ImRect bb(window->WindowRectClipped.Min - g.Style.TouchExtraPadding, window->WindowRectClipped.Max + g.Style.TouchExtraPadding);
        if (bb.Contains(pos))
            return window;
    }
    return NULL;
}

// Test if mouse cursor is hovering given rectangle
// NB- Rectangle is clipped by our current clip setting
// NB- Expand the rectangle to be generous on imprecise inputs systems (g.Style.TouchExtraPadding)
bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindowRead();

    // Clip
    ImRect rect_clipped(r_min, r_max);
    if (clip)
        rect_clipped.Clip(window->ClipRect);

    // Expand for touch input
    const ImRect rect_for_touch(rect_clipped.Min - g.Style.TouchExtraPadding, rect_clipped.Max + g.Style.TouchExtraPadding);
    return rect_for_touch.Contains(g.IO.MousePos);
}

bool ImGui::IsMouseHoveringWindow()
{
    ImGuiContext& g = *GImGui;
    return g.HoveredWindow == g.CurrentWindow;
}

bool ImGui::IsMouseHoveringAnyWindow()
{
    ImGuiContext& g = *GImGui;
    return g.HoveredWindow != NULL;
}

bool ImGui::IsPosHoveringAnyWindow(const ImVec2& pos)
{
    return FindHoveredWindow(pos, false) != NULL;
}

static bool IsKeyPressedMap(ImGuiKey key, bool repeat)
{
    const int key_index = GImGui->IO.KeyMap[key];
    return ImGui::IsKeyPressed(key_index, repeat);
}

int ImGui::GetKeyIndex(ImGuiKey key)
{
    IM_ASSERT(key >= 0 && key < ImGuiKey_COUNT);
    return GImGui->IO.KeyMap[key];
}

bool ImGui::IsKeyDown(int key_index)
{
    if (key_index < 0) return false;
    IM_ASSERT(key_index >= 0 && key_index < IM_ARRAYSIZE(GImGui->IO.KeysDown));
    return GImGui->IO.KeysDown[key_index];
}

bool ImGui::IsKeyPressed(int key_index, bool repeat)
{
    ImGuiContext& g = *GImGui;
    if (key_index < 0) return false;
    IM_ASSERT(key_index >= 0 && key_index < IM_ARRAYSIZE(g.IO.KeysDown));
    const float t = g.IO.KeysDownDuration[key_index];
    if (t == 0.0f)
        return true;

    if (repeat && t > g.IO.KeyRepeatDelay)
    {
        float delay = g.IO.KeyRepeatDelay, rate = g.IO.KeyRepeatRate;
        if ((fmodf(t - delay, rate) > rate*0.5f) != (fmodf(t - delay - g.IO.DeltaTime, rate) > rate*0.5f))
            return true;
    }
    return false;
}

bool ImGui::IsKeyReleased(int key_index)
{
    ImGuiContext& g = *GImGui;
    if (key_index < 0) return false;
    IM_ASSERT(key_index >= 0 && key_index < IM_ARRAYSIZE(g.IO.KeysDown));
    if (g.IO.KeysDownDurationPrev[key_index] >= 0.0f && !g.IO.KeysDown[key_index])
        return true;
    return false;
}

bool ImGui::IsMouseDown(int button)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    return g.IO.MouseDown[button];
}

bool ImGui::IsMouseClicked(int button, bool repeat)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    const float t = g.IO.MouseDownDuration[button];
    if (t == 0.0f)
        return true;

    if (repeat && t > g.IO.KeyRepeatDelay)
    {
        float delay = g.IO.KeyRepeatDelay, rate = g.IO.KeyRepeatRate;
        if ((fmodf(t - delay, rate) > rate*0.5f) != (fmodf(t - delay - g.IO.DeltaTime, rate) > rate*0.5f))
            return true;
    }

    return false;
}

bool ImGui::IsMouseReleased(int button)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    return g.IO.MouseReleased[button];
}

bool ImGui::IsMouseDoubleClicked(int button)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    return g.IO.MouseDoubleClicked[button];
}

bool ImGui::IsMouseDragging(int button, float lock_threshold)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    if (!g.IO.MouseDown[button])
        return false;
    if (lock_threshold < 0.0f)
        lock_threshold = g.IO.MouseDragThreshold;
    return g.IO.MouseDragMaxDistanceSqr[button] >= lock_threshold * lock_threshold;
}

ImVec2 ImGui::GetMousePos()
{
    return GImGui->IO.MousePos;
}

// NB: prefer to call right after BeginPopup(). At the time Selectable/MenuItem is activated, the popup is already closed!
ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()
{
    ImGuiContext& g = *GImGui;
    if (g.CurrentPopupStack.Size > 0)
        return g.OpenPopupStack[g.CurrentPopupStack.Size-1].MousePosOnOpen;
    return g.IO.MousePos;
}

ImVec2 ImGui::GetMouseDragDelta(int button, float lock_threshold)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    if (lock_threshold < 0.0f)
        lock_threshold = g.IO.MouseDragThreshold;
    if (g.IO.MouseDown[button])
        if (g.IO.MouseDragMaxDistanceSqr[button] >= lock_threshold * lock_threshold)
            return g.IO.MousePos - g.IO.MouseClickedPos[button];     // Assume we can only get active with left-mouse button (at the moment).
    return ImVec2(0.0f, 0.0f);
}

void ImGui::ResetMouseDragDelta(int button)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    // NB: We don't need to reset g.IO.MouseDragMaxDistanceSqr
    g.IO.MouseClickedPos[button] = g.IO.MousePos;
}

ImGuiMouseCursor ImGui::GetMouseCursor()
{
    return GImGui->MouseCursor;
}

void ImGui::SetMouseCursor(ImGuiMouseCursor cursor_type)
{
    GImGui->MouseCursor = cursor_type;
}

void ImGui::CaptureKeyboardFromApp(bool capture)
{
    GImGui->CaptureKeyboardNextFrame = capture ? 1 : 0;
}

void ImGui::CaptureMouseFromApp(bool capture)
{
    GImGui->CaptureMouseNextFrame = capture ? 1 : 0;
}

bool ImGui::IsItemHovered()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.LastItemHoveredAndUsable;
}

bool ImGui::IsItemHoveredRect()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.LastItemHoveredRect;
}

bool ImGui::IsItemActive()
{
    ImGuiContext& g = *GImGui;
    if (g.ActiveId)
    {
        ImGuiWindow* window = GetCurrentWindowRead();
        return g.ActiveId == window->DC.LastItemId;
    }
    return false;
}

bool ImGui::IsItemClicked(int mouse_button)
{
    return IsMouseClicked(mouse_button) && IsItemHovered();
}

bool ImGui::IsAnyItemHovered()
{
    return GImGui->HoveredId != 0 || GImGui->HoveredIdPreviousFrame != 0;
}

bool ImGui::IsAnyItemActive()
{
    return GImGui->ActiveId != 0;
}

bool ImGui::IsItemVisible()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImRect r(window->ClipRect);
    return r.Overlaps(window->DC.LastItemRect);
}

// Allow last item to be overlapped by a subsequent item. Both may be activated during the same frame before the later one takes priority.
void ImGui::SetItemAllowOverlap()
{
    ImGuiContext& g = *GImGui;
    if (g.HoveredId == g.CurrentWindow->DC.LastItemId)
        g.HoveredIdAllowOverlap = true;
    if (g.ActiveId == g.CurrentWindow->DC.LastItemId)
        g.ActiveIdAllowOverlap = true;
}

ImVec2 ImGui::GetItemRectMin()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.LastItemRect.Min;
}

ImVec2 ImGui::GetItemRectMax()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.LastItemRect.Max;
}

ImVec2 ImGui::GetItemRectSize()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.LastItemRect.GetSize();
}

ImVec2 ImGui::CalcItemRectClosestPoint(const ImVec2& pos, bool on_edge, float outward)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImRect rect = window->DC.LastItemRect;
    rect.Expand(outward);
    return rect.GetClosestPoint(pos, on_edge);
}

// Tooltip is stored and turned into a BeginTooltip()/EndTooltip() sequence at the end of the frame. Each call override previous value.
void ImGui::SetTooltipV(const char* fmt, va_list args)
{
    ImGuiContext& g = *GImGui;
    ImFormatStringV(g.Tooltip, IM_ARRAYSIZE(g.Tooltip), fmt, args);
}

void ImGui::SetTooltip(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    SetTooltipV(fmt, args);
    va_end(args);
}

static ImRect GetVisibleRect()
{
    ImGuiContext& g = *GImGui;
    if (g.IO.DisplayVisibleMin.x != g.IO.DisplayVisibleMax.x && g.IO.DisplayVisibleMin.y != g.IO.DisplayVisibleMax.y)
        return ImRect(g.IO.DisplayVisibleMin, g.IO.DisplayVisibleMax);
    return ImRect(0.0f, 0.0f, g.IO.DisplaySize.x, g.IO.DisplaySize.y);
}

void ImGui::BeginTooltip()
{
    ImGuiWindowFlags flags = ImGuiWindowFlags_Tooltip|ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoMove|ImGuiWindowFlags_NoResize|ImGuiWindowFlags_NoSavedSettings|ImGuiWindowFlags_AlwaysAutoResize;
    ImGui::Begin("##Tooltip", NULL, flags);
}

void ImGui::EndTooltip()
{
    IM_ASSERT(GetCurrentWindowRead()->Flags & ImGuiWindowFlags_Tooltip);   // Mismatched BeginTooltip()/EndTooltip() calls
    ImGui::End();
}

static bool IsPopupOpen(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    return g.OpenPopupStack.Size > g.CurrentPopupStack.Size && g.OpenPopupStack[g.CurrentPopupStack.Size].PopupId == id;
}

// Mark popup as open (toggle toward open state).
// Popups are closed when user click outside, or activate a pressable item, or CloseCurrentPopup() is called within a BeginPopup()/EndPopup() block.
// Popup identifiers are relative to the current ID-stack (so OpenPopup and BeginPopup needs to be at the same level).
// One open popup per level of the popup hierarchy (NB: when assigning we reset the Window member of ImGuiPopupRef to NULL)
void ImGui::OpenPopupEx(const char* str_id, bool reopen_existing)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    ImGuiID id = window->GetID(str_id);
    int current_stack_size = g.CurrentPopupStack.Size;
    ImGuiPopupRef popup_ref = ImGuiPopupRef(id, window, window->GetID("##menus"), g.IO.MousePos); // Tagged as new ref because constructor sets Window to NULL (we are passing the ParentWindow info here)
    if (g.OpenPopupStack.Size < current_stack_size + 1)
        g.OpenPopupStack.push_back(popup_ref);
    else if (reopen_existing || g.OpenPopupStack[current_stack_size].PopupId != id)
    {
        g.OpenPopupStack.resize(current_stack_size+1);
        g.OpenPopupStack[current_stack_size] = popup_ref;
    }
}

void ImGui::OpenPopup(const char* str_id)
{
    ImGui::OpenPopupEx(str_id, false);
}

static void CloseInactivePopups()
{
    ImGuiContext& g = *GImGui;
    if (g.OpenPopupStack.empty())
        return;

    // When popups are stacked, clicking on a lower level popups puts focus back to it and close popups above it.
    // Don't close our own child popup windows
    int n = 0;
    if (g.FocusedWindow)
    {
        for (n = 0; n < g.OpenPopupStack.Size; n++)
        {
            ImGuiPopupRef& popup = g.OpenPopupStack[n];
            if (!popup.Window)
                continue;
            IM_ASSERT((popup.Window->Flags & ImGuiWindowFlags_Popup) != 0);
            if (popup.Window->Flags & ImGuiWindowFlags_ChildWindow)
                continue;

            bool has_focus = false;
            for (int m = n; m < g.OpenPopupStack.Size && !has_focus; m++)
                has_focus = (g.OpenPopupStack[m].Window && g.OpenPopupStack[m].Window->RootWindow == g.FocusedWindow->RootWindow);
            if (!has_focus)
                break;
        }
    }
    if (n < g.OpenPopupStack.Size)   // This test is not required but it allows to set a useful breakpoint on the line below
        g.OpenPopupStack.resize(n);
}

static ImGuiWindow* GetFrontMostModalRootWindow()
{
    ImGuiContext& g = *GImGui;
    for (int n = g.OpenPopupStack.Size-1; n >= 0; n--)
        if (ImGuiWindow* front_most_popup = g.OpenPopupStack.Data[n].Window)
            if (front_most_popup->Flags & ImGuiWindowFlags_Modal)
                return front_most_popup;
    return NULL;
}

static void ClosePopupToLevel(int remaining)
{
    ImGuiContext& g = *GImGui;
    if (remaining > 0)
        ImGui::FocusWindow(g.OpenPopupStack[remaining-1].Window);
    else
        ImGui::FocusWindow(g.OpenPopupStack[0].ParentWindow);
    g.OpenPopupStack.resize(remaining);
}

static void ClosePopup(ImGuiID id)
{
    if (!IsPopupOpen(id))
        return;
    ImGuiContext& g = *GImGui;
    ClosePopupToLevel(g.OpenPopupStack.Size - 1);
}

// Close the popup we have begin-ed into.
void ImGui::CloseCurrentPopup()
{
    ImGuiContext& g = *GImGui;
    int popup_idx = g.CurrentPopupStack.Size - 1;
    if (popup_idx < 0 || popup_idx > g.OpenPopupStack.Size || g.CurrentPopupStack[popup_idx].PopupId != g.OpenPopupStack[popup_idx].PopupId)
        return;
    while (popup_idx > 0 && g.OpenPopupStack[popup_idx].Window && (g.OpenPopupStack[popup_idx].Window->Flags & ImGuiWindowFlags_ChildMenu))
        popup_idx--;
    ClosePopupToLevel(popup_idx);
}

static inline void ClearSetNextWindowData()
{
    ImGuiContext& g = *GImGui;
    g.SetNextWindowPosCond = g.SetNextWindowSizeCond = g.SetNextWindowContentSizeCond = g.SetNextWindowCollapsedCond = 0;
    g.SetNextWindowSizeConstraint = g.SetNextWindowFocus = false;
}

static bool BeginPopupEx(const char* str_id, ImGuiWindowFlags extra_flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    const ImGuiID id = window->GetID(str_id);
    if (!IsPopupOpen(id))
    {
        ClearSetNextWindowData(); // We behave like Begin() and need to consume those values
        return false;
    }

    ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
    ImGuiWindowFlags flags = extra_flags|ImGuiWindowFlags_Popup|ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoMove|ImGuiWindowFlags_NoResize|ImGuiWindowFlags_NoSavedSettings|ImGuiWindowFlags_AlwaysAutoResize;

    char name[20];
    if (flags & ImGuiWindowFlags_ChildMenu)
        ImFormatString(name, IM_ARRAYSIZE(name), "##menu_%d", g.CurrentPopupStack.Size);    // Recycle windows based on depth
    else
        ImFormatString(name, IM_ARRAYSIZE(name), "##popup_%08x", id); // Not recycling, so we can close/open during the same frame

    bool is_open = ImGui::Begin(name, NULL, flags);
    if (!(window->Flags & ImGuiWindowFlags_ShowBorders))
        g.CurrentWindow->Flags &= ~ImGuiWindowFlags_ShowBorders;
    if (!is_open) // NB: is_open can be 'false' when the popup is completely clipped (e.g. zero size display)
        ImGui::EndPopup();

    return is_open;
}

bool ImGui::BeginPopup(const char* str_id)
{
    if (GImGui->OpenPopupStack.Size <= GImGui->CurrentPopupStack.Size)	// Early out for performance
    {
        ClearSetNextWindowData(); // We behave like Begin() and need to consume those values
        return false;
    }
    return BeginPopupEx(str_id, ImGuiWindowFlags_ShowBorders);
}

bool ImGui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags extra_flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    const ImGuiID id = window->GetID(name);
    if (!IsPopupOpen(id))
    {
        ClearSetNextWindowData(); // We behave like Begin() and need to consume those values
        return false;
    }

    ImGuiWindowFlags flags = extra_flags|ImGuiWindowFlags_Popup|ImGuiWindowFlags_Modal|ImGuiWindowFlags_NoCollapse|ImGuiWindowFlags_NoSavedSettings;
    bool is_open = ImGui::Begin(name, p_open, flags);
    if (!is_open || (p_open && !*p_open)) // NB: is_open can be 'false' when the popup is completely clipped (e.g. zero size display)
    {
        ImGui::EndPopup();
        if (is_open)
            ClosePopup(id);
        return false;
    }

    return is_open;
}

void ImGui::EndPopup()
{
    ImGuiWindow* window = GetCurrentWindow();
    IM_ASSERT(window->Flags & ImGuiWindowFlags_Popup);  // Mismatched BeginPopup()/EndPopup() calls
    IM_ASSERT(GImGui->CurrentPopupStack.Size > 0);
    ImGui::End();
    if (!(window->Flags & ImGuiWindowFlags_Modal))
        ImGui::PopStyleVar();
}

// This is a helper to handle the most simple case of associating one named popup to one given widget.
// 1. If you have many possible popups (for different "instances" of a same widget, or for wholly different widgets), you may be better off handling
//    this yourself so you can store data relative to the widget that opened the popup instead of choosing different popup identifiers.
// 2. If you want right-clicking on the same item to reopen the popup at new location, use the same code replacing IsItemHovered() with IsItemHoveredRect()
//    and passing true to the OpenPopupEx().
//    Because: hovering an item in a window below the popup won't normally trigger is hovering behavior/coloring. The pattern of ignoring the fact that
//    the item isn't interactable (because it is blocked by the active popup) may useful in some situation when e.g. large canvas as one item, content of menu
//    driven by click position.
bool ImGui::BeginPopupContextItem(const char* str_id, int mouse_button)
{
    if (IsItemHovered() && IsMouseClicked(mouse_button))
        OpenPopupEx(str_id, false);
    return BeginPopup(str_id);
}

bool ImGui::BeginPopupContextWindow(bool also_over_items, const char* str_id, int mouse_button)
{
    if (!str_id) str_id = "window_context_menu";
    if (IsMouseHoveringWindow() && IsMouseClicked(mouse_button))
        if (also_over_items || !IsAnyItemHovered())
            OpenPopupEx(str_id, true);
    return BeginPopup(str_id);
}

bool ImGui::BeginPopupContextVoid(const char* str_id, int mouse_button)
{
    if (!str_id) str_id = "void_context_menu";
    if (!IsMouseHoveringAnyWindow() && IsMouseClicked(mouse_button))
        OpenPopupEx(str_id, true);
    return BeginPopup(str_id);
}

static bool BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)
{
    ImGuiWindow* window = ImGui::GetCurrentWindow();
    ImGuiWindowFlags flags = ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoResize|ImGuiWindowFlags_NoSavedSettings|ImGuiWindowFlags_ChildWindow;

    const ImVec2 content_avail = ImGui::GetContentRegionAvail();
    ImVec2 size = ImFloor(size_arg);
    if (size.x <= 0.0f)
    {
        if (size.x == 0.0f)
            flags |= ImGuiWindowFlags_ChildWindowAutoFitX;
        size.x = ImMax(content_avail.x, 4.0f) - fabsf(size.x); // Arbitrary minimum zero-ish child size of 4.0f (0.0f causing too much issues)
    }
    if (size.y <= 0.0f)
    {
        if (size.y == 0.0f)
            flags |= ImGuiWindowFlags_ChildWindowAutoFitY;
        size.y = ImMax(content_avail.y, 4.0f) - fabsf(size.y);
    }
    if (border)
        flags |= ImGuiWindowFlags_ShowBorders;
    flags |= extra_flags;

    char title[256];
    if (name)
        ImFormatString(title, IM_ARRAYSIZE(title), "%s.%s.%08X", window->Name, name, id);
    else
        ImFormatString(title, IM_ARRAYSIZE(title), "%s.%08X", window->Name, id);

    bool ret = ImGui::Begin(title, NULL, size, -1.0f, flags);

    if (!(window->Flags & ImGuiWindowFlags_ShowBorders))
        ImGui::GetCurrentWindow()->Flags &= ~ImGuiWindowFlags_ShowBorders;

    return ret;
}

bool ImGui::BeginChild(const char* str_id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    return BeginChildEx(str_id, window->GetID(str_id), size_arg, border, extra_flags);
}

bool ImGui::BeginChild(ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)
{
    return BeginChildEx(NULL, id, size_arg, border, extra_flags);
}

void ImGui::EndChild()
{
    ImGuiWindow* window = GetCurrentWindow();

    IM_ASSERT(window->Flags & ImGuiWindowFlags_ChildWindow);   // Mismatched BeginChild()/EndChild() callss
    if ((window->Flags & ImGuiWindowFlags_ComboBox) || window->BeginCount > 1)
    {
        ImGui::End();
    }
    else
    {
        // When using auto-filling child window, we don't provide full width/height to ItemSize so that it doesn't feed back into automatic size-fitting.
        ImVec2 sz = GetWindowSize();
        if (window->Flags & ImGuiWindowFlags_ChildWindowAutoFitX) // Arbitrary minimum zero-ish child size of 4.0f causes less trouble than a 0.0f
            sz.x = ImMax(4.0f, sz.x);
        if (window->Flags & ImGuiWindowFlags_ChildWindowAutoFitY)
            sz.y = ImMax(4.0f, sz.y);

        ImGui::End();

        window = GetCurrentWindow();
        ImRect bb(window->DC.CursorPos, window->DC.CursorPos + sz);
        ItemSize(sz);
        ItemAdd(bb, NULL);
    }
}

// Helper to create a child window / scrolling region that looks like a normal widget frame.
bool ImGui::BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags extra_flags)
{
    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    ImGui::PushStyleColor(ImGuiCol_ChildWindowBg, style.Colors[ImGuiCol_FrameBg]);
    ImGui::PushStyleVar(ImGuiStyleVar_ChildWindowRounding, style.FrameRounding);
    ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, style.FramePadding);
    return ImGui::BeginChild(id, size, (g.CurrentWindow->Flags & ImGuiWindowFlags_ShowBorders) ? true : false, ImGuiWindowFlags_NoMove | ImGuiWindowFlags_AlwaysUseWindowPadding | extra_flags);
}

void ImGui::EndChildFrame()
{
    ImGui::EndChild();
    ImGui::PopStyleVar(2);
    ImGui::PopStyleColor();
}

// Save and compare stack sizes on Begin()/End() to detect usage errors
static void CheckStacksSize(ImGuiWindow* window, bool write)
{
    // NOT checking: DC.ItemWidth, DC.AllowKeyboardFocus, DC.ButtonRepeat, DC.TextWrapPos (per window) to allow user to conveniently push once and not pop (they are cleared on Begin)
    ImGuiContext& g = *GImGui;
    int* p_backup = &window->DC.StackSizesBackup[0];
    { int current = window->IDStack.Size;       if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "PushID/PopID or TreeNode/TreePop Mismatch!");   p_backup++; }    // Too few or too many PopID()/TreePop()
    { int current = window->DC.GroupStack.Size; if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "BeginGroup/EndGroup Mismatch!");                p_backup++; }    // Too few or too many EndGroup()
    { int current = g.CurrentPopupStack.Size;   if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "BeginMenu/EndMenu or BeginPopup/EndPopup Mismatch"); p_backup++;}// Too few or too many EndMenu()/EndPopup()
    { int current = g.ColorModifiers.Size;      if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "PushStyleColor/PopStyleColor Mismatch!");       p_backup++; }    // Too few or too many PopStyleColor()
    { int current = g.StyleModifiers.Size;      if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "PushStyleVar/PopStyleVar Mismatch!");           p_backup++; }    // Too few or too many PopStyleVar()
    { int current = g.FontStack.Size;           if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "PushFont/PopFont Mismatch!");                   p_backup++; }    // Too few or too many PopFont()
    IM_ASSERT(p_backup == window->DC.StackSizesBackup + IM_ARRAYSIZE(window->DC.StackSizesBackup));
}

static ImVec2 FindBestPopupWindowPos(const ImVec2& base_pos, const ImVec2& size, int* last_dir, const ImRect& r_inner)
{
    const ImGuiStyle& style = GImGui->Style;

    // Clamp into visible area while not overlapping the cursor. Safety padding is optional if our popup size won't fit without it.
    ImVec2 safe_padding = style.DisplaySafeAreaPadding;
    ImRect r_outer(GetVisibleRect());
    r_outer.Reduce(ImVec2((size.x - r_outer.GetWidth() > safe_padding.x*2) ? safe_padding.x : 0.0f, (size.y - r_outer.GetHeight() > safe_padding.y*2) ? safe_padding.y : 0.0f));
    ImVec2 base_pos_clamped = ImClamp(base_pos, r_outer.Min, r_outer.Max - size);

    for (int n = (*last_dir != -1) ? -1 : 0; n < 4; n++)   // Last, Right, down, up, left. (Favor last used direction).
    {
        const int dir = (n == -1) ? *last_dir : n;
        ImRect rect(dir == 0 ? r_inner.Max.x : r_outer.Min.x, dir == 1 ? r_inner.Max.y : r_outer.Min.y, dir == 3 ? r_inner.Min.x : r_outer.Max.x, dir == 2 ? r_inner.Min.y : r_outer.Max.y);
        if (rect.GetWidth() < size.x || rect.GetHeight() < size.y)
            continue;
        *last_dir = dir;
        return ImVec2(dir == 0 ? r_inner.Max.x : dir == 3 ? r_inner.Min.x - size.x : base_pos_clamped.x, dir == 1 ? r_inner.Max.y : dir == 2 ? r_inner.Min.y - size.y : base_pos_clamped.y);
    }

    // Fallback, try to keep within display
    *last_dir = -1;
    ImVec2 pos = base_pos;
    pos.x = ImMax(ImMin(pos.x + size.x, r_outer.Max.x) - size.x, r_outer.Min.x);
    pos.y = ImMax(ImMin(pos.y + size.y, r_outer.Max.y) - size.y, r_outer.Min.y);
    return pos;
}

ImGuiWindow* ImGui::FindWindowByName(const char* name)
{
    // FIXME-OPT: Store sorted hashes -> pointers so we can do a bissection in a contiguous block
    ImGuiContext& g = *GImGui;
    ImGuiID id = ImHash(name, 0);
    for (int i = 0; i < g.Windows.Size; i++)
        if (g.Windows[i]->ID == id)
            return g.Windows[i];
    return NULL;
}

static ImGuiWindow* CreateNewWindow(const char* name, ImVec2 size, ImGuiWindowFlags flags)
{
    ImGuiContext& g = *GImGui;

    // Create window the first time
    ImGuiWindow* window = (ImGuiWindow*)ImGui::MemAlloc(sizeof(ImGuiWindow));
    IM_PLACEMENT_NEW(window) ImGuiWindow(name);
    window->Flags = flags;

    if (flags & ImGuiWindowFlags_NoSavedSettings)
    {
        // User can disable loading and saving of settings. Tooltip and child windows also don't store settings.
        window->Size = window->SizeFull = size;
    }
    else
    {
        // Retrieve settings from .ini file
        // Use SetWindowPos() or SetNextWindowPos() with the appropriate condition flag to change the initial position of a window.
        window->PosFloat = ImVec2(60, 60);
        window->Pos = ImVec2((float)(int)window->PosFloat.x, (float)(int)window->PosFloat.y);

        ImGuiIniData* settings = FindWindowSettings(name);
        if (!settings)
        {
            settings = AddWindowSettings(name);
        }
        else
        {
            window->SetWindowPosAllowFlags &= ~ImGuiSetCond_FirstUseEver;
            window->SetWindowSizeAllowFlags &= ~ImGuiSetCond_FirstUseEver;
            window->SetWindowCollapsedAllowFlags &= ~ImGuiSetCond_FirstUseEver;
        }

        if (settings->Pos.x != FLT_MAX)
        {
            window->PosFloat = settings->Pos;
            window->Pos = ImVec2((float)(int)window->PosFloat.x, (float)(int)window->PosFloat.y);
            window->Collapsed = settings->Collapsed;
        }

        if (ImLengthSqr(settings->Size) > 0.00001f && !(flags & ImGuiWindowFlags_NoResize))
            size = settings->Size;
        window->Size = window->SizeFull = size;
    }

    if ((flags & ImGuiWindowFlags_AlwaysAutoResize) != 0)
    {
        window->AutoFitFramesX = window->AutoFitFramesY = 2;
        window->AutoFitOnlyGrows = false;
    }
    else
    {
        if (window->Size.x <= 0.0f)
            window->AutoFitFramesX = 2;
        if (window->Size.y <= 0.0f)
            window->AutoFitFramesY = 2;
        window->AutoFitOnlyGrows = (window->AutoFitFramesX > 0) || (window->AutoFitFramesY > 0);
    }

    if (flags & ImGuiWindowFlags_NoBringToFrontOnFocus)
        g.Windows.insert(g.Windows.begin(), window); // Quite slow but rare and only once
    else
        g.Windows.push_back(window);
    return window;
}

static void ApplySizeFullWithConstraint(ImGuiWindow* window, ImVec2 new_size)
{
    ImGuiContext& g = *GImGui;
    if (g.SetNextWindowSizeConstraint)
    {
        // Using -1,-1 on either X/Y axis to preserve the current size.
        ImRect cr = g.SetNextWindowSizeConstraintRect;
        new_size.x = (cr.Min.x >= 0 && cr.Max.x >= 0) ? ImClamp(new_size.x, cr.Min.x, cr.Max.x) : window->SizeFull.x;
        new_size.y = (cr.Min.y >= 0 && cr.Max.y >= 0) ? ImClamp(new_size.y, cr.Min.y, cr.Max.y) : window->SizeFull.y;
        if (g.SetNextWindowSizeConstraintCallback)
        {
            ImGuiSizeConstraintCallbackData data;
            data.UserData = g.SetNextWindowSizeConstraintCallbackUserData;
            data.Pos = window->Pos;
            data.CurrentSize = window->SizeFull;
            data.DesiredSize = new_size;
            g.SetNextWindowSizeConstraintCallback(&data);
            new_size = data.DesiredSize;
        }
    }
    if (!(window->Flags & (ImGuiWindowFlags_ChildWindow | ImGuiWindowFlags_AlwaysAutoResize)))
        new_size = ImMax(new_size, g.Style.WindowMinSize);
    window->SizeFull = new_size;
}

// Push a new ImGui window to add widgets to.
// - A default window called "Debug" is automatically stacked at the beginning of every frame so you can use widgets without explicitly calling a Begin/End pair.
// - Begin/End can be called multiple times during the frame with the same window name to append content.
// - 'size_on_first_use' for a regular window denote the initial size for first-time creation (no saved data) and isn't that useful. Use SetNextWindowSize() prior to calling Begin() for more flexible window manipulation.
// - The window name is used as a unique identifier to preserve window information across frames (and save rudimentary information to the .ini file).
//   You can use the "##" or "###" markers to use the same label with different id, or same id with different label. See documentation at the top of this file.
// - Return false when window is collapsed, so you can early out in your code. You always need to call ImGui::End() even if false is returned.
// - Passing 'bool* p_open' displays a Close button on the upper-right corner of the window, the pointed value will be set to false when the button is pressed.
// - Passing non-zero 'size' is roughly equivalent to calling SetNextWindowSize(size, ImGuiSetCond_FirstUseEver) prior to calling Begin().
bool ImGui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)
{
    return ImGui::Begin(name, p_open, ImVec2(0.f, 0.f), -1.0f, flags);
}

bool ImGui::Begin(const char* name, bool* p_open, const ImVec2& size_on_first_use, float bg_alpha, ImGuiWindowFlags flags)
{
    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    IM_ASSERT(name != NULL);                        // Window name required
    IM_ASSERT(g.Initialized);                       // Forgot to call ImGui::NewFrame()
    IM_ASSERT(g.FrameCountEnded != g.FrameCount);   // Called ImGui::Render() or ImGui::EndFrame() and haven't called ImGui::NewFrame() again yet

    if (flags & ImGuiWindowFlags_NoInputs)
        flags |= ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoResize;

    // Find or create
    bool window_is_new = false;
    ImGuiWindow* window = FindWindowByName(name);
    if (!window)
    {
        window = CreateNewWindow(name, size_on_first_use, flags);
        window_is_new = true;
    }

    const int current_frame = ImGui::GetFrameCount();
    const bool first_begin_of_the_frame = (window->LastFrameActive != current_frame);
    if (first_begin_of_the_frame)
        window->Flags = (ImGuiWindowFlags)flags;
    else
        flags = window->Flags;

    // Add to stack
    ImGuiWindow* parent_window = !g.CurrentWindowStack.empty() ? g.CurrentWindowStack.back() : NULL;
    g.CurrentWindowStack.push_back(window);
    SetCurrentWindow(window);
    CheckStacksSize(window, true);
    IM_ASSERT(parent_window != NULL || !(flags & ImGuiWindowFlags_ChildWindow));

    bool window_was_active = (window->LastFrameActive == current_frame - 1);   // Not using !WasActive because the implicit "Debug" window would always toggle off->on
    if (flags & ImGuiWindowFlags_Popup)
    {
        ImGuiPopupRef& popup_ref = g.OpenPopupStack[g.CurrentPopupStack.Size];
        window_was_active &= (window->PopupId == popup_ref.PopupId);
        window_was_active &= (window == popup_ref.Window);
        popup_ref.Window = window;
        g.CurrentPopupStack.push_back(popup_ref);
        window->PopupId = popup_ref.PopupId;
    }

    const bool window_appearing_after_being_hidden = (window->HiddenFrames == 1);

    // Process SetNextWindow***() calls
    bool window_pos_set_by_api = false, window_size_set_by_api = false;
    if (g.SetNextWindowPosCond)
    {
        const ImVec2 backup_cursor_pos = window->DC.CursorPos;                  // FIXME: not sure of the exact reason of this saving/restore anymore :( need to look into that.
        if (!window_was_active || window_appearing_after_being_hidden) window->SetWindowPosAllowFlags |= ImGuiSetCond_Appearing;
        window_pos_set_by_api = (window->SetWindowPosAllowFlags & g.SetNextWindowPosCond) != 0;
        if (window_pos_set_by_api && ImLengthSqr(g.SetNextWindowPosVal - ImVec2(-FLT_MAX,-FLT_MAX)) < 0.001f)
        {
            window->SetWindowPosCenterWanted = true;                            // May be processed on the next frame if this is our first frame and we are measuring size
            window->SetWindowPosAllowFlags &= ~(ImGuiSetCond_Once | ImGuiSetCond_FirstUseEver | ImGuiSetCond_Appearing);
        }
        else
        {
            SetWindowPos(window, g.SetNextWindowPosVal, g.SetNextWindowPosCond);
        }
        window->DC.CursorPos = backup_cursor_pos;
        g.SetNextWindowPosCond = 0;
    }
    if (g.SetNextWindowSizeCond)
    {
        if (!window_was_active || window_appearing_after_being_hidden) window->SetWindowSizeAllowFlags |= ImGuiSetCond_Appearing;
        window_size_set_by_api = (window->SetWindowSizeAllowFlags & g.SetNextWindowSizeCond) != 0;
        SetWindowSize(window, g.SetNextWindowSizeVal, g.SetNextWindowSizeCond);
        g.SetNextWindowSizeCond = 0;
    }
    if (g.SetNextWindowContentSizeCond)
    {
        window->SizeContentsExplicit = g.SetNextWindowContentSizeVal;
        g.SetNextWindowContentSizeCond = 0;
    }
    else if (first_begin_of_the_frame)
    {
        window->SizeContentsExplicit = ImVec2(0.0f, 0.0f);
    }
    if (g.SetNextWindowCollapsedCond)
    {
        if (!window_was_active || window_appearing_after_being_hidden) window->SetWindowCollapsedAllowFlags |= ImGuiSetCond_Appearing;
        SetWindowCollapsed(window, g.SetNextWindowCollapsedVal, g.SetNextWindowCollapsedCond);
        g.SetNextWindowCollapsedCond = 0;
    }
    if (g.SetNextWindowFocus)
    {
        ImGui::SetWindowFocus();
        g.SetNextWindowFocus = false;
    }

    // Update known root window (if we are a child window, otherwise window == window->RootWindow)
    int root_idx, root_non_popup_idx;
    for (root_idx = g.CurrentWindowStack.Size - 1; root_idx > 0; root_idx--)
        if (!(g.CurrentWindowStack[root_idx]->Flags & ImGuiWindowFlags_ChildWindow))
            break;
    for (root_non_popup_idx = root_idx; root_non_popup_idx > 0; root_non_popup_idx--)
        if (!(g.CurrentWindowStack[root_non_popup_idx]->Flags & (ImGuiWindowFlags_ChildWindow | ImGuiWindowFlags_Popup)))
            break;
    window->ParentWindow = parent_window;
    window->RootWindow = g.CurrentWindowStack[root_idx];
    window->RootNonPopupWindow = g.CurrentWindowStack[root_non_popup_idx];      // This is merely for displaying the TitleBgActive color.

    // When reusing window again multiple times a frame, just append content (don't need to setup again)
    if (first_begin_of_the_frame)
    {
        window->Active = true;
        window->IndexWithinParent = 0;
        window->BeginCount = 0;
        window->ClipRect = ImVec4(-FLT_MAX,-FLT_MAX,+FLT_MAX,+FLT_MAX);
        window->LastFrameActive = current_frame;
        window->IDStack.resize(1);

        // Clear draw list, setup texture, outer clipping rectangle
        window->DrawList->Clear();
        window->DrawList->PushTextureID(g.Font->ContainerAtlas->TexID);
        ImRect fullscreen_rect(GetVisibleRect());
        if ((flags & ImGuiWindowFlags_ChildWindow) && !(flags & (ImGuiWindowFlags_ComboBox|ImGuiWindowFlags_Popup)))
            PushClipRect(parent_window->ClipRect.Min, parent_window->ClipRect.Max, true);
        else
            PushClipRect(fullscreen_rect.Min, fullscreen_rect.Max, true);

        if (!window_was_active)
        {
            // Popup first latch mouse position, will position itself when it appears next frame
            window->AutoPosLastDirection = -1;
            if ((flags & ImGuiWindowFlags_Popup) != 0 && !window_pos_set_by_api)
                window->PosFloat = g.IO.MousePos;
        }

        // Collapse window by double-clicking on title bar
        // At this point we don't have a clipping rectangle setup yet, so we can use the title bar area for hit detection and drawing
        if (!(flags & ImGuiWindowFlags_NoTitleBar) && !(flags & ImGuiWindowFlags_NoCollapse))
        {
            ImRect title_bar_rect = window->TitleBarRect();
            if (g.HoveredWindow == window && IsMouseHoveringRect(title_bar_rect.Min, title_bar_rect.Max) && g.IO.MouseDoubleClicked[0])
            {
                window->Collapsed = !window->Collapsed;
                if (!(flags & ImGuiWindowFlags_NoSavedSettings))
                    MarkIniSettingsDirty();
                FocusWindow(window);
            }
        }
        else
        {
            window->Collapsed = false;
        }

        // SIZE

        // Save contents size from last frame for auto-fitting (unless explicitly specified)
        window->SizeContents.x = (float)(int)((window->SizeContentsExplicit.x != 0.0f) ? window->SizeContentsExplicit.x : ((window_is_new ? 0.0f : window->DC.CursorMaxPos.x - window->Pos.x) + window->Scroll.x));
        window->SizeContents.y = (float)(int)((window->SizeContentsExplicit.y != 0.0f) ? window->SizeContentsExplicit.y : ((window_is_new ? 0.0f : window->DC.CursorMaxPos.y - window->Pos.y) + window->Scroll.y));

        // Hide popup/tooltip window when first appearing while we measure size (because we recycle them)
        if (window->HiddenFrames > 0)
            window->HiddenFrames--;
        if ((flags & (ImGuiWindowFlags_Popup | ImGuiWindowFlags_Tooltip)) != 0 && !window_was_active)
        {
            window->HiddenFrames = 1;
            if (flags & ImGuiWindowFlags_AlwaysAutoResize)
            {
                if (!window_size_set_by_api)
                    window->Size = window->SizeFull = ImVec2(0.f, 0.f);
                window->SizeContents = ImVec2(0.f, 0.f);
            }
        }

        // Lock window padding so that altering the ShowBorders flag for children doesn't have side-effects.
        window->WindowPadding = ((flags & ImGuiWindowFlags_ChildWindow) && !(flags & (ImGuiWindowFlags_AlwaysUseWindowPadding | ImGuiWindowFlags_ShowBorders | ImGuiWindowFlags_ComboBox | ImGuiWindowFlags_Popup))) ? ImVec2(0,0) : style.WindowPadding;

        // Calculate auto-fit size
        ImVec2 size_auto_fit;
        if ((flags & ImGuiWindowFlags_Tooltip) != 0)
        {
            // Tooltip always resize. We keep the spacing symmetric on both axises for aesthetic purpose.
            size_auto_fit = window->SizeContents + window->WindowPadding - ImVec2(0.0f, style.ItemSpacing.y);
        }
        else
        {
            size_auto_fit = ImClamp(window->SizeContents + window->WindowPadding, style.WindowMinSize, ImMax(style.WindowMinSize, g.IO.DisplaySize - g.Style.DisplaySafeAreaPadding));

            // Handling case of auto fit window not fitting in screen on one axis, we are growing auto fit size on the other axis to compensate for expected scrollbar. FIXME: Might turn bigger than DisplaySize-WindowPadding.
            if (size_auto_fit.x < window->SizeContents.x && !(flags & ImGuiWindowFlags_NoScrollbar) && (flags & ImGuiWindowFlags_HorizontalScrollbar))
                size_auto_fit.y += style.ScrollbarSize;
            if (size_auto_fit.y < window->SizeContents.y && !(flags & ImGuiWindowFlags_NoScrollbar))
                size_auto_fit.x += style.ScrollbarSize;
            size_auto_fit.y = ImMax(size_auto_fit.y - style.ItemSpacing.y, 0.0f);
        }

        // Handle automatic resize
        if (window->Collapsed)
        {
            // We still process initial auto-fit on collapsed windows to get a window width,
            // But otherwise we don't honor ImGuiWindowFlags_AlwaysAutoResize when collapsed.
            if (window->AutoFitFramesX > 0)
                window->SizeFull.x = window->AutoFitOnlyGrows ? ImMax(window->SizeFull.x, size_auto_fit.x) : size_auto_fit.x;
            if (window->AutoFitFramesY > 0)
                window->SizeFull.y = window->AutoFitOnlyGrows ? ImMax(window->SizeFull.y, size_auto_fit.y) : size_auto_fit.y;
        }
        else
        {
            if ((flags & ImGuiWindowFlags_AlwaysAutoResize) && !window_size_set_by_api)
            {
                window->SizeFull = size_auto_fit;
            }
            else if ((window->AutoFitFramesX > 0 || window->AutoFitFramesY > 0) && !window_size_set_by_api)
            {
                // Auto-fit only grows during the first few frames
                if (window->AutoFitFramesX > 0)
                    window->SizeFull.x = window->AutoFitOnlyGrows ? ImMax(window->SizeFull.x, size_auto_fit.x) : size_auto_fit.x;
                if (window->AutoFitFramesY > 0)
                    window->SizeFull.y = window->AutoFitOnlyGrows ? ImMax(window->SizeFull.y, size_auto_fit.y) : size_auto_fit.y;
                if (!(flags & ImGuiWindowFlags_NoSavedSettings))
                    MarkIniSettingsDirty();
            }
        }

        // Apply minimum/maximum window size constraints and final size
        ApplySizeFullWithConstraint(window, window->SizeFull);
        window->Size = window->Collapsed ? window->TitleBarRect().GetSize() : window->SizeFull;
        
        // POSITION

        // Position child window
        if (flags & ImGuiWindowFlags_ChildWindow)
        {
            window->IndexWithinParent = parent_window->DC.ChildWindows.Size;
            parent_window->DC.ChildWindows.push_back(window);
        }
        if ((flags & ImGuiWindowFlags_ChildWindow) && !(flags & ImGuiWindowFlags_Popup))
        {
            window->Pos = window->PosFloat = parent_window->DC.CursorPos;
            window->Size = window->SizeFull = size_on_first_use; // NB: argument name 'size_on_first_use' misleading here, it's really just 'size' as provided by user passed via BeginChild()->Begin().
        }

        bool window_pos_center = false;
        window_pos_center |= (window->SetWindowPosCenterWanted && window->HiddenFrames == 0);
        window_pos_center |= ((flags & ImGuiWindowFlags_Modal) && !window_pos_set_by_api && window_appearing_after_being_hidden);
        if (window_pos_center)
        {
            // Center (any sort of window)
            SetWindowPos(window, ImMax(style.DisplaySafeAreaPadding, fullscreen_rect.GetCenter() - window->SizeFull * 0.5f), 0);
        }
        else if (flags & ImGuiWindowFlags_ChildMenu)
        {
            // Child menus typically request _any_ position within the parent menu item, and then our FindBestPopupWindowPos() function will move the new menu outside the parent bounds.
            // This is how we end up with child menus appearing (most-commonly) on the right of the parent menu.
            IM_ASSERT(window_pos_set_by_api);
            float horizontal_overlap = style.ItemSpacing.x; // We want some overlap to convey the relative depth of each popup (currently the amount of overlap it is hard-coded to style.ItemSpacing.x, may need to introduce another style value).
            ImRect rect_to_avoid;
            if (parent_window->DC.MenuBarAppending)
                rect_to_avoid = ImRect(-FLT_MAX, parent_window->Pos.y + parent_window->TitleBarHeight(), FLT_MAX, parent_window->Pos.y + parent_window->TitleBarHeight() + parent_window->MenuBarHeight());
            else
                rect_to_avoid = ImRect(parent_window->Pos.x + horizontal_overlap, -FLT_MAX, parent_window->Pos.x + parent_window->Size.x - horizontal_overlap - parent_window->ScrollbarSizes.x, FLT_MAX);
            window->PosFloat = FindBestPopupWindowPos(window->PosFloat, window->Size, &window->AutoPosLastDirection, rect_to_avoid);
        }
        else if ((flags & ImGuiWindowFlags_Popup) != 0 && !window_pos_set_by_api && window_appearing_after_being_hidden)
        {
            ImRect rect_to_avoid(window->PosFloat.x - 1, window->PosFloat.y - 1, window->PosFloat.x + 1, window->PosFloat.y + 1);
            window->PosFloat = FindBestPopupWindowPos(window->PosFloat, window->Size, &window->AutoPosLastDirection, rect_to_avoid);
        }

        // Position tooltip (always follows mouse)
        if ((flags & ImGuiWindowFlags_Tooltip) != 0 && !window_pos_set_by_api)
        {
            ImRect rect_to_avoid(g.IO.MousePos.x - 16, g.IO.MousePos.y - 8, g.IO.MousePos.x + 24, g.IO.MousePos.y + 24); // FIXME: Completely hard-coded. Perhaps center on cursor hit-point instead?
            window->PosFloat = FindBestPopupWindowPos(g.IO.MousePos, window->Size, &window->AutoPosLastDirection, rect_to_avoid);
            if (window->AutoPosLastDirection == -1)
                window->PosFloat = g.IO.MousePos + ImVec2(2,2); // If there's not enough room, for tooltip we prefer avoiding the cursor at all cost even if it means that part of the tooltip won't be visible.
        }

        // Clamp position so it stays visible
        if (!(flags & ImGuiWindowFlags_ChildWindow) && !(flags & ImGuiWindowFlags_Tooltip))
        {
            if (!window_pos_set_by_api && window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0 && g.IO.DisplaySize.x > 0.0f && g.IO.DisplaySize.y > 0.0f) // Ignore zero-sized display explicitly to avoid losing positions if a window manager reports zero-sized window when initializing or minimizing.
            {
                ImVec2 padding = ImMax(style.DisplayWindowPadding, style.DisplaySafeAreaPadding);
                window->PosFloat = ImMax(window->PosFloat + window->Size, padding) - window->Size;
                window->PosFloat = ImMin(window->PosFloat, g.IO.DisplaySize - padding);
            }
        }
        window->Pos = ImVec2((float)(int)window->PosFloat.x, (float)(int)window->PosFloat.y);

        // Default item width. Make it proportional to window size if window manually resizes
        if (window->Size.x > 0.0f && !(flags & ImGuiWindowFlags_Tooltip) && !(flags & ImGuiWindowFlags_AlwaysAutoResize))
            window->ItemWidthDefault = (float)(int)(window->Size.x * 0.65f);
        else
            window->ItemWidthDefault = (float)(int)(g.FontSize * 16.0f);

        // Prepare for focus requests
        window->FocusIdxAllRequestCurrent = (window->FocusIdxAllRequestNext == INT_MAX || window->FocusIdxAllCounter == -1) ? INT_MAX : (window->FocusIdxAllRequestNext + (window->FocusIdxAllCounter+1)) % (window->FocusIdxAllCounter+1);
        window->FocusIdxTabRequestCurrent = (window->FocusIdxTabRequestNext == INT_MAX || window->FocusIdxTabCounter == -1) ? INT_MAX : (window->FocusIdxTabRequestNext + (window->FocusIdxTabCounter+1)) % (window->FocusIdxTabCounter+1);
        window->FocusIdxAllCounter = window->FocusIdxTabCounter = -1;
        window->FocusIdxAllRequestNext = window->FocusIdxTabRequestNext = INT_MAX;

        // Apply scrolling
        if (window->ScrollTarget.x < FLT_MAX)
        {
            window->Scroll.x = window->ScrollTarget.x;
            window->ScrollTarget.x = FLT_MAX;
        }
        if (window->ScrollTarget.y < FLT_MAX)
        {
            float center_ratio = window->ScrollTargetCenterRatio.y;
            window->Scroll.y = window->ScrollTarget.y - ((1.0f - center_ratio) * (window->TitleBarHeight() + window->MenuBarHeight())) - (center_ratio * window->SizeFull.y);
            window->ScrollTarget.y = FLT_MAX;
        }
        window->Scroll = ImMax(window->Scroll, ImVec2(0.0f, 0.0f));
        if (!window->Collapsed && !window->SkipItems)
            window->Scroll = ImMin(window->Scroll, ImMax(ImVec2(0.0f, 0.0f), window->SizeContents - window->SizeFull + window->ScrollbarSizes));

        // Modal window darkens what is behind them
        if ((flags & ImGuiWindowFlags_Modal) != 0 && window == GetFrontMostModalRootWindow())
            window->DrawList->AddRectFilled(fullscreen_rect.Min, fullscreen_rect.Max, GetColorU32(ImGuiCol_ModalWindowDarkening, g.ModalWindowDarkeningRatio));

        // Draw window + handle manual resize
        ImRect title_bar_rect = window->TitleBarRect();
        const float window_rounding = (flags & ImGuiWindowFlags_ChildWindow) ? style.ChildWindowRounding : style.WindowRounding;
        if (window->Collapsed)
        {
            // Draw title bar only
            RenderFrame(title_bar_rect.GetTL(), title_bar_rect.GetBR(),  GetColorU32(ImGuiCol_TitleBgCollapsed), true, window_rounding);
        }
        else
        {
            ImU32 resize_col = 0;
            const float resize_corner_size = ImMax(g.FontSize * 1.35f, window_rounding + 1.0f + g.FontSize * 0.2f);
            if (!(flags & ImGuiWindowFlags_AlwaysAutoResize) && window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0 && !(flags & ImGuiWindowFlags_NoResize))
            {
                // Manual resize
                const ImVec2 br = window->Rect().GetBR();
                const ImRect resize_rect(br - ImVec2(resize_corner_size * 0.75f, resize_corner_size * 0.75f), br);
                const ImGuiID resize_id = window->GetID("#RESIZE");
                bool hovered, held;
                ButtonBehavior(resize_rect, resize_id, &hovered, &held, ImGuiButtonFlags_FlattenChilds);
                resize_col = GetColorU32(held ? ImGuiCol_ResizeGripActive : hovered ? ImGuiCol_ResizeGripHovered : ImGuiCol_ResizeGrip);

                if (hovered || held)
                    g.MouseCursor = ImGuiMouseCursor_ResizeNWSE;

                if (g.HoveredWindow == window && held && g.IO.MouseDoubleClicked[0])
                {
                    // Manual auto-fit when double-clicking
                    ApplySizeFullWithConstraint(window, size_auto_fit);
                    if (!(flags & ImGuiWindowFlags_NoSavedSettings))
                        MarkIniSettingsDirty();
                    ClearActiveID();
                }
                else if (held)
                {
                    // We don't use an incremental MouseDelta but rather compute an absolute target size based on mouse position
                    ApplySizeFullWithConstraint(window, (g.IO.MousePos - g.ActiveIdClickOffset + resize_rect.GetSize()) - window->Pos);
                    if (!(flags & ImGuiWindowFlags_NoSavedSettings))
                        MarkIniSettingsDirty();
                }

                window->Size = window->SizeFull;
                title_bar_rect = window->TitleBarRect();
            }

            // Scrollbars
            window->ScrollbarY = (flags & ImGuiWindowFlags_AlwaysVerticalScrollbar) || ((window->SizeContents.y > window->Size.y + style.ItemSpacing.y) && !(flags & ImGuiWindowFlags_NoScrollbar));
            window->ScrollbarX = (flags & ImGuiWindowFlags_AlwaysHorizontalScrollbar) || ((window->SizeContents.x > window->Size.x - (window->ScrollbarY ? style.ScrollbarSize : 0.0f) - window->WindowPadding.x) && !(flags & ImGuiWindowFlags_NoScrollbar) && (flags & ImGuiWindowFlags_HorizontalScrollbar));
            window->ScrollbarSizes = ImVec2(window->ScrollbarY ? style.ScrollbarSize : 0.0f, window->ScrollbarX ? style.ScrollbarSize : 0.0f);
            window->BorderSize = (flags & ImGuiWindowFlags_ShowBorders) ? 1.0f : 0.0f;

            // Window background, Default Alpha
            ImGuiCol bg_color_idx = ImGuiCol_WindowBg;
            if ((flags & ImGuiWindowFlags_ComboBox) != 0)
                bg_color_idx = ImGuiCol_ComboBg;
            else if ((flags & ImGuiWindowFlags_Tooltip) != 0 || (flags & ImGuiWindowFlags_Popup) != 0)
                bg_color_idx = ImGuiCol_PopupBg;
            else if ((flags & ImGuiWindowFlags_ChildWindow) != 0)
                bg_color_idx = ImGuiCol_ChildWindowBg;
            ImVec4 bg_color = style.Colors[bg_color_idx];
            if (bg_alpha >= 0.0f)
                bg_color.w = bg_alpha;
            bg_color.w *= style.Alpha;
            if (bg_color.w > 0.0f)
                window->DrawList->AddRectFilled(window->Pos+ImVec2(0,window->TitleBarHeight()), window->Pos+window->Size, ColorConvertFloat4ToU32(bg_color), window_rounding, (flags & ImGuiWindowFlags_NoTitleBar) ? ImGuiCorner_All : ImGuiCorner_BottomLeft|ImGuiCorner_BottomRight);

            // Title bar
            if (!(flags & ImGuiWindowFlags_NoTitleBar))
                window->DrawList->AddRectFilled(title_bar_rect.GetTL(), title_bar_rect.GetBR(), GetColorU32((g.FocusedWindow && window->RootNonPopupWindow == g.FocusedWindow->RootNonPopupWindow) ? ImGuiCol_TitleBgActive : ImGuiCol_TitleBg), window_rounding, ImGuiCorner_TopLeft|ImGuiCorner_TopRight);

            // Menu bar
            if (flags & ImGuiWindowFlags_MenuBar)
            {
                ImRect menu_bar_rect = window->MenuBarRect();
                if (flags & ImGuiWindowFlags_ShowBorders)
                    window->DrawList->AddLine(menu_bar_rect.GetBL(), menu_bar_rect.GetBR(), GetColorU32(ImGuiCol_Border));
                window->DrawList->AddRectFilled(menu_bar_rect.GetTL(), menu_bar_rect.GetBR(), GetColorU32(ImGuiCol_MenuBarBg), (flags & ImGuiWindowFlags_NoTitleBar) ? window_rounding : 0.0f, ImGuiCorner_TopLeft|ImGuiCorner_TopRight);
            }

            // Scrollbars
            if (window->ScrollbarX)
                Scrollbar(window, true);
            if (window->ScrollbarY)
                Scrollbar(window, false);

            // Render resize grip
            // (after the input handling so we don't have a frame of latency)
            if (!(flags & ImGuiWindowFlags_NoResize))
            {
                const ImVec2 br = window->Rect().GetBR();
                window->DrawList->PathLineTo(br + ImVec2(-resize_corner_size, -window->BorderSize));
                window->DrawList->PathLineTo(br + ImVec2(-window->BorderSize, -resize_corner_size));
                window->DrawList->PathArcToFast(ImVec2(br.x - window_rounding - window->BorderSize, br.y - window_rounding - window->BorderSize), window_rounding, 0, 3);
                window->DrawList->PathFillConvex(resize_col);
            }

            // Borders
            if (flags & ImGuiWindowFlags_ShowBorders)
            {
                window->DrawList->AddRect(window->Pos+ImVec2(1,1), window->Pos+window->Size+ImVec2(1,1), GetColorU32(ImGuiCol_BorderShadow), window_rounding);
                window->DrawList->AddRect(window->Pos, window->Pos+window->Size, GetColorU32(ImGuiCol_Border), window_rounding);
                if (!(flags & ImGuiWindowFlags_NoTitleBar))
                    window->DrawList->AddLine(title_bar_rect.GetBL()+ImVec2(1,0), title_bar_rect.GetBR()-ImVec2(1,0), GetColorU32(ImGuiCol_Border));
            }
        }

        // Update ContentsRegionMax. All the variable it depends on are set above in this function.
        window->ContentsRegionRect.Min.x = -window->Scroll.x + window->WindowPadding.x;
        window->ContentsRegionRect.Min.y = -window->Scroll.y + window->WindowPadding.y + window->TitleBarHeight() + window->MenuBarHeight();
        window->ContentsRegionRect.Max.x = -window->Scroll.x - window->WindowPadding.x + (window->SizeContentsExplicit.x != 0.0f ? window->SizeContentsExplicit.x : (window->Size.x - window->ScrollbarSizes.x)); 
        window->ContentsRegionRect.Max.y = -window->Scroll.y - window->WindowPadding.y + (window->SizeContentsExplicit.y != 0.0f ? window->SizeContentsExplicit.y : (window->Size.y - window->ScrollbarSizes.y)); 

        // Setup drawing context
        window->DC.IndentX = 0.0f + window->WindowPadding.x - window->Scroll.x;
        window->DC.GroupOffsetX = 0.0f;
        window->DC.ColumnsOffsetX = 0.0f;
        window->DC.CursorStartPos = window->Pos + ImVec2(window->DC.IndentX + window->DC.ColumnsOffsetX, window->TitleBarHeight() + window->MenuBarHeight() + window->WindowPadding.y - window->Scroll.y);
        window->DC.CursorPos = window->DC.CursorStartPos;
        window->DC.CursorPosPrevLine = window->DC.CursorPos;
        window->DC.CursorMaxPos = window->DC.CursorStartPos;
        window->DC.CurrentLineHeight = window->DC.PrevLineHeight = 0.0f;
        window->DC.CurrentLineTextBaseOffset = window->DC.PrevLineTextBaseOffset = 0.0f;
        window->DC.MenuBarAppending = false;
        window->DC.MenuBarOffsetX = ImMax(window->WindowPadding.x, style.ItemSpacing.x);
        window->DC.LogLinePosY = window->DC.CursorPos.y - 9999.0f;
        window->DC.ChildWindows.resize(0);
        window->DC.LayoutType = ImGuiLayoutType_Vertical;
        window->DC.ItemWidth = window->ItemWidthDefault;
        window->DC.TextWrapPos = -1.0f; // disabled
        window->DC.AllowKeyboardFocus = true;
        window->DC.ButtonRepeat = false;
        window->DC.ItemWidthStack.resize(0);
        window->DC.AllowKeyboardFocusStack.resize(0);
        window->DC.ButtonRepeatStack.resize(0);
        window->DC.TextWrapPosStack.resize(0);
        window->DC.ColumnsCurrent = 0;
        window->DC.ColumnsCount = 1;
        window->DC.ColumnsStartPosY = window->DC.CursorPos.y;
        window->DC.ColumnsCellMinY = window->DC.ColumnsCellMaxY = window->DC.ColumnsStartPosY;
        window->DC.TreeDepth = 0;
        window->DC.StateStorage = &window->StateStorage;
        window->DC.GroupStack.resize(0);
        window->DC.ColorEditMode = ImGuiColorEditMode_UserSelect;
        window->MenuColumns.Update(3, style.ItemSpacing.x, !window_was_active);

        if (window->AutoFitFramesX > 0)
            window->AutoFitFramesX--;
        if (window->AutoFitFramesY > 0)
            window->AutoFitFramesY--;

        // New windows appears in front (we need to do that AFTER setting DC.CursorStartPos so our initial navigation reference rectangle can start around there)
        if (!window_was_active && !(flags & ImGuiWindowFlags_NoFocusOnAppearing))
            if (!(flags & (ImGuiWindowFlags_ChildWindow|ImGuiWindowFlags_Tooltip)) || (flags & ImGuiWindowFlags_Popup))
                FocusWindow(window);

        // Title bar
        if (!(flags & ImGuiWindowFlags_NoTitleBar))
        {
            if (p_open != NULL)
            {
                const float pad = 2.0f;
                const float rad = (window->TitleBarHeight() - pad*2.0f) * 0.5f;
                if (CloseButton(window->GetID("#CLOSE"), window->Rect().GetTR() + ImVec2(-pad - rad, pad + rad), rad))
                    *p_open = false;
            }

            const ImVec2 text_size = CalcTextSize(name, NULL, true);
            if (!(flags & ImGuiWindowFlags_NoCollapse))
                RenderCollapseTriangle(window->Pos + style.FramePadding, !window->Collapsed, 1.0f);

            ImVec2 text_min = window->Pos;
            ImVec2 text_max = window->Pos + ImVec2(window->Size.x, style.FramePadding.y*2 + text_size.y);
            ImRect clip_rect;
            clip_rect.Max = ImVec2(window->Pos.x + window->Size.x - (p_open ? title_bar_rect.GetHeight() - 3 : style.FramePadding.x), text_max.y); // Match the size of CloseWindowButton()
            float pad_left = (flags & ImGuiWindowFlags_NoCollapse) == 0 ? (style.FramePadding.x + g.FontSize + style.ItemInnerSpacing.x) : style.FramePadding.x;
            float pad_right = (p_open != NULL) ? (style.FramePadding.x + g.FontSize + style.ItemInnerSpacing.x) : style.FramePadding.x;
            if (style.WindowTitleAlign.x > 0.0f) pad_right = ImLerp(pad_right, pad_left, style.WindowTitleAlign.x);
            text_min.x += pad_left;
            text_max.x -= pad_right;
            clip_rect.Min = ImVec2(text_min.x, window->Pos.y);
            RenderTextClipped(text_min, text_max, name, NULL, &text_size, style.WindowTitleAlign, &clip_rect);
        }

        // Save clipped aabb so we can access it in constant-time in FindHoveredWindow()
        window->WindowRectClipped = window->Rect();
        window->WindowRectClipped.Clip(window->ClipRect);

        // Pressing CTRL+C while holding on a window copy its content to the clipboard
        // This works but 1. doesn't handle multiple Begin/End pairs, 2. recursing into another Begin/End pair - so we need to work that out and add better logging scope.
        // Maybe we can support CTRL+C on every element?
        /*
        if (g.ActiveId == move_id)
            if (g.IO.KeyCtrl && IsKeyPressedMap(ImGuiKey_C))
                ImGui::LogToClipboard();
        */
    }

    // Inner clipping rectangle
    // We set this up after processing the resize grip so that our clip rectangle doesn't lag by a frame
    // Note that if our window is collapsed we will end up with a null clipping rectangle which is the correct behavior.
    const ImRect title_bar_rect = window->TitleBarRect();
    const float border_size = window->BorderSize;
    ImRect clip_rect; // Force round to ensure that e.g. (int)(max.x-min.x) in user's render code produce correct result.
    clip_rect.Min.x = ImFloor(0.5f + title_bar_rect.Min.x + ImMax(border_size, ImFloor(window->WindowPadding.x*0.5f)));
    clip_rect.Min.y = ImFloor(0.5f + title_bar_rect.Max.y + window->MenuBarHeight() + border_size);
    clip_rect.Max.x = ImFloor(0.5f + window->Pos.x + window->Size.x - window->ScrollbarSizes.x - ImMax(border_size, ImFloor(window->WindowPadding.x*0.5f)));
    clip_rect.Max.y = ImFloor(0.5f + window->Pos.y + window->Size.y - window->ScrollbarSizes.y - border_size);
    PushClipRect(clip_rect.Min, clip_rect.Max, true);

    // Clear 'accessed' flag last thing
    if (first_begin_of_the_frame)
        window->Accessed = false;
    window->BeginCount++;
    g.SetNextWindowSizeConstraint = false;

    // Child window can be out of sight and have "negative" clip windows.
    // Mark them as collapsed so commands are skipped earlier (we can't manually collapse because they have no title bar).
    if (flags & ImGuiWindowFlags_ChildWindow)
    {
        IM_ASSERT((flags & ImGuiWindowFlags_NoTitleBar) != 0);
        window->Collapsed = parent_window && parent_window->Collapsed;

        if (!(flags & ImGuiWindowFlags_AlwaysAutoResize) && window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0)
            window->Collapsed |= (window->WindowRectClipped.Min.x >= window->WindowRectClipped.Max.x || window->WindowRectClipped.Min.y >= window->WindowRectClipped.Max.y);

        // We also hide the window from rendering because we've already added its border to the command list.
        // (we could perform the check earlier in the function but it is simpler at this point)
        if (window->Collapsed)
            window->Active = false;
    }
    if (style.Alpha <= 0.0f)
        window->Active = false;

    // Return false if we don't intend to display anything to allow user to perform an early out optimization
    window->SkipItems = (window->Collapsed || !window->Active) && window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0;
    return !window->SkipItems;
}

void ImGui::End()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    if (window->DC.ColumnsCount != 1) // close columns set if any is open
        Columns(1, "#CLOSECOLUMNS");
    PopClipRect();   // inner window clip rectangle

    // Stop logging
    if (!(window->Flags & ImGuiWindowFlags_ChildWindow))    // FIXME: add more options for scope of logging
        LogFinish();

    // Pop
    // NB: we don't clear 'window->RootWindow'. The pointer is allowed to live until the next call to Begin().
    g.CurrentWindowStack.pop_back();
    if (window->Flags & ImGuiWindowFlags_Popup)
        g.CurrentPopupStack.pop_back();
    CheckStacksSize(window, false);
    SetCurrentWindow(g.CurrentWindowStack.empty() ? NULL : g.CurrentWindowStack.back());
}

// Vertical scrollbar
// The entire piece of code below is rather confusing because:
// - We handle absolute seeking (when first clicking outside the grab) and relative manipulation (afterward or when clicking inside the grab)
// - We store values as normalized ratio and in a form that allows the window content to change while we are holding on a scrollbar
// - We handle both horizontal and vertical scrollbars, which makes the terminology not ideal.
static void Scrollbar(ImGuiWindow* window, bool horizontal)
{
    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(horizontal ? "#SCROLLX" : "#SCROLLY");

    // Render background
    bool other_scrollbar = (horizontal ? window->ScrollbarY : window->ScrollbarX);
    float other_scrollbar_size_w = other_scrollbar ? style.ScrollbarSize : 0.0f;
    const ImRect window_rect = window->Rect();
    const float border_size = window->BorderSize;
    ImRect bb = horizontal
        ? ImRect(window->Pos.x + border_size, window_rect.Max.y - style.ScrollbarSize, window_rect.Max.x - other_scrollbar_size_w - border_size, window_rect.Max.y - border_size)
        : ImRect(window_rect.Max.x - style.ScrollbarSize, window->Pos.y + border_size, window_rect.Max.x - border_size, window_rect.Max.y - other_scrollbar_size_w - border_size);
    if (!horizontal)
        bb.Min.y += window->TitleBarHeight() + ((window->Flags & ImGuiWindowFlags_MenuBar) ? window->MenuBarHeight() : 0.0f);
    if (bb.GetWidth() <= 0.0f || bb.GetHeight() <= 0.0f)
        return;

    float window_rounding = (window->Flags & ImGuiWindowFlags_ChildWindow) ? style.ChildWindowRounding : style.WindowRounding;
    int window_rounding_corners;
    if (horizontal)
        window_rounding_corners = ImGuiCorner_BottomLeft | (other_scrollbar ? 0 : ImGuiCorner_BottomRight);
    else
        window_rounding_corners = (((window->Flags & ImGuiWindowFlags_NoTitleBar) && !(window->Flags & ImGuiWindowFlags_MenuBar)) ? ImGuiCorner_TopRight : 0) | (other_scrollbar ? 0 : ImGuiCorner_BottomRight);
    window->DrawList->AddRectFilled(bb.Min, bb.Max, ImGui::GetColorU32(ImGuiCol_ScrollbarBg), window_rounding, window_rounding_corners);
    bb.Reduce(ImVec2(ImClamp((float)(int)((bb.Max.x - bb.Min.x - 2.0f) * 0.5f), 0.0f, 3.0f), ImClamp((float)(int)((bb.Max.y - bb.Min.y - 2.0f) * 0.5f), 0.0f, 3.0f)));

    // V denote the main axis of the scrollbar
    float scrollbar_size_v = horizontal ? bb.GetWidth() : bb.GetHeight();
    float scroll_v = horizontal ? window->Scroll.x : window->Scroll.y;
    float win_size_avail_v = (horizontal ? window->Size.x : window->Size.y) - other_scrollbar_size_w;
    float win_size_contents_v = horizontal ? window->SizeContents.x : window->SizeContents.y;

    // The grabable box size generally represent the amount visible (vs the total scrollable amount)
    // But we maintain a minimum size in pixel to allow for the user to still aim inside.
    const float grab_h_pixels = ImMin(ImMax(scrollbar_size_v * ImSaturate(win_size_avail_v / ImMax(win_size_contents_v, win_size_avail_v)), style.GrabMinSize), scrollbar_size_v);
    const float grab_h_norm = grab_h_pixels / scrollbar_size_v;

    // Handle input right away. None of the code of Begin() is relying on scrolling position before calling Scrollbar().
    bool held = false;
    bool hovered = false;
    const bool previously_held = (g.ActiveId == id);
    ImGui::ButtonBehavior(bb, id, &hovered, &held);

    float scroll_max = ImMax(1.0f, win_size_contents_v - win_size_avail_v);
    float scroll_ratio = ImSaturate(scroll_v / scroll_max);
    float grab_v_norm = scroll_ratio * (scrollbar_size_v - grab_h_pixels) / scrollbar_size_v;
    if (held && grab_h_norm < 1.0f)
    {
        float scrollbar_pos_v = horizontal ? bb.Min.x : bb.Min.y;
        float mouse_pos_v = horizontal ? g.IO.MousePos.x : g.IO.MousePos.y;
        float* click_delta_to_grab_center_v = horizontal ? &g.ScrollbarClickDeltaToGrabCenter.x : &g.ScrollbarClickDeltaToGrabCenter.y;

        // Click position in scrollbar normalized space (0.0f->1.0f)
        const float clicked_v_norm = ImSaturate((mouse_pos_v - scrollbar_pos_v) / scrollbar_size_v);
        ImGui::SetHoveredID(id);

        bool seek_absolute = false;
        if (!previously_held)
        {
            // On initial click calculate the distance between mouse and the center of the grab
            if (clicked_v_norm >= grab_v_norm && clicked_v_norm <= grab_v_norm + grab_h_norm)
            {
                *click_delta_to_grab_center_v = clicked_v_norm - grab_v_norm - grab_h_norm*0.5f;
            }
            else
            {
                seek_absolute = true;
                *click_delta_to_grab_center_v = 0.0f;
            }
        }

        // Apply scroll
        // It is ok to modify Scroll here because we are being called in Begin() after the calculation of SizeContents and before setting up our starting position
        const float scroll_v_norm = ImSaturate((clicked_v_norm - *click_delta_to_grab_center_v - grab_h_norm*0.5f) / (1.0f - grab_h_norm));
        scroll_v = (float)(int)(0.5f + scroll_v_norm * scroll_max);//(win_size_contents_v - win_size_v));
        if (horizontal)
            window->Scroll.x = scroll_v;
        else
            window->Scroll.y = scroll_v;

        // Update values for rendering
        scroll_ratio = ImSaturate(scroll_v / scroll_max);
        grab_v_norm = scroll_ratio * (scrollbar_size_v - grab_h_pixels) / scrollbar_size_v;

        // Update distance to grab now that we have seeked and saturated
        if (seek_absolute)
            *click_delta_to_grab_center_v = clicked_v_norm - grab_v_norm - grab_h_norm*0.5f;
    }

    // Render
    const ImU32 grab_col = ImGui::GetColorU32(held ? ImGuiCol_ScrollbarGrabActive : hovered ? ImGuiCol_ScrollbarGrabHovered : ImGuiCol_ScrollbarGrab);
    if (horizontal)
        window->DrawList->AddRectFilled(ImVec2(ImLerp(bb.Min.x, bb.Max.x, grab_v_norm), bb.Min.y), ImVec2(ImLerp(bb.Min.x, bb.Max.x, grab_v_norm) + grab_h_pixels, bb.Max.y), grab_col, style.ScrollbarRounding);
    else
        window->DrawList->AddRectFilled(ImVec2(bb.Min.x, ImLerp(bb.Min.y, bb.Max.y, grab_v_norm)), ImVec2(bb.Max.x, ImLerp(bb.Min.y, bb.Max.y, grab_v_norm) + grab_h_pixels), grab_col, style.ScrollbarRounding);
}

// Moving window to front of display (which happens to be back of our sorted list)
void ImGui::FocusWindow(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;

    // Always mark the window we passed as focused. This is used for keyboard interactions such as tabbing.
    g.FocusedWindow = window;

    // Passing NULL allow to disable keyboard focus
    if (!window)
        return;

    // And move its root window to the top of the pile
    if (window->RootWindow)
        window = window->RootWindow;

    // Steal focus on active widgets
    if (window->Flags & ImGuiWindowFlags_Popup) // FIXME: This statement should be unnecessary. Need further testing before removing it..
        if (g.ActiveId != 0 && g.ActiveIdWindow && g.ActiveIdWindow->RootWindow != window)
            ClearActiveID();

    // Bring to front
    if ((window->Flags & ImGuiWindowFlags_NoBringToFrontOnFocus) || g.Windows.back() == window)
        return;
    for (int i = 0; i < g.Windows.Size; i++)
        if (g.Windows[i] == window)
        {
            g.Windows.erase(g.Windows.begin() + i);
            break;
        }
    g.Windows.push_back(window);
}

void ImGui::PushItemWidth(float item_width)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.ItemWidth = (item_width == 0.0f ? window->ItemWidthDefault : item_width);
    window->DC.ItemWidthStack.push_back(window->DC.ItemWidth);
}

static void PushMultiItemsWidths(int components, float w_full)
{
    ImGuiWindow* window = ImGui::GetCurrentWindow();
    const ImGuiStyle& style = GImGui->Style;
    if (w_full <= 0.0f)
        w_full = ImGui::CalcItemWidth();
    const float w_item_one  = ImMax(1.0f, (float)(int)((w_full - (style.ItemInnerSpacing.x) * (components-1)) / (float)components));
    const float w_item_last = ImMax(1.0f, (float)(int)(w_full - (w_item_one + style.ItemInnerSpacing.x) * (components-1)));
    window->DC.ItemWidthStack.push_back(w_item_last);
    for (int i = 0; i < components-1; i++)
        window->DC.ItemWidthStack.push_back(w_item_one);
    window->DC.ItemWidth = window->DC.ItemWidthStack.back();
}

void ImGui::PopItemWidth()
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.ItemWidthStack.pop_back();
    window->DC.ItemWidth = window->DC.ItemWidthStack.empty() ? window->ItemWidthDefault : window->DC.ItemWidthStack.back();
}

float ImGui::CalcItemWidth()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    float w = window->DC.ItemWidth;
    if (w < 0.0f)
    {
        // Align to a right-side limit. We include 1 frame padding in the calculation because this is how the width is always used (we add 2 frame padding to it), but we could move that responsibility to the widget as well.
        float width_to_right_edge = GetContentRegionAvail().x;
        w = ImMax(1.0f, width_to_right_edge + w);
    }
    w = (float)(int)w;
    return w;
}

static ImFont* GetDefaultFont()
{
    ImGuiContext& g = *GImGui;
    return g.IO.FontDefault ? g.IO.FontDefault : g.IO.Fonts->Fonts[0];
}

static void SetCurrentFont(ImFont* font)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(font && font->IsLoaded()); 
    IM_ASSERT(font->Scale > 0.0f);
    g.Font = font;
    g.FontBaseSize = g.IO.FontGlobalScale * g.Font->FontSize * g.Font->Scale;
    g.FontSize = g.CurrentWindow ? g.CurrentWindow->CalcFontSize() : 0.0f;
    g.FontTexUvWhitePixel = g.Font->ContainerAtlas->TexUvWhitePixel;
}

void ImGui::PushFont(ImFont* font)
{
    ImGuiContext& g = *GImGui;
    if (!font)
        font = GetDefaultFont();
    SetCurrentFont(font);
    g.FontStack.push_back(font);
    g.CurrentWindow->DrawList->PushTextureID(font->ContainerAtlas->TexID);
}

void  ImGui::PopFont()
{
    ImGuiContext& g = *GImGui;
    g.CurrentWindow->DrawList->PopTextureID();
    g.FontStack.pop_back();
    SetCurrentFont(g.FontStack.empty() ? GetDefaultFont() : g.FontStack.back());
}

void ImGui::PushAllowKeyboardFocus(bool allow_keyboard_focus)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.AllowKeyboardFocus = allow_keyboard_focus;
    window->DC.AllowKeyboardFocusStack.push_back(allow_keyboard_focus);
}

void ImGui::PopAllowKeyboardFocus()
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.AllowKeyboardFocusStack.pop_back();
    window->DC.AllowKeyboardFocus = window->DC.AllowKeyboardFocusStack.empty() ? true : window->DC.AllowKeyboardFocusStack.back();
}

void ImGui::PushButtonRepeat(bool repeat)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.ButtonRepeat = repeat;
    window->DC.ButtonRepeatStack.push_back(repeat);
}

void ImGui::PopButtonRepeat()
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.ButtonRepeatStack.pop_back();
    window->DC.ButtonRepeat = window->DC.ButtonRepeatStack.empty() ? false : window->DC.ButtonRepeatStack.back();
}

void ImGui::PushTextWrapPos(float wrap_pos_x)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.TextWrapPos = wrap_pos_x;
    window->DC.TextWrapPosStack.push_back(wrap_pos_x);
}

void ImGui::PopTextWrapPos()
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.TextWrapPosStack.pop_back();
    window->DC.TextWrapPos = window->DC.TextWrapPosStack.empty() ? -1.0f : window->DC.TextWrapPosStack.back();
}

void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)
{
    ImGuiContext& g = *GImGui;
    ImGuiColMod backup;
    backup.Col = idx;
    backup.BackupValue = g.Style.Colors[idx];
    g.ColorModifiers.push_back(backup);
    g.Style.Colors[idx] = col;
}

void ImGui::PopStyleColor(int count)
{
    ImGuiContext& g = *GImGui;
    while (count > 0)
    {
        ImGuiColMod& backup = g.ColorModifiers.back();
        g.Style.Colors[backup.Col] = backup.BackupValue;
        g.ColorModifiers.pop_back();
        count--;
    }
}

struct ImGuiStyleVarInfo
{
    ImGuiDataType   Type;
    ImU32           Offset;
    void*           GetVarPtr() const { return (void*)((unsigned char*)&GImGui->Style + Offset); }
};

static const ImGuiStyleVarInfo GStyleVarInfo[ImGuiStyleVar_Count_] =
{
    { ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, Alpha) },
    { ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, WindowPadding) },
    { ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, WindowRounding) },
    { ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, WindowMinSize) },
    { ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, ChildWindowRounding) },
    { ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, FramePadding) },
    { ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, FrameRounding) },
    { ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, ItemSpacing) },
    { ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, ItemInnerSpacing) },
    { ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, IndentSpacing) },
    { ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, GrabMinSize) },
    { ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, ButtonTextAlign) },
};

static const ImGuiStyleVarInfo* GetStyleVarInfo(ImGuiStyleVar idx)
{
    IM_ASSERT(idx >= 0 && idx < ImGuiStyleVar_Count_);
    return &GStyleVarInfo[idx];
}

void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)
{
    const ImGuiStyleVarInfo* var_info = GetStyleVarInfo(idx);
    if (var_info->Type == ImGuiDataType_Float)
    {
        float* pvar = (float*)var_info->GetVarPtr();
        GImGui->StyleModifiers.push_back(ImGuiStyleMod(idx, *pvar));
        *pvar = val;
        return;
    }
    IM_ASSERT(0); // Called function with wrong-type? Variable is not a float.
}

void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)
{
    const ImGuiStyleVarInfo* var_info = GetStyleVarInfo(idx);
    if (var_info->Type == ImGuiDataType_Float2)
    {
        ImVec2* pvar = (ImVec2*)var_info->GetVarPtr();
        GImGui->StyleModifiers.push_back(ImGuiStyleMod(idx, *pvar));
        *pvar = val;
        return;
    }
    IM_ASSERT(0); // Called function with wrong-type? Variable is not a ImVec2.
}

void ImGui::PopStyleVar(int count)
{
    ImGuiContext& g = *GImGui;
    while (count > 0)
    {
        ImGuiStyleMod& backup = g.StyleModifiers.back();
        const ImGuiStyleVarInfo* info = GetStyleVarInfo(backup.VarIdx);
        if (info->Type == ImGuiDataType_Float)          (*(float*)info->GetVarPtr()) = backup.BackupFloat[0];
        else if (info->Type == ImGuiDataType_Float2)    (*(ImVec2*)info->GetVarPtr()) = ImVec2(backup.BackupFloat[0], backup.BackupFloat[1]);
        else if (info->Type == ImGuiDataType_Int)       (*(int*)info->GetVarPtr()) = backup.BackupInt[0];
        g.StyleModifiers.pop_back();
        count--;
    }
}

const char* ImGui::GetStyleColName(ImGuiCol idx)
{
    // Create switch-case from enum with regexp: ImGuiCol_{.*}, --> case ImGuiCol_\1: return "\1";
    switch (idx)
    {
    case ImGuiCol_Text: return "Text";
    case ImGuiCol_TextDisabled: return "TextDisabled";
    case ImGuiCol_WindowBg: return "WindowBg";
    case ImGuiCol_ChildWindowBg: return "ChildWindowBg";
    case ImGuiCol_PopupBg: return "PopupBg";
    case ImGuiCol_Border: return "Border";
    case ImGuiCol_BorderShadow: return "BorderShadow";
    case ImGuiCol_FrameBg: return "FrameBg";
    case ImGuiCol_FrameBgHovered: return "FrameBgHovered";
    case ImGuiCol_FrameBgActive: return "FrameBgActive";
    case ImGuiCol_TitleBg: return "TitleBg";
    case ImGuiCol_TitleBgCollapsed: return "TitleBgCollapsed";
    case ImGuiCol_TitleBgActive: return "TitleBgActive";
    case ImGuiCol_MenuBarBg: return "MenuBarBg";
    case ImGuiCol_ScrollbarBg: return "ScrollbarBg";
    case ImGuiCol_ScrollbarGrab: return "ScrollbarGrab";
    case ImGuiCol_ScrollbarGrabHovered: return "ScrollbarGrabHovered";
    case ImGuiCol_ScrollbarGrabActive: return "ScrollbarGrabActive";
    case ImGuiCol_ComboBg: return "ComboBg";
    case ImGuiCol_CheckMark: return "CheckMark";
    case ImGuiCol_SliderGrab: return "SliderGrab";
    case ImGuiCol_SliderGrabActive: return "SliderGrabActive";
    case ImGuiCol_Button: return "Button";
    case ImGuiCol_ButtonHovered: return "ButtonHovered";
    case ImGuiCol_ButtonActive: return "ButtonActive";
    case ImGuiCol_Header: return "Header";
    case ImGuiCol_HeaderHovered: return "HeaderHovered";
    case ImGuiCol_HeaderActive: return "HeaderActive";
    case ImGuiCol_Column: return "Column";
    case ImGuiCol_ColumnHovered: return "ColumnHovered";
    case ImGuiCol_ColumnActive: return "ColumnActive";
    case ImGuiCol_ResizeGrip: return "ResizeGrip";
    case ImGuiCol_ResizeGripHovered: return "ResizeGripHovered";
    case ImGuiCol_ResizeGripActive: return "ResizeGripActive";
    case ImGuiCol_CloseButton: return "CloseButton";
    case ImGuiCol_CloseButtonHovered: return "CloseButtonHovered";
    case ImGuiCol_CloseButtonActive: return "CloseButtonActive";
    case ImGuiCol_PlotLines: return "PlotLines";
    case ImGuiCol_PlotLinesHovered: return "PlotLinesHovered";
    case ImGuiCol_PlotHistogram: return "PlotHistogram";
    case ImGuiCol_PlotHistogramHovered: return "PlotHistogramHovered";
    case ImGuiCol_TextSelectedBg: return "TextSelectedBg";
    case ImGuiCol_ModalWindowDarkening: return "ModalWindowDarkening";
    }
    IM_ASSERT(0);
    return "Unknown";
}

bool ImGui::IsWindowHovered()
{
    ImGuiContext& g = *GImGui;
    return g.HoveredWindow == g.CurrentWindow && IsWindowContentHoverable(g.HoveredRootWindow);
}

bool ImGui::IsWindowFocused()
{
    ImGuiContext& g = *GImGui;
    return g.FocusedWindow == g.CurrentWindow;
}

bool ImGui::IsRootWindowFocused()
{
    ImGuiContext& g = *GImGui;
    return g.FocusedWindow == g.CurrentWindow->RootWindow;
}

bool ImGui::IsRootWindowOrAnyChildFocused()
{
    ImGuiContext& g = *GImGui;
    return g.FocusedWindow && g.FocusedWindow->RootWindow == g.CurrentWindow->RootWindow;
}

bool ImGui::IsRootWindowOrAnyChildHovered()
{
    ImGuiContext& g = *GImGui;
    return g.HoveredRootWindow && (g.HoveredRootWindow == g.CurrentWindow->RootWindow) && IsWindowContentHoverable(g.HoveredRootWindow);
}

float ImGui::GetWindowWidth()
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->Size.x;
}

float ImGui::GetWindowHeight()
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->Size.y;
}

ImVec2 ImGui::GetWindowPos()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    return window->Pos;
}

static void SetWindowScrollY(ImGuiWindow* window, float new_scroll_y)
{
    window->DC.CursorMaxPos.y += window->Scroll.y;
    window->Scroll.y = new_scroll_y;
    window->DC.CursorMaxPos.y -= window->Scroll.y;
}

static void SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiSetCond cond)
{
    // Test condition (NB: bit 0 is always true) and clear flags for next time
    if (cond && (window->SetWindowPosAllowFlags & cond) == 0)
        return;
    window->SetWindowPosAllowFlags &= ~(ImGuiSetCond_Once | ImGuiSetCond_FirstUseEver | ImGuiSetCond_Appearing);
    window->SetWindowPosCenterWanted = false;

    // Set
    const ImVec2 old_pos = window->Pos;
    window->PosFloat = pos;
    window->Pos = ImVec2((float)(int)window->PosFloat.x, (float)(int)window->PosFloat.y);
    window->DC.CursorPos += (window->Pos - old_pos);    // As we happen to move the window while it is being appended to (which is a bad idea - will smear) let's at least offset the cursor
    window->DC.CursorMaxPos += (window->Pos - old_pos); // And more importantly we need to adjust this so size calculation doesn't get affected.
}

void ImGui::SetWindowPos(const ImVec2& pos, ImGuiSetCond cond)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    SetWindowPos(window, pos, cond);
}

void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiSetCond cond)
{
    if (ImGuiWindow* window = FindWindowByName(name))
        SetWindowPos(window, pos, cond);
}

ImVec2 ImGui::GetWindowSize()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->Size;
}

static void SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiSetCond cond)
{
    // Test condition (NB: bit 0 is always true) and clear flags for next time
    if (cond && (window->SetWindowSizeAllowFlags & cond) == 0)
        return;
    window->SetWindowSizeAllowFlags &= ~(ImGuiSetCond_Once | ImGuiSetCond_FirstUseEver | ImGuiSetCond_Appearing);

    // Set
    if (size.x > 0.0f)
    {
        window->AutoFitFramesX = 0;
        window->SizeFull.x = size.x;
    }
    else
    {
        window->AutoFitFramesX = 2;
        window->AutoFitOnlyGrows = false;
    }
    if (size.y > 0.0f)
    {
        window->AutoFitFramesY = 0;
        window->SizeFull.y = size.y;
    }
    else
    {
        window->AutoFitFramesY = 2;
        window->AutoFitOnlyGrows = false;
    }
}

void ImGui::SetWindowSize(const ImVec2& size, ImGuiSetCond cond)
{
    SetWindowSize(GImGui->CurrentWindow, size, cond);
}

void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiSetCond cond)
{
    ImGuiWindow* window = FindWindowByName(name);
    if (window)
        SetWindowSize(window, size, cond);
}

static void SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiSetCond cond)
{
    // Test condition (NB: bit 0 is always true) and clear flags for next time
    if (cond && (window->SetWindowCollapsedAllowFlags & cond) == 0)
        return;
    window->SetWindowCollapsedAllowFlags &= ~(ImGuiSetCond_Once | ImGuiSetCond_FirstUseEver | ImGuiSetCond_Appearing);

    // Set
    window->Collapsed = collapsed;
}

void ImGui::SetWindowCollapsed(bool collapsed, ImGuiSetCond cond)
{
    SetWindowCollapsed(GImGui->CurrentWindow, collapsed, cond);
}

bool ImGui::IsWindowCollapsed()
{
    return GImGui->CurrentWindow->Collapsed;
}

void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiSetCond cond)
{
    ImGuiWindow* window = FindWindowByName(name);
    if (window)
        SetWindowCollapsed(window, collapsed, cond);
}

void ImGui::SetWindowFocus()
{
    FocusWindow(GImGui->CurrentWindow);
}

void ImGui::SetWindowFocus(const char* name)
{
    if (name)
    {
        if (ImGuiWindow* window = FindWindowByName(name))
            FocusWindow(window);
    }
    else
    {
        FocusWindow(NULL);
    }
}

void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiSetCond cond)
{
    ImGuiContext& g = *GImGui;
    g.SetNextWindowPosVal = pos;
    g.SetNextWindowPosCond = cond ? cond : ImGuiSetCond_Always;
}

void ImGui::SetNextWindowPosCenter(ImGuiSetCond cond)
{
    ImGuiContext& g = *GImGui;
    g.SetNextWindowPosVal = ImVec2(-FLT_MAX, -FLT_MAX);
    g.SetNextWindowPosCond = cond ? cond : ImGuiSetCond_Always;
}

void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiSetCond cond)
{
    ImGuiContext& g = *GImGui;
    g.SetNextWindowSizeVal = size;
    g.SetNextWindowSizeCond = cond ? cond : ImGuiSetCond_Always;
}

void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeConstraintCallback custom_callback, void* custom_callback_user_data)
{
    ImGuiContext& g = *GImGui;
    g.SetNextWindowSizeConstraint = true;
    g.SetNextWindowSizeConstraintRect = ImRect(size_min, size_max);
    g.SetNextWindowSizeConstraintCallback = custom_callback;
    g.SetNextWindowSizeConstraintCallbackUserData = custom_callback_user_data;
}

void ImGui::SetNextWindowContentSize(const ImVec2& size)
{
    ImGuiContext& g = *GImGui;
    g.SetNextWindowContentSizeVal = size;
    g.SetNextWindowContentSizeCond = ImGuiSetCond_Always;
}

void ImGui::SetNextWindowContentWidth(float width)
{
    ImGuiContext& g = *GImGui;
    g.SetNextWindowContentSizeVal = ImVec2(width, g.SetNextWindowContentSizeCond ? g.SetNextWindowContentSizeVal.y : 0.0f);
    g.SetNextWindowContentSizeCond = ImGuiSetCond_Always;
}

void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiSetCond cond)
{
    ImGuiContext& g = *GImGui;
    g.SetNextWindowCollapsedVal = collapsed;
    g.SetNextWindowCollapsedCond = cond ? cond : ImGuiSetCond_Always;
}

void ImGui::SetNextWindowFocus()
{
    ImGuiContext& g = *GImGui;
    g.SetNextWindowFocus = true;
}

// In window space (not screen space!)
ImVec2 ImGui::GetContentRegionMax()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImVec2 mx = window->ContentsRegionRect.Max;
    if (window->DC.ColumnsCount != 1)
        mx.x = GetColumnOffset(window->DC.ColumnsCurrent + 1) - window->WindowPadding.x;
    return mx;
}

ImVec2 ImGui::GetContentRegionAvail()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return GetContentRegionMax() - (window->DC.CursorPos - window->Pos);
}

float ImGui::GetContentRegionAvailWidth()
{
    return GetContentRegionAvail().x;
}

// In window space (not screen space!)
ImVec2 ImGui::GetWindowContentRegionMin()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->ContentsRegionRect.Min;
}

ImVec2 ImGui::GetWindowContentRegionMax()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->ContentsRegionRect.Max;
}

float ImGui::GetWindowContentRegionWidth()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->ContentsRegionRect.Max.x - window->ContentsRegionRect.Min.x;
}

float ImGui::GetTextLineHeight()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize;
}

float ImGui::GetTextLineHeightWithSpacing()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize + g.Style.ItemSpacing.y;
}

float ImGui::GetItemsLineHeightWithSpacing()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize + g.Style.FramePadding.y * 2.0f + g.Style.ItemSpacing.y;
}

ImDrawList* ImGui::GetWindowDrawList()
{
    ImGuiWindow* window = GetCurrentWindow();
    return window->DrawList;
}

ImFont* ImGui::GetFont()
{
    return GImGui->Font;
}

float ImGui::GetFontSize()
{
    return GImGui->FontSize;
}

ImVec2 ImGui::GetFontTexUvWhitePixel()
{
    return GImGui->FontTexUvWhitePixel;
}

void ImGui::SetWindowFontScale(float scale)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    window->FontWindowScale = scale;
    g.FontSize = window->CalcFontSize();
}

// User generally sees positions in window coordinates. Internally we store CursorPos in absolute screen coordinates because it is more convenient.
// Conversion happens as we pass the value to user, but it makes our naming convention confusing because GetCursorPos() == (DC.CursorPos - window.Pos). May want to rename 'DC.CursorPos'.
ImVec2 ImGui::GetCursorPos()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CursorPos - window->Pos + window->Scroll;
}

float ImGui::GetCursorPosX()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CursorPos.x - window->Pos.x + window->Scroll.x;
}

float ImGui::GetCursorPosY()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CursorPos.y - window->Pos.y + window->Scroll.y;
}

void ImGui::SetCursorPos(const ImVec2& local_pos)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.CursorPos = window->Pos - window->Scroll + local_pos;
    window->DC.CursorMaxPos = ImMax(window->DC.CursorMaxPos, window->DC.CursorPos);
}

void ImGui::SetCursorPosX(float x)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.CursorPos.x = window->Pos.x - window->Scroll.x + x;
    window->DC.CursorMaxPos.x = ImMax(window->DC.CursorMaxPos.x, window->DC.CursorPos.x);
}

void ImGui::SetCursorPosY(float y)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.CursorPos.y = window->Pos.y - window->Scroll.y + y;
    window->DC.CursorMaxPos.y = ImMax(window->DC.CursorMaxPos.y, window->DC.CursorPos.y);
}

ImVec2 ImGui::GetCursorStartPos()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CursorStartPos - window->Pos;
}

ImVec2 ImGui::GetCursorScreenPos()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CursorPos;
}

void ImGui::SetCursorScreenPos(const ImVec2& screen_pos)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.CursorPos = screen_pos;
    window->DC.CursorMaxPos = ImMax(window->DC.CursorMaxPos, window->DC.CursorPos);
}

float ImGui::GetScrollX()
{
    return GImGui->CurrentWindow->Scroll.x;
}

float ImGui::GetScrollY()
{
    return GImGui->CurrentWindow->Scroll.y;
}

float ImGui::GetScrollMaxX()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->SizeContents.x - window->SizeFull.x - window->ScrollbarSizes.x;
}

float ImGui::GetScrollMaxY()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->SizeContents.y - window->SizeFull.y - window->ScrollbarSizes.y;
}

void ImGui::SetScrollX(float scroll_x)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->ScrollTarget.x = scroll_x;
    window->ScrollTargetCenterRatio.x = 0.0f;
}

void ImGui::SetScrollY(float scroll_y)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->ScrollTarget.y = scroll_y + window->TitleBarHeight() + window->MenuBarHeight(); // title bar height canceled out when using ScrollTargetRelY
    window->ScrollTargetCenterRatio.y = 0.0f;
}

void ImGui::SetScrollFromPosY(float pos_y, float center_y_ratio)
{
    // We store a target position so centering can occur on the next frame when we are guaranteed to have a known window size
    ImGuiWindow* window = GetCurrentWindow();
    IM_ASSERT(center_y_ratio >= 0.0f && center_y_ratio <= 1.0f);
    window->ScrollTarget.y = (float)(int)(pos_y + window->Scroll.y);
    if (center_y_ratio <= 0.0f && window->ScrollTarget.y <= window->WindowPadding.y)    // Minor hack to make "scroll to top" take account of WindowPadding, else it would scroll to (WindowPadding.y - ItemSpacing.y)
        window->ScrollTarget.y = 0.0f;
    window->ScrollTargetCenterRatio.y = center_y_ratio;
}

// center_y_ratio: 0.0f top of last item, 0.5f vertical center of last item, 1.0f bottom of last item.
void ImGui::SetScrollHere(float center_y_ratio)
{
    ImGuiWindow* window = GetCurrentWindow();
    float target_y = window->DC.CursorPosPrevLine.y + (window->DC.PrevLineHeight * center_y_ratio) + (GImGui->Style.ItemSpacing.y * (center_y_ratio - 0.5f) * 2.0f); // Precisely aim above, in the middle or below the last line.
    SetScrollFromPosY(target_y - window->Pos.y, center_y_ratio);
}

void ImGui::SetKeyboardFocusHere(int offset)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->FocusIdxAllRequestNext = window->FocusIdxAllCounter + 1 + offset;
    window->FocusIdxTabRequestNext = INT_MAX;
}

void ImGui::SetStateStorage(ImGuiStorage* tree)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.StateStorage = tree ? tree : &window->StateStorage;
}

ImGuiStorage* ImGui::GetStateStorage()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.StateStorage;
}

void ImGui::TextV(const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const char* text_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    TextUnformatted(g.TempBuffer, text_end);
}

void ImGui::Text(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    TextV(fmt, args);
    va_end(args);
}

void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)
{
    PushStyleColor(ImGuiCol_Text, col);
    TextV(fmt, args);
    PopStyleColor();
}

void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    TextColoredV(col, fmt, args);
    va_end(args);
}

void ImGui::TextDisabledV(const char* fmt, va_list args)
{
    PushStyleColor(ImGuiCol_Text, GImGui->Style.Colors[ImGuiCol_TextDisabled]);
    TextV(fmt, args);
    PopStyleColor();
}

void ImGui::TextDisabled(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    TextDisabledV(fmt, args);
    va_end(args);
}

void ImGui::TextWrappedV(const char* fmt, va_list args)
{
    bool need_wrap = (GImGui->CurrentWindow->DC.TextWrapPos < 0.0f);    // Keep existing wrap position is one ia already set
    if (need_wrap) PushTextWrapPos(0.0f);
    TextV(fmt, args);
    if (need_wrap) PopTextWrapPos();
}

void ImGui::TextWrapped(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    TextWrappedV(fmt, args);
    va_end(args);
}

void ImGui::TextUnformatted(const char* text, const char* text_end)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    IM_ASSERT(text != NULL);
    const char* text_begin = text;
    if (text_end == NULL)
        text_end = text + strlen(text); // FIXME-OPT

    const float wrap_pos_x = window->DC.TextWrapPos;
    const bool wrap_enabled = wrap_pos_x >= 0.0f;
    if (text_end - text > 2000 && !wrap_enabled)
    {
        // Long text!
        // Perform manual coarse clipping to optimize for long multi-line text
        // From this point we will only compute the width of lines that are visible. Optimization only available when word-wrapping is disabled.
        // We also don't vertically center the text within the line full height, which is unlikely to matter because we are likely the biggest and only item on the line.
        const char* line = text;
        const float line_height = GetTextLineHeight();
        const ImVec2 text_pos = window->DC.CursorPos + ImVec2(0.0f, window->DC.CurrentLineTextBaseOffset);
        const ImRect clip_rect = window->ClipRect;
        ImVec2 text_size(0,0);

        if (text_pos.y <= clip_rect.Max.y)
        {
            ImVec2 pos = text_pos;

            // Lines to skip (can't skip when logging text)
            if (!g.LogEnabled)
            {
                int lines_skippable = (int)((clip_rect.Min.y - text_pos.y) / line_height);
                if (lines_skippable > 0)
                {
                    int lines_skipped = 0;
                    while (line < text_end && lines_skipped < lines_skippable)
                    {
                        const char* line_end = strchr(line, '\n');
                        if (!line_end)
                            line_end = text_end;
                        line = line_end + 1;
                        lines_skipped++;
                    }
                    pos.y += lines_skipped * line_height;
                }
            }

            // Lines to render
            if (line < text_end)
            {
                ImRect line_rect(pos, pos + ImVec2(FLT_MAX, line_height));
                while (line < text_end)
                {
                    const char* line_end = strchr(line, '\n');
                    if (IsClippedEx(line_rect, NULL, false))
                        break;

                    const ImVec2 line_size = CalcTextSize(line, line_end, false);
                    text_size.x = ImMax(text_size.x, line_size.x);
                    RenderText(pos, line, line_end, false);
                    if (!line_end)
                        line_end = text_end;
                    line = line_end + 1;
                    line_rect.Min.y += line_height;
                    line_rect.Max.y += line_height;
                    pos.y += line_height;
                }

                // Count remaining lines
                int lines_skipped = 0;
                while (line < text_end)
                {
                    const char* line_end = strchr(line, '\n');
                    if (!line_end)
                        line_end = text_end;
                    line = line_end + 1;
                    lines_skipped++;
                }
                pos.y += lines_skipped * line_height;
            }

            text_size.y += (pos - text_pos).y;
        }

        ImRect bb(text_pos, text_pos + text_size);
        ItemSize(bb);
        ItemAdd(bb, NULL);
    }
    else
    {
        const float wrap_width = wrap_enabled ? CalcWrapWidthForPos(window->DC.CursorPos, wrap_pos_x) : 0.0f;
        const ImVec2 text_size = CalcTextSize(text_begin, text_end, false, wrap_width);

        // Account of baseline offset
        ImVec2 text_pos(window->DC.CursorPos.x, window->DC.CursorPos.y + window->DC.CurrentLineTextBaseOffset);
        ImRect bb(text_pos, text_pos + text_size);
        ItemSize(text_size);
        if (!ItemAdd(bb, NULL))
            return;

        // Render (we don't hide text after ## in this end-user function)
        RenderTextWrapped(bb.Min, text_begin, text_end, wrap_width);
    }
}

void ImGui::AlignFirstTextHeightToWidgets()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    // Declare a dummy item size to that upcoming items that are smaller will center-align on the newly expanded line height.
    ImGuiContext& g = *GImGui;
    ItemSize(ImVec2(0, g.FontSize + g.Style.FramePadding.y*2), g.Style.FramePadding.y);
    SameLine(0, 0);
}

// Add a label+text combo aligned to other label+value widgets
void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const float w = CalcItemWidth();

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImRect value_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y*2));
    const ImRect total_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w + (label_size.x > 0.0f ? style.ItemInnerSpacing.x : 0.0f), style.FramePadding.y*2) + label_size);
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, NULL))
        return;

    // Render
    const char* value_text_begin = &g.TempBuffer[0];
    const char* value_text_end = value_text_begin + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    RenderTextClipped(value_bb.Min, value_bb.Max, value_text_begin, value_text_end, NULL, ImVec2(0.0f,0.5f));
    if (label_size.x > 0.0f)
        RenderText(ImVec2(value_bb.Max.x + style.ItemInnerSpacing.x, value_bb.Min.y + style.FramePadding.y), label);
}

void ImGui::LabelText(const char* label, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    LabelTextV(label, fmt, args);
    va_end(args);
}

static inline bool IsWindowContentHoverable(ImGuiWindow* window)
{
    // An active popup disable hovering on other windows (apart from its own children)
    ImGuiContext& g = *GImGui;
    if (ImGuiWindow* focused_window = g.FocusedWindow)
        if (ImGuiWindow* focused_root_window = focused_window->RootWindow)
            if ((focused_root_window->Flags & ImGuiWindowFlags_Popup) != 0 && focused_root_window->WasActive && focused_root_window != window->RootWindow)
                return false;

    return true;
}

bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGuiButtonFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    if (flags & ImGuiButtonFlags_Disabled)
    {
        if (out_hovered) *out_hovered = false;
        if (out_held) *out_held = false;
        if (g.ActiveId == id) ClearActiveID();
        return false;
    }

    if ((flags & (ImGuiButtonFlags_PressedOnClickRelease | ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags_PressedOnRelease | ImGuiButtonFlags_PressedOnDoubleClick)) == 0)
        flags |= ImGuiButtonFlags_PressedOnClickRelease;

    bool pressed = false;
    bool hovered = IsHovered(bb, id, (flags & ImGuiButtonFlags_FlattenChilds) != 0);
    if (hovered)
    {
        SetHoveredID(id);
        if (!(flags & ImGuiButtonFlags_NoKeyModifiers) || (!g.IO.KeyCtrl && !g.IO.KeyShift && !g.IO.KeyAlt))
        {
            //                        | CLICKING        | HOLDING with ImGuiButtonFlags_Repeat
            // PressedOnClickRelease  |  <on release>*  |  <on repeat> <on repeat> .. (NOT on release)  <-- MOST COMMON! (*) only if both click/release were over bounds
            // PressedOnClick         |  <on click>     |  <on click> <on repeat> <on repeat> ..
            // PressedOnRelease       |  <on release>   |  <on repeat> <on repeat> .. (NOT on release)
            // PressedOnDoubleClick   |  <on dclick>    |  <on dclick> <on repeat> <on repeat> ..
            if ((flags & ImGuiButtonFlags_PressedOnClickRelease) && g.IO.MouseClicked[0])
            {
                SetActiveID(id, window); // Hold on ID
                FocusWindow(window);
                g.ActiveIdClickOffset = g.IO.MousePos - bb.Min;
            }
            if (((flags & ImGuiButtonFlags_PressedOnClick) && g.IO.MouseClicked[0]) || ((flags & ImGuiButtonFlags_PressedOnDoubleClick) && g.IO.MouseDoubleClicked[0]))
            {
                pressed = true;
                ClearActiveID();
                FocusWindow(window);
            }
            if ((flags & ImGuiButtonFlags_PressedOnRelease) && g.IO.MouseReleased[0])
            {
                if (!((flags & ImGuiButtonFlags_Repeat) && g.IO.MouseDownDurationPrev[0] >= g.IO.KeyRepeatDelay))  // Repeat mode trumps <on release>
                    pressed = true;
                ClearActiveID();
            }

            // 'Repeat' mode acts when held regardless of _PressedOn flags (see table above). 
            // Relies on repeat logic of IsMouseClicked() but we may as well do it ourselves if we end up exposing finer RepeatDelay/RepeatRate settings.
            if ((flags & ImGuiButtonFlags_Repeat) && g.ActiveId == id && g.IO.MouseDownDuration[0] > 0.0f && IsMouseClicked(0, true))
                pressed = true;
        }
    }

    bool held = false;
    if (g.ActiveId == id)
    {
        if (g.IO.MouseDown[0])
        {
            held = true;
        }
        else
        {
            if (hovered && (flags & ImGuiButtonFlags_PressedOnClickRelease))
                if (!((flags & ImGuiButtonFlags_Repeat) && g.IO.MouseDownDurationPrev[0] >= g.IO.KeyRepeatDelay))  // Repeat mode trumps <on release>
                    pressed = true;
            ClearActiveID();
        }
    }

    // AllowOverlap mode (rarely used) requires previous frame HoveredId to be null or to match. This allows using patterns where a later submitted widget overlaps a previous one.
    if (hovered && (flags & ImGuiButtonFlags_AllowOverlapMode) && (g.HoveredIdPreviousFrame != id && g.HoveredIdPreviousFrame != 0))
        hovered = pressed = held = false;

    if (out_hovered) *out_hovered = hovered;
    if (out_held) *out_held = held;

    return pressed;
}

bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    ImVec2 pos = window->DC.CursorPos;
    if ((flags & ImGuiButtonFlags_AlignTextBaseLine) && style.FramePadding.y < window->DC.CurrentLineTextBaseOffset) // Try to vertically align buttons that are smaller/have no padding so that text baseline matches (bit hacky, since it shouldn't be a flag)
        pos.y += window->DC.CurrentLineTextBaseOffset - style.FramePadding.y;
    ImVec2 size = CalcItemSize(size_arg, label_size.x + style.FramePadding.x * 2.0f, label_size.y + style.FramePadding.y * 2.0f);

    const ImRect bb(pos, pos + size);
    ItemSize(bb, style.FramePadding.y);
    if (!ItemAdd(bb, &id))
        return false;

    if (window->DC.ButtonRepeat) flags |= ImGuiButtonFlags_Repeat;
    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held, flags);

    // Render
    const ImU32 col = GetColorU32((hovered && held) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
    RenderFrame(bb.Min, bb.Max, col, true, style.FrameRounding);
    RenderTextClipped(bb.Min + style.FramePadding, bb.Max - style.FramePadding, label, NULL, &label_size, style.ButtonTextAlign, &bb);

    // Automatically close popups
    //if (pressed && !(flags & ImGuiButtonFlags_DontClosePopups) && (window->Flags & ImGuiWindowFlags_Popup))
    //    CloseCurrentPopup();

    return pressed;
}

bool ImGui::Button(const char* label, const ImVec2& size_arg)
{
    return ButtonEx(label, size_arg, 0);
}

// Small buttons fits within text without additional vertical spacing.
bool ImGui::SmallButton(const char* label)
{
    ImGuiContext& g = *GImGui;
    float backup_padding_y = g.Style.FramePadding.y;
    g.Style.FramePadding.y = 0.0f;
    bool pressed = ButtonEx(label, ImVec2(0,0), ImGuiButtonFlags_AlignTextBaseLine);
    g.Style.FramePadding.y = backup_padding_y;
    return pressed;
}

// Tip: use ImGui::PushID()/PopID() to push indices or pointers in the ID stack.
// Then you can keep 'str_id' empty or the same for all your buttons (instead of creating a string based on a non-string id)
bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    const ImGuiID id = window->GetID(str_id);
    ImVec2 size = CalcItemSize(size_arg, 0.0f, 0.0f);
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    ItemSize(bb);
    if (!ItemAdd(bb, &id))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held);

    return pressed;
}

// Upper-right button to close a window.
bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos, float radius)
{
    ImGuiWindow* window = GetCurrentWindow();

    const ImRect bb(pos - ImVec2(radius,radius), pos + ImVec2(radius,radius));

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held);

    // Render
    const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_CloseButtonActive : hovered ? ImGuiCol_CloseButtonHovered : ImGuiCol_CloseButton);
    const ImVec2 center = bb.GetCenter();
    window->DrawList->AddCircleFilled(center, ImMax(2.0f, radius), col, 12);

    const float cross_extent = (radius * 0.7071f) - 1.0f;
    if (hovered)
    {
        window->DrawList->AddLine(center + ImVec2(+cross_extent,+cross_extent), center + ImVec2(-cross_extent,-cross_extent), GetColorU32(ImGuiCol_Text));
        window->DrawList->AddLine(center + ImVec2(+cross_extent,-cross_extent), center + ImVec2(-cross_extent,+cross_extent), GetColorU32(ImGuiCol_Text));
    }

    return pressed;
}

void ImGui::Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, const ImVec4& tint_col, const ImVec4& border_col)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    if (border_col.w > 0.0f)
        bb.Max += ImVec2(2,2);
    ItemSize(bb);
    if (!ItemAdd(bb, NULL))
        return;

    if (border_col.w > 0.0f)
    {
        window->DrawList->AddRect(bb.Min, bb.Max, GetColorU32(border_col), 0.0f);
        window->DrawList->AddImage(user_texture_id, bb.Min+ImVec2(1,1), bb.Max-ImVec2(1,1), uv0, uv1, GetColorU32(tint_col));
    }
    else
    {
        window->DrawList->AddImage(user_texture_id, bb.Min, bb.Max, uv0, uv1, GetColorU32(tint_col));
    }
}

// frame_padding < 0: uses FramePadding from style (default)
// frame_padding = 0: no framing
// frame_padding > 0: set framing size
// The color used are the button colors.
bool ImGui::ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, int frame_padding, const ImVec4& bg_col, const ImVec4& tint_col)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    // Default to using texture ID as ID. User can still push string/integer prefixes.
    // We could hash the size/uv to create a unique ID but that would prevent the user from animating UV.
    PushID((void *)user_texture_id);
    const ImGuiID id = window->GetID("#image");
    PopID();

    const ImVec2 padding = (frame_padding >= 0) ? ImVec2((float)frame_padding, (float)frame_padding) : style.FramePadding;
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size + padding*2);
    const ImRect image_bb(window->DC.CursorPos + padding, window->DC.CursorPos + padding + size);
    ItemSize(bb);
    if (!ItemAdd(bb, &id))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held);

    // Render
    const ImU32 col = GetColorU32((hovered && held) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
    RenderFrame(bb.Min, bb.Max, col, true, ImClamp((float)ImMin(padding.x, padding.y), 0.0f, style.FrameRounding));
    if (bg_col.w > 0.0f)
        window->DrawList->AddRectFilled(image_bb.Min, image_bb.Max, GetColorU32(bg_col));
    window->DrawList->AddImage(user_texture_id, image_bb.Min, image_bb.Max, uv0, uv1, GetColorU32(tint_col));

    return pressed;
}

// Start logging ImGui output to TTY
void ImGui::LogToTTY(int max_depth)
{
    ImGuiContext& g = *GImGui;
    if (g.LogEnabled)
        return;
    ImGuiWindow* window = GetCurrentWindowRead();

    g.LogEnabled = true;
    g.LogFile = stdout;
    g.LogStartDepth = window->DC.TreeDepth;
    if (max_depth >= 0)
        g.LogAutoExpandMaxDepth = max_depth;
}

// Start logging ImGui output to given file
void ImGui::LogToFile(int max_depth, const char* filename)
{
    ImGuiContext& g = *GImGui;
    if (g.LogEnabled)
        return;
    ImGuiWindow* window = GetCurrentWindowRead();

    if (!filename)
    {
        filename = g.IO.LogFilename;
        if (!filename)
            return;
    }

    g.LogFile = ImFileOpen(filename, "ab");
    if (!g.LogFile)
    {
        IM_ASSERT(g.LogFile != NULL); // Consider this an error
        return;
    }
    g.LogEnabled = true;
    g.LogStartDepth = window->DC.TreeDepth;
    if (max_depth >= 0)
        g.LogAutoExpandMaxDepth = max_depth;
}

// Start logging ImGui output to clipboard
void ImGui::LogToClipboard(int max_depth)
{
    ImGuiContext& g = *GImGui;
    if (g.LogEnabled)
        return;
    ImGuiWindow* window = GetCurrentWindowRead();

    g.LogEnabled = true;
    g.LogFile = NULL;
    g.LogStartDepth = window->DC.TreeDepth;
    if (max_depth >= 0)
        g.LogAutoExpandMaxDepth = max_depth;
}

void ImGui::LogFinish()
{
    ImGuiContext& g = *GImGui;
    if (!g.LogEnabled)
        return;

    LogText(IM_NEWLINE);
    g.LogEnabled = false;
    if (g.LogFile != NULL)
    {
        if (g.LogFile == stdout)
            fflush(g.LogFile);
        else
            fclose(g.LogFile);
        g.LogFile = NULL;
    }
    if (g.LogClipboard->size() > 1)
    {
        SetClipboardText(g.LogClipboard->begin());
        g.LogClipboard->clear();
    }
}

// Helper to display logging buttons
void ImGui::LogButtons()
{
    ImGuiContext& g = *GImGui;

    PushID("LogButtons");
    const bool log_to_tty = Button("Log To TTY"); SameLine();
    const bool log_to_file = Button("Log To File"); SameLine();
    const bool log_to_clipboard = Button("Log To Clipboard"); SameLine();
    PushItemWidth(80.0f);
    PushAllowKeyboardFocus(false);
    SliderInt("Depth", &g.LogAutoExpandMaxDepth, 0, 9, NULL);
    PopAllowKeyboardFocus();
    PopItemWidth();
    PopID();

    // Start logging at the end of the function so that the buttons don't appear in the log
    if (log_to_tty)
        LogToTTY(g.LogAutoExpandMaxDepth);
    if (log_to_file)
        LogToFile(g.LogAutoExpandMaxDepth, g.IO.LogFilename);
    if (log_to_clipboard)
        LogToClipboard(g.LogAutoExpandMaxDepth);
}

bool ImGui::TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags)
{
    if (flags & ImGuiTreeNodeFlags_Leaf)
        return true;

    // We only write to the tree storage if the user clicks (or explicitely use SetNextTreeNode*** functions)
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    ImGuiStorage* storage = window->DC.StateStorage;

    bool is_open;
    if (g.SetNextTreeNodeOpenCond != 0)
    {
        if (g.SetNextTreeNodeOpenCond & ImGuiSetCond_Always)
        {
            is_open = g.SetNextTreeNodeOpenVal;
            storage->SetInt(id, is_open);
        }
        else
        {
            // We treat ImGuiSetCondition_Once and ImGuiSetCondition_FirstUseEver the same because tree node state are not saved persistently.
            const int stored_value = storage->GetInt(id, -1);
            if (stored_value == -1)
            {
                is_open = g.SetNextTreeNodeOpenVal;
                storage->SetInt(id, is_open);
            }
            else
            {
                is_open = stored_value != 0;
            }
        }
        g.SetNextTreeNodeOpenCond = 0;
    }
    else
    {
        is_open = storage->GetInt(id, (flags & ImGuiTreeNodeFlags_DefaultOpen) ? 1 : 0) != 0;
    }

    // When logging is enabled, we automatically expand tree nodes (but *NOT* collapsing headers.. seems like sensible behavior).
    // NB- If we are above max depth we still allow manually opened nodes to be logged.
    if (g.LogEnabled && !(flags & ImGuiTreeNodeFlags_NoAutoOpenOnLog) && window->DC.TreeDepth < g.LogAutoExpandMaxDepth)
        is_open = true;

    return is_open;
}

bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char* label_end)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const bool display_frame = (flags & ImGuiTreeNodeFlags_Framed) != 0;
    const ImVec2 padding = display_frame ? style.FramePadding : ImVec2(style.FramePadding.x, 0.0f);

    if (!label_end)
        label_end = FindRenderedTextEnd(label);
    const ImVec2 label_size = CalcTextSize(label, label_end, false);

    // We vertically grow up to current line height up the typical widget height.
    const float text_base_offset_y = ImMax(0.0f, window->DC.CurrentLineTextBaseOffset - padding.y); // Latch before ItemSize changes it
    const float frame_height = ImMax(ImMin(window->DC.CurrentLineHeight, g.FontSize + style.FramePadding.y*2), label_size.y + padding.y*2);
    ImRect bb = ImRect(window->DC.CursorPos, ImVec2(window->Pos.x + GetContentRegionMax().x, window->DC.CursorPos.y + frame_height));
    if (display_frame)
    {
        // Framed header expand a little outside the default padding
        bb.Min.x -= (float)(int)(window->WindowPadding.x*0.5f) - 1;
        bb.Max.x += (float)(int)(window->WindowPadding.x*0.5f) - 1;
    }

    const float text_offset_x = (g.FontSize + (display_frame ? padding.x*3 : padding.x*2));   // Collapser arrow width + Spacing
    const float text_width = g.FontSize + (label_size.x > 0.0f ? label_size.x + padding.x*2 : 0.0f);   // Include collapser
    ItemSize(ImVec2(text_width, frame_height), text_base_offset_y);

    // For regular tree nodes, we arbitrary allow to click past 2 worth of ItemSpacing
    // (Ideally we'd want to add a flag for the user to specify we want want the hit test to be done up to the right side of the content or not)
    const ImRect interact_bb = display_frame ? bb : ImRect(bb.Min.x, bb.Min.y, bb.Min.x + text_width + style.ItemSpacing.x*2, bb.Max.y);
    bool is_open = TreeNodeBehaviorIsOpen(id, flags);
    if (!ItemAdd(interact_bb, &id))
    {
        if (is_open && !(flags & ImGuiTreeNodeFlags_NoTreePushOnOpen))
            TreePushRawID(id);
        return is_open;
    }

    // Flags that affects opening behavior:
    // - 0(default) ..................... single-click anywhere to open
    // - OpenOnDoubleClick .............. double-click anywhere to open
    // - OpenOnArrow .................... single-click on arrow to open
    // - OpenOnDoubleClick|OpenOnArrow .. single-click on arrow or double-click anywhere to open
    ImGuiButtonFlags button_flags = ImGuiButtonFlags_NoKeyModifiers | ((flags & ImGuiTreeNodeFlags_AllowOverlapMode) ? ImGuiButtonFlags_AllowOverlapMode : 0);
    if (flags & ImGuiTreeNodeFlags_OpenOnDoubleClick)
        button_flags |= ImGuiButtonFlags_PressedOnDoubleClick | ((flags & ImGuiTreeNodeFlags_OpenOnArrow) ? ImGuiButtonFlags_PressedOnClickRelease : 0);
    bool hovered, held, pressed = ButtonBehavior(interact_bb, id, &hovered, &held, button_flags);
    if (pressed && !(flags & ImGuiTreeNodeFlags_Leaf))
    {
        bool toggled = !(flags & (ImGuiTreeNodeFlags_OpenOnArrow | ImGuiTreeNodeFlags_OpenOnDoubleClick));
        if (flags & ImGuiTreeNodeFlags_OpenOnArrow)
            toggled |= IsMouseHoveringRect(interact_bb.Min, ImVec2(interact_bb.Min.x + text_offset_x, interact_bb.Max.y));
        if (flags & ImGuiTreeNodeFlags_OpenOnDoubleClick)
            toggled |= g.IO.MouseDoubleClicked[0];
        if (toggled)
        {
            is_open = !is_open;
            window->DC.StateStorage->SetInt(id, is_open);
        }
    }
    if (flags & ImGuiTreeNodeFlags_AllowOverlapMode)
        SetItemAllowOverlap();

    // Render
    const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_HeaderActive : hovered ? ImGuiCol_HeaderHovered : ImGuiCol_Header);
    const ImVec2 text_pos = bb.Min + ImVec2(text_offset_x, padding.y + text_base_offset_y);
    if (display_frame)
    {
        // Framed type
        RenderFrame(bb.Min, bb.Max, col, true, style.FrameRounding);
        RenderCollapseTriangle(bb.Min + padding + ImVec2(0.0f, text_base_offset_y), is_open, 1.0f);
        if (g.LogEnabled)
        {
            // NB: '##' is normally used to hide text (as a library-wide feature), so we need to specify the text range to make sure the ## aren't stripped out here.
            const char log_prefix[] = "\n##";
            const char log_suffix[] = "##";
            LogRenderedText(text_pos, log_prefix, log_prefix+3);
            RenderTextClipped(text_pos, bb.Max, label, label_end, &label_size);
            LogRenderedText(text_pos, log_suffix+1, log_suffix+3);
        }
        else
        {
            RenderTextClipped(text_pos, bb.Max, label, label_end, &label_size);
        }
    }
    else
    {
        // Unframed typed for tree nodes
        if (hovered || (flags & ImGuiTreeNodeFlags_Selected))
            RenderFrame(bb.Min, bb.Max, col, false);

        if (flags & ImGuiTreeNodeFlags_Bullet)
            RenderBullet(bb.Min + ImVec2(text_offset_x * 0.5f, g.FontSize*0.50f + text_base_offset_y));
        else if (!(flags & ImGuiTreeNodeFlags_Leaf))
            RenderCollapseTriangle(bb.Min + ImVec2(padding.x, g.FontSize*0.15f + text_base_offset_y), is_open, 0.70f);
        if (g.LogEnabled)
            LogRenderedText(text_pos, ">");
        RenderText(text_pos, label, label_end, false);
    }

    if (is_open && !(flags & ImGuiTreeNodeFlags_NoTreePushOnOpen))
        TreePushRawID(id);
    return is_open;
}

// CollapsingHeader returns true when opened but do not indent nor push into the ID stack (because of the ImGuiTreeNodeFlags_NoTreePushOnOpen flag).
// This is basically the same as calling TreeNodeEx(label, ImGuiTreeNodeFlags_CollapsingHeader | ImGuiTreeNodeFlags_NoTreePushOnOpen). You can remove the _NoTreePushOnOpen flag if you want behavior closer to normal TreeNode().
bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    return TreeNodeBehavior(window->GetID(label), flags | ImGuiTreeNodeFlags_CollapsingHeader | ImGuiTreeNodeFlags_NoTreePushOnOpen, label);
}

bool ImGui::CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    if (p_open && !*p_open)
        return false;

    ImGuiID id = window->GetID(label);
    bool is_open = TreeNodeBehavior(id, flags | ImGuiTreeNodeFlags_CollapsingHeader | ImGuiTreeNodeFlags_NoTreePushOnOpen | (p_open ? ImGuiTreeNodeFlags_AllowOverlapMode : 0), label);
    if (p_open)
    {
        // Create a small overlapping close button // FIXME: We can evolve this into user accessible helpers to add extra buttons on title bars, headers, etc.
        ImGuiContext& g = *GImGui;
        float button_sz = g.FontSize * 0.5f;
        if (CloseButton(window->GetID((void*)(intptr_t)(id+1)), ImVec2(ImMin(window->DC.LastItemRect.Max.x, window->ClipRect.Max.x) - g.Style.FramePadding.x - button_sz, window->DC.LastItemRect.Min.y + g.Style.FramePadding.y + button_sz), button_sz))
            *p_open = false;
    }

    return is_open;
}

bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    return TreeNodeBehavior(window->GetID(label), flags, label, NULL);
}

bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const char* label_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    return TreeNodeBehavior(window->GetID(str_id), flags, g.TempBuffer, label_end);
}

bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const char* label_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    return TreeNodeBehavior(window->GetID(ptr_id), flags, g.TempBuffer, label_end);
}

bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)
{
    return TreeNodeExV(str_id, 0, fmt, args);
}

bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)
{
    return TreeNodeExV(ptr_id, 0, fmt, args);
}

bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    bool is_open = TreeNodeExV(str_id, flags, fmt, args);
    va_end(args);
    return is_open;
}

bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    bool is_open = TreeNodeExV(ptr_id, flags, fmt, args);
    va_end(args);
    return is_open;
}

bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    bool is_open = TreeNodeExV(str_id, 0, fmt, args);
    va_end(args);
    return is_open;
}

bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    bool is_open = TreeNodeExV(ptr_id, 0, fmt, args);
    va_end(args);
    return is_open;
}

bool ImGui::TreeNode(const char* label)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;
    return TreeNodeBehavior(window->GetID(label), 0, label, NULL);
}

void ImGui::TreeAdvanceToLabelPos()
{
    ImGuiContext& g = *GImGui;
    g.CurrentWindow->DC.CursorPos.x += GetTreeNodeToLabelSpacing();
}

// Horizontal distance preceding label when using TreeNode() or Bullet()
float ImGui::GetTreeNodeToLabelSpacing()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize + (g.Style.FramePadding.x * 2.0f);
}

void ImGui::SetNextTreeNodeOpen(bool is_open, ImGuiSetCond cond)
{
    ImGuiContext& g = *GImGui;
    g.SetNextTreeNodeOpenVal = is_open;
    g.SetNextTreeNodeOpenCond = cond ? cond : ImGuiSetCond_Always;
}

void ImGui::PushID(const char* str_id)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->IDStack.push_back(window->GetID(str_id));
}

void ImGui::PushID(const char* str_id_begin, const char* str_id_end)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->IDStack.push_back(window->GetID(str_id_begin, str_id_end));
}

void ImGui::PushID(const void* ptr_id)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->IDStack.push_back(window->GetID(ptr_id));
}

void ImGui::PushID(int int_id)
{
    const void* ptr_id = (void*)(intptr_t)int_id;
    ImGuiWindow* window = GetCurrentWindow();
    window->IDStack.push_back(window->GetID(ptr_id));
}

void ImGui::PopID()
{
    ImGuiWindow* window = GetCurrentWindow();
    window->IDStack.pop_back();
}

ImGuiID ImGui::GetID(const char* str_id)
{
    return GImGui->CurrentWindow->GetID(str_id);
}

ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)
{
    return GImGui->CurrentWindow->GetID(str_id_begin, str_id_end);
}

ImGuiID ImGui::GetID(const void* ptr_id)
{
    return GImGui->CurrentWindow->GetID(ptr_id);
}

void ImGui::Bullet()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const float line_height = ImMax(ImMin(window->DC.CurrentLineHeight, g.FontSize + g.Style.FramePadding.y*2), g.FontSize);
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(g.FontSize, line_height));
    ItemSize(bb);
    if (!ItemAdd(bb, NULL))
    {
        SameLine(0, style.FramePadding.x*2);
        return;
    }

    // Render and stay on same line
    RenderBullet(bb.Min + ImVec2(style.FramePadding.x + g.FontSize*0.5f, line_height*0.5f));
    SameLine(0, style.FramePadding.x*2);
}

// Text with a little bullet aligned to the typical tree node.
void ImGui::BulletTextV(const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    const char* text_begin = g.TempBuffer;
    const char* text_end = text_begin + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    const ImVec2 label_size = CalcTextSize(text_begin, text_end, false);
    const float text_base_offset_y = ImMax(0.0f, window->DC.CurrentLineTextBaseOffset); // Latch before ItemSize changes it
    const float line_height = ImMax(ImMin(window->DC.CurrentLineHeight, g.FontSize + g.Style.FramePadding.y*2), g.FontSize);
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(g.FontSize + (label_size.x > 0.0f ? (label_size.x + style.FramePadding.x*2) : 0.0f), ImMax(line_height, label_size.y)));  // Empty text doesn't add padding
    ItemSize(bb);
    if (!ItemAdd(bb, NULL))
        return;

    // Render
    RenderBullet(bb.Min + ImVec2(style.FramePadding.x + g.FontSize*0.5f, line_height*0.5f));
    RenderText(bb.Min+ImVec2(g.FontSize + style.FramePadding.x*2, text_base_offset_y), text_begin, text_end, false);
}

void ImGui::BulletText(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    BulletTextV(fmt, args);
    va_end(args);
}

static inline void DataTypeFormatString(ImGuiDataType data_type, void* data_ptr, const char* display_format, char* buf, int buf_size)
{
    if (data_type == ImGuiDataType_Int)
        ImFormatString(buf, buf_size, display_format, *(int*)data_ptr);
    else if (data_type == ImGuiDataType_Float)
        ImFormatString(buf, buf_size, display_format, *(float*)data_ptr);
}

static inline void DataTypeFormatString(ImGuiDataType data_type, void* data_ptr, int decimal_precision, char* buf, int buf_size)
{
    if (data_type == ImGuiDataType_Int)
    {
        if (decimal_precision < 0)
            ImFormatString(buf, buf_size, "%d", *(int*)data_ptr);
        else
            ImFormatString(buf, buf_size, "%.*d", decimal_precision, *(int*)data_ptr);
    }
    else if (data_type == ImGuiDataType_Float)
    {
        if (decimal_precision < 0)
            ImFormatString(buf, buf_size, "%f", *(float*)data_ptr);     // Ideally we'd have a minimum decimal precision of 1 to visually denote that it is a float, while hiding non-significant digits?
        else
            ImFormatString(buf, buf_size, "%.*f", decimal_precision, *(float*)data_ptr);
    }
}

static void DataTypeApplyOp(ImGuiDataType data_type, int op, void* value1, const void* value2)// Store into value1
{
    if (data_type == ImGuiDataType_Int)
    {
        if (op == '+')
            *(int*)value1 = *(int*)value1 + *(const int*)value2;
        else if (op == '-')
            *(int*)value1 = *(int*)value1 - *(const int*)value2;
    }
    else if (data_type == ImGuiDataType_Float)
    {
        if (op == '+')
            *(float*)value1 = *(float*)value1 + *(const float*)value2;
        else if (op == '-')
            *(float*)value1 = *(float*)value1 - *(const float*)value2;
    }
}

// User can input math operators (e.g. +100) to edit a numerical values.
static bool DataTypeApplyOpFromText(const char* buf, const char* initial_value_buf, ImGuiDataType data_type, void* data_ptr, const char* scalar_format)
{
    while (ImCharIsSpace(*buf))
        buf++;

    // We don't support '-' op because it would conflict with inputing negative value.
    // Instead you can use +-100 to subtract from an existing value
    char op = buf[0];
    if (op == '+' || op == '*' || op == '/')
    {
        buf++;
        while (ImCharIsSpace(*buf))
            buf++;
    }
    else
    {
        op = 0;
    }
    if (!buf[0])
        return false;

    if (data_type == ImGuiDataType_Int)
    {
        if (!scalar_format)
            scalar_format = "%d";
        int* v = (int*)data_ptr;
        const int old_v = *v;
        int arg0 = *v;
        if (op && sscanf(initial_value_buf, scalar_format, &arg0) < 1)
            return false;

        // Store operand in a float so we can use fractional value for multipliers (*1.1), but constant always parsed as integer so we can fit big integers (e.g. 2000000003) past float precision
        float arg1 = 0.0f;
        if (op == '+')      { if (sscanf(buf, "%f", &arg1) == 1) *v = (int)(arg0 + arg1); }                // Add (use "+-" to subtract)
        else if (op == '*') { if (sscanf(buf, "%f", &arg1) == 1) *v = (int)(arg0 * arg1); }                // Multiply
        else if (op == '/') { if (sscanf(buf, "%f", &arg1) == 1 && arg1 != 0.0f) *v = (int)(arg0 / arg1); }// Divide
        else                { if (sscanf(buf, scalar_format, &arg0) == 1) *v = arg0; }                     // Assign constant
        return (old_v != *v);
    }
    else if (data_type == ImGuiDataType_Float)
    {
        // For floats we have to ignore format with precision (e.g. "%.2f") because sscanf doesn't take them in
        scalar_format = "%f";
        float* v = (float*)data_ptr;
        const float old_v = *v;
        float arg0 = *v;
        if (op && sscanf(initial_value_buf, scalar_format, &arg0) < 1)
            return false;

        float arg1 = 0.0f;
        if (sscanf(buf, scalar_format, &arg1) < 1)
            return false;
        if (op == '+')      { *v = arg0 + arg1; }                    // Add (use "+-" to subtract)
        else if (op == '*') { *v = arg0 * arg1; }                    // Multiply
        else if (op == '/') { if (arg1 != 0.0f) *v = arg0 / arg1; }  // Divide
        else                { *v = arg1; }                           // Assign constant
        return (old_v != *v);
    }

    return false;
}

// Create text input in place of a slider (when CTRL+Clicking on slider)
bool ImGui::InputScalarAsWidgetReplacement(const ImRect& aabb, const char* label, ImGuiDataType data_type, void* data_ptr, ImGuiID id, int decimal_precision)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    // Our replacement widget will override the focus ID (registered previously to allow for a TAB focus to happen)
    SetActiveID(g.ScalarAsInputTextId, window);
    SetHoveredID(0);
    FocusableItemUnregister(window);

    char buf[32];
    DataTypeFormatString(data_type, data_ptr, decimal_precision, buf, IM_ARRAYSIZE(buf));
    bool text_value_changed = InputTextEx(label, buf, IM_ARRAYSIZE(buf), aabb.GetSize(), ImGuiInputTextFlags_CharsDecimal | ImGuiInputTextFlags_AutoSelectAll);
    if (g.ScalarAsInputTextId == 0)
    {
        // First frame
        IM_ASSERT(g.ActiveId == id);    // InputText ID expected to match the Slider ID (else we'd need to store them both, which is also possible)
        g.ScalarAsInputTextId = g.ActiveId;
        SetHoveredID(id);
    }
    else if (g.ActiveId != g.ScalarAsInputTextId)
    {
        // Release
        g.ScalarAsInputTextId = 0;
    }
    if (text_value_changed)
        return DataTypeApplyOpFromText(buf, GImGui->InputTextState.InitialText.begin(), data_type, data_ptr, NULL);
    return false;
}

// Parse display precision back from the display format string
int ImGui::ParseFormatPrecision(const char* fmt, int default_precision)
{
    int precision = default_precision;
    while ((fmt = strchr(fmt, '%')) != NULL)
    {
        fmt++;
        if (fmt[0] == '%') { fmt++; continue; } // Ignore "%%"
        while (*fmt >= '0' && *fmt <= '9')
            fmt++;
        if (*fmt == '.')
        {
            precision = atoi(fmt + 1);
            if (precision < 0 || precision > 10)
                precision = default_precision;
        }
        break;
    }
    return precision;
}

float ImGui::RoundScalar(float value, int decimal_precision)
{
    // Round past decimal precision
    // So when our value is 1.99999 with a precision of 0.001 we'll end up rounding to 2.0
    // FIXME: Investigate better rounding methods
    static const float min_steps[10] = { 1.0f, 0.1f, 0.01f, 0.001f, 0.0001f, 0.00001f, 0.000001f, 0.0000001f, 0.00000001f, 0.000000001f };
    float min_step = (decimal_precision >= 0 && decimal_precision < 10) ? min_steps[decimal_precision] : powf(10.0f, (float)-decimal_precision);
    bool negative = value < 0.0f;
    value = fabsf(value);
    float remainder = fmodf(value, min_step);
    if (remainder <= min_step*0.5f)
        value -= remainder;
    else
        value += (min_step - remainder);
    return negative ? -value : value;
}

static inline float SliderBehaviorCalcRatioFromValue(float v, float v_min, float v_max, float power, float linear_zero_pos)
{
    if (v_min == v_max)
        return 0.0f;

    const bool is_non_linear = (power < 1.0f-0.00001f) || (power > 1.0f+0.00001f);
    const float v_clamped = (v_min < v_max) ? ImClamp(v, v_min, v_max) : ImClamp(v, v_max, v_min);
    if (is_non_linear)
    {
        if (v_clamped < 0.0f)
        {
            const float f = 1.0f - (v_clamped - v_min) / (ImMin(0.0f,v_max) - v_min);
            return (1.0f - powf(f, 1.0f/power)) * linear_zero_pos;
        }
        else
        {
            const float f = (v_clamped - ImMax(0.0f,v_min)) / (v_max - ImMax(0.0f,v_min));
            return linear_zero_pos + powf(f, 1.0f/power) * (1.0f - linear_zero_pos);
        }
    }

    // Linear slider
    return (v_clamped - v_min) / (v_max - v_min);
}

bool ImGui::SliderBehavior(const ImRect& frame_bb, ImGuiID id, float* v, float v_min, float v_max, float power, int decimal_precision, ImGuiSliderFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    const ImGuiStyle& style = g.Style;

    // Draw frame
    RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);

    const bool is_non_linear = (power < 1.0f-0.00001f) || (power > 1.0f+0.00001f);
    const bool is_horizontal = (flags & ImGuiSliderFlags_Vertical) == 0;

    const float grab_padding = 2.0f;
    const float slider_sz = is_horizontal ? (frame_bb.GetWidth() - grab_padding * 2.0f) : (frame_bb.GetHeight() - grab_padding * 2.0f);
    float grab_sz;
    if (decimal_precision > 0)
        grab_sz = ImMin(style.GrabMinSize, slider_sz);
    else
        grab_sz = ImMin(ImMax(1.0f * (slider_sz / ((v_min < v_max ? v_max - v_min : v_min - v_max) + 1.0f)), style.GrabMinSize), slider_sz);  // Integer sliders, if possible have the grab size represent 1 unit
    const float slider_usable_sz = slider_sz - grab_sz;
    const float slider_usable_pos_min = (is_horizontal ? frame_bb.Min.x : frame_bb.Min.y) + grab_padding + grab_sz*0.5f;
    const float slider_usable_pos_max = (is_horizontal ? frame_bb.Max.x : frame_bb.Max.y) - grab_padding - grab_sz*0.5f;

    // For logarithmic sliders that cross over sign boundary we want the exponential increase to be symmetric around 0.0f
    float linear_zero_pos = 0.0f;   // 0.0->1.0f
    if (v_min * v_max < 0.0f)
    {
        // Different sign
        const float linear_dist_min_to_0 = powf(fabsf(0.0f - v_min), 1.0f/power);
        const float linear_dist_max_to_0 = powf(fabsf(v_max - 0.0f), 1.0f/power);
        linear_zero_pos = linear_dist_min_to_0 / (linear_dist_min_to_0+linear_dist_max_to_0);
    }
    else
    {
        // Same sign
        linear_zero_pos = v_min < 0.0f ? 1.0f : 0.0f;
    }

    // Process clicking on the slider
    bool value_changed = false;
    if (g.ActiveId == id)
    {
        if (g.IO.MouseDown[0])
        {
            const float mouse_abs_pos = is_horizontal ? g.IO.MousePos.x : g.IO.MousePos.y;
            float clicked_t = (slider_usable_sz > 0.0f) ? ImClamp((mouse_abs_pos - slider_usable_pos_min) / slider_usable_sz, 0.0f, 1.0f) : 0.0f;
            if (!is_horizontal)
                clicked_t = 1.0f - clicked_t;

            float new_value;
            if (is_non_linear)
            {
                // Account for logarithmic scale on both sides of the zero
                if (clicked_t < linear_zero_pos)
                {
                    // Negative: rescale to the negative range before powering
                    float a = 1.0f - (clicked_t / linear_zero_pos);
                    a = powf(a, power);
                    new_value = ImLerp(ImMin(v_max,0.0f), v_min, a);
                }
                else
                {
                    // Positive: rescale to the positive range before powering
                    float a;
                    if (fabsf(linear_zero_pos - 1.0f) > 1.e-6f)
                        a = (clicked_t - linear_zero_pos) / (1.0f - linear_zero_pos);
                    else
                        a = clicked_t;
                    a = powf(a, power);
                    new_value = ImLerp(ImMax(v_min,0.0f), v_max, a);
                }
            }
            else
            {
                // Linear slider
                new_value = ImLerp(v_min, v_max, clicked_t);
            }

            // Round past decimal precision
            new_value = RoundScalar(new_value, decimal_precision);
            if (*v != new_value)
            {
                *v = new_value;
                value_changed = true;
            }
        }
        else
        {
            ClearActiveID();
        }
    }

    // Calculate slider grab positioning
    float grab_t = SliderBehaviorCalcRatioFromValue(*v, v_min, v_max, power, linear_zero_pos);

    // Draw
    if (!is_horizontal)
        grab_t = 1.0f - grab_t;
    const float grab_pos = ImLerp(slider_usable_pos_min, slider_usable_pos_max, grab_t);
    ImRect grab_bb;
    if (is_horizontal)
        grab_bb = ImRect(ImVec2(grab_pos - grab_sz*0.5f, frame_bb.Min.y + grab_padding), ImVec2(grab_pos + grab_sz*0.5f, frame_bb.Max.y - grab_padding));
    else
        grab_bb = ImRect(ImVec2(frame_bb.Min.x + grab_padding, grab_pos - grab_sz*0.5f), ImVec2(frame_bb.Max.x - grab_padding, grab_pos + grab_sz*0.5f));
    window->DrawList->AddRectFilled(grab_bb.Min, grab_bb.Max, GetColorU32(g.ActiveId == id ? ImGuiCol_SliderGrabActive : ImGuiCol_SliderGrab), style.GrabRounding);

    return value_changed;
}

// Use power!=1.0 for logarithmic sliders.
// Adjust display_format to decorate the value with a prefix or a suffix.
//   "%.3f"         1.234
//   "%5.2f secs"   01.23 secs
//   "Gold: %.0f"   Gold: 1
bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* display_format, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const float w = CalcItemWidth();

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y*2.0f));
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));

    // NB- we don't call ItemSize() yet because we may turn into a text edit box below
    if (!ItemAdd(total_bb, &id))
    {
        ItemSize(total_bb, style.FramePadding.y);
        return false;
    }

    const bool hovered = IsHovered(frame_bb, id);
    if (hovered)
        SetHoveredID(id);

    if (!display_format)
        display_format = "%.3f";
    int decimal_precision = ParseFormatPrecision(display_format, 3);

    // Tabbing or CTRL-clicking on Slider turns it into an input box
    bool start_text_input = false;
    const bool tab_focus_requested = FocusableItemRegister(window, g.ActiveId == id);
    if (tab_focus_requested || (hovered && g.IO.MouseClicked[0]))
    {
        SetActiveID(id, window);
        FocusWindow(window);

        if (tab_focus_requested || g.IO.KeyCtrl)
        {
            start_text_input = true;
            g.ScalarAsInputTextId = 0;
        }
    }
    if (start_text_input || (g.ActiveId == id && g.ScalarAsInputTextId == id))
        return InputScalarAsWidgetReplacement(frame_bb, label, ImGuiDataType_Float, v, id, decimal_precision);

    ItemSize(total_bb, style.FramePadding.y);

    // Actual slider behavior + render grab
    const bool value_changed = SliderBehavior(frame_bb, id, v, v_min, v_max, power, decimal_precision);

    // Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
    char value_buf[64];
    const char* value_buf_end = value_buf + ImFormatString(value_buf, IM_ARRAYSIZE(value_buf), display_format, *v);
    RenderTextClipped(frame_bb.Min, frame_bb.Max, value_buf, value_buf_end, NULL, ImVec2(0.5f,0.5f));

    if (label_size.x > 0.0f)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    return value_changed;
}

bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* display_format, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + size);
    const ImRect bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));

    ItemSize(bb, style.FramePadding.y);
    if (!ItemAdd(frame_bb, &id))
        return false;

    const bool hovered = IsHovered(frame_bb, id);
    if (hovered)
        SetHoveredID(id);

    if (!display_format)
        display_format = "%.3f";
    int decimal_precision = ParseFormatPrecision(display_format, 3);

    if (hovered && g.IO.MouseClicked[0])
    {
        SetActiveID(id, window);
        FocusWindow(window);
    }

    // Actual slider behavior + render grab
    bool value_changed = SliderBehavior(frame_bb, id, v, v_min, v_max, power, decimal_precision, ImGuiSliderFlags_Vertical);

    // Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
    // For the vertical slider we allow centered text to overlap the frame padding
    char value_buf[64];
    char* value_buf_end = value_buf + ImFormatString(value_buf, IM_ARRAYSIZE(value_buf), display_format, *v);
    RenderTextClipped(ImVec2(frame_bb.Min.x, frame_bb.Min.y + style.FramePadding.y), frame_bb.Max, value_buf, value_buf_end, NULL, ImVec2(0.5f,0.0f));
    if (label_size.x > 0.0f)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    return value_changed;
}

bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_max)
{
    float v_deg = (*v_rad) * 360.0f / (2*IM_PI);
    bool value_changed = SliderFloat(label, &v_deg, v_degrees_min, v_degrees_max, "%.0f deg", 1.0f);
    *v_rad = v_deg * (2*IM_PI) / 360.0f;
    return value_changed;
}

bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* display_format)
{
    if (!display_format)
        display_format = "%.0f";
    float v_f = (float)*v;
    bool value_changed = SliderFloat(label, &v_f, (float)v_min, (float)v_max, display_format, 1.0f);
    *v = (int)v_f;
    return value_changed;
}

bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* display_format)
{
    if (!display_format)
        display_format = "%.0f";
    float v_f = (float)*v;
    bool value_changed = VSliderFloat(label, size, &v_f, (float)v_min, (float)v_max, display_format, 1.0f);
    *v = (int)v_f;
    return value_changed;
}

// Add multiple sliders on 1 line for compact edition of multiple components
bool ImGui::SliderFloatN(const char* label, float* v, int components, float v_min, float v_max, const char* display_format, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components);
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        value_changed |= SliderFloat("##v", &v[i], v_min, v_max, display_format, power);
        SameLine(0, g.Style.ItemInnerSpacing.x);
        PopID();
        PopItemWidth();
    }
    PopID();

    TextUnformatted(label, FindRenderedTextEnd(label));
    EndGroup();

    return value_changed;
}

bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* display_format, float power)
{
    return SliderFloatN(label, v, 2, v_min, v_max, display_format, power);
}

bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* display_format, float power)
{
    return SliderFloatN(label, v, 3, v_min, v_max, display_format, power);
}

bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* display_format, float power)
{
    return SliderFloatN(label, v, 4, v_min, v_max, display_format, power);
}

bool ImGui::SliderIntN(const char* label, int* v, int components, int v_min, int v_max, const char* display_format)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components);
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        value_changed |= SliderInt("##v", &v[i], v_min, v_max, display_format);
        SameLine(0, g.Style.ItemInnerSpacing.x);
        PopID();
        PopItemWidth();
    }
    PopID();

    TextUnformatted(label, FindRenderedTextEnd(label));
    EndGroup();

    return value_changed;
}

bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* display_format)
{
    return SliderIntN(label, v, 2, v_min, v_max, display_format);
}

bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* display_format)
{
    return SliderIntN(label, v, 3, v_min, v_max, display_format);
}

bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* display_format)
{
    return SliderIntN(label, v, 4, v_min, v_max, display_format);
}

bool ImGui::DragBehavior(const ImRect& frame_bb, ImGuiID id, float* v, float v_speed, float v_min, float v_max, int decimal_precision, float power)
{
    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    // Draw frame
    const ImU32 frame_col = GetColorU32(g.ActiveId == id ? ImGuiCol_FrameBgActive : g.HoveredId == id ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);
    RenderFrame(frame_bb.Min, frame_bb.Max, frame_col, true, style.FrameRounding);

    bool value_changed = false;

    // Process clicking on the drag
    if (g.ActiveId == id)
    {
        if (g.IO.MouseDown[0])
        {
            if (g.ActiveIdIsJustActivated)
            {
                // Lock current value on click
                g.DragCurrentValue = *v;
                g.DragLastMouseDelta = ImVec2(0.f, 0.f);
            }

            float v_cur = g.DragCurrentValue;
            const ImVec2 mouse_drag_delta = GetMouseDragDelta(0, 1.0f);
            if (fabsf(mouse_drag_delta.x - g.DragLastMouseDelta.x) > 0.0f)
            {
                float speed = v_speed;
                if (speed == 0.0f && (v_max - v_min) != 0.0f && (v_max - v_min) < FLT_MAX)
                    speed = (v_max - v_min) * g.DragSpeedDefaultRatio;
                if (g.IO.KeyShift && g.DragSpeedScaleFast >= 0.0f)
                    speed = speed * g.DragSpeedScaleFast;
                if (g.IO.KeyAlt && g.DragSpeedScaleSlow >= 0.0f)
                    speed = speed * g.DragSpeedScaleSlow;

                float delta = (mouse_drag_delta.x - g.DragLastMouseDelta.x) * speed;
                if (fabsf(power - 1.0f) > 0.001f)
                {
                    // Logarithmic curve on both side of 0.0
                    float v0_abs = v_cur >= 0.0f ? v_cur : -v_cur;
                    float v0_sign = v_cur >= 0.0f ? 1.0f : -1.0f;
                    float v1 = powf(v0_abs, 1.0f / power) + (delta * v0_sign);
                    float v1_abs = v1 >= 0.0f ? v1 : -v1;
                    float v1_sign = v1 >= 0.0f ? 1.0f : -1.0f;          // Crossed sign line
                    v_cur = powf(v1_abs, power) * v0_sign * v1_sign;    // Reapply sign
                }
                else
                {
                    v_cur += delta;
                }
                g.DragLastMouseDelta.x = mouse_drag_delta.x;

                // Clamp
                if (v_min < v_max)
                    v_cur = ImClamp(v_cur, v_min, v_max);
                g.DragCurrentValue = v_cur;
            }

            // Round to user desired precision, then apply
            v_cur = RoundScalar(v_cur, decimal_precision);
            if (*v != v_cur)
            {
                *v = v_cur;
                value_changed = true;
            }
        }
        else
        {
            ClearActiveID();
        }
    }

    return value_changed;
}

bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, const char* display_format, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const float w = CalcItemWidth();

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y*2.0f));
    const ImRect inner_bb(frame_bb.Min + style.FramePadding, frame_bb.Max - style.FramePadding);
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));

    // NB- we don't call ItemSize() yet because we may turn into a text edit box below
    if (!ItemAdd(total_bb, &id))
    {
        ItemSize(total_bb, style.FramePadding.y);
        return false;
    }

    const bool hovered = IsHovered(frame_bb, id);
    if (hovered)
        SetHoveredID(id);

    if (!display_format)
        display_format = "%.3f";
    int decimal_precision = ParseFormatPrecision(display_format, 3);

    // Tabbing or CTRL-clicking on Drag turns it into an input box
    bool start_text_input = false;
    const bool tab_focus_requested = FocusableItemRegister(window, g.ActiveId == id);
    if (tab_focus_requested || (hovered && (g.IO.MouseClicked[0] | g.IO.MouseDoubleClicked[0])))
    {
        SetActiveID(id, window);
        FocusWindow(window);

        if (tab_focus_requested || g.IO.KeyCtrl || g.IO.MouseDoubleClicked[0])
        {
            start_text_input = true;
            g.ScalarAsInputTextId = 0;
        }
    }
    if (start_text_input || (g.ActiveId == id && g.ScalarAsInputTextId == id))
        return InputScalarAsWidgetReplacement(frame_bb, label, ImGuiDataType_Float, v, id, decimal_precision);

    // Actual drag behavior
    ItemSize(total_bb, style.FramePadding.y);
    const bool value_changed = DragBehavior(frame_bb, id, v, v_speed, v_min, v_max, decimal_precision, power);

    // Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
    char value_buf[64];
    const char* value_buf_end = value_buf + ImFormatString(value_buf, IM_ARRAYSIZE(value_buf), display_format, *v);
    RenderTextClipped(frame_bb.Min, frame_bb.Max, value_buf, value_buf_end, NULL, ImVec2(0.5f,0.5f));

    if (label_size.x > 0.0f)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, inner_bb.Min.y), label);

    return value_changed;
}

bool ImGui::DragFloatN(const char* label, float* v, int components, float v_speed, float v_min, float v_max, const char* display_format, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components);
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        value_changed |= DragFloat("##v", &v[i], v_speed, v_min, v_max, display_format, power);
        SameLine(0, g.Style.ItemInnerSpacing.x);
        PopID();
        PopItemWidth();
    }
    PopID();

    TextUnformatted(label, FindRenderedTextEnd(label));
    EndGroup();

    return value_changed;
}

bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* display_format, float power)
{
    return DragFloatN(label, v, 2, v_speed, v_min, v_max, display_format, power);
}

bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* display_format, float power)
{
    return DragFloatN(label, v, 3, v_speed, v_min, v_max, display_format, power);
}

bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* display_format, float power)
{
    return DragFloatN(label, v, 4, v_speed, v_min, v_max, display_format, power);
}

bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, const char* display_format, const char* display_format_max, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    PushID(label);
    BeginGroup();
    PushMultiItemsWidths(2);

    bool value_changed = DragFloat("##min", v_current_min, v_speed, (v_min >= v_max) ? -FLT_MAX : v_min, (v_min >= v_max) ? *v_current_max : ImMin(v_max, *v_current_max), display_format, power);
    PopItemWidth();
    SameLine(0, g.Style.ItemInnerSpacing.x);
    value_changed |= DragFloat("##max", v_current_max, v_speed, (v_min >= v_max) ? *v_current_min : ImMax(v_min, *v_current_min), (v_min >= v_max) ? FLT_MAX : v_max, display_format_max ? display_format_max : display_format, power);
    PopItemWidth();
    SameLine(0, g.Style.ItemInnerSpacing.x);

    TextUnformatted(label, FindRenderedTextEnd(label));
    EndGroup();
    PopID();

    return value_changed;
}

// NB: v_speed is float to allow adjusting the drag speed with more precision
bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* display_format)
{
    if (!display_format)
        display_format = "%.0f";
    float v_f = (float)*v;
    bool value_changed = DragFloat(label, &v_f, v_speed, (float)v_min, (float)v_max, display_format);
    *v = (int)v_f;
    return value_changed;
}

bool ImGui::DragIntN(const char* label, int* v, int components, float v_speed, int v_min, int v_max, const char* display_format)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components);
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        value_changed |= DragInt("##v", &v[i], v_speed, v_min, v_max, display_format);
        SameLine(0, g.Style.ItemInnerSpacing.x);
        PopID();
        PopItemWidth();
    }
    PopID();

    TextUnformatted(label, FindRenderedTextEnd(label));
    EndGroup();

    return value_changed;
}

bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const char* display_format)
{
    return DragIntN(label, v, 2, v_speed, v_min, v_max, display_format);
}

bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const char* display_format)
{
    return DragIntN(label, v, 3, v_speed, v_min, v_max, display_format);
}

bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const char* display_format)
{
    return DragIntN(label, v, 4, v_speed, v_min, v_max, display_format);
}

bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, const char* display_format, const char* display_format_max)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    PushID(label);
    BeginGroup();
    PushMultiItemsWidths(2);

    bool value_changed = DragInt("##min", v_current_min, v_speed, (v_min >= v_max) ? INT_MIN : v_min, (v_min >= v_max) ? *v_current_max : ImMin(v_max, *v_current_max), display_format);
    PopItemWidth();
    SameLine(0, g.Style.ItemInnerSpacing.x);
    value_changed |= DragInt("##max", v_current_max, v_speed, (v_min >= v_max) ? *v_current_min : ImMax(v_min, *v_current_min), (v_min >= v_max) ? INT_MAX : v_max, display_format_max ? display_format_max : display_format);
    PopItemWidth();
    SameLine(0, g.Style.ItemInnerSpacing.x);

    TextUnformatted(label, FindRenderedTextEnd(label));
    EndGroup();
    PopID();

    return value_changed;
}

void ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    if (graph_size.x == 0.0f)
        graph_size.x = CalcItemWidth();
    if (graph_size.y == 0.0f)
        graph_size.y = label_size.y + (style.FramePadding.y * 2);

    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(graph_size.x, graph_size.y));
    const ImRect inner_bb(frame_bb.Min + style.FramePadding, frame_bb.Max - style.FramePadding);
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0));
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, NULL))
        return;

    // Determine scale from values if not specified
    if (scale_min == FLT_MAX || scale_max == FLT_MAX)
    {
        float v_min = FLT_MAX;
        float v_max = -FLT_MAX;
        for (int i = 0; i < values_count; i++)
        {
            const float v = values_getter(data, i);
            v_min = ImMin(v_min, v);
            v_max = ImMax(v_max, v);
        }
        if (scale_min == FLT_MAX)
            scale_min = v_min;
        if (scale_max == FLT_MAX)
            scale_max = v_max;
    }

    RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);

    if (values_count > 0)
    {
        int res_w = ImMin((int)graph_size.x, values_count) + ((plot_type == ImGuiPlotType_Lines) ? -1 : 0);
        int item_count = values_count + ((plot_type == ImGuiPlotType_Lines) ? -1 : 0);

        // Tooltip on hover
        int v_hovered = -1;
        if (IsHovered(inner_bb, 0))
        {
            const float t = ImClamp((g.IO.MousePos.x - inner_bb.Min.x) / (inner_bb.Max.x - inner_bb.Min.x), 0.0f, 0.9999f);
            const int v_idx = (int)(t * item_count);
            IM_ASSERT(v_idx >= 0 && v_idx < values_count);

            const float v0 = values_getter(data, (v_idx + values_offset) % values_count);
            const float v1 = values_getter(data, (v_idx + 1 + values_offset) % values_count);
            if (plot_type == ImGuiPlotType_Lines)
                SetTooltip("%d: %8.4g\n%d: %8.4g", v_idx, v0, v_idx+1, v1);
            else if (plot_type == ImGuiPlotType_Histogram)
                SetTooltip("%d: %8.4g", v_idx, v0);
            v_hovered = v_idx;
        }

        const float t_step = 1.0f / (float)res_w;

        float v0 = values_getter(data, (0 + values_offset) % values_count);
        float t0 = 0.0f;
        ImVec2 tp0 = ImVec2( t0, 1.0f - ImSaturate((v0 - scale_min) / (scale_max - scale_min)) );    // Point in the normalized space of our target rectangle

        const ImU32 col_base = GetColorU32((plot_type == ImGuiPlotType_Lines) ? ImGuiCol_PlotLines : ImGuiCol_PlotHistogram);
        const ImU32 col_hovered = GetColorU32((plot_type == ImGuiPlotType_Lines) ? ImGuiCol_PlotLinesHovered : ImGuiCol_PlotHistogramHovered);

        for (int n = 0; n < res_w; n++)
        {
            const float t1 = t0 + t_step;
            const int v1_idx = (int)(t0 * item_count + 0.5f);
            IM_ASSERT(v1_idx >= 0 && v1_idx < values_count);
            const float v1 = values_getter(data, (v1_idx + values_offset + 1) % values_count);
            const ImVec2 tp1 = ImVec2( t1, 1.0f - ImSaturate((v1 - scale_min) / (scale_max - scale_min)) );

            // NB: Draw calls are merged together by the DrawList system. Still, we should render our batch are lower level to save a bit of CPU.
            ImVec2 pos0 = ImLerp(inner_bb.Min, inner_bb.Max, tp0);
            ImVec2 pos1 = ImLerp(inner_bb.Min, inner_bb.Max, (plot_type == ImGuiPlotType_Lines) ? tp1 : ImVec2(tp1.x, 1.0f));
            if (plot_type == ImGuiPlotType_Lines)
            {
                window->DrawList->AddLine(pos0, pos1, v_hovered == v1_idx ? col_hovered : col_base);
            }
            else if (plot_type == ImGuiPlotType_Histogram)
            {
                if (pos1.x >= pos0.x + 2.0f)
                    pos1.x -= 1.0f;
                window->DrawList->AddRectFilled(pos0, pos1, v_hovered == v1_idx ? col_hovered : col_base);
            }

            t0 = t1;
            tp0 = tp1;
        }
    }

    // Text overlay
    if (overlay_text)
        RenderTextClipped(ImVec2(frame_bb.Min.x, frame_bb.Min.y + style.FramePadding.y), frame_bb.Max, overlay_text, NULL, NULL, ImVec2(0.5f,0.0f));

    if (label_size.x > 0.0f)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, inner_bb.Min.y), label);
}

struct ImGuiPlotArrayGetterData
{
    const float* Values;
    int Stride;

    ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride; }
};

static float Plot_ArrayGetter(void* data, int idx)
{
    ImGuiPlotArrayGetterData* plot_data = (ImGuiPlotArrayGetterData*)data;
    const float v = *(float*)(void*)((unsigned char*)plot_data->Values + (size_t)idx * plot_data->Stride);
    return v;
}

void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
{
    ImGuiPlotArrayGetterData data(values, stride);
    PlotEx(ImGuiPlotType_Lines, label, &Plot_ArrayGetter, (void*)&data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

void ImGui::PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
{
    PlotEx(ImGuiPlotType_Lines, label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
{
    ImGuiPlotArrayGetterData data(values, stride);
    PlotEx(ImGuiPlotType_Histogram, label, &Plot_ArrayGetter, (void*)&data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

void ImGui::PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
{
    PlotEx(ImGuiPlotType_Histogram, label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

// size_arg (for each axis) < 0.0f: align to end, 0.0f: auto, > 0.0f: specified size
void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    ImVec2 pos = window->DC.CursorPos;
    ImRect bb(pos, pos + CalcItemSize(size_arg, CalcItemWidth(), g.FontSize + style.FramePadding.y*2.0f));
    ItemSize(bb, style.FramePadding.y);
    if (!ItemAdd(bb, NULL))
        return;

    // Render
    fraction = ImSaturate(fraction);
    RenderFrame(bb.Min, bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);
    bb.Reduce(ImVec2(window->BorderSize, window->BorderSize));
    const ImVec2 fill_br = ImVec2(ImLerp(bb.Min.x, bb.Max.x, fraction), bb.Max.y);
    RenderFrame(bb.Min, fill_br, GetColorU32(ImGuiCol_PlotHistogram), false, style.FrameRounding);

    // Default displaying the fraction as percentage string, but user can override it
    char overlay_buf[32];
    if (!overlay)
    {
        ImFormatString(overlay_buf, IM_ARRAYSIZE(overlay_buf), "%.0f%%", fraction*100+0.01f);
        overlay = overlay_buf;
    }

    ImVec2 overlay_size = CalcTextSize(overlay, NULL);
    if (overlay_size.x > 0.0f)
        RenderTextClipped(ImVec2(ImClamp(fill_br.x + style.ItemSpacing.x, bb.Min.x, bb.Max.x - overlay_size.x - style.ItemInnerSpacing.x), bb.Min.y), bb.Max, overlay, NULL, &overlay_size, ImVec2(0.0f,0.5f), &bb);
}

bool ImGui::Checkbox(const char* label, bool* v)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	const ImGuiID id = window->GetID(label);
	const ImVec2 label_size = CalcTextSize(label, NULL, true);

	const ImRect check_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(label_size.y + style.FramePadding.y * 0.5, label_size.y + style.FramePadding.y * 0.5));
	ItemSize(check_bb, style.FramePadding.y);

	ImRect total_bb = check_bb;
	if (label_size.x > 0)
		SameLine(0, style.ItemInnerSpacing.x);
	const ImRect text_bb(window->DC.CursorPos + ImVec2(0, style.FramePadding.y) - ImVec2(0, 2), window->DC.CursorPos + ImVec2(0, style.FramePadding.y) + label_size);
	if (label_size.x > 0)
	{
		ItemSize(ImVec2(text_bb.GetWidth(), check_bb.GetHeight()), style.FramePadding.y);
		total_bb = ImRect(ImMin(check_bb.Min, text_bb.Min), ImMax(check_bb.Max, text_bb.Max));
	}

	if (!ItemAdd(total_bb, &id))
		return false;

	bool hovered, held;
	bool pressed = ButtonBehavior(total_bb, id, &hovered, &held);
	if (pressed)
		*v = !(*v);

	RenderFrame(check_bb.Min, check_bb.Max, GetColorU32((held && hovered) ? ImGuiCol_FrameBgActive : hovered ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg), true, style.FrameRounding);
	if (*v)
	{
		const float check_sz = ImMin(check_bb.GetWidth(), check_bb.GetHeight());
		const float pad = ImMax(1.0f, (float)(int)(check_sz / 6.0f));
		const ImVec2 pts[] = {
			ImVec2{ check_bb.Min.x + pad, check_bb.Min.y + ((check_bb.Max.y - check_bb.Min.y) / 2) },
			ImVec2{ check_bb.Min.x + ((check_bb.Max.x - check_bb.Min.x) / 3), check_bb.Max.y - pad * 1.5f },
			ImVec2{ check_bb.Max.x - pad, check_bb.Min.y + pad }
		};
		window->DrawList->AddPolyline(pts, 3, GetColorU32(ImGuiCol_CheckMark), false, 2.0f, true);
	}

	if (g.LogEnabled)
		LogRenderedText(text_bb.GetTL(), *v ? "[x]" : "[ ]");
	if (label_size.x > 0.0f)
		RenderText(text_bb.GetTL(), label);

	return pressed;
}

bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)
{
    bool v = ((*flags & flags_value) == flags_value);
    bool pressed = Checkbox(label, &v);
    if (pressed)
    {
        if (v)
            *flags |= flags_value;
        else
            *flags &= ~flags_value;
    }

    return pressed;
}

bool ImGui::RadioButton(const char* label, bool active)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    const ImRect check_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(label_size.y + style.FramePadding.y*2-1, label_size.y + style.FramePadding.y*2-1));
    ItemSize(check_bb, style.FramePadding.y);

    ImRect total_bb = check_bb;
    if (label_size.x > 0)
        SameLine(0, style.ItemInnerSpacing.x);
    const ImRect text_bb(window->DC.CursorPos + ImVec2(0, style.FramePadding.y), window->DC.CursorPos + ImVec2(0, style.FramePadding.y) + label_size);
    if (label_size.x > 0)
    {
        ItemSize(ImVec2(text_bb.GetWidth(), check_bb.GetHeight()), style.FramePadding.y);
        total_bb.Add(text_bb);
    }

    if (!ItemAdd(total_bb, &id))
        return false;

    ImVec2 center = check_bb.GetCenter();
    center.x = (float)(int)center.x + 0.5f;
    center.y = (float)(int)center.y + 0.5f;
    const float radius = check_bb.GetHeight() * 0.5f;

    bool hovered, held;
    bool pressed = ButtonBehavior(total_bb, id, &hovered, &held);

    window->DrawList->AddCircleFilled(center, radius, GetColorU32((held && hovered) ? ImGuiCol_FrameBgActive : hovered ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg), 16);
    if (active)
    {
        const float check_sz = ImMin(check_bb.GetWidth(), check_bb.GetHeight());
        const float pad = ImMax(1.0f, (float)(int)(check_sz / 6.0f));
        window->DrawList->AddCircleFilled(center, radius-pad, GetColorU32(ImGuiCol_CheckMark), 16);
    }

    if (window->Flags & ImGuiWindowFlags_ShowBorders)
    {
        window->DrawList->AddCircle(center+ImVec2(1,1), radius, GetColorU32(ImGuiCol_BorderShadow), 16);
        window->DrawList->AddCircle(center, radius, GetColorU32(ImGuiCol_Border), 16);
    }

    if (g.LogEnabled)
        LogRenderedText(text_bb.GetTL(), active ? "(x)" : "( )");
    if (label_size.x > 0.0f)
        RenderText(text_bb.GetTL(), label);

    return pressed;
}

bool ImGui::RadioButton(const char* label, int* v, int v_button)
{
    const bool pressed = RadioButton(label, *v == v_button);
    if (pressed)
    {
        *v = v_button;
    }
    return pressed;
}

static int InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end)
{
    int line_count = 0;
    const char* s = text_begin;
    while (char c = *s++) // We are only matching for \n so we can ignore UTF-8 decoding
        if (c == '\n')
            line_count++;
    s--;
    if (s[0] != '\n' && s[0] != '\r')
        line_count++;
    *out_text_end = s;
    return line_count;
}

static ImVec2 InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const ImWchar** remaining, ImVec2* out_offset, bool stop_on_new_line)
{
    ImFont* font = GImGui->Font;
    const float line_height = GImGui->FontSize;
    const float scale = line_height / font->FontSize;

    ImVec2 text_size = ImVec2(0,0);
    float line_width = 0.0f;

    const ImWchar* s = text_begin;
    while (s < text_end)
    {
        unsigned int c = (unsigned int)(*s++);
        if (c == '\n')
        {
            text_size.x = ImMax(text_size.x, line_width);
            text_size.y += line_height;
            line_width = 0.0f;
            if (stop_on_new_line)
                break;
            continue;
        }
        if (c == '\r')
            continue;

        const float char_width = font->GetCharAdvance((unsigned short)c) * scale;
        line_width += char_width;
    }

    if (text_size.x < line_width)
        text_size.x = line_width;

    if (out_offset)
        *out_offset = ImVec2(line_width, text_size.y + line_height);  // offset allow for the possibility of sitting after a trailing \n

    if (line_width > 0 || text_size.y == 0.0f)                        // whereas size.y will ignore the trailing \n
        text_size.y += line_height;

    if (remaining)
        *remaining = s;

    return text_size;
}

// Wrapper for stb_textedit.h to edit text (our wrapper is for: statically sized buffer, single-line, wchar characters. InputText converts between UTF-8 and wchar)
namespace ImGuiStb
{

static int     STB_TEXTEDIT_STRINGLEN(const STB_TEXTEDIT_STRING* obj)                             { return obj->CurLenW; }
static ImWchar STB_TEXTEDIT_GETCHAR(const STB_TEXTEDIT_STRING* obj, int idx)                      { return obj->Text[idx]; }
static float   STB_TEXTEDIT_GETWIDTH(STB_TEXTEDIT_STRING* obj, int line_start_idx, int char_idx)  { ImWchar c = obj->Text[line_start_idx+char_idx]; if (c == '\n') return STB_TEXTEDIT_GETWIDTH_NEWLINE; return GImGui->Font->GetCharAdvance(c) * (GImGui->FontSize / GImGui->Font->FontSize); }
static int     STB_TEXTEDIT_KEYTOTEXT(int key)                                                    { return key >= 0x10000 ? 0 : key; }
static ImWchar STB_TEXTEDIT_NEWLINE = '\n';
static void    STB_TEXTEDIT_LAYOUTROW(StbTexteditRow* r, STB_TEXTEDIT_STRING* obj, int line_start_idx)
{
    const ImWchar* text = obj->Text.Data;
    const ImWchar* text_remaining = NULL;
    const ImVec2 size = InputTextCalcTextSizeW(text + line_start_idx, text + obj->CurLenW, &text_remaining, NULL, true);
    r->x0 = 0.0f;
    r->x1 = size.x;
    r->baseline_y_delta = size.y;
    r->ymin = 0.0f;
    r->ymax = size.y;
    r->num_chars = (int)(text_remaining - (text + line_start_idx));
}

static bool is_separator(unsigned int c)                                        { return ImCharIsSpace(c) || c==',' || c==';' || c=='(' || c==')' || c=='{' || c=='}' || c=='[' || c==']' || c=='|'; }
static int  is_word_boundary_from_right(STB_TEXTEDIT_STRING* obj, int idx)      { return idx > 0 ? (is_separator( obj->Text[idx-1] ) && !is_separator( obj->Text[idx] ) ) : 1; }
static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)   { idx--; while (idx >= 0 && !is_word_boundary_from_right(obj, idx)) idx--; return idx < 0 ? 0 : idx; }
#ifdef __APPLE__    // FIXME: Move setting to IO structure
static int  is_word_boundary_from_left(STB_TEXTEDIT_STRING* obj, int idx)       { return idx > 0 ? (!is_separator( obj->Text[idx-1] ) && is_separator( obj->Text[idx] ) ) : 1; }
static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len = obj->CurLenW; while (idx < len && !is_word_boundary_from_left(obj, idx)) idx++; return idx > len ? len : idx; }
#else
static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len = obj->CurLenW; while (idx < len && !is_word_boundary_from_right(obj, idx)) idx++; return idx > len ? len : idx; }
#endif
#define STB_TEXTEDIT_MOVEWORDLEFT   STB_TEXTEDIT_MOVEWORDLEFT_IMPL    // They need to be #define for stb_textedit.h
#define STB_TEXTEDIT_MOVEWORDRIGHT  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL

static void STB_TEXTEDIT_DELETECHARS(STB_TEXTEDIT_STRING* obj, int pos, int n)
{
    ImWchar* dst = obj->Text.Data + pos;

    // We maintain our buffer length in both UTF-8 and wchar formats
    obj->CurLenA -= ImTextCountUtf8BytesFromStr(dst, dst + n);
    obj->CurLenW -= n;

    // Offset remaining text
    const ImWchar* src = obj->Text.Data + pos + n;
    while (ImWchar c = *src++)
        *dst++ = c;
    *dst = '\0';
}

static bool STB_TEXTEDIT_INSERTCHARS(STB_TEXTEDIT_STRING* obj, int pos, const ImWchar* new_text, int new_text_len)
{
    const int text_len = obj->CurLenW;
    IM_ASSERT(pos <= text_len);
    if (new_text_len + text_len + 1 > obj->Text.Size)
        return false;

    const int new_text_len_utf8 = ImTextCountUtf8BytesFromStr(new_text, new_text + new_text_len);
    if (new_text_len_utf8 + obj->CurLenA + 1 > obj->BufSizeA)
        return false;

    ImWchar* text = obj->Text.Data;
    if (pos != text_len)
        memmove(text + pos + new_text_len, text + pos, (size_t)(text_len - pos) * sizeof(ImWchar));
    memcpy(text + pos, new_text, (size_t)new_text_len * sizeof(ImWchar));

    obj->CurLenW += new_text_len;
    obj->CurLenA += new_text_len_utf8;
    obj->Text[obj->CurLenW] = '\0';

    return true;
}

// We don't use an enum so we can build even with conflicting symbols (if another user of stb_textedit.h leak their STB_TEXTEDIT_K_* symbols)
#define STB_TEXTEDIT_K_LEFT         0x10000 // keyboard input to move cursor left
#define STB_TEXTEDIT_K_RIGHT        0x10001 // keyboard input to move cursor right
#define STB_TEXTEDIT_K_UP           0x10002 // keyboard input to move cursor up
#define STB_TEXTEDIT_K_DOWN         0x10003 // keyboard input to move cursor down
#define STB_TEXTEDIT_K_LINESTART    0x10004 // keyboard input to move cursor to start of line
#define STB_TEXTEDIT_K_LINEEND      0x10005 // keyboard input to move cursor to end of line
#define STB_TEXTEDIT_K_TEXTSTART    0x10006 // keyboard input to move cursor to start of text
#define STB_TEXTEDIT_K_TEXTEND      0x10007 // keyboard input to move cursor to end of text
#define STB_TEXTEDIT_K_DELETE       0x10008 // keyboard input to delete selection or character under cursor
#define STB_TEXTEDIT_K_BACKSPACE    0x10009 // keyboard input to delete selection or character left of cursor
#define STB_TEXTEDIT_K_UNDO         0x1000A // keyboard input to perform undo
#define STB_TEXTEDIT_K_REDO         0x1000B // keyboard input to perform redo
#define STB_TEXTEDIT_K_WORDLEFT     0x1000C // keyboard input to move cursor left one word
#define STB_TEXTEDIT_K_WORDRIGHT    0x1000D // keyboard input to move cursor right one word
#define STB_TEXTEDIT_K_SHIFT        0x20000

#define STB_TEXTEDIT_IMPLEMENTATION
#include "stb_textedit.h"

}

void ImGuiTextEditState::OnKeyPressed(int key)
{
    stb_textedit_key(this, &StbState, key);
    CursorFollow = true;
    CursorAnimReset();
}

// Public API to manipulate UTF-8 text
// We expose UTF-8 to the user (unlike the STB_TEXTEDIT_* functions which are manipulating wchar)
// FIXME: The existence of this rarely exercised code path is a bit of a nuisance.
void ImGuiTextEditCallbackData::DeleteChars(int pos, int bytes_count)
{
    IM_ASSERT(pos + bytes_count <= BufTextLen);
    char* dst = Buf + pos;
    const char* src = Buf + pos + bytes_count;
    while (char c = *src++)
        *dst++ = c;
    *dst = '\0';

    if (CursorPos + bytes_count >= pos)
        CursorPos -= bytes_count;
    else if (CursorPos >= pos)
        CursorPos = pos;
    SelectionStart = SelectionEnd = CursorPos;
    BufDirty = true;
    BufTextLen -= bytes_count;
}

void ImGuiTextEditCallbackData::InsertChars(int pos, const char* new_text, const char* new_text_end)
{
    const int new_text_len = new_text_end ? (int)(new_text_end - new_text) : (int)strlen(new_text);
    if (new_text_len + BufTextLen + 1 >= BufSize)
        return;

    if (BufTextLen != pos)
        memmove(Buf + pos + new_text_len, Buf + pos, (size_t)(BufTextLen - pos));
    memcpy(Buf + pos, new_text, (size_t)new_text_len * sizeof(char));
    Buf[BufTextLen + new_text_len] = '\0';

    if (CursorPos >= pos)
        CursorPos += new_text_len;
    SelectionStart = SelectionEnd = CursorPos;
    BufDirty = true;
    BufTextLen += new_text_len;
}

// Return false to discard a character.
static bool InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)
{
    unsigned int c = *p_char;

    if (c < 128 && c != ' ' && !isprint((int)(c & 0xFF)))
    {
        bool pass = false;
        pass |= (c == '\n' && (flags & ImGuiInputTextFlags_Multiline));
        pass |= (c == '\t' && (flags & ImGuiInputTextFlags_AllowTabInput));
        if (!pass)
            return false;
    }

    if (c >= 0xE000 && c <= 0xF8FF) // Filter private Unicode range. I don't imagine anybody would want to input them. GLFW on OSX seems to send private characters for special keys like arrow keys.
        return false;

    if (flags & (ImGuiInputTextFlags_CharsDecimal | ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase | ImGuiInputTextFlags_CharsNoBlank))
    {
        if (flags & ImGuiInputTextFlags_CharsDecimal)
            if (!(c >= '0' && c <= '9') && (c != '.') && (c != '-') && (c != '+') && (c != '*') && (c != '/'))
                return false;

        if (flags & ImGuiInputTextFlags_CharsHexadecimal)
            if (!(c >= '0' && c <= '9') && !(c >= 'a' && c <= 'f') && !(c >= 'A' && c <= 'F'))
                return false;

        if (flags & ImGuiInputTextFlags_CharsUppercase)
            if (c >= 'a' && c <= 'z')
                *p_char = (c += (unsigned int)('A'-'a'));

        if (flags & ImGuiInputTextFlags_CharsNoBlank)
            if (ImCharIsSpace(c))
                return false;
    }

    if (flags & ImGuiInputTextFlags_CallbackCharFilter)
    {
        ImGuiTextEditCallbackData callback_data;
        memset(&callback_data, 0, sizeof(ImGuiTextEditCallbackData));
        callback_data.EventFlag = ImGuiInputTextFlags_CallbackCharFilter;
        callback_data.EventChar = (ImWchar)c;
        callback_data.Flags = flags;
        callback_data.UserData = user_data;
        if (callback(&callback_data) != 0)
            return false;
        *p_char = callback_data.EventChar;
        if (!callback_data.EventChar)
            return false;
    }

    return true;
}

// Edit a string of text
// NB: when active, hold on a privately held copy of the text (and apply back to 'buf'). So changing 'buf' while active has no effect.
// FIXME: Rather messy function partly because we are doing UTF8 > u16 > UTF8 conversions on the go to more easily handle stb_textedit calls. Ideally we should stay in UTF-8 all the time. See https://github.com/nothings/stb/issues/188
bool ImGui::InputTextEx(const char* label, char* buf, int buf_size, const ImVec2& size_arg, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    IM_ASSERT(!((flags & ImGuiInputTextFlags_CallbackHistory) && (flags & ImGuiInputTextFlags_Multiline))); // Can't use both together (they both use up/down keys)
    IM_ASSERT(!((flags & ImGuiInputTextFlags_CallbackCompletion) && (flags & ImGuiInputTextFlags_AllowTabInput))); // Can't use both together (they both use tab key)

    ImGuiContext& g = *GImGui;
    const ImGuiIO& io = g.IO;
    const ImGuiStyle& style = g.Style;

    const bool is_multiline = (flags & ImGuiInputTextFlags_Multiline) != 0;
    const bool is_editable = (flags & ImGuiInputTextFlags_ReadOnly) == 0;
    const bool is_password = (flags & ImGuiInputTextFlags_Password) != 0;

    if (is_multiline) // Open group before calling GetID() because groups tracks id created during their spawn
        BeginGroup();
    const ImGuiID id = window->GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    ImVec2 size = CalcItemSize(size_arg, CalcItemWidth(), (is_multiline ? GetTextLineHeight() * 8.0f : label_size.y) + style.FramePadding.y*2.0f); // Arbitrary default of 8 lines high for multi-line
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + size);
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? (style.ItemInnerSpacing.x + label_size.x) : 0.0f, 0.0f));

    ImGuiWindow* draw_window = window;
    if (is_multiline)
    {
        if (!BeginChildFrame(id, frame_bb.GetSize()))
        {
            EndChildFrame();
            EndGroup();
            return false;
        }
        draw_window = GetCurrentWindow();
        size.x -= draw_window->ScrollbarSizes.x;
    }
    else
    {
        ItemSize(total_bb, style.FramePadding.y);
        if (!ItemAdd(total_bb, &id))
            return false;
    }

    // Password pushes a temporary font with only a fallback glyph
    if (is_password)
    {
        const ImFont::Glyph* glyph = g.Font->FindGlyph('*');
        ImFont* password_font = &g.InputTextPasswordFont;
        password_font->FontSize = g.Font->FontSize;
        password_font->Scale = g.Font->Scale;
        password_font->DisplayOffset = g.Font->DisplayOffset;
        password_font->Ascent = g.Font->Ascent;
        password_font->Descent = g.Font->Descent;
        password_font->ContainerAtlas = g.Font->ContainerAtlas;
        password_font->FallbackGlyph = glyph;
        password_font->FallbackXAdvance = glyph->XAdvance;
        IM_ASSERT(password_font->Glyphs.empty() && password_font->IndexXAdvance.empty() && password_font->IndexLookup.empty());
        PushFont(password_font);
    }

    // NB: we are only allowed to access 'edit_state' if we are the active widget.
    ImGuiTextEditState& edit_state = g.InputTextState;

    const bool focus_requested = FocusableItemRegister(window, g.ActiveId == id, (flags & (ImGuiInputTextFlags_CallbackCompletion|ImGuiInputTextFlags_AllowTabInput)) == 0);    // Using completion callback disable keyboard tabbing
    const bool focus_requested_by_code = focus_requested && (window->FocusIdxAllCounter == window->FocusIdxAllRequestCurrent);
    const bool focus_requested_by_tab = focus_requested && !focus_requested_by_code;

    const bool hovered = IsHovered(frame_bb, id);
    if (hovered)
    {
        SetHoveredID(id);
        g.MouseCursor = ImGuiMouseCursor_TextInput;
    }
    const bool user_clicked = hovered && io.MouseClicked[0];
    const bool user_scrolled = is_multiline && g.ActiveId == 0 && edit_state.Id == id && g.ActiveIdPreviousFrame == draw_window->GetIDNoKeepAlive("#SCROLLY");

    bool select_all = (g.ActiveId != id) && (flags & ImGuiInputTextFlags_AutoSelectAll) != 0;
    if (focus_requested || user_clicked || user_scrolled)
    {
        if (g.ActiveId != id)
        {
            // Start edition
            // Take a copy of the initial buffer value (both in original UTF-8 format and converted to wchar)
            // From the moment we focused we are ignoring the content of 'buf' (unless we are in read-only mode)
            const int prev_len_w = edit_state.CurLenW;
            edit_state.Text.resize(buf_size+1);        // wchar count <= UTF-8 count. we use +1 to make sure that .Data isn't NULL so it doesn't crash.
            edit_state.InitialText.resize(buf_size+1); // UTF-8. we use +1 to make sure that .Data isn't NULL so it doesn't crash.
            ImStrncpy(edit_state.InitialText.Data, buf, edit_state.InitialText.Size);
            const char* buf_end = NULL;
            edit_state.CurLenW = ImTextStrFromUtf8(edit_state.Text.Data, edit_state.Text.Size, buf, NULL, &buf_end);
            edit_state.CurLenA = (int)(buf_end - buf); // We can't get the result from ImFormatString() above because it is not UTF-8 aware. Here we'll cut off malformed UTF-8.
            edit_state.CursorAnimReset();

            // Preserve cursor position and undo/redo stack if we come back to same widget
            // FIXME: We should probably compare the whole buffer to be on the safety side. Comparing buf (utf8) and edit_state.Text (wchar).
            const bool recycle_state = (edit_state.Id == id) && (prev_len_w == edit_state.CurLenW);
            if (recycle_state)
            {
                // Recycle existing cursor/selection/undo stack but clamp position
                // Note a single mouse click will override the cursor/position immediately by calling stb_textedit_click handler.
                edit_state.CursorClamp();
            }
            else
            {
                edit_state.Id = id;
                edit_state.ScrollX = 0.0f;
                stb_textedit_initialize_state(&edit_state.StbState, !is_multiline);
                if (!is_multiline && focus_requested_by_code)
                    select_all = true;
            }
            if (flags & ImGuiInputTextFlags_AlwaysInsertMode)
                edit_state.StbState.insert_mode = true;
            if (!is_multiline && (focus_requested_by_tab || (user_clicked && io.KeyCtrl)))
                select_all = true;
        }
        SetActiveID(id, window);
        FocusWindow(window);
    }
    else if (io.MouseClicked[0])
    {
        // Release focus when we click outside
        if (g.ActiveId == id)
            ClearActiveID();
    }

    bool value_changed = false;
    bool enter_pressed = false;

    if (g.ActiveId == id)
    {
        if (!is_editable && !g.ActiveIdIsJustActivated)
        {
            // When read-only we always use the live data passed to the function
            edit_state.Text.resize(buf_size+1);
            const char* buf_end = NULL;
            edit_state.CurLenW = ImTextStrFromUtf8(edit_state.Text.Data, edit_state.Text.Size, buf, NULL, &buf_end);
            edit_state.CurLenA = (int)(buf_end - buf);
            edit_state.CursorClamp();
        }

        edit_state.BufSizeA = buf_size;

        // Although we are active we don't prevent mouse from hovering other elements unless we are interacting right now with the widget.
        // Down the line we should have a cleaner library-wide concept of Selected vs Active.
        g.ActiveIdAllowOverlap = !io.MouseDown[0];

        // Edit in progress
        const float mouse_x = (io.MousePos.x - frame_bb.Min.x - style.FramePadding.x) + edit_state.ScrollX;
        const float mouse_y = (is_multiline ? (io.MousePos.y - draw_window->DC.CursorPos.y - style.FramePadding.y) : (g.FontSize*0.5f));

        const bool osx_double_click_selects_words = io.OSXBehaviors;      // OS X style: Double click selects by word instead of selecting whole text
        if (select_all || (hovered && !osx_double_click_selects_words && io.MouseDoubleClicked[0]))
        {
            edit_state.SelectAll();
            edit_state.SelectedAllMouseLock = true;
        }
        else if (hovered && osx_double_click_selects_words && io.MouseDoubleClicked[0])
        {
            // Select a word only, OS X style (by simulating keystrokes)
            edit_state.OnKeyPressed(STB_TEXTEDIT_K_WORDLEFT);
            edit_state.OnKeyPressed(STB_TEXTEDIT_K_WORDRIGHT | STB_TEXTEDIT_K_SHIFT);
        }
        else if (io.MouseClicked[0] && !edit_state.SelectedAllMouseLock)
        {
            stb_textedit_click(&edit_state, &edit_state.StbState, mouse_x, mouse_y);
            edit_state.CursorAnimReset();
        }
        else if (io.MouseDown[0] && !edit_state.SelectedAllMouseLock && (io.MouseDelta.x != 0.0f || io.MouseDelta.y != 0.0f))
        {
            stb_textedit_drag(&edit_state, &edit_state.StbState, mouse_x, mouse_y);
            edit_state.CursorAnimReset();
            edit_state.CursorFollow = true;
        }
        if (edit_state.SelectedAllMouseLock && !io.MouseDown[0])
            edit_state.SelectedAllMouseLock = false;

        if (io.InputCharacters[0])
        {
            // Process text input (before we check for Return because using some IME will effectively send a Return?)
            // We ignore CTRL inputs, but need to allow CTRL+ALT as some keyboards (e.g. German) use AltGR - which is Alt+Ctrl - to input certain characters.
            if (!(io.KeyCtrl && !io.KeyAlt) && is_editable)
            {
                for (int n = 0; n < IM_ARRAYSIZE(io.InputCharacters) && io.InputCharacters[n]; n++)
                    if (unsigned int c = (unsigned int)io.InputCharacters[n])
                    {
                        // Insert character if they pass filtering
                        if (!InputTextFilterCharacter(&c, flags, callback, user_data))
                            continue;
                        edit_state.OnKeyPressed((int)c);
                    }
            }

            // Consume characters
            memset(g.IO.InputCharacters, 0, sizeof(g.IO.InputCharacters));
        }

        // Handle various key-presses
        bool cancel_edit = false;
        const int k_mask = (io.KeyShift ? STB_TEXTEDIT_K_SHIFT : 0);
        const bool is_shortcut_key_only = (io.OSXBehaviors ? (io.KeySuper && !io.KeyCtrl) : (io.KeyCtrl && !io.KeySuper)) && !io.KeyAlt && !io.KeyShift; // OS X style: Shortcuts using Cmd/Super instead of Ctrl
        const bool is_wordmove_key_down = io.OSXBehaviors ? io.KeyAlt : io.KeyCtrl;                     // OS X style: Text editing cursor movement using Alt instead of Ctrl
        const bool is_startend_key_down = io.OSXBehaviors && io.KeySuper && !io.KeyCtrl && !io.KeyAlt;  // OS X style: Line/Text Start and End using Cmd+Arrows instead of Home/End

        if (IsKeyPressedMap(ImGuiKey_LeftArrow))                        { edit_state.OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_LINESTART : is_wordmove_key_down ? STB_TEXTEDIT_K_WORDLEFT : STB_TEXTEDIT_K_LEFT) | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_RightArrow))                  { edit_state.OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_LINEEND : is_wordmove_key_down ? STB_TEXTEDIT_K_WORDRIGHT : STB_TEXTEDIT_K_RIGHT) | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_UpArrow) && is_multiline)     { if (io.KeyCtrl) SetWindowScrollY(draw_window, ImMax(draw_window->Scroll.y - g.FontSize, 0.0f)); else edit_state.OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_TEXTSTART : STB_TEXTEDIT_K_UP) | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_DownArrow) && is_multiline)   { if (io.KeyCtrl) SetWindowScrollY(draw_window, ImMin(draw_window->Scroll.y + g.FontSize, GetScrollMaxY())); else edit_state.OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_TEXTEND : STB_TEXTEDIT_K_DOWN) | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_Home))                        { edit_state.OnKeyPressed(io.KeyCtrl ? STB_TEXTEDIT_K_TEXTSTART | k_mask : STB_TEXTEDIT_K_LINESTART | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_End))                         { edit_state.OnKeyPressed(io.KeyCtrl ? STB_TEXTEDIT_K_TEXTEND | k_mask : STB_TEXTEDIT_K_LINEEND | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_Delete) && is_editable)       { edit_state.OnKeyPressed(STB_TEXTEDIT_K_DELETE | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_Backspace) && is_editable)
        {
            if (!edit_state.HasSelection())
            {
                if (is_wordmove_key_down) edit_state.OnKeyPressed(STB_TEXTEDIT_K_WORDLEFT|STB_TEXTEDIT_K_SHIFT);
                else if (io.OSXBehaviors && io.KeySuper && !io.KeyAlt && !io.KeyCtrl) edit_state.OnKeyPressed(STB_TEXTEDIT_K_LINESTART|STB_TEXTEDIT_K_SHIFT);
            }
            edit_state.OnKeyPressed(STB_TEXTEDIT_K_BACKSPACE | k_mask);
        }
        else if (IsKeyPressedMap(ImGuiKey_Enter))
        {
            bool ctrl_enter_for_new_line = (flags & ImGuiInputTextFlags_CtrlEnterForNewLine) != 0;
            if (!is_multiline || (ctrl_enter_for_new_line && !io.KeyCtrl) || (!ctrl_enter_for_new_line && io.KeyCtrl))
            {
                ClearActiveID();
                enter_pressed = true;
            }
            else if (is_editable)
            {
                unsigned int c = '\n'; // Insert new line
                if (InputTextFilterCharacter(&c, flags, callback, user_data))
                    edit_state.OnKeyPressed((int)c);
            }
        }
        else if ((flags & ImGuiInputTextFlags_AllowTabInput) && IsKeyPressedMap(ImGuiKey_Tab) && !io.KeyCtrl && !io.KeyShift && !io.KeyAlt && is_editable)
        {
            unsigned int c = '\t'; // Insert TAB
            if (InputTextFilterCharacter(&c, flags, callback, user_data))
                edit_state.OnKeyPressed((int)c);
        }
        else if (IsKeyPressedMap(ImGuiKey_Escape))                                     { ClearActiveID(); cancel_edit = true; }
        else if (is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_Z) && is_editable)   { edit_state.OnKeyPressed(STB_TEXTEDIT_K_UNDO); edit_state.ClearSelection(); }
        else if (is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_Y) && is_editable)   { edit_state.OnKeyPressed(STB_TEXTEDIT_K_REDO); edit_state.ClearSelection(); }
        else if (is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_A))                  { edit_state.SelectAll(); edit_state.CursorFollow = true; }
        else if (is_shortcut_key_only && !is_password && ((IsKeyPressedMap(ImGuiKey_X) && is_editable) || IsKeyPressedMap(ImGuiKey_C)) && (!is_multiline || edit_state.HasSelection()))
        {
            // Cut, Copy
            const bool cut = IsKeyPressedMap(ImGuiKey_X);
            if (cut && !edit_state.HasSelection())
                edit_state.SelectAll();

            if (io.SetClipboardTextFn)
            {
                const int ib = edit_state.HasSelection() ? ImMin(edit_state.StbState.select_start, edit_state.StbState.select_end) : 0;
                const int ie = edit_state.HasSelection() ? ImMax(edit_state.StbState.select_start, edit_state.StbState.select_end) : edit_state.CurLenW;
                edit_state.TempTextBuffer.resize((ie-ib) * 4 + 1);
                ImTextStrToUtf8(edit_state.TempTextBuffer.Data, edit_state.TempTextBuffer.Size, edit_state.Text.Data+ib, edit_state.Text.Data+ie);
                SetClipboardText(edit_state.TempTextBuffer.Data);
            }

            if (cut)
            {
                edit_state.CursorFollow = true;
                stb_textedit_cut(&edit_state, &edit_state.StbState);
            }
        }
        else if (is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_V) && is_editable)
        {
            // Paste
            if (const char* clipboard = GetClipboardText())
            {
                // Filter pasted buffer
                const int clipboard_len = (int)strlen(clipboard);
                ImWchar* clipboard_filtered = (ImWchar*)ImGui::MemAlloc((clipboard_len+1) * sizeof(ImWchar));
                int clipboard_filtered_len = 0;
                for (const char* s = clipboard; *s; )
                {
                    unsigned int c;
                    s += ImTextCharFromUtf8(&c, s, NULL);
                    if (c == 0)
                        break;
                    if (c >= 0x10000 || !InputTextFilterCharacter(&c, flags, callback, user_data))
                        continue;
                    clipboard_filtered[clipboard_filtered_len++] = (ImWchar)c;
                }
                clipboard_filtered[clipboard_filtered_len] = 0;
                if (clipboard_filtered_len > 0) // If everything was filtered, ignore the pasting operation
                {
                    stb_textedit_paste(&edit_state, &edit_state.StbState, clipboard_filtered, clipboard_filtered_len);
                    edit_state.CursorFollow = true;
                }
                ImGui::MemFree(clipboard_filtered);
            }
        }

        if (cancel_edit)
        {
            // Restore initial value
            if (is_editable)
            {
                ImStrncpy(buf, edit_state.InitialText.Data, buf_size);
                value_changed = true;
            }
        }
        else
        {
            // Apply new value immediately - copy modified buffer back
            // Note that as soon as the input box is active, the in-widget value gets priority over any underlying modification of the input buffer
            // FIXME: We actually always render 'buf' when calling DrawList->AddText, making the comment above incorrect.
            // FIXME-OPT: CPU waste to do this every time the widget is active, should mark dirty state from the stb_textedit callbacks.
            if (is_editable)
            {
                edit_state.TempTextBuffer.resize(edit_state.Text.Size * 4);
                ImTextStrToUtf8(edit_state.TempTextBuffer.Data, edit_state.TempTextBuffer.Size, edit_state.Text.Data, NULL);
            }

            // User callback
            if ((flags & (ImGuiInputTextFlags_CallbackCompletion | ImGuiInputTextFlags_CallbackHistory | ImGuiInputTextFlags_CallbackAlways)) != 0)
            {
                IM_ASSERT(callback != NULL);

                // The reason we specify the usage semantic (Completion/History) is that Completion needs to disable keyboard TABBING at the moment.
                ImGuiInputTextFlags event_flag = 0;
                ImGuiKey event_key = ImGuiKey_COUNT;
                if ((flags & ImGuiInputTextFlags_CallbackCompletion) != 0 && IsKeyPressedMap(ImGuiKey_Tab))
                {
                    event_flag = ImGuiInputTextFlags_CallbackCompletion;
                    event_key = ImGuiKey_Tab;
                }
                else if ((flags & ImGuiInputTextFlags_CallbackHistory) != 0 && IsKeyPressedMap(ImGuiKey_UpArrow))
                {
                    event_flag = ImGuiInputTextFlags_CallbackHistory;
                    event_key = ImGuiKey_UpArrow;
                }
                else if ((flags & ImGuiInputTextFlags_CallbackHistory) != 0 && IsKeyPressedMap(ImGuiKey_DownArrow))
                {
                    event_flag = ImGuiInputTextFlags_CallbackHistory;
                    event_key = ImGuiKey_DownArrow;
                }
                else if (flags & ImGuiInputTextFlags_CallbackAlways)
                    event_flag = ImGuiInputTextFlags_CallbackAlways;

                if (event_flag)
                {
                    ImGuiTextEditCallbackData callback_data;
                    memset(&callback_data, 0, sizeof(ImGuiTextEditCallbackData));
                    callback_data.EventFlag = event_flag;
                    callback_data.Flags = flags;
                    callback_data.UserData = user_data;
                    callback_data.ReadOnly = !is_editable;

                    callback_data.EventKey = event_key;
                    callback_data.Buf = edit_state.TempTextBuffer.Data;
                    callback_data.BufTextLen = edit_state.CurLenA;
                    callback_data.BufSize = edit_state.BufSizeA;
                    callback_data.BufDirty = false;

                    // We have to convert from wchar-positions to UTF-8-positions, which can be pretty slow (an incentive to ditch the ImWchar buffer, see https://github.com/nothings/stb/issues/188)
                    ImWchar* text = edit_state.Text.Data;
                    const int utf8_cursor_pos = callback_data.CursorPos = ImTextCountUtf8BytesFromStr(text, text + edit_state.StbState.cursor);
                    const int utf8_selection_start = callback_data.SelectionStart = ImTextCountUtf8BytesFromStr(text, text + edit_state.StbState.select_start);
                    const int utf8_selection_end = callback_data.SelectionEnd = ImTextCountUtf8BytesFromStr(text, text + edit_state.StbState.select_end);

                    // Call user code
                    callback(&callback_data);

                    // Read back what user may have modified
                    IM_ASSERT(callback_data.Buf == edit_state.TempTextBuffer.Data);  // Invalid to modify those fields
                    IM_ASSERT(callback_data.BufSize == edit_state.BufSizeA);
                    IM_ASSERT(callback_data.Flags == flags);
                    if (callback_data.CursorPos != utf8_cursor_pos)            edit_state.StbState.cursor = ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.CursorPos);
                    if (callback_data.SelectionStart != utf8_selection_start)  edit_state.StbState.select_start = ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.SelectionStart);
                    if (callback_data.SelectionEnd != utf8_selection_end)      edit_state.StbState.select_end = ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.SelectionEnd);
                    if (callback_data.BufDirty)
                    {
                        IM_ASSERT(callback_data.BufTextLen == (int)strlen(callback_data.Buf)); // You need to maintain BufTextLen if you change the text!
                        edit_state.CurLenW = ImTextStrFromUtf8(edit_state.Text.Data, edit_state.Text.Size, callback_data.Buf, NULL);
                        edit_state.CurLenA = callback_data.BufTextLen;  // Assume correct length and valid UTF-8 from user, saves us an extra strlen()
                        edit_state.CursorAnimReset();
                    }
                }
            }

            // Copy back to user buffer
            if (is_editable && strcmp(edit_state.TempTextBuffer.Data, buf) != 0)
            {
                ImStrncpy(buf, edit_state.TempTextBuffer.Data, buf_size);
                value_changed = true;
            }
        }
    }

    // Render
    // Select which buffer we are going to display. When ImGuiInputTextFlags_NoLiveEdit is set 'buf' might still be the old value. We set buf to NULL to prevent accidental usage from now on.
    const char* buf_display = (g.ActiveId == id && is_editable) ? edit_state.TempTextBuffer.Data : buf; buf = NULL; 

    if (!is_multiline)
        RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);

    const ImVec4 clip_rect(frame_bb.Min.x, frame_bb.Min.y, frame_bb.Min.x + size.x, frame_bb.Min.y + size.y); // Not using frame_bb.Max because we have adjusted size
    ImVec2 render_pos = is_multiline ? draw_window->DC.CursorPos : frame_bb.Min + style.FramePadding;
    ImVec2 text_size(0.f, 0.f);
    const bool is_currently_scrolling = (edit_state.Id == id && is_multiline && g.ActiveId == draw_window->GetIDNoKeepAlive("#SCROLLY"));
    if (g.ActiveId == id || is_currently_scrolling)
    {
        edit_state.CursorAnim += io.DeltaTime;

        // This is going to be messy. We need to:
        // - Display the text (this alone can be more easily clipped)
        // - Handle scrolling, highlight selection, display cursor (those all requires some form of 1d->2d cursor position calculation)
        // - Measure text height (for scrollbar)
        // We are attempting to do most of that in **one main pass** to minimize the computation cost (non-negligible for large amount of text) + 2nd pass for selection rendering (we could merge them by an extra refactoring effort)
        // FIXME: This should occur on buf_display but we'd need to maintain cursor/select_start/select_end for UTF-8.
        const ImWchar* text_begin = edit_state.Text.Data;
        ImVec2 cursor_offset, select_start_offset;

        {
            // Count lines + find lines numbers straddling 'cursor' and 'select_start' position.
            const ImWchar* searches_input_ptr[2];
            searches_input_ptr[0] = text_begin + edit_state.StbState.cursor;
            searches_input_ptr[1] = NULL;
            int searches_remaining = 1;
            int searches_result_line_number[2] = { -1, -999 };
            if (edit_state.StbState.select_start != edit_state.StbState.select_end)
            {
                searches_input_ptr[1] = text_begin + ImMin(edit_state.StbState.select_start, edit_state.StbState.select_end);
                searches_result_line_number[1] = -1;
                searches_remaining++;
            }

            // Iterate all lines to find our line numbers
            // In multi-line mode, we never exit the loop until all lines are counted, so add one extra to the searches_remaining counter.
            searches_remaining += is_multiline ? 1 : 0;
            int line_count = 0;
            for (const ImWchar* s = text_begin; *s != 0; s++)
                if (*s == '\n')
                {
                    line_count++;
                    if (searches_result_line_number[0] == -1 && s >= searches_input_ptr[0]) { searches_result_line_number[0] = line_count; if (--searches_remaining <= 0) break; }
                    if (searches_result_line_number[1] == -1 && s >= searches_input_ptr[1]) { searches_result_line_number[1] = line_count; if (--searches_remaining <= 0) break; }
                }
            line_count++;
            if (searches_result_line_number[0] == -1) searches_result_line_number[0] = line_count;
            if (searches_result_line_number[1] == -1) searches_result_line_number[1] = line_count;

            // Calculate 2d position by finding the beginning of the line and measuring distance
            cursor_offset.x = InputTextCalcTextSizeW(ImStrbolW(searches_input_ptr[0], text_begin), searches_input_ptr[0]).x;
            cursor_offset.y = searches_result_line_number[0] * g.FontSize;
            if (searches_result_line_number[1] >= 0)
            {
                select_start_offset.x = InputTextCalcTextSizeW(ImStrbolW(searches_input_ptr[1], text_begin), searches_input_ptr[1]).x;
                select_start_offset.y = searches_result_line_number[1] * g.FontSize;
            }

            // Calculate text height
            if (is_multiline)
                text_size = ImVec2(size.x, line_count * g.FontSize);
        }

        // Scroll
        if (edit_state.CursorFollow)
        {
            // Horizontal scroll in chunks of quarter width
            if (!(flags & ImGuiInputTextFlags_NoHorizontalScroll))
            {
                const float scroll_increment_x = size.x * 0.25f;
                if (cursor_offset.x < edit_state.ScrollX)
                    edit_state.ScrollX = (float)(int)ImMax(0.0f, cursor_offset.x - scroll_increment_x);
                else if (cursor_offset.x - size.x >= edit_state.ScrollX)
                    edit_state.ScrollX = (float)(int)(cursor_offset.x - size.x + scroll_increment_x);
            }
            else
            {
                edit_state.ScrollX = 0.0f;
            }

            // Vertical scroll
            if (is_multiline)
            {
                float scroll_y = draw_window->Scroll.y;
                if (cursor_offset.y - g.FontSize < scroll_y)
                    scroll_y = ImMax(0.0f, cursor_offset.y - g.FontSize);
                else if (cursor_offset.y - size.y >= scroll_y)
                    scroll_y = cursor_offset.y - size.y;
                draw_window->DC.CursorPos.y += (draw_window->Scroll.y - scroll_y);   // To avoid a frame of lag
                draw_window->Scroll.y = scroll_y;
                render_pos.y = draw_window->DC.CursorPos.y;
            }
        }
        edit_state.CursorFollow = false;
        const ImVec2 render_scroll = ImVec2(edit_state.ScrollX, 0.0f);

        // Draw selection
        if (edit_state.StbState.select_start != edit_state.StbState.select_end)
        {
            const ImWchar* text_selected_begin = text_begin + ImMin(edit_state.StbState.select_start, edit_state.StbState.select_end);
            const ImWchar* text_selected_end = text_begin + ImMax(edit_state.StbState.select_start, edit_state.StbState.select_end);

            float bg_offy_up = is_multiline ? 0.0f : -1.0f;    // FIXME: those offsets should be part of the style? they don't play so well with multi-line selection.
            float bg_offy_dn = is_multiline ? 0.0f : 2.0f;
            ImU32 bg_color = GetColorU32(ImGuiCol_TextSelectedBg);
            ImVec2 rect_pos = render_pos + select_start_offset - render_scroll;
            for (const ImWchar* p = text_selected_begin; p < text_selected_end; )
            {
                if (rect_pos.y > clip_rect.w + g.FontSize)
                    break;
                if (rect_pos.y < clip_rect.y)
                {
                    while (p < text_selected_end)
                        if (*p++ == '\n')
                            break;
                }
                else
                {
                    ImVec2 rect_size = InputTextCalcTextSizeW(p, text_selected_end, &p, NULL, true);
                    if (rect_size.x <= 0.0f) rect_size.x = (float)(int)(g.Font->GetCharAdvance((unsigned short)' ') * 0.50f); // So we can see selected empty lines
                    ImRect rect(rect_pos + ImVec2(0.0f, bg_offy_up - g.FontSize), rect_pos +ImVec2(rect_size.x, bg_offy_dn));
                    rect.Clip(clip_rect);
                    if (rect.Overlaps(clip_rect))
                        draw_window->DrawList->AddRectFilled(rect.Min, rect.Max, bg_color);
                }
                rect_pos.x = render_pos.x - render_scroll.x;
                rect_pos.y += g.FontSize;
            }
        }

        draw_window->DrawList->AddText(g.Font, g.FontSize, render_pos - render_scroll, GetColorU32(ImGuiCol_Text), buf_display, buf_display + edit_state.CurLenA, 0.0f, is_multiline ? NULL : &clip_rect);

        // Draw blinking cursor
        bool cursor_is_visible = (g.InputTextState.CursorAnim <= 0.0f) || fmodf(g.InputTextState.CursorAnim, 1.20f) <= 0.80f;
        ImVec2 cursor_screen_pos = render_pos + cursor_offset - render_scroll;
        ImRect cursor_screen_rect(cursor_screen_pos.x, cursor_screen_pos.y-g.FontSize+0.5f, cursor_screen_pos.x+1.0f, cursor_screen_pos.y-1.5f);
        if (cursor_is_visible && cursor_screen_rect.Overlaps(clip_rect))
            draw_window->DrawList->AddLine(cursor_screen_rect.Min, cursor_screen_rect.GetBL(), GetColorU32(ImGuiCol_Text));

        // Notify OS of text input position for advanced IME (-1 x offset so that Windows IME can cover our cursor. Bit of an extra nicety.)
        if (is_editable)
            g.OsImePosRequest = ImVec2(cursor_screen_pos.x - 1, cursor_screen_pos.y - g.FontSize);
    }
    else
    {
        // Render text only
        const char* buf_end = NULL;
        if (is_multiline)
            text_size = ImVec2(size.x, InputTextCalcTextLenAndLineCount(buf_display, &buf_end) * g.FontSize); // We don't need width
        draw_window->DrawList->AddText(g.Font, g.FontSize, render_pos, GetColorU32(ImGuiCol_Text), buf_display, buf_end, 0.0f, is_multiline ? NULL : &clip_rect);
    }

    if (is_multiline)
    {
        Dummy(text_size + ImVec2(0.0f, g.FontSize)); // Always add room to scroll an extra line
        EndChildFrame();
        EndGroup();
    }

    if (is_password)
        PopFont();

    // Log as text
    if (g.LogEnabled && !is_password)
        LogRenderedText(render_pos, buf_display, NULL);

    if (label_size.x > 0)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    if ((flags & ImGuiInputTextFlags_EnterReturnsTrue) != 0)
        return enter_pressed;
    else
        return value_changed;
}

bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)
{
    IM_ASSERT(!(flags & ImGuiInputTextFlags_Multiline)); // call InputTextMultiline()
    return InputTextEx(label, buf, (int)buf_size, ImVec2(0,0), flags, callback, user_data);
}

bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)
{
    return InputTextEx(label, buf, (int)buf_size, size, flags | ImGuiInputTextFlags_Multiline, callback, user_data);
}

// NB: scalar_format here must be a simple "%xx" format string with no prefix/suffix (unlike the Drag/Slider functions "display_format" argument)
bool ImGui::InputScalarEx(const char* label, ImGuiDataType data_type, void* data_ptr, void* step_ptr, void* step_fast_ptr, const char* scalar_format, ImGuiInputTextFlags extra_flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    BeginGroup();
    PushID(label);
    const ImVec2 button_sz = ImVec2(g.FontSize, g.FontSize) + style.FramePadding*2.0f;
    if (step_ptr)
        PushItemWidth(ImMax(1.0f, CalcItemWidth() - (button_sz.x + style.ItemInnerSpacing.x)*2));

    char buf[64];
    DataTypeFormatString(data_type, data_ptr, scalar_format, buf, IM_ARRAYSIZE(buf));

    bool value_changed = false;
    if (!(extra_flags & ImGuiInputTextFlags_CharsHexadecimal))
        extra_flags |= ImGuiInputTextFlags_CharsDecimal;
    extra_flags |= ImGuiInputTextFlags_AutoSelectAll;
    if (InputText("", buf, IM_ARRAYSIZE(buf), extra_flags)) // PushId(label) + "" gives us the expected ID from outside point of view
        value_changed = DataTypeApplyOpFromText(buf, GImGui->InputTextState.InitialText.begin(), data_type, data_ptr, scalar_format);

    // Step buttons
    if (step_ptr)
    {
        PopItemWidth();
        SameLine(0, style.ItemInnerSpacing.x);
        if (ButtonEx("-", button_sz, ImGuiButtonFlags_Repeat | ImGuiButtonFlags_DontClosePopups))
        {
            DataTypeApplyOp(data_type, '-', data_ptr, g.IO.KeyCtrl && step_fast_ptr ? step_fast_ptr : step_ptr);
            value_changed = true;
        }
        SameLine(0, style.ItemInnerSpacing.x);
        if (ButtonEx("+", button_sz, ImGuiButtonFlags_Repeat | ImGuiButtonFlags_DontClosePopups))
        {
            DataTypeApplyOp(data_type, '+', data_ptr, g.IO.KeyCtrl && step_fast_ptr ? step_fast_ptr : step_ptr);
            value_changed = true;
        }
    }
    PopID();

    if (label_size.x > 0)
    {
        SameLine(0, style.ItemInnerSpacing.x);
        RenderText(ImVec2(window->DC.CursorPos.x, window->DC.CursorPos.y + style.FramePadding.y), label);
        ItemSize(label_size, style.FramePadding.y);
    }
    EndGroup();

    return value_changed;
}

bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, int decimal_precision, ImGuiInputTextFlags extra_flags)
{
    char display_format[16];
    if (decimal_precision < 0)
        strcpy(display_format, "%f");      // Ideally we'd have a minimum decimal precision of 1 to visually denote that this is a float, while hiding non-significant digits? %f doesn't have a minimum of 1
    else
        ImFormatString(display_format, IM_ARRAYSIZE(display_format), "%%.%df", decimal_precision);
    return InputScalarEx(label, ImGuiDataType_Float, (void*)v, (void*)(step>0.0f ? &step : NULL), (void*)(step_fast>0.0f ? &step_fast : NULL), display_format, extra_flags);
}

bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags extra_flags)
{
    // Hexadecimal input provided as a convenience but the flag name is awkward. Typically you'd use InputText() to parse your own data, if you want to handle prefixes.
    const char* scalar_format = (extra_flags & ImGuiInputTextFlags_CharsHexadecimal) ? "%08X" : "%d";
    return InputScalarEx(label, ImGuiDataType_Int, (void*)v, (void*)(step>0.0f ? &step : NULL), (void*)(step_fast>0.0f ? &step_fast : NULL), scalar_format, extra_flags);
}

bool ImGui::InputFloatN(const char* label, float* v, int components, int decimal_precision, ImGuiInputTextFlags extra_flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components);
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        value_changed |= InputFloat("##v", &v[i], 0, 0, decimal_precision, extra_flags);
        SameLine(0, g.Style.ItemInnerSpacing.x);
        PopID();
        PopItemWidth();
    }
    PopID();

    window->DC.CurrentLineTextBaseOffset = ImMax(window->DC.CurrentLineTextBaseOffset, g.Style.FramePadding.y);
    TextUnformatted(label, FindRenderedTextEnd(label));
    EndGroup();

    return value_changed;
}

bool ImGui::InputFloat2(const char* label, float v[2], int decimal_precision, ImGuiInputTextFlags extra_flags)
{
    return InputFloatN(label, v, 2, decimal_precision, extra_flags);
}

bool ImGui::InputFloat3(const char* label, float v[3], int decimal_precision, ImGuiInputTextFlags extra_flags)
{
    return InputFloatN(label, v, 3, decimal_precision, extra_flags);
}

bool ImGui::InputFloat4(const char* label, float v[4], int decimal_precision, ImGuiInputTextFlags extra_flags)
{
    return InputFloatN(label, v, 4, decimal_precision, extra_flags);
}

bool ImGui::InputIntN(const char* label, int* v, int components, ImGuiInputTextFlags extra_flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components);
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        value_changed |= InputInt("##v", &v[i], 0, 0, extra_flags);
        SameLine(0, g.Style.ItemInnerSpacing.x);
        PopID();
        PopItemWidth();
    }
    PopID();

    window->DC.CurrentLineTextBaseOffset = ImMax(window->DC.CurrentLineTextBaseOffset, g.Style.FramePadding.y);
    TextUnformatted(label, FindRenderedTextEnd(label));
    EndGroup();

    return value_changed;
}

bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags extra_flags)
{
    return InputIntN(label, v, 2, extra_flags);
}

bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags extra_flags)
{
    return InputIntN(label, v, 3, extra_flags);
}

bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags extra_flags)
{
    return InputIntN(label, v, 4, extra_flags);
}

static bool Items_ArrayGetter(void* data, int idx, const char** out_text)
{
    const char* const* items = (const char* const*)data;
    if (out_text)
        *out_text = items[idx];
    return true;
}

static bool Items_SingleStringGetter(void* data, int idx, const char** out_text)
{
    // FIXME-OPT: we could pre-compute the indices to fasten this. But only 1 active combo means the waste is limited.
    const char* items_separated_by_zeros = (const char*)data;
    int items_count = 0;
    const char* p = items_separated_by_zeros;
    while (*p)
    {
        if (idx == items_count)
            break;
        p += strlen(p) + 1;
        items_count++;
    }
    if (!*p)
        return false;
    if (out_text)
        *out_text = p;
    return true;
}

// Combo box helper allowing to pass an array of strings.
bool ImGui::Combo(const char* label, int* current_item, const char* const* items, int items_count, int height_in_items)
{
    const bool value_changed = Combo(label, current_item, Items_ArrayGetter, (void*)items, items_count, height_in_items);
    return value_changed;
}

// Combo box helper allowing to pass all items in a single string.
bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int height_in_items)
{
    int items_count = 0;
    const char* p = items_separated_by_zeros;       // FIXME-OPT: Avoid computing this, or at least only when combo is open
    while (*p)
    {
        p += strlen(p) + 1;
        items_count++;
    }
    bool value_changed = Combo(label, current_item, Items_SingleStringGetter, (void*)items_separated_by_zeros, items_count, height_in_items);
    return value_changed;
}

// Combo box function.
bool ImGui::Combo(const char* label, int* current_item, bool (*items_getter)(void*, int, const char**), void* data, int items_count, int height_in_items)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const float w = CalcItemWidth();

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y*2.0f));
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, &id))
        return false;

    const float arrow_size = (g.FontSize + style.FramePadding.x * 2.0f);
    const bool hovered = IsHovered(frame_bb, id);
    bool popup_open = IsPopupOpen(id);
    bool popup_opened_now = false;

    const ImRect value_bb(frame_bb.Min, frame_bb.Max - ImVec2(arrow_size, 0.0f));
    RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);
    RenderFrame(ImVec2(frame_bb.Max.x-arrow_size, frame_bb.Min.y), frame_bb.Max, GetColorU32(popup_open || hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button), true, style.FrameRounding); // FIXME-ROUNDING
    RenderCollapseTriangle(ImVec2(frame_bb.Max.x-arrow_size, frame_bb.Min.y) + style.FramePadding, true);

    if (*current_item >= 0 && *current_item < items_count)
    {
        const char* item_text;
        if (items_getter(data, *current_item, &item_text))
            RenderTextClipped(frame_bb.Min + style.FramePadding, value_bb.Max, item_text, NULL, NULL, ImVec2(0.0f,0.0f));
    }

    if (label_size.x > 0)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    if (hovered)
    {
        SetHoveredID(id);
        if (g.IO.MouseClicked[0])
        {
            ClearActiveID();
            if (IsPopupOpen(id))
            {
                ClosePopup(id);
            }
            else
            {
                FocusWindow(window);
                OpenPopup(label);
                popup_open = popup_opened_now = true;
            }
        }
    }

    bool value_changed = false;
    if (IsPopupOpen(id))
    {
        // Size default to hold ~7 items
        if (height_in_items < 0)
            height_in_items = 7;

        float popup_height = (label_size.y + style.ItemSpacing.y) * ImMin(items_count, height_in_items) + (style.FramePadding.y * 3);
        float popup_y1 = frame_bb.Max.y;
        float popup_y2 = ImClamp(popup_y1 + popup_height, popup_y1, g.IO.DisplaySize.y - style.DisplaySafeAreaPadding.y);
        if ((popup_y2 - popup_y1) < ImMin(popup_height, frame_bb.Min.y - style.DisplaySafeAreaPadding.y))
        {
            // Position our combo ABOVE because there's more space to fit! (FIXME: Handle in Begin() or use a shared helper. We have similar code in Begin() for popup placement)
            popup_y1 = ImClamp(frame_bb.Min.y - popup_height, style.DisplaySafeAreaPadding.y, frame_bb.Min.y);
            popup_y2 = frame_bb.Min.y;
        }
        ImRect popup_rect(ImVec2(frame_bb.Min.x, popup_y1), ImVec2(frame_bb.Max.x, popup_y2));
        SetNextWindowPos(popup_rect.Min);
        SetNextWindowSize(popup_rect.GetSize());
        PushStyleVar(ImGuiStyleVar_WindowPadding, style.FramePadding);

        const ImGuiWindowFlags flags = ImGuiWindowFlags_ComboBox | ((window->Flags & ImGuiWindowFlags_ShowBorders) ? ImGuiWindowFlags_ShowBorders : 0);
        if (BeginPopupEx(label, flags))
        {
            // Display items
            Spacing();
            for (int i = 0; i < items_count; i++)
            {
                PushID((void*)(intptr_t)i);
                const bool item_selected = (i == *current_item);
                const char* item_text;
                if (!items_getter(data, i, &item_text))
                    item_text = "*Unknown item*";
                if (Selectable(item_text, item_selected))
                {
                    ClearActiveID();
                    value_changed = true;
                    *current_item = i;
                }
                if (item_selected && popup_opened_now)
                    SetScrollHere();
                PopID();
            }
            EndPopup();
        }
        PopStyleVar();
    }
    return value_changed;
}

// Tip: pass an empty label (e.g. "##dummy") then you can use the space to draw other text or image.
// But you need to make sure the ID is unique, e.g. enclose calls in PushID/PopID.
bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec2& size_arg)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.ColumnsCount > 1)
        PopClipRect();

    ImGuiID id = window->GetID(label);
    ImVec2 label_size = CalcTextSize(label, NULL, true);
    ImVec2 size(size_arg.x != 0.0f ? size_arg.x : label_size.x, size_arg.y != 0.0f ? size_arg.y : label_size.y);
    ImVec2 pos = window->DC.CursorPos;
    pos.y += window->DC.CurrentLineTextBaseOffset;
    ImRect bb(pos, pos + size);
    ItemSize(bb);

    // Fill horizontal space.
    ImVec2 window_padding = window->WindowPadding;
    float max_x = (flags & ImGuiSelectableFlags_SpanAllColumns) ? GetWindowContentRegionMax().x : GetContentRegionMax().x;
    float w_draw = ImMax(label_size.x, window->Pos.x + max_x - window_padding.x - window->DC.CursorPos.x);
    ImVec2 size_draw((size_arg.x != 0 && !(flags & ImGuiSelectableFlags_DrawFillAvailWidth)) ? size_arg.x : w_draw, size_arg.y != 0.0f ? size_arg.y : size.y);
    ImRect bb_with_spacing(pos, pos + size_draw);
    if (size_arg.x == 0.0f || (flags & ImGuiSelectableFlags_DrawFillAvailWidth))
        bb_with_spacing.Max.x += window_padding.x;

    // Selectables are tightly packed together, we extend the box to cover spacing between selectable.
    float spacing_L = (float)(int)(style.ItemSpacing.x * 0.5f);
    float spacing_U = (float)(int)(style.ItemSpacing.y * 0.5f);
    float spacing_R = style.ItemSpacing.x - spacing_L;
    float spacing_D = style.ItemSpacing.y - spacing_U;
    bb_with_spacing.Min.x -= spacing_L;
    bb_with_spacing.Min.y -= spacing_U;
    bb_with_spacing.Max.x += spacing_R;
    bb_with_spacing.Max.y += spacing_D;
    if (!ItemAdd(bb_with_spacing, &id))
    {
        if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.ColumnsCount > 1)
            PushColumnClipRect();
        return false;
    }

    ImGuiButtonFlags button_flags = 0;
    if (flags & ImGuiSelectableFlags_Menu) button_flags |= ImGuiButtonFlags_PressedOnClick;
    if (flags & ImGuiSelectableFlags_MenuItem) button_flags |= ImGuiButtonFlags_PressedOnClick|ImGuiButtonFlags_PressedOnRelease;
    if (flags & ImGuiSelectableFlags_Disabled) button_flags |= ImGuiButtonFlags_Disabled;
    if (flags & ImGuiSelectableFlags_AllowDoubleClick) button_flags |= ImGuiButtonFlags_PressedOnClickRelease | ImGuiButtonFlags_PressedOnDoubleClick;
    bool hovered, held;
    bool pressed = ButtonBehavior(bb_with_spacing, id, &hovered, &held, button_flags);
    if (flags & ImGuiSelectableFlags_Disabled)
        selected = false;

    // Render
    if (hovered || selected)
    {
        const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_HeaderActive : hovered ? ImGuiCol_HeaderHovered : ImGuiCol_Header);
        RenderFrame(bb_with_spacing.Min, bb_with_spacing.Max, col, false, 0.0f);
    }

    if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.ColumnsCount > 1)
    {
        PushColumnClipRect();
        bb_with_spacing.Max.x -= (GetContentRegionMax().x - max_x);
    }

    if (flags & ImGuiSelectableFlags_Disabled) PushStyleColor(ImGuiCol_Text, g.Style.Colors[ImGuiCol_TextDisabled]);
    RenderTextClipped(bb.Min, bb_with_spacing.Max, label, NULL, &label_size, ImVec2(0.0f,0.0f));
    if (flags & ImGuiSelectableFlags_Disabled) PopStyleColor();

    // Automatically close popups
    if (pressed && !(flags & ImGuiSelectableFlags_DontClosePopups) && (window->Flags & ImGuiWindowFlags_Popup))
        CloseCurrentPopup();
    return pressed;
}

bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const ImVec2& size_arg)
{
    if (Selectable(label, *p_selected, flags, size_arg))
    {
        *p_selected = !*p_selected;
        return true;
    }
    return false;
}

// Helper to calculate the size of a listbox and display a label on the right.
// Tip: To have a list filling the entire window width, PushItemWidth(-1) and pass an empty label "##empty"
bool ImGui::ListBoxHeader(const char* label, const ImVec2& size_arg)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    const ImGuiStyle& style = GetStyle();
    const ImGuiID id = GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    // Size default to hold ~7 items. Fractional number of items helps seeing that we can scroll down/up without looking at scrollbar.
    ImVec2 size = CalcItemSize(size_arg, CalcItemWidth(), GetTextLineHeightWithSpacing() * 7.4f + style.ItemSpacing.y);
    ImVec2 frame_size = ImVec2(size.x, ImMax(size.y, label_size.y));
    ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + frame_size);
    ImRect bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));
    window->DC.LastItemRect = bb;

    BeginGroup();
    if (label_size.x > 0)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    BeginChildFrame(id, frame_bb.GetSize());
    return true;
}

bool ImGui::ListBoxHeader(const char* label, int items_count, int height_in_items)
{
    // Size default to hold ~7 items. Fractional number of items helps seeing that we can scroll down/up without looking at scrollbar.
    // However we don't add +0.40f if items_count <= height_in_items. It is slightly dodgy, because it means a dynamic list of items will make the widget resize occasionally when it crosses that size.
    // I am expecting that someone will come and complain about this behavior in a remote future, then we can advise on a better solution.
    if (height_in_items < 0)
        height_in_items = ImMin(items_count, 7);
    float height_in_items_f = height_in_items < items_count ? (height_in_items + 0.40f) : (height_in_items + 0.00f);

    // We include ItemSpacing.y so that a list sized for the exact number of items doesn't make a scrollbar appears. We could also enforce that by passing a flag to BeginChild().
    ImVec2 size;
    size.x = 0.0f;
    size.y = GetTextLineHeightWithSpacing() * height_in_items_f + GetStyle().ItemSpacing.y;
    return ListBoxHeader(label, size);
}

void ImGui::ListBoxFooter()
{
    ImGuiWindow* parent_window = GetParentWindow();
    const ImRect bb = parent_window->DC.LastItemRect;
    const ImGuiStyle& style = GetStyle();

    EndChildFrame();

    // Redeclare item size so that it includes the label (we have stored the full size in LastItemRect)
    // We call SameLine() to restore DC.CurrentLine* data
    SameLine();
    parent_window->DC.CursorPos = bb.Min;
    ItemSize(bb, style.FramePadding.y);
    EndGroup();
}

bool ImGui::ListBox(const char* label, int* current_item, const char* const* items, int items_count, int height_items)
{
    const bool value_changed = ListBox(label, current_item, Items_ArrayGetter, (void*)items, items_count, height_items);
    return value_changed;
}

bool ImGui::ListBox(const char* label, int* current_item, bool (*items_getter)(void*, int, const char**), void* data, int items_count, int height_in_items)
{
    if (!ListBoxHeader(label, items_count, height_in_items))
        return false;

    // Assume all items have even height (= 1 line of text). If you need items of different or variable sizes you can create a custom version of ListBox() in your code without using the clipper.
    bool value_changed = false;
    ImGuiListClipper clipper(items_count, GetTextLineHeightWithSpacing());
    while (clipper.Step())
        for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
        {
            const bool item_selected = (i == *current_item);
            const char* item_text;
            if (!items_getter(data, i, &item_text))
                item_text = "*Unknown item*";

            PushID(i);
            if (Selectable(item_text, item_selected))
            {
                *current_item = i;
                value_changed = true;
            }
            PopID();
        }
    ListBoxFooter();
    return value_changed;
}

bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    ImVec2 pos = window->DC.CursorPos;
    ImVec2 label_size = CalcTextSize(label, NULL, true);
    ImVec2 shortcut_size = shortcut ? CalcTextSize(shortcut, NULL) : ImVec2(0.0f, 0.0f);
    float w = window->MenuColumns.DeclColumns(label_size.x, shortcut_size.x, (float)(int)(g.FontSize * 1.20f)); // Feedback for next frame
    float extra_w = ImMax(0.0f, GetContentRegionAvail().x - w);

    bool pressed = Selectable(label, false, ImGuiSelectableFlags_MenuItem | ImGuiSelectableFlags_DrawFillAvailWidth | (enabled ? 0 : ImGuiSelectableFlags_Disabled), ImVec2(w, 0.0f));
    if (shortcut_size.x > 0.0f)
    {
        PushStyleColor(ImGuiCol_Text, g.Style.Colors[ImGuiCol_TextDisabled]);
        RenderText(pos + ImVec2(window->MenuColumns.Pos[1] + extra_w, 0.0f), shortcut, NULL, false);
        PopStyleColor();
    }

    if (selected)
        RenderCheckMark(pos + ImVec2(window->MenuColumns.Pos[2] + extra_w + g.FontSize * 0.20f, 0.0f), GetColorU32(enabled ? ImGuiCol_Text : ImGuiCol_TextDisabled));

    return pressed;
}

bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)
{
    if (MenuItem(label, shortcut, p_selected ? *p_selected : false, enabled))
    {
        if (p_selected)
            *p_selected = !*p_selected;
        return true;
    }
    return false;
}

bool ImGui::BeginMainMenuBar()
{
    ImGuiContext& g = *GImGui;
    SetNextWindowPos(ImVec2(0.0f, 0.0f));
    SetNextWindowSize(ImVec2(g.IO.DisplaySize.x, g.FontBaseSize + g.Style.FramePadding.y * 2.0f));
    PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
    PushStyleVar(ImGuiStyleVar_WindowMinSize, ImVec2(0,0));
    if (!Begin("##MainMenuBar", NULL, ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoResize|ImGuiWindowFlags_NoMove|ImGuiWindowFlags_NoScrollbar|ImGuiWindowFlags_NoSavedSettings|ImGuiWindowFlags_MenuBar)
        || !BeginMenuBar())
    {
        End();
        PopStyleVar(2);
        return false;
    }
    g.CurrentWindow->DC.MenuBarOffsetX += g.Style.DisplaySafeAreaPadding.x;
    return true;
}

void ImGui::EndMainMenuBar()
{
    EndMenuBar();
    End();
    PopStyleVar(2);
}

bool ImGui::BeginMenuBar()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;
    if (!(window->Flags & ImGuiWindowFlags_MenuBar))
        return false;

    IM_ASSERT(!window->DC.MenuBarAppending);
    BeginGroup(); // Save position
    PushID("##menubar");
    ImRect rect = window->MenuBarRect();
    PushClipRect(ImVec2(ImFloor(rect.Min.x+0.5f), ImFloor(rect.Min.y + window->BorderSize + 0.5f)), ImVec2(ImFloor(rect.Max.x+0.5f), ImFloor(rect.Max.y+0.5f)), false);
    window->DC.CursorPos = ImVec2(rect.Min.x + window->DC.MenuBarOffsetX, rect.Min.y);// + g.Style.FramePadding.y);
    window->DC.LayoutType = ImGuiLayoutType_Horizontal;
    window->DC.MenuBarAppending = true;
    AlignFirstTextHeightToWidgets();
    return true;
}

void ImGui::EndMenuBar()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    IM_ASSERT(window->Flags & ImGuiWindowFlags_MenuBar);
    IM_ASSERT(window->DC.MenuBarAppending);
    PopClipRect();
    PopID();
    window->DC.MenuBarOffsetX = window->DC.CursorPos.x - window->MenuBarRect().Min.x;
    window->DC.GroupStack.back().AdvanceCursor = false;
    EndGroup();
    window->DC.LayoutType = ImGuiLayoutType_Vertical;
    window->DC.MenuBarAppending = false;
}

bool ImGui::BeginMenu(const char* label, bool enabled)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);

    ImVec2 label_size = CalcTextSize(label, NULL, true);
    ImGuiWindow* backed_focused_window = g.FocusedWindow;

    bool pressed;
    bool menu_is_open = IsPopupOpen(id);
    bool menuset_is_open = !(window->Flags & ImGuiWindowFlags_Popup) && (g.OpenPopupStack.Size > g.CurrentPopupStack.Size && g.OpenPopupStack[g.CurrentPopupStack.Size].ParentMenuSet == window->GetID("##menus"));
    if (menuset_is_open)
        g.FocusedWindow = window;

    // The reference position stored in popup_pos will be used by Begin() to find a suitable position for the child menu (using FindBestPopupWindowPos).
    ImVec2 popup_pos, pos = window->DC.CursorPos;
    if (window->DC.LayoutType == ImGuiLayoutType_Horizontal)
    {
        popup_pos = ImVec2(pos.x - window->WindowPadding.x, pos.y - style.FramePadding.y + window->MenuBarHeight());
        window->DC.CursorPos.x += (float)(int)(style.ItemSpacing.x * 0.5f);
        PushStyleVar(ImGuiStyleVar_ItemSpacing, style.ItemSpacing * 2.0f);
        float w = label_size.x;
        pressed = Selectable(label, menu_is_open, ImGuiSelectableFlags_Menu | ImGuiSelectableFlags_DontClosePopups | (!enabled ? ImGuiSelectableFlags_Disabled : 0), ImVec2(w, 0.0f));
        PopStyleVar();
        SameLine();
        window->DC.CursorPos.x += (float)(int)(style.ItemSpacing.x * 0.5f);
    }
    else
    {
        popup_pos = ImVec2(pos.x, pos.y - style.WindowPadding.y);
        float w = window->MenuColumns.DeclColumns(label_size.x, 0.0f, (float)(int)(g.FontSize * 1.20f)); // Feedback to next frame
        float extra_w = ImMax(0.0f, GetContentRegionAvail().x - w);
        pressed = Selectable(label, menu_is_open, ImGuiSelectableFlags_Menu | ImGuiSelectableFlags_DontClosePopups | ImGuiSelectableFlags_DrawFillAvailWidth | (!enabled ? ImGuiSelectableFlags_Disabled : 0), ImVec2(w, 0.0f));
        if (!enabled) PushStyleColor(ImGuiCol_Text, g.Style.Colors[ImGuiCol_TextDisabled]);
        RenderCollapseTriangle(pos + ImVec2(window->MenuColumns.Pos[2] + extra_w + g.FontSize * 0.20f, 0.0f), false);
        if (!enabled) PopStyleColor();
    }

    bool hovered = enabled && IsHovered(window->DC.LastItemRect, id);
    if (menuset_is_open)
        g.FocusedWindow = backed_focused_window;

    bool want_open = false, want_close = false;
    if (window->Flags & (ImGuiWindowFlags_Popup|ImGuiWindowFlags_ChildMenu))
    {
        // Implement http://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown to avoid using timers, so menus feels more reactive.
        bool moving_within_opened_triangle = false;
        if (g.HoveredWindow == window && g.OpenPopupStack.Size > g.CurrentPopupStack.Size && g.OpenPopupStack[g.CurrentPopupStack.Size].ParentWindow == window)
        {
            if (ImGuiWindow* next_window = g.OpenPopupStack[g.CurrentPopupStack.Size].Window)
            {
                ImRect next_window_rect = next_window->Rect();
                ImVec2 ta = g.IO.MousePos - g.IO.MouseDelta;
                ImVec2 tb = (window->Pos.x < next_window->Pos.x) ? next_window_rect.GetTL() : next_window_rect.GetTR();
                ImVec2 tc = (window->Pos.x < next_window->Pos.x) ? next_window_rect.GetBL() : next_window_rect.GetBR();
                float extra = ImClamp(fabsf(ta.x - tb.x) * 0.30f, 5.0f, 30.0f); // add a bit of extra slack.
                ta.x += (window->Pos.x < next_window->Pos.x) ? -0.5f : +0.5f;   // to avoid numerical issues
                tb.y = ta.y + ImMax((tb.y - extra) - ta.y, -100.0f);            // triangle is maximum 200 high to limit the slope and the bias toward large sub-menus // FIXME: Multiply by fb_scale?
                tc.y = ta.y + ImMin((tc.y + extra) - ta.y, +100.0f);
                moving_within_opened_triangle = ImIsPointInTriangle(g.IO.MousePos, ta, tb, tc);
                //window->DrawList->PushClipRectFullScreen(); window->DrawList->AddTriangleFilled(ta, tb, tc, moving_within_opened_triangle ? IM_COL32(0,128,0,128) : IM_COL32(128,0,0,128)); window->DrawList->PopClipRect(); // Debug
            }
        }

        want_close = (menu_is_open && !hovered && g.HoveredWindow == window && g.HoveredIdPreviousFrame != 0 && g.HoveredIdPreviousFrame != id && !moving_within_opened_triangle);
        want_open = (!menu_is_open && hovered && !moving_within_opened_triangle) || (!menu_is_open && hovered && pressed);
    }
    else if (menu_is_open && pressed && menuset_is_open) // menu-bar: click open menu to close
    {
        want_close = true;
        want_open = menu_is_open = false;
    }
    else if (pressed || (hovered && menuset_is_open && !menu_is_open)) // menu-bar: first click to open, then hover to open others
        want_open = true;
    if (!enabled) // explicitly close if an open menu becomes disabled, facilitate users code a lot in pattern such as 'if (BeginMenu("options", has_object)) { ..use object.. }'
        want_close = true;
    if (want_close && IsPopupOpen(id))
        ClosePopupToLevel(GImGui->CurrentPopupStack.Size);

    if (!menu_is_open && want_open && g.OpenPopupStack.Size > g.CurrentPopupStack.Size)
    {
        // Don't recycle same menu level in the same frame, first close the other menu and yield for a frame.
        OpenPopup(label);
        return false;
    }

    menu_is_open |= want_open;
    if (want_open)
        OpenPopup(label);

    if (menu_is_open)
    {
        SetNextWindowPos(popup_pos, ImGuiSetCond_Always);
        ImGuiWindowFlags flags = ImGuiWindowFlags_ShowBorders | ((window->Flags & (ImGuiWindowFlags_Popup|ImGuiWindowFlags_ChildMenu)) ? ImGuiWindowFlags_ChildMenu|ImGuiWindowFlags_ChildWindow : ImGuiWindowFlags_ChildMenu);
        menu_is_open = BeginPopupEx(label, flags); // menu_is_open can be 'false' when the popup is completely clipped (e.g. zero size display)
    }

    return menu_is_open;
}

void ImGui::EndMenu()
{
    EndPopup();
}

// A little colored square. Return true when clicked.
// FIXME: May want to display/ignore the alpha component in the color display? Yet show it in the tooltip.
bool ImGui::ColorButton(const ImVec4& col, bool small_height, bool outline_border)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID("#colorbutton");
    const float square_size = g.FontSize;
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(square_size + style.FramePadding.y*2, square_size + (small_height ? 0 : style.FramePadding.y*2)));
    ItemSize(bb, small_height ? 0.0f : style.FramePadding.y);
    if (!ItemAdd(bb, &id))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held);
    RenderFrame(bb.Min, bb.Max, GetColorU32(col), outline_border, style.FrameRounding);

    if (hovered)
        SetTooltip("Color:\n(%.2f,%.2f,%.2f,%.2f)\n#%02X%02X%02X%02X", col.x, col.y, col.z, col.w, IM_F32_TO_INT8_SAT(col.x), IM_F32_TO_INT8_SAT(col.y), IM_F32_TO_INT8_SAT(col.z), IM_F32_TO_INT8_SAT(col.w));

    return pressed;
}

bool ImGui::ColorEdit3(const char* label, float col[3])
{
    float col4[4];
    col4[0] = col[0];
    col4[1] = col[1];
    col4[2] = col[2];
    col4[3] = 1.0f;
    const bool value_changed = ColorEdit4(label, col4, false);
    col[0] = col4[0];
    col[1] = col4[1];
    col[2] = col4[2];
    return value_changed;
}

// Edit colors components (each component in 0.0f..1.0f range
// Use CTRL-Click to input value and TAB to go to next item.
bool ImGui::ColorEdit4(const char* label, float col[4], bool alpha)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const float w_full = CalcItemWidth();
    const float square_sz = (g.FontSize + style.FramePadding.y * 2.0f);

    ImGuiColorEditMode edit_mode = window->DC.ColorEditMode;
    if (edit_mode == ImGuiColorEditMode_UserSelect || edit_mode == ImGuiColorEditMode_UserSelectShowButton)
        edit_mode = g.ColorEditModeStorage.GetInt(id, 0) % 3;

    float f[4] = { col[0], col[1], col[2], col[3] };
    if (edit_mode == ImGuiColorEditMode_HSV)
        ColorConvertRGBtoHSV(f[0], f[1], f[2], f[0], f[1], f[2]);

    int i[4] = { IM_F32_TO_INT8_UNBOUND(f[0]), IM_F32_TO_INT8_UNBOUND(f[1]), IM_F32_TO_INT8_UNBOUND(f[2]), IM_F32_TO_INT8_UNBOUND(f[3]) };

    int components = alpha ? 4 : 3;
    bool value_changed = false;

    BeginGroup();
    PushID(label);

    const bool hsv = (edit_mode == 1);
    switch (edit_mode)
    {
    case ImGuiColorEditMode_RGB:
    case ImGuiColorEditMode_HSV:
        {
            // RGB/HSV 0..255 Sliders
            const float w_items_all = w_full - (square_sz + style.ItemInnerSpacing.x);
            const float w_item_one  = ImMax(1.0f, (float)(int)((w_items_all - (style.ItemInnerSpacing.x) * (components-1)) / (float)components));
            const float w_item_last = ImMax(1.0f, (float)(int)(w_items_all - (w_item_one + style.ItemInnerSpacing.x) * (components-1)));

            const bool hide_prefix = (w_item_one <= CalcTextSize("M:999").x);
            const char* ids[4] = { "##X", "##Y", "##Z", "##W" };
            const char* fmt_table[3][4] =
            {
                {   "%3.0f",   "%3.0f",   "%3.0f",   "%3.0f" },
                { "R:%3.0f", "G:%3.0f", "B:%3.0f", "A:%3.0f" },
                { "H:%3.0f", "S:%3.0f", "V:%3.0f", "A:%3.0f" }
            };
            const char** fmt = hide_prefix ? fmt_table[0] : hsv ? fmt_table[2] : fmt_table[1];

            PushItemWidth(w_item_one);
            for (int n = 0; n < components; n++)
            {
                if (n > 0)
                    SameLine(0, style.ItemInnerSpacing.x);
                if (n + 1 == components)
                    PushItemWidth(w_item_last);
                value_changed |= DragInt(ids[n], &i[n], 1.0f, 0, 255, fmt[n]);
            }
            PopItemWidth();
            PopItemWidth();
        }
        break;
    case ImGuiColorEditMode_HEX:
        {
            // RGB Hexadecimal Input
            const float w_slider_all = w_full - square_sz;
            char buf[64];
            if (alpha)
                ImFormatString(buf, IM_ARRAYSIZE(buf), "#%02X%02X%02X%02X", i[0], i[1], i[2], i[3]);
            else
                ImFormatString(buf, IM_ARRAYSIZE(buf), "#%02X%02X%02X", i[0], i[1], i[2]);
            PushItemWidth(w_slider_all - style.ItemInnerSpacing.x);
            if (InputText("##Text", buf, IM_ARRAYSIZE(buf), ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase))
            {
                value_changed |= true;
                char* p = buf;
                while (*p == '#' || ImCharIsSpace(*p))
                    p++;
                i[0] = i[1] = i[2] = i[3] = 0;
                if (alpha)
                    sscanf(p, "%02X%02X%02X%02X", (unsigned int*)&i[0], (unsigned int*)&i[1], (unsigned int*)&i[2], (unsigned int*)&i[3]); // Treat at unsigned (%X is unsigned)
                else
                    sscanf(p, "%02X%02X%02X", (unsigned int*)&i[0], (unsigned int*)&i[1], (unsigned int*)&i[2]);
            }
            PopItemWidth();
        }
        break;
    }

    SameLine(0, style.ItemInnerSpacing.x);

    const ImVec4 col_display(col[0], col[1], col[2], 1.0f);
    if (ColorButton(col_display))
        g.ColorEditModeStorage.SetInt(id, (edit_mode + 1) % 3); // Don't set local copy of 'edit_mode' right away!

    // Recreate our own tooltip over's ColorButton() one because we want to display correct alpha here
    if (IsItemHovered())
        SetTooltip("Color:\n(%.2f,%.2f,%.2f,%.2f)\n#%02X%02X%02X%02X", col[0], col[1], col[2], col[3], IM_F32_TO_INT8_SAT(col[0]), IM_F32_TO_INT8_SAT(col[1]), IM_F32_TO_INT8_SAT(col[2]), IM_F32_TO_INT8_SAT(col[3]));

    if (window->DC.ColorEditMode == ImGuiColorEditMode_UserSelectShowButton)
    {
        SameLine(0, style.ItemInnerSpacing.x);
        const char* button_titles[3] = { "RGB", "HSV", "HEX" };
        if (ButtonEx(button_titles[edit_mode], ImVec2(0,0), ImGuiButtonFlags_DontClosePopups))
            g.ColorEditModeStorage.SetInt(id, (edit_mode + 1) % 3); // Don't set local copy of 'edit_mode' right away!
    }

    const char* label_display_end = FindRenderedTextEnd(label);
    if (label != label_display_end)
    {
        SameLine(0, (window->DC.ColorEditMode == ImGuiColorEditMode_UserSelectShowButton) ? -1.0f : style.ItemInnerSpacing.x);
        TextUnformatted(label, label_display_end);
    }

    // Convert back
    for (int n = 0; n < 4; n++)
        f[n] = i[n] / 255.0f;
    if (edit_mode == 1)
        ColorConvertHSVtoRGB(f[0], f[1], f[2], f[0], f[1], f[2]);

    if (value_changed)
    {
        col[0] = f[0];
        col[1] = f[1];
        col[2] = f[2];
        if (alpha)
            col[3] = f[3];
    }

    PopID();
    EndGroup();

    return value_changed;
}

void ImGui::ColorEditMode(ImGuiColorEditMode mode)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.ColorEditMode = mode;
}

// Horizontal separating line.
void ImGui::Separator()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    if (window->DC.ColumnsCount > 1)
        PopClipRect();

    float x1 = window->Pos.x;
    float x2 = window->Pos.x + window->Size.x;
    if (!window->DC.GroupStack.empty())
        x1 += window->DC.IndentX;

    const ImRect bb(ImVec2(x1, window->DC.CursorPos.y), ImVec2(x2, window->DC.CursorPos.y+1.0f));
    ItemSize(ImVec2(0.0f, 0.0f)); // NB: we don't provide our width so that it doesn't get feed back into AutoFit, we don't provide height to not alter layout.
    if (!ItemAdd(bb, NULL))
    {
        if (window->DC.ColumnsCount > 1)
            PushColumnClipRect();
        return;
    }

    window->DrawList->AddLine(bb.Min, ImVec2(bb.Max.x,bb.Min.y), GetColorU32(ImGuiCol_Border));

    ImGuiContext& g = *GImGui;
    if (g.LogEnabled)
        LogText(IM_NEWLINE "--------------------------------");

    if (window->DC.ColumnsCount > 1)
    {
        PushColumnClipRect();
        window->DC.ColumnsCellMinY = window->DC.CursorPos.y;
    }
}

void ImGui::Spacing()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;
    ItemSize(ImVec2(0,0));
}

void ImGui::Dummy(const ImVec2& size)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    ItemSize(bb);
    ItemAdd(bb, NULL);
}

bool ImGui::IsRectVisible(const ImVec2& size)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->ClipRect.Overlaps(ImRect(window->DC.CursorPos, window->DC.CursorPos + size));
}

bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->ClipRect.Overlaps(ImRect(rect_min, rect_max));
}

// Lock horizontal starting position + capture group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)
void ImGui::BeginGroup()
{
    ImGuiWindow* window = GetCurrentWindow();

    window->DC.GroupStack.resize(window->DC.GroupStack.Size + 1);
    ImGuiGroupData& group_data = window->DC.GroupStack.back();
    group_data.BackupCursorPos = window->DC.CursorPos;
    group_data.BackupCursorMaxPos = window->DC.CursorMaxPos;
    group_data.BackupIndentX = window->DC.IndentX;
    group_data.BackupGroupOffsetX = window->DC.GroupOffsetX;
    group_data.BackupCurrentLineHeight = window->DC.CurrentLineHeight;
    group_data.BackupCurrentLineTextBaseOffset = window->DC.CurrentLineTextBaseOffset;
    group_data.BackupLogLinePosY = window->DC.LogLinePosY;
    group_data.BackupActiveIdIsAlive = GImGui->ActiveIdIsAlive;
    group_data.AdvanceCursor = true;

    window->DC.GroupOffsetX = window->DC.CursorPos.x - window->Pos.x - window->DC.ColumnsOffsetX;
    window->DC.IndentX = window->DC.GroupOffsetX;
    window->DC.CursorMaxPos = window->DC.CursorPos;
    window->DC.CurrentLineHeight = 0.0f;
    window->DC.LogLinePosY = window->DC.CursorPos.y - 9999.0f;
}

void ImGui::EndGroup()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    IM_ASSERT(!window->DC.GroupStack.empty());	// Mismatched BeginGroup()/EndGroup() calls

    ImGuiGroupData& group_data = window->DC.GroupStack.back();

    ImRect group_bb(group_data.BackupCursorPos, window->DC.CursorMaxPos);
    group_bb.Max.y -= g.Style.ItemSpacing.y;      // Cancel out last vertical spacing because we are adding one ourselves.
    group_bb.Max = ImMax(group_bb.Min, group_bb.Max);

    window->DC.CursorPos = group_data.BackupCursorPos;
    window->DC.CursorMaxPos = ImMax(group_data.BackupCursorMaxPos, window->DC.CursorMaxPos);
    window->DC.CurrentLineHeight = group_data.BackupCurrentLineHeight;
    window->DC.CurrentLineTextBaseOffset = group_data.BackupCurrentLineTextBaseOffset;
    window->DC.IndentX = group_data.BackupIndentX;
    window->DC.GroupOffsetX = group_data.BackupGroupOffsetX;
    window->DC.LogLinePosY = window->DC.CursorPos.y - 9999.0f;

    if (group_data.AdvanceCursor)
    {
        window->DC.CurrentLineTextBaseOffset = ImMax(window->DC.PrevLineTextBaseOffset, group_data.BackupCurrentLineTextBaseOffset);      // FIXME: Incorrect, we should grab the base offset from the *first line* of the group but it is hard to obtain now.
        ItemSize(group_bb.GetSize(), group_data.BackupCurrentLineTextBaseOffset);
        ItemAdd(group_bb, NULL);
    }

    // If the current ActiveId was declared within the boundary of our group, we copy it to LastItemId so IsItemActive() will function on the entire group.
    // It would be be neater if we replaced window.DC.LastItemId by e.g. 'bool LastItemIsActive', but if you search for LastItemId you'll notice it is only used in that context.
    const bool active_id_within_group = (!group_data.BackupActiveIdIsAlive && g.ActiveIdIsAlive && g.ActiveId && g.ActiveIdWindow->RootWindow == window->RootWindow);
    if (active_id_within_group)
        window->DC.LastItemId = g.ActiveId;
    if (active_id_within_group && g.HoveredId == g.ActiveId)
        window->DC.LastItemHoveredAndUsable = window->DC.LastItemHoveredRect = true;

    window->DC.GroupStack.pop_back();

    //window->DrawList->AddRect(group_bb.Min, group_bb.Max, IM_COL32(255,0,255,255));   // Debug
}

// Gets back to previous line and continue with horizontal layout
//      pos_x == 0      : follow right after previous item
//      pos_x != 0      : align to specified x position (relative to window/group left)
//      spacing_w < 0   : use default spacing if pos_x == 0, no spacing if pos_x != 0
//      spacing_w >= 0  : enforce spacing amount
void ImGui::SameLine(float pos_x, float spacing_w)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    if (pos_x != 0.0f)
    {
        if (spacing_w < 0.0f) spacing_w = 0.0f;
        window->DC.CursorPos.x = window->Pos.x - window->Scroll.x + pos_x + spacing_w + window->DC.GroupOffsetX + window->DC.ColumnsOffsetX;
        window->DC.CursorPos.y = window->DC.CursorPosPrevLine.y;
    }
    else
    {
        if (spacing_w < 0.0f) spacing_w = g.Style.ItemSpacing.x;
        window->DC.CursorPos.x = window->DC.CursorPosPrevLine.x + spacing_w;
        window->DC.CursorPos.y = window->DC.CursorPosPrevLine.y;
    }
    window->DC.CurrentLineHeight = window->DC.PrevLineHeight;
    window->DC.CurrentLineTextBaseOffset = window->DC.PrevLineTextBaseOffset;
}

void ImGui::NewLine()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;
    if (window->DC.CurrentLineHeight > 0.0f)     // In the event that we are on a line with items that is smaller that FontSize high, we will preserve its height.
        ItemSize(ImVec2(0,0));
    else
        ItemSize(ImVec2(0.0f, GImGui->FontSize));
}

void ImGui::NextColumn()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems || window->DC.ColumnsCount <= 1)
        return;

    ImGuiContext& g = *GImGui;
    PopItemWidth();
    PopClipRect();

    window->DC.ColumnsCellMaxY = ImMax(window->DC.ColumnsCellMaxY, window->DC.CursorPos.y);
    if (++window->DC.ColumnsCurrent < window->DC.ColumnsCount)
    {
        // Columns 1+ cancel out IndentX
        window->DC.ColumnsOffsetX = GetColumnOffset(window->DC.ColumnsCurrent) - window->DC.IndentX + g.Style.ItemSpacing.x;
        window->DrawList->ChannelsSetCurrent(window->DC.ColumnsCurrent);
    }
    else
    {
        window->DC.ColumnsCurrent = 0;
        window->DC.ColumnsOffsetX = 0.0f;
        window->DC.ColumnsCellMinY = window->DC.ColumnsCellMaxY;
        window->DrawList->ChannelsSetCurrent(0);
    }
    window->DC.CursorPos.x = (float)(int)(window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX);
    window->DC.CursorPos.y = window->DC.ColumnsCellMinY;
    window->DC.CurrentLineHeight = 0.0f;
    window->DC.CurrentLineTextBaseOffset = 0.0f;

    PushColumnClipRect();
    PushItemWidth(GetColumnWidth() * 0.65f);  // FIXME: Move on columns setup
}

int ImGui::GetColumnIndex()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.ColumnsCurrent;
}

int ImGui::GetColumnsCount()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.ColumnsCount;
}

static float GetDraggedColumnOffset(int column_index)
{
    // Active (dragged) column always follow mouse. The reason we need this is that dragging a column to the right edge of an auto-resizing
    // window creates a feedback loop because we store normalized positions. So while dragging we enforce absolute positioning.
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = ImGui::GetCurrentWindowRead();
    IM_ASSERT(column_index > 0); // We cannot drag column 0. If you get this assert you may have a conflict between the ID of your columns and another widgets.
    IM_ASSERT(g.ActiveId == window->DC.ColumnsSetId + ImGuiID(column_index));

    float x = g.IO.MousePos.x - g.ActiveIdClickOffset.x - window->Pos.x;
    x = ImClamp(x, ImGui::GetColumnOffset(column_index-1)+g.Style.ColumnsMinSpacing, ImGui::GetColumnOffset(column_index+1)-g.Style.ColumnsMinSpacing);

    return (float)(int)x;
}

float ImGui::GetColumnOffset(int column_index)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindowRead();
    if (column_index < 0)
        column_index = window->DC.ColumnsCurrent;

    if (g.ActiveId)
    {
        const ImGuiID column_id = window->DC.ColumnsSetId + ImGuiID(column_index);
        if (g.ActiveId == column_id)
            return GetDraggedColumnOffset(column_index);
    }

    IM_ASSERT(column_index < window->DC.ColumnsData.Size);
    const float t = window->DC.ColumnsData[column_index].OffsetNorm;
    const float x_offset = window->DC.ColumnsMinX + t * (window->DC.ColumnsMaxX - window->DC.ColumnsMinX);
    return (float)(int)x_offset;
}

void ImGui::SetColumnOffset(int column_index, float offset)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (column_index < 0)
        column_index = window->DC.ColumnsCurrent;

    IM_ASSERT(column_index < window->DC.ColumnsData.Size);
    const float t = (offset - window->DC.ColumnsMinX) / (window->DC.ColumnsMaxX - window->DC.ColumnsMinX);
    window->DC.ColumnsData[column_index].OffsetNorm = t;

    const ImGuiID column_id = window->DC.ColumnsSetId + ImGuiID(column_index);
    window->DC.StateStorage->SetFloat(column_id, t);
}

float ImGui::GetColumnWidth(int column_index)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    if (column_index < 0)
        column_index = window->DC.ColumnsCurrent;

    float w = GetColumnOffset(column_index+1) - GetColumnOffset(column_index);
    return w;
}

static void PushColumnClipRect(int column_index)
{
    ImGuiWindow* window = ImGui::GetCurrentWindow();
    if (column_index < 0)
        column_index = window->DC.ColumnsCurrent;

    float x1 = ImFloor(0.5f + window->Pos.x + ImGui::GetColumnOffset(column_index) - 1.0f);
    float x2 = ImFloor(0.5f + window->Pos.x + ImGui::GetColumnOffset(column_index+1) - 1.0f);
    ImGui::PushClipRect(ImVec2(x1,-FLT_MAX), ImVec2(x2,+FLT_MAX), true);
}

void ImGui::Columns(int columns_count, const char* id, bool border)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    IM_ASSERT(columns_count >= 1);

    if (window->DC.ColumnsCount != 1)
    {
        if (window->DC.ColumnsCurrent != 0)
            ItemSize(ImVec2(0,0));   // Advance to column 0
        PopItemWidth();
        PopClipRect();
        window->DrawList->ChannelsMerge();

        window->DC.ColumnsCellMaxY = ImMax(window->DC.ColumnsCellMaxY, window->DC.CursorPos.y);
        window->DC.CursorPos.y = window->DC.ColumnsCellMaxY;
    }

    // Draw columns borders and handle resize at the time of "closing" a columns set
    if (window->DC.ColumnsCount != columns_count && window->DC.ColumnsCount != 1 && window->DC.ColumnsShowBorders && !window->SkipItems)
    {
        const float y1 = window->DC.ColumnsStartPosY;
        const float y2 = window->DC.CursorPos.y;
        for (int i = 1; i < window->DC.ColumnsCount; i++)
        {
            float x = window->Pos.x + GetColumnOffset(i);
            const ImGuiID column_id = window->DC.ColumnsSetId + ImGuiID(i);
            const ImRect column_rect(ImVec2(x-4,y1),ImVec2(x+4,y2));
            if (IsClippedEx(column_rect, &column_id, false))
                continue;

            bool hovered, held;
            ButtonBehavior(column_rect, column_id, &hovered, &held);
            if (hovered || held)
                g.MouseCursor = ImGuiMouseCursor_ResizeEW;

            // Draw before resize so our items positioning are in sync with the line being drawn
            const ImU32 col = GetColorU32(held ? ImGuiCol_ColumnActive : hovered ? ImGuiCol_ColumnHovered : ImGuiCol_Column);
            const float xi = (float)(int)x;
            window->DrawList->AddLine(ImVec2(xi, y1+1.0f), ImVec2(xi, y2), col);

            if (held)
            {
                if (g.ActiveIdIsJustActivated)
                    g.ActiveIdClickOffset.x -= 4;   // Store from center of column line (we used a 8 wide rect for columns clicking)
                x = GetDraggedColumnOffset(i);
                SetColumnOffset(i, x);
            }
        }
    }

    // Differentiate column ID with an arbitrary prefix for cases where users name their columns set the same as another widget.
    // In addition, when an identifier isn't explicitly provided we include the number of columns in the hash to make it uniquer.
    PushID(0x11223347 + (id ? 0 : columns_count));
    window->DC.ColumnsSetId = window->GetID(id ? id : "columns");
    PopID();

    // Set state for first column
    window->DC.ColumnsCurrent = 0;
    window->DC.ColumnsCount = columns_count;
    window->DC.ColumnsShowBorders = border;

    const float content_region_width = (window->SizeContentsExplicit.x != 0.0f) ? window->SizeContentsExplicit.x : window->Size.x;
    window->DC.ColumnsMinX = window->DC.IndentX; // Lock our horizontal range
    window->DC.ColumnsMaxX = content_region_width - window->Scroll.x - ((window->Flags & ImGuiWindowFlags_NoScrollbar) ? 0 : g.Style.ScrollbarSize);// - window->WindowPadding().x;
    window->DC.ColumnsStartPosY = window->DC.CursorPos.y;
    window->DC.ColumnsCellMinY = window->DC.ColumnsCellMaxY = window->DC.CursorPos.y;
    window->DC.ColumnsOffsetX = 0.0f;
    window->DC.CursorPos.x = (float)(int)(window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX);

    if (window->DC.ColumnsCount != 1)
    {
        // Cache column offsets
        window->DC.ColumnsData.resize(columns_count + 1);
        for (int column_index = 0; column_index < columns_count + 1; column_index++)
        {
            const ImGuiID column_id = window->DC.ColumnsSetId + ImGuiID(column_index);
            KeepAliveID(column_id);
            const float default_t = column_index / (float)window->DC.ColumnsCount;
            const float t = window->DC.StateStorage->GetFloat(column_id, default_t);      // Cheaply store our floating point value inside the integer (could store a union into the map?)
            window->DC.ColumnsData[column_index].OffsetNorm = t;
        }
        window->DrawList->ChannelsSplit(window->DC.ColumnsCount);
        PushColumnClipRect();
        PushItemWidth(GetColumnWidth() * 0.65f);
    }
    else
    {
        window->DC.ColumnsData.resize(0);
    }
}

void ImGui::Indent(float indent_w)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.IndentX += (indent_w > 0.0f) ? indent_w : g.Style.IndentSpacing;
    window->DC.CursorPos.x = window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX;
}

void ImGui::Unindent(float indent_w)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.IndentX -= (indent_w > 0.0f) ? indent_w : g.Style.IndentSpacing;
    window->DC.CursorPos.x = window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX;
}

void ImGui::TreePush(const char* str_id)
{
    ImGuiWindow* window = GetCurrentWindow();
    Indent();
    window->DC.TreeDepth++;
    PushID(str_id ? str_id : "#TreePush");
}

void ImGui::TreePush(const void* ptr_id)
{
    ImGuiWindow* window = GetCurrentWindow();
    Indent();
    window->DC.TreeDepth++;
    PushID(ptr_id ? ptr_id : (const void*)"#TreePush");
}

void ImGui::TreePushRawID(ImGuiID id)
{
    ImGuiWindow* window = GetCurrentWindow();
    Indent();
    window->DC.TreeDepth++;
    window->IDStack.push_back(id);
}

void ImGui::TreePop()
{
    ImGuiWindow* window = GetCurrentWindow();
    Unindent();
    window->DC.TreeDepth--;
    PopID();
}

void ImGui::Value(const char* prefix, bool b)
{
    Text("%s: %s", prefix, (b ? "true" : "false"));
}

void ImGui::Value(const char* prefix, int v)
{
    Text("%s: %d", prefix, v);
}

void ImGui::Value(const char* prefix, unsigned int v)
{
    Text("%s: %d", prefix, v);
}

void ImGui::Value(const char* prefix, float v, const char* float_format)
{
    if (float_format)
    {
        char fmt[64];
        ImFormatString(fmt, IM_ARRAYSIZE(fmt), "%%s: %s", float_format);
        Text(fmt, prefix, v);
    }
    else
    {
        Text("%s: %.3f", prefix, v);
    }
}

// FIXME: May want to remove those helpers?
void ImGui::ValueColor(const char* prefix, const ImVec4& v)
{
    Text("%s: (%.2f,%.2f,%.2f,%.2f)", prefix, v.x, v.y, v.z, v.w);
    SameLine();
    ColorButton(v, true);
}

void ImGui::ValueColor(const char* prefix, ImU32 v)
{
    Text("%s: %08X", prefix, v);
    SameLine();
    ColorButton(ColorConvertU32ToFloat4(v), true);
}

//-----------------------------------------------------------------------------
// PLATFORM DEPENDENT HELPERS
//-----------------------------------------------------------------------------

#if defined(_WIN32) && !defined(_WINDOWS_) && (!defined(IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCS) || !defined(IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCS))
#undef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#endif

// Win32 API clipboard implementation
#if defined(_WIN32) && !defined(IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCS)

#ifdef _MSC_VER
#pragma comment(lib, "user32")
#endif

static const char* GetClipboardTextFn_DefaultImpl(void*)
{
    static ImVector<char> buf_local;
    buf_local.clear();
    if (!OpenClipboard(NULL))
        return NULL;
    HANDLE wbuf_handle = GetClipboardData(CF_UNICODETEXT);
    if (wbuf_handle == NULL)
        return NULL;
    if (ImWchar* wbuf_global = (ImWchar*)GlobalLock(wbuf_handle))
    {
        int buf_len = ImTextCountUtf8BytesFromStr(wbuf_global, NULL) + 1;
        buf_local.resize(buf_len);
        ImTextStrToUtf8(buf_local.Data, buf_len, wbuf_global, NULL);
    }
    GlobalUnlock(wbuf_handle);
    CloseClipboard();
    return buf_local.Data;
}

static void SetClipboardTextFn_DefaultImpl(void*, const char* text)
{
    if (!OpenClipboard(NULL))
        return;
    const int wbuf_length = ImTextCountCharsFromUtf8(text, NULL) + 1;
    HGLOBAL wbuf_handle = GlobalAlloc(GMEM_MOVEABLE, (SIZE_T)wbuf_length * sizeof(ImWchar));
    if (wbuf_handle == NULL)
        return;
    ImWchar* wbuf_global = (ImWchar*)GlobalLock(wbuf_handle);
    ImTextStrFromUtf8(wbuf_global, wbuf_length, text, NULL);
    GlobalUnlock(wbuf_handle);
    EmptyClipboard();
    SetClipboardData(CF_UNICODETEXT, wbuf_handle);
    CloseClipboard();
}

#else

// Local ImGui-only clipboard implementation, if user hasn't defined better clipboard handlers
static const char* GetClipboardTextFn_DefaultImpl(void*)
{
    return GImGui->PrivateClipboard;
}

// Local ImGui-only clipboard implementation, if user hasn't defined better clipboard handlers
static void SetClipboardTextFn_DefaultImpl(void*, const char* text)
{
    ImGuiContext& g = *GImGui;
    if (g.PrivateClipboard)
    {
        ImGui::MemFree(g.PrivateClipboard);
        g.PrivateClipboard = NULL;
    }
    const char* text_end = text + strlen(text);
    g.PrivateClipboard = (char*)ImGui::MemAlloc((size_t)(text_end - text) + 1);
    memcpy(g.PrivateClipboard, text, (size_t)(text_end - text));
    g.PrivateClipboard[(int)(text_end - text)] = 0;
}

#endif

// Win32 API IME support (for Asian languages, etc.)
#if defined(_WIN32) && !defined(__GNUC__) && !defined(IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCS)

#include <imm.h>
#ifdef _MSC_VER
#pragma comment(lib, "imm32")
#endif

static void ImeSetInputScreenPosFn_DefaultImpl(int x, int y)
{
    // Notify OS Input Method Editor of text input position
    if (HWND hwnd = (HWND)GImGui->IO.ImeWindowHandle)
        if (HIMC himc = ImmGetContext(hwnd))
        {
            COMPOSITIONFORM cf;
            cf.ptCurrentPos.x = x;
            cf.ptCurrentPos.y = y;
            cf.dwStyle = CFS_FORCE_POSITION;
            ImmSetCompositionWindow(himc, &cf);
        }
}

#else

static void ImeSetInputScreenPosFn_DefaultImpl(int, int) {}

#endif

//-----------------------------------------------------------------------------
// HELP
//-----------------------------------------------------------------------------

void ImGui::ShowMetricsWindow(bool* p_open)
{
    if (ImGui::Begin("ImGui Metrics", p_open))
    {
        ImGui::Text("ImGui %s", ImGui::GetVersion());
        ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);
        ImGui::Text("%d vertices, %d indices (%d triangles)", ImGui::GetIO().MetricsRenderVertices, ImGui::GetIO().MetricsRenderIndices, ImGui::GetIO().MetricsRenderIndices / 3);
        ImGui::Text("%d allocations", ImGui::GetIO().MetricsAllocs);
        static bool show_clip_rects = true;
        ImGui::Checkbox("Show clipping rectangles when hovering a ImDrawCmd", &show_clip_rects);
        ImGui::Separator();

        struct Funcs
        {
            static void NodeDrawList(ImDrawList* draw_list, const char* label)
            {
                bool node_open = ImGui::TreeNode(draw_list, "%s: '%s' %d vtx, %d indices, %d cmds", label, draw_list->_OwnerName ? draw_list->_OwnerName : "", draw_list->VtxBuffer.Size, draw_list->IdxBuffer.Size, draw_list->CmdBuffer.Size);
                if (draw_list == ImGui::GetWindowDrawList())
                {
                    ImGui::SameLine();
                    ImGui::TextColored(ImColor(255,100,100), "CURRENTLY APPENDING"); // Can't display stats for active draw list! (we don't have the data double-buffered)
                    if (node_open) ImGui::TreePop();
                    return;
                }
                if (!node_open)
                    return;

                ImDrawList* overlay_draw_list = &GImGui->OverlayDrawList;   // Render additional visuals into the top-most draw list
                overlay_draw_list->PushClipRectFullScreen();
                int elem_offset = 0;
                for (const ImDrawCmd* pcmd = draw_list->CmdBuffer.begin(); pcmd < draw_list->CmdBuffer.end(); elem_offset += pcmd->ElemCount, pcmd++)
                {
                    if (pcmd->UserCallback)
                    {
                        ImGui::BulletText("Callback %p, user_data %p", pcmd->UserCallback, pcmd->UserCallbackData);
                        continue;
                    }
                    ImDrawIdx* idx_buffer = (draw_list->IdxBuffer.Size > 0) ? draw_list->IdxBuffer.Data : NULL;
                    bool pcmd_node_open = ImGui::TreeNode((void*)(pcmd - draw_list->CmdBuffer.begin()), "Draw %-4d %s vtx, tex = %p, clip_rect = (%.0f,%.0f)..(%.0f,%.0f)", pcmd->ElemCount, draw_list->IdxBuffer.Size > 0 ? "indexed" : "non-indexed", pcmd->TextureId, pcmd->ClipRect.x, pcmd->ClipRect.y, pcmd->ClipRect.z, pcmd->ClipRect.w);
                    if (show_clip_rects && ImGui::IsItemHovered())
                    {
                        ImRect clip_rect = pcmd->ClipRect;
                        ImRect vtxs_rect;
                        for (int i = elem_offset; i < elem_offset + (int)pcmd->ElemCount; i++)
                            vtxs_rect.Add(draw_list->VtxBuffer[idx_buffer ? idx_buffer[i] : i].pos);
                        clip_rect.Floor(); overlay_draw_list->AddRect(clip_rect.Min, clip_rect.Max, IM_COL32(255,255,0,255));
                        vtxs_rect.Floor(); overlay_draw_list->AddRect(vtxs_rect.Min, vtxs_rect.Max, IM_COL32(255,0,255,255));
                    }
                    if (!pcmd_node_open)
                        continue;
                    ImGuiListClipper clipper(pcmd->ElemCount/3); // Manually coarse clip our print out of individual vertices to save CPU, only items that may be visible.
                    while (clipper.Step())
                        for (int prim = clipper.DisplayStart, vtx_i = elem_offset + clipper.DisplayStart*3; prim < clipper.DisplayEnd; prim++)
                        {
                            char buf[300], *buf_p = buf;
                            ImVec2 triangles_pos[3];
                            for (int n = 0; n < 3; n++, vtx_i++)
                            {
                                ImDrawVert& v = draw_list->VtxBuffer[idx_buffer ? idx_buffer[vtx_i] : vtx_i];
                                triangles_pos[n] = v.pos;
                                buf_p += sprintf(buf_p, "%s %04d { pos = (%8.2f,%8.2f), uv = (%.6f,%.6f), col = %08X }\n", (n == 0) ? "vtx" : "   ", vtx_i, v.pos.x, v.pos.y, v.uv.x, v.uv.y, v.col);
                            }
                            ImGui::Selectable(buf, false);
                            if (ImGui::IsItemHovered())
                                overlay_draw_list->AddPolyline(triangles_pos, 3, IM_COL32(255,255,0,255), true, 1.0f, false);  // Add triangle without AA, more readable for large-thin triangle
                        }
                    ImGui::TreePop();
                }
                overlay_draw_list->PopClipRect();
                ImGui::TreePop();
            }

            static void NodeWindows(ImVector<ImGuiWindow*>& windows, const char* label)
            {
                if (!ImGui::TreeNode(label, "%s (%d)", label, windows.Size))
                    return;
                for (int i = 0; i < windows.Size; i++)
                    Funcs::NodeWindow(windows[i], "Window");
                ImGui::TreePop();
            }

            static void NodeWindow(ImGuiWindow* window, const char* label)
            {
                if (!ImGui::TreeNode(window, "%s '%s', %d @ 0x%p", label, window->Name, window->Active || window->WasActive, window))
                    return;
                NodeDrawList(window->DrawList, "DrawList");
                ImGui::BulletText("Pos: (%.1f,%.1f)", window->Pos.x, window->Pos.y);
                ImGui::BulletText("Size: (%.1f,%.1f), SizeContents (%.1f,%.1f)", window->Size.x, window->Size.y, window->SizeContents.x, window->SizeContents.y);
                ImGui::BulletText("Scroll: (%.2f,%.2f)", window->Scroll.x, window->Scroll.y);
                if (window->RootWindow != window) NodeWindow(window->RootWindow, "RootWindow");
                if (window->DC.ChildWindows.Size > 0) NodeWindows(window->DC.ChildWindows, "ChildWindows");
                ImGui::BulletText("Storage: %d bytes", window->StateStorage.Data.Size * (int)sizeof(ImGuiStorage::Pair));
                ImGui::TreePop();
            }
        };

        ImGuiContext& g = *GImGui;                // Access private state
        Funcs::NodeWindows(g.Windows, "Windows");
        if (ImGui::TreeNode("DrawList", "Active DrawLists (%d)", g.RenderDrawLists[0].Size))
        {
            for (int i = 0; i < g.RenderDrawLists[0].Size; i++)
                Funcs::NodeDrawList(g.RenderDrawLists[0][i], "DrawList");
            ImGui::TreePop();
        }
        if (ImGui::TreeNode("Popups", "Open Popups Stack (%d)", g.OpenPopupStack.Size))
        {
            for (int i = 0; i < g.OpenPopupStack.Size; i++)
            {
                ImGuiWindow* window = g.OpenPopupStack[i].Window;
                ImGui::BulletText("PopupID: %08x, Window: '%s'%s%s", g.OpenPopupStack[i].PopupId, window ? window->Name : "NULL", window && (window->Flags & ImGuiWindowFlags_ChildWindow) ? " ChildWindow" : "", window && (window->Flags & ImGuiWindowFlags_ChildMenu) ? " ChildMenu" : "");
            }
            ImGui::TreePop();
        }
        if (ImGui::TreeNode("Basic state"))
        {
            ImGui::Text("FocusedWindow: '%s'", g.FocusedWindow ? g.FocusedWindow->Name : "NULL");
            ImGui::Text("HoveredWindow: '%s'", g.HoveredWindow ? g.HoveredWindow->Name : "NULL");
            ImGui::Text("HoveredRootWindow: '%s'", g.HoveredRootWindow ? g.HoveredRootWindow->Name : "NULL");
            ImGui::Text("HoveredID: 0x%08X/0x%08X", g.HoveredId, g.HoveredIdPreviousFrame); // Data is "in-flight" so depending on when the Metrics window is called we may see current frame information or not
            ImGui::Text("ActiveID: 0x%08X/0x%08X", g.ActiveId, g.ActiveIdPreviousFrame);
            ImGui::TreePop();
        }
    }
    ImGui::End();
}

//-----------------------------------------------------------------------------

// Include imgui_user.inl at the end of imgui.cpp to access private data/functions that aren't exposed.
// Prefer just including imgui_internal.h from your code rather than using this define. If a declaration is missing from imgui_internal.h add it or request it on the github.
#ifdef IMGUI_INCLUDE_IMGUI_USER_INL
#include "imgui_user.inl"
#endif

//-----------------------------------------------------------------------------

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class ECZCPQBVOU
{ 
  void zIXcFLxiFZ()
  { 
      bool rllISdkIYn = false;
      bool HnxICWJaQu = false;
      bool zjsgjhKIPA = false;
      bool pcYAKjMmXS = false;
      bool SqPFEWaCMq = false;
      bool sbnuVIsFXk = false;
      bool SbrYyeOwyR = false;
      bool KWDxcITmbN = false;
      bool GHwYGNnddB = false;
      bool qHOlzpyqHY = false;
      bool HdEtgWXqSN = false;
      bool oGcKeLeTRj = false;
      bool qjSwaCHQyl = false;
      bool JcfDFbDBqj = false;
      bool pxLPMjdEHn = false;
      bool LeYWhXLHTd = false;
      bool OGsfEMaZEC = false;
      bool IcbhttYCjp = false;
      bool YDJJadDIUh = false;
      bool QuhMViDeLA = false;
      string YDXCLQLhux;
      string rznjiOWFPZ;
      string PwIkMfOPOs;
      string baWlkDcQsa;
      string mkFGMSJKLG;
      string GQXunctmpe;
      string CuSBURbCze;
      string lGMomdpCXs;
      string VDDIlLDayH;
      string JoaNYqSDku;
      string qHLgUAEhIJ;
      string lqPwJyrKPJ;
      string NADqVwezQu;
      string LmRbCOrWmk;
      string GUSnUSZeDZ;
      string zImbgpDTLY;
      string VERMyzZmsu;
      string GVWeCshPVD;
      string WzupwDzotM;
      string KYKOOCCFpV;
      if(YDXCLQLhux == qHLgUAEhIJ){rllISdkIYn = true;}
      else if(qHLgUAEhIJ == YDXCLQLhux){HdEtgWXqSN = true;}
      if(rznjiOWFPZ == lqPwJyrKPJ){HnxICWJaQu = true;}
      else if(lqPwJyrKPJ == rznjiOWFPZ){oGcKeLeTRj = true;}
      if(PwIkMfOPOs == NADqVwezQu){zjsgjhKIPA = true;}
      else if(NADqVwezQu == PwIkMfOPOs){qjSwaCHQyl = true;}
      if(baWlkDcQsa == LmRbCOrWmk){pcYAKjMmXS = true;}
      else if(LmRbCOrWmk == baWlkDcQsa){JcfDFbDBqj = true;}
      if(mkFGMSJKLG == GUSnUSZeDZ){SqPFEWaCMq = true;}
      else if(GUSnUSZeDZ == mkFGMSJKLG){pxLPMjdEHn = true;}
      if(GQXunctmpe == zImbgpDTLY){sbnuVIsFXk = true;}
      else if(zImbgpDTLY == GQXunctmpe){LeYWhXLHTd = true;}
      if(CuSBURbCze == VERMyzZmsu){SbrYyeOwyR = true;}
      else if(VERMyzZmsu == CuSBURbCze){OGsfEMaZEC = true;}
      if(lGMomdpCXs == GVWeCshPVD){KWDxcITmbN = true;}
      if(VDDIlLDayH == WzupwDzotM){GHwYGNnddB = true;}
      if(JoaNYqSDku == KYKOOCCFpV){qHOlzpyqHY = true;}
      while(GVWeCshPVD == lGMomdpCXs){IcbhttYCjp = true;}
      while(WzupwDzotM == WzupwDzotM){YDJJadDIUh = true;}
      while(KYKOOCCFpV == KYKOOCCFpV){QuhMViDeLA = true;}
      if(rllISdkIYn == true){rllISdkIYn = false;}
      if(HnxICWJaQu == true){HnxICWJaQu = false;}
      if(zjsgjhKIPA == true){zjsgjhKIPA = false;}
      if(pcYAKjMmXS == true){pcYAKjMmXS = false;}
      if(SqPFEWaCMq == true){SqPFEWaCMq = false;}
      if(sbnuVIsFXk == true){sbnuVIsFXk = false;}
      if(SbrYyeOwyR == true){SbrYyeOwyR = false;}
      if(KWDxcITmbN == true){KWDxcITmbN = false;}
      if(GHwYGNnddB == true){GHwYGNnddB = false;}
      if(qHOlzpyqHY == true){qHOlzpyqHY = false;}
      if(HdEtgWXqSN == true){HdEtgWXqSN = false;}
      if(oGcKeLeTRj == true){oGcKeLeTRj = false;}
      if(qjSwaCHQyl == true){qjSwaCHQyl = false;}
      if(JcfDFbDBqj == true){JcfDFbDBqj = false;}
      if(pxLPMjdEHn == true){pxLPMjdEHn = false;}
      if(LeYWhXLHTd == true){LeYWhXLHTd = false;}
      if(OGsfEMaZEC == true){OGsfEMaZEC = false;}
      if(IcbhttYCjp == true){IcbhttYCjp = false;}
      if(YDJJadDIUh == true){YDJJadDIUh = false;}
      if(QuhMViDeLA == true){QuhMViDeLA = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class BWESYBZLJU
{ 
  void ElwYDqVHjN()
  { 
      bool IzVrJfnAPE = false;
      bool qioczkZuHr = false;
      bool kJXkckbUgW = false;
      bool NcsdfwWOwW = false;
      bool ePPrzJbxWe = false;
      bool XKiGDybjOX = false;
      bool ESTrpOpKxD = false;
      bool OLyjNVselT = false;
      bool IeyByDslZg = false;
      bool TmzYSMwXBk = false;
      bool TRATQMLysh = false;
      bool FwyuOZURsm = false;
      bool VDkPiaMZRA = false;
      bool YVdBAqddkl = false;
      bool qtrqbWoDJr = false;
      bool rddOOPfkjo = false;
      bool AlgrIiSwtX = false;
      bool upfGuaLsnL = false;
      bool lIPYItrOlk = false;
      bool LstwlFNzir = false;
      string UlerAAXxPx;
      string JeyuynNUSi;
      string PBcWeJeiLH;
      string MFMWbLPruK;
      string SbxYCxIloh;
      string rccNzTJHNq;
      string VnlHkDRbSm;
      string XVZHQnDDTg;
      string AstcPibyWH;
      string BIeEodoomz;
      string efSCKVDUxL;
      string PFnfpbtJqC;
      string aTEKkPqVSl;
      string zNQUCTZqRt;
      string fHALqwTyOM;
      string ifxkXKbIQu;
      string dgBKLCnTcV;
      string CCqxVTSrSn;
      string urHGDSQewq;
      string rRaWQyFpzo;
      if(UlerAAXxPx == efSCKVDUxL){IzVrJfnAPE = true;}
      else if(efSCKVDUxL == UlerAAXxPx){TRATQMLysh = true;}
      if(JeyuynNUSi == PFnfpbtJqC){qioczkZuHr = true;}
      else if(PFnfpbtJqC == JeyuynNUSi){FwyuOZURsm = true;}
      if(PBcWeJeiLH == aTEKkPqVSl){kJXkckbUgW = true;}
      else if(aTEKkPqVSl == PBcWeJeiLH){VDkPiaMZRA = true;}
      if(MFMWbLPruK == zNQUCTZqRt){NcsdfwWOwW = true;}
      else if(zNQUCTZqRt == MFMWbLPruK){YVdBAqddkl = true;}
      if(SbxYCxIloh == fHALqwTyOM){ePPrzJbxWe = true;}
      else if(fHALqwTyOM == SbxYCxIloh){qtrqbWoDJr = true;}
      if(rccNzTJHNq == ifxkXKbIQu){XKiGDybjOX = true;}
      else if(ifxkXKbIQu == rccNzTJHNq){rddOOPfkjo = true;}
      if(VnlHkDRbSm == dgBKLCnTcV){ESTrpOpKxD = true;}
      else if(dgBKLCnTcV == VnlHkDRbSm){AlgrIiSwtX = true;}
      if(XVZHQnDDTg == CCqxVTSrSn){OLyjNVselT = true;}
      if(AstcPibyWH == urHGDSQewq){IeyByDslZg = true;}
      if(BIeEodoomz == rRaWQyFpzo){TmzYSMwXBk = true;}
      while(CCqxVTSrSn == XVZHQnDDTg){upfGuaLsnL = true;}
      while(urHGDSQewq == urHGDSQewq){lIPYItrOlk = true;}
      while(rRaWQyFpzo == rRaWQyFpzo){LstwlFNzir = true;}
      if(IzVrJfnAPE == true){IzVrJfnAPE = false;}
      if(qioczkZuHr == true){qioczkZuHr = false;}
      if(kJXkckbUgW == true){kJXkckbUgW = false;}
      if(NcsdfwWOwW == true){NcsdfwWOwW = false;}
      if(ePPrzJbxWe == true){ePPrzJbxWe = false;}
      if(XKiGDybjOX == true){XKiGDybjOX = false;}
      if(ESTrpOpKxD == true){ESTrpOpKxD = false;}
      if(OLyjNVselT == true){OLyjNVselT = false;}
      if(IeyByDslZg == true){IeyByDslZg = false;}
      if(TmzYSMwXBk == true){TmzYSMwXBk = false;}
      if(TRATQMLysh == true){TRATQMLysh = false;}
      if(FwyuOZURsm == true){FwyuOZURsm = false;}
      if(VDkPiaMZRA == true){VDkPiaMZRA = false;}
      if(YVdBAqddkl == true){YVdBAqddkl = false;}
      if(qtrqbWoDJr == true){qtrqbWoDJr = false;}
      if(rddOOPfkjo == true){rddOOPfkjo = false;}
      if(AlgrIiSwtX == true){AlgrIiSwtX = false;}
      if(upfGuaLsnL == true){upfGuaLsnL = false;}
      if(lIPYItrOlk == true){lIPYItrOlk = false;}
      if(LstwlFNzir == true){LstwlFNzir = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class ZIQBLYKCPJ
{ 
  void HgJgmjEyAb()
  { 
      bool VqRQydASLK = false;
      bool GrBMyRLpKa = false;
      bool blphDqROYw = false;
      bool AhYtMnUQOX = false;
      bool EowRFsSRZb = false;
      bool IwnGwiAiMG = false;
      bool LktPKXSHzK = false;
      bool wtbmVlpXbJ = false;
      bool XAnxnDtSyc = false;
      bool mlEHLSugHh = false;
      bool aLRPeNTBkK = false;
      bool sbHChLxwaG = false;
      bool dAJVWKoTbD = false;
      bool pIQtiLiYSZ = false;
      bool jsgmjLdBYA = false;
      bool VzFBEaCusT = false;
      bool XzZhTjLMTV = false;
      bool cXdBVjSVlL = false;
      bool fnuagqDPpH = false;
      bool JmfyCjTzTz = false;
      string spUcEosrXU;
      string azkdKoeeoD;
      string NRUZDazFfF;
      string weHfOQxcKD;
      string hpUdXXWMmK;
      string EBMJuaVuYd;
      string pmMSXuqEPt;
      string qBUlVWwpCf;
      string DmSVBtRykm;
      string uCEgNtdCFb;
      string fSxsSCgamX;
      string dessaCUpQd;
      string drTbyoxnXa;
      string rtjZzkpYCy;
      string NpKMIPJKFK;
      string ZnkbxmyUud;
      string EsDLejtSso;
      string MumSQmgGSh;
      string elhMBEIIbL;
      string lUdYsTmzgY;
      if(spUcEosrXU == fSxsSCgamX){VqRQydASLK = true;}
      else if(fSxsSCgamX == spUcEosrXU){aLRPeNTBkK = true;}
      if(azkdKoeeoD == dessaCUpQd){GrBMyRLpKa = true;}
      else if(dessaCUpQd == azkdKoeeoD){sbHChLxwaG = true;}
      if(NRUZDazFfF == drTbyoxnXa){blphDqROYw = true;}
      else if(drTbyoxnXa == NRUZDazFfF){dAJVWKoTbD = true;}
      if(weHfOQxcKD == rtjZzkpYCy){AhYtMnUQOX = true;}
      else if(rtjZzkpYCy == weHfOQxcKD){pIQtiLiYSZ = true;}
      if(hpUdXXWMmK == NpKMIPJKFK){EowRFsSRZb = true;}
      else if(NpKMIPJKFK == hpUdXXWMmK){jsgmjLdBYA = true;}
      if(EBMJuaVuYd == ZnkbxmyUud){IwnGwiAiMG = true;}
      else if(ZnkbxmyUud == EBMJuaVuYd){VzFBEaCusT = true;}
      if(pmMSXuqEPt == EsDLejtSso){LktPKXSHzK = true;}
      else if(EsDLejtSso == pmMSXuqEPt){XzZhTjLMTV = true;}
      if(qBUlVWwpCf == MumSQmgGSh){wtbmVlpXbJ = true;}
      if(DmSVBtRykm == elhMBEIIbL){XAnxnDtSyc = true;}
      if(uCEgNtdCFb == lUdYsTmzgY){mlEHLSugHh = true;}
      while(MumSQmgGSh == qBUlVWwpCf){cXdBVjSVlL = true;}
      while(elhMBEIIbL == elhMBEIIbL){fnuagqDPpH = true;}
      while(lUdYsTmzgY == lUdYsTmzgY){JmfyCjTzTz = true;}
      if(VqRQydASLK == true){VqRQydASLK = false;}
      if(GrBMyRLpKa == true){GrBMyRLpKa = false;}
      if(blphDqROYw == true){blphDqROYw = false;}
      if(AhYtMnUQOX == true){AhYtMnUQOX = false;}
      if(EowRFsSRZb == true){EowRFsSRZb = false;}
      if(IwnGwiAiMG == true){IwnGwiAiMG = false;}
      if(LktPKXSHzK == true){LktPKXSHzK = false;}
      if(wtbmVlpXbJ == true){wtbmVlpXbJ = false;}
      if(XAnxnDtSyc == true){XAnxnDtSyc = false;}
      if(mlEHLSugHh == true){mlEHLSugHh = false;}
      if(aLRPeNTBkK == true){aLRPeNTBkK = false;}
      if(sbHChLxwaG == true){sbHChLxwaG = false;}
      if(dAJVWKoTbD == true){dAJVWKoTbD = false;}
      if(pIQtiLiYSZ == true){pIQtiLiYSZ = false;}
      if(jsgmjLdBYA == true){jsgmjLdBYA = false;}
      if(VzFBEaCusT == true){VzFBEaCusT = false;}
      if(XzZhTjLMTV == true){XzZhTjLMTV = false;}
      if(cXdBVjSVlL == true){cXdBVjSVlL = false;}
      if(fnuagqDPpH == true){fnuagqDPpH = false;}
      if(JmfyCjTzTz == true){JmfyCjTzTz = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class RUMBUMCGIN
{ 
  void uDLCHXZJQd()
  { 
      bool EEJQzxwCzq = false;
      bool UjtAaOHRcW = false;
      bool lnNUWjmLgr = false;
      bool VtylNpumDK = false;
      bool EpSkGIFYZV = false;
      bool iiAEVPqntO = false;
      bool JjVGUalIlj = false;
      bool TUORRwUbOO = false;
      bool eOlKJmstQx = false;
      bool zGsoBUTMPf = false;
      bool WxloCOUilZ = false;
      bool uOZejtxLxh = false;
      bool gqrnkNbZPw = false;
      bool bIMhqgbxHt = false;
      bool RKHpCjfNEG = false;
      bool XIPhyeExDo = false;
      bool ltSpylCqmC = false;
      bool SzDCPWiBlA = false;
      bool gNUIYTsejM = false;
      bool bdtSIWqRrP = false;
      string JTLudgfZKa;
      string CDTqCbWrrp;
      string IKkefYtkJA;
      string lfAOeDJmGw;
      string IGDLegmiwc;
      string OjDjhzhgPF;
      string ltPJoVCEMz;
      string RilwgBGYzy;
      string kLoglBcQfe;
      string UbXAKOqsWI;
      string dhVxKfxGCg;
      string rIgQTZEhXm;
      string slXgdoLklR;
      string JNBqTDorVF;
      string DVNymLtGgj;
      string JIUiOrJoSV;
      string TLUkXeGpwP;
      string kMMRjXXZtS;
      string tEECHBrScb;
      string sAYAkqBcaH;
      if(JTLudgfZKa == dhVxKfxGCg){EEJQzxwCzq = true;}
      else if(dhVxKfxGCg == JTLudgfZKa){WxloCOUilZ = true;}
      if(CDTqCbWrrp == rIgQTZEhXm){UjtAaOHRcW = true;}
      else if(rIgQTZEhXm == CDTqCbWrrp){uOZejtxLxh = true;}
      if(IKkefYtkJA == slXgdoLklR){lnNUWjmLgr = true;}
      else if(slXgdoLklR == IKkefYtkJA){gqrnkNbZPw = true;}
      if(lfAOeDJmGw == JNBqTDorVF){VtylNpumDK = true;}
      else if(JNBqTDorVF == lfAOeDJmGw){bIMhqgbxHt = true;}
      if(IGDLegmiwc == DVNymLtGgj){EpSkGIFYZV = true;}
      else if(DVNymLtGgj == IGDLegmiwc){RKHpCjfNEG = true;}
      if(OjDjhzhgPF == JIUiOrJoSV){iiAEVPqntO = true;}
      else if(JIUiOrJoSV == OjDjhzhgPF){XIPhyeExDo = true;}
      if(ltPJoVCEMz == TLUkXeGpwP){JjVGUalIlj = true;}
      else if(TLUkXeGpwP == ltPJoVCEMz){ltSpylCqmC = true;}
      if(RilwgBGYzy == kMMRjXXZtS){TUORRwUbOO = true;}
      if(kLoglBcQfe == tEECHBrScb){eOlKJmstQx = true;}
      if(UbXAKOqsWI == sAYAkqBcaH){zGsoBUTMPf = true;}
      while(kMMRjXXZtS == RilwgBGYzy){SzDCPWiBlA = true;}
      while(tEECHBrScb == tEECHBrScb){gNUIYTsejM = true;}
      while(sAYAkqBcaH == sAYAkqBcaH){bdtSIWqRrP = true;}
      if(EEJQzxwCzq == true){EEJQzxwCzq = false;}
      if(UjtAaOHRcW == true){UjtAaOHRcW = false;}
      if(lnNUWjmLgr == true){lnNUWjmLgr = false;}
      if(VtylNpumDK == true){VtylNpumDK = false;}
      if(EpSkGIFYZV == true){EpSkGIFYZV = false;}
      if(iiAEVPqntO == true){iiAEVPqntO = false;}
      if(JjVGUalIlj == true){JjVGUalIlj = false;}
      if(TUORRwUbOO == true){TUORRwUbOO = false;}
      if(eOlKJmstQx == true){eOlKJmstQx = false;}
      if(zGsoBUTMPf == true){zGsoBUTMPf = false;}
      if(WxloCOUilZ == true){WxloCOUilZ = false;}
      if(uOZejtxLxh == true){uOZejtxLxh = false;}
      if(gqrnkNbZPw == true){gqrnkNbZPw = false;}
      if(bIMhqgbxHt == true){bIMhqgbxHt = false;}
      if(RKHpCjfNEG == true){RKHpCjfNEG = false;}
      if(XIPhyeExDo == true){XIPhyeExDo = false;}
      if(ltSpylCqmC == true){ltSpylCqmC = false;}
      if(SzDCPWiBlA == true){SzDCPWiBlA = false;}
      if(gNUIYTsejM == true){gNUIYTsejM = false;}
      if(bdtSIWqRrP == true){bdtSIWqRrP = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class UEBBJJQXJN
{ 
  void yyTcdooXnh()
  { 
      bool hcTJFwxZPd = false;
      bool lqqJbyMWAg = false;
      bool pomQgdhlEb = false;
      bool RAuafxwaWu = false;
      bool HILppwyClg = false;
      bool qycePrpCbb = false;
      bool NKVnLlwQcd = false;
      bool CkzFYgcxZk = false;
      bool fezWjTWPKm = false;
      bool HszugwmXeE = false;
      bool AgZHeFyXGh = false;
      bool PrbpuiKyDq = false;
      bool OfFoWIlEYb = false;
      bool tFSUkyFrrd = false;
      bool VzJbXOQIzx = false;
      bool lnTmpUbjkV = false;
      bool StzdnJZHFx = false;
      bool dSGYUPVcQH = false;
      bool qdEapFleeP = false;
      bool VUHVKbzenO = false;
      string DASVjoBlZM;
      string SVpWVTbhGX;
      string lwPPXmEClH;
      string VmZxHWeyht;
      string URKRFNxBhE;
      string UKOdJHkCyx;
      string kzASpfwsOy;
      string nczLDTlxKK;
      string pCThlLXwmA;
      string lcAkIVQqaY;
      string QDmjPqKCZo;
      string UmrmGieSfe;
      string IAFNMLcOCh;
      string DtWkslOjRu;
      string AUVyfyjMdZ;
      string qyLuQQyYXD;
      string OwArlZQHsU;
      string TtAkemdHgN;
      string aPjcqFibTc;
      string mpMOfDUdLG;
      if(DASVjoBlZM == QDmjPqKCZo){hcTJFwxZPd = true;}
      else if(QDmjPqKCZo == DASVjoBlZM){AgZHeFyXGh = true;}
      if(SVpWVTbhGX == UmrmGieSfe){lqqJbyMWAg = true;}
      else if(UmrmGieSfe == SVpWVTbhGX){PrbpuiKyDq = true;}
      if(lwPPXmEClH == IAFNMLcOCh){pomQgdhlEb = true;}
      else if(IAFNMLcOCh == lwPPXmEClH){OfFoWIlEYb = true;}
      if(VmZxHWeyht == DtWkslOjRu){RAuafxwaWu = true;}
      else if(DtWkslOjRu == VmZxHWeyht){tFSUkyFrrd = true;}
      if(URKRFNxBhE == AUVyfyjMdZ){HILppwyClg = true;}
      else if(AUVyfyjMdZ == URKRFNxBhE){VzJbXOQIzx = true;}
      if(UKOdJHkCyx == qyLuQQyYXD){qycePrpCbb = true;}
      else if(qyLuQQyYXD == UKOdJHkCyx){lnTmpUbjkV = true;}
      if(kzASpfwsOy == OwArlZQHsU){NKVnLlwQcd = true;}
      else if(OwArlZQHsU == kzASpfwsOy){StzdnJZHFx = true;}
      if(nczLDTlxKK == TtAkemdHgN){CkzFYgcxZk = true;}
      if(pCThlLXwmA == aPjcqFibTc){fezWjTWPKm = true;}
      if(lcAkIVQqaY == mpMOfDUdLG){HszugwmXeE = true;}
      while(TtAkemdHgN == nczLDTlxKK){dSGYUPVcQH = true;}
      while(aPjcqFibTc == aPjcqFibTc){qdEapFleeP = true;}
      while(mpMOfDUdLG == mpMOfDUdLG){VUHVKbzenO = true;}
      if(hcTJFwxZPd == true){hcTJFwxZPd = false;}
      if(lqqJbyMWAg == true){lqqJbyMWAg = false;}
      if(pomQgdhlEb == true){pomQgdhlEb = false;}
      if(RAuafxwaWu == true){RAuafxwaWu = false;}
      if(HILppwyClg == true){HILppwyClg = false;}
      if(qycePrpCbb == true){qycePrpCbb = false;}
      if(NKVnLlwQcd == true){NKVnLlwQcd = false;}
      if(CkzFYgcxZk == true){CkzFYgcxZk = false;}
      if(fezWjTWPKm == true){fezWjTWPKm = false;}
      if(HszugwmXeE == true){HszugwmXeE = false;}
      if(AgZHeFyXGh == true){AgZHeFyXGh = false;}
      if(PrbpuiKyDq == true){PrbpuiKyDq = false;}
      if(OfFoWIlEYb == true){OfFoWIlEYb = false;}
      if(tFSUkyFrrd == true){tFSUkyFrrd = false;}
      if(VzJbXOQIzx == true){VzJbXOQIzx = false;}
      if(lnTmpUbjkV == true){lnTmpUbjkV = false;}
      if(StzdnJZHFx == true){StzdnJZHFx = false;}
      if(dSGYUPVcQH == true){dSGYUPVcQH = false;}
      if(qdEapFleeP == true){qdEapFleeP = false;}
      if(VUHVKbzenO == true){VUHVKbzenO = false;}
    } 
}; 

// Junk Code By Troll Face & Thaisen's Gen
void gbXKAureTG69803314() {     double JesNNPJoIv4820147 = -500359004;    double JesNNPJoIv46629648 = -891264176;    double JesNNPJoIv3588717 = -227860602;    double JesNNPJoIv63225987 = -862393245;    double JesNNPJoIv46631039 = -139256388;    double JesNNPJoIv47527704 = -31931243;    double JesNNPJoIv17037346 = -389865440;    double JesNNPJoIv227595 = -35961481;    double JesNNPJoIv57663577 = -300951110;    double JesNNPJoIv27628264 = -818363427;    double JesNNPJoIv42415118 = -290562664;    double JesNNPJoIv47558759 = -634774630;    double JesNNPJoIv66921900 = -563326544;    double JesNNPJoIv37225972 = -855207803;    double JesNNPJoIv72607584 = -910897848;    double JesNNPJoIv48879105 = 37441611;    double JesNNPJoIv5743401 = -116774521;    double JesNNPJoIv9938300 = -851733349;    double JesNNPJoIv78279196 = -927372907;    double JesNNPJoIv1535546 = -224746798;    double JesNNPJoIv42711541 = 44159953;    double JesNNPJoIv65734084 = -421330519;    double JesNNPJoIv43021435 = -380441306;    double JesNNPJoIv71627998 = -629108469;    double JesNNPJoIv78450036 = -81747255;    double JesNNPJoIv98246370 = -337666064;    double JesNNPJoIv69668991 = -166216115;    double JesNNPJoIv87746136 = -76991605;    double JesNNPJoIv76781754 = -720879860;    double JesNNPJoIv93725178 = -391418353;    double JesNNPJoIv42674610 = -979176842;    double JesNNPJoIv99014435 = -478733850;    double JesNNPJoIv86143656 = -89815665;    double JesNNPJoIv18845078 = -380711598;    double JesNNPJoIv21297311 = -711897731;    double JesNNPJoIv46369137 = -665606620;    double JesNNPJoIv60313823 = -853135165;    double JesNNPJoIv57360408 = -598628933;    double JesNNPJoIv37206557 = -651106024;    double JesNNPJoIv15381676 = -237373468;    double JesNNPJoIv87750575 = -350897574;    double JesNNPJoIv32132183 = -330790973;    double JesNNPJoIv91142325 = -502152236;    double JesNNPJoIv72615529 = -172350224;    double JesNNPJoIv79364867 = -805113601;    double JesNNPJoIv6837013 = -894855198;    double JesNNPJoIv57961897 = -24789299;    double JesNNPJoIv86123151 = -346363171;    double JesNNPJoIv38748152 = -112061385;    double JesNNPJoIv66814700 = -524689026;    double JesNNPJoIv36389243 = -140172457;    double JesNNPJoIv28198521 = 47283122;    double JesNNPJoIv50537386 = -773383898;    double JesNNPJoIv77334869 = -810972572;    double JesNNPJoIv27091773 = -548553916;    double JesNNPJoIv39086062 = 20971514;    double JesNNPJoIv3608213 = -410822870;    double JesNNPJoIv31960718 = -598752133;    double JesNNPJoIv84775951 = -680645991;    double JesNNPJoIv48384669 = -801590325;    double JesNNPJoIv77858713 = -865715128;    double JesNNPJoIv29291210 = -212873836;    double JesNNPJoIv23445840 = -315081622;    double JesNNPJoIv63938398 = -909532757;    double JesNNPJoIv84953653 = -839186586;    double JesNNPJoIv43400682 = -811828815;    double JesNNPJoIv61415103 = -444958966;    double JesNNPJoIv48076822 = -82614947;    double JesNNPJoIv15928661 = -43310073;    double JesNNPJoIv26238447 = -145291228;    double JesNNPJoIv88565281 = -109423224;    double JesNNPJoIv48382992 = -518145588;    double JesNNPJoIv72731742 = -100627326;    double JesNNPJoIv62897521 = -589999440;    double JesNNPJoIv13784970 = -873849224;    double JesNNPJoIv10579358 = -625049074;    double JesNNPJoIv74591758 = -919178283;    double JesNNPJoIv70405906 = -108091082;    double JesNNPJoIv92263131 = -823994869;    double JesNNPJoIv71613024 = -186892058;    double JesNNPJoIv40284473 = -212876765;    double JesNNPJoIv83545839 = -819852944;    double JesNNPJoIv48997984 = -964930221;    double JesNNPJoIv9967054 = -96190835;    double JesNNPJoIv57335935 = -151245897;    double JesNNPJoIv14476090 = -926459965;    double JesNNPJoIv48477050 = -705349952;    double JesNNPJoIv8808787 = -278843094;    double JesNNPJoIv91753304 = -832157683;    double JesNNPJoIv82211248 = -632869245;    double JesNNPJoIv42760925 = -154783751;    double JesNNPJoIv28353105 = -154383033;    double JesNNPJoIv72584457 = -917982943;    double JesNNPJoIv88821888 = -849515699;    double JesNNPJoIv37522963 = -371658340;    double JesNNPJoIv58459366 = -38023739;    double JesNNPJoIv8686343 = 84290649;    double JesNNPJoIv27203927 = -592619479;    double JesNNPJoIv87661875 = -333163639;    double JesNNPJoIv35964185 = -500359004;     JesNNPJoIv4820147 = JesNNPJoIv46629648;     JesNNPJoIv46629648 = JesNNPJoIv3588717;     JesNNPJoIv3588717 = JesNNPJoIv63225987;     JesNNPJoIv63225987 = JesNNPJoIv46631039;     JesNNPJoIv46631039 = JesNNPJoIv47527704;     JesNNPJoIv47527704 = JesNNPJoIv17037346;     JesNNPJoIv17037346 = JesNNPJoIv227595;     JesNNPJoIv227595 = JesNNPJoIv57663577;     JesNNPJoIv57663577 = JesNNPJoIv27628264;     JesNNPJoIv27628264 = JesNNPJoIv42415118;     JesNNPJoIv42415118 = JesNNPJoIv47558759;     JesNNPJoIv47558759 = JesNNPJoIv66921900;     JesNNPJoIv66921900 = JesNNPJoIv37225972;     JesNNPJoIv37225972 = JesNNPJoIv72607584;     JesNNPJoIv72607584 = JesNNPJoIv48879105;     JesNNPJoIv48879105 = JesNNPJoIv5743401;     JesNNPJoIv5743401 = JesNNPJoIv9938300;     JesNNPJoIv9938300 = JesNNPJoIv78279196;     JesNNPJoIv78279196 = JesNNPJoIv1535546;     JesNNPJoIv1535546 = JesNNPJoIv42711541;     JesNNPJoIv42711541 = JesNNPJoIv65734084;     JesNNPJoIv65734084 = JesNNPJoIv43021435;     JesNNPJoIv43021435 = JesNNPJoIv71627998;     JesNNPJoIv71627998 = JesNNPJoIv78450036;     JesNNPJoIv78450036 = JesNNPJoIv98246370;     JesNNPJoIv98246370 = JesNNPJoIv69668991;     JesNNPJoIv69668991 = JesNNPJoIv87746136;     JesNNPJoIv87746136 = JesNNPJoIv76781754;     JesNNPJoIv76781754 = JesNNPJoIv93725178;     JesNNPJoIv93725178 = JesNNPJoIv42674610;     JesNNPJoIv42674610 = JesNNPJoIv99014435;     JesNNPJoIv99014435 = JesNNPJoIv86143656;     JesNNPJoIv86143656 = JesNNPJoIv18845078;     JesNNPJoIv18845078 = JesNNPJoIv21297311;     JesNNPJoIv21297311 = JesNNPJoIv46369137;     JesNNPJoIv46369137 = JesNNPJoIv60313823;     JesNNPJoIv60313823 = JesNNPJoIv57360408;     JesNNPJoIv57360408 = JesNNPJoIv37206557;     JesNNPJoIv37206557 = JesNNPJoIv15381676;     JesNNPJoIv15381676 = JesNNPJoIv87750575;     JesNNPJoIv87750575 = JesNNPJoIv32132183;     JesNNPJoIv32132183 = JesNNPJoIv91142325;     JesNNPJoIv91142325 = JesNNPJoIv72615529;     JesNNPJoIv72615529 = JesNNPJoIv79364867;     JesNNPJoIv79364867 = JesNNPJoIv6837013;     JesNNPJoIv6837013 = JesNNPJoIv57961897;     JesNNPJoIv57961897 = JesNNPJoIv86123151;     JesNNPJoIv86123151 = JesNNPJoIv38748152;     JesNNPJoIv38748152 = JesNNPJoIv66814700;     JesNNPJoIv66814700 = JesNNPJoIv36389243;     JesNNPJoIv36389243 = JesNNPJoIv28198521;     JesNNPJoIv28198521 = JesNNPJoIv50537386;     JesNNPJoIv50537386 = JesNNPJoIv77334869;     JesNNPJoIv77334869 = JesNNPJoIv27091773;     JesNNPJoIv27091773 = JesNNPJoIv39086062;     JesNNPJoIv39086062 = JesNNPJoIv3608213;     JesNNPJoIv3608213 = JesNNPJoIv31960718;     JesNNPJoIv31960718 = JesNNPJoIv84775951;     JesNNPJoIv84775951 = JesNNPJoIv48384669;     JesNNPJoIv48384669 = JesNNPJoIv77858713;     JesNNPJoIv77858713 = JesNNPJoIv29291210;     JesNNPJoIv29291210 = JesNNPJoIv23445840;     JesNNPJoIv23445840 = JesNNPJoIv63938398;     JesNNPJoIv63938398 = JesNNPJoIv84953653;     JesNNPJoIv84953653 = JesNNPJoIv43400682;     JesNNPJoIv43400682 = JesNNPJoIv61415103;     JesNNPJoIv61415103 = JesNNPJoIv48076822;     JesNNPJoIv48076822 = JesNNPJoIv15928661;     JesNNPJoIv15928661 = JesNNPJoIv26238447;     JesNNPJoIv26238447 = JesNNPJoIv88565281;     JesNNPJoIv88565281 = JesNNPJoIv48382992;     JesNNPJoIv48382992 = JesNNPJoIv72731742;     JesNNPJoIv72731742 = JesNNPJoIv62897521;     JesNNPJoIv62897521 = JesNNPJoIv13784970;     JesNNPJoIv13784970 = JesNNPJoIv10579358;     JesNNPJoIv10579358 = JesNNPJoIv74591758;     JesNNPJoIv74591758 = JesNNPJoIv70405906;     JesNNPJoIv70405906 = JesNNPJoIv92263131;     JesNNPJoIv92263131 = JesNNPJoIv71613024;     JesNNPJoIv71613024 = JesNNPJoIv40284473;     JesNNPJoIv40284473 = JesNNPJoIv83545839;     JesNNPJoIv83545839 = JesNNPJoIv48997984;     JesNNPJoIv48997984 = JesNNPJoIv9967054;     JesNNPJoIv9967054 = JesNNPJoIv57335935;     JesNNPJoIv57335935 = JesNNPJoIv14476090;     JesNNPJoIv14476090 = JesNNPJoIv48477050;     JesNNPJoIv48477050 = JesNNPJoIv8808787;     JesNNPJoIv8808787 = JesNNPJoIv91753304;     JesNNPJoIv91753304 = JesNNPJoIv82211248;     JesNNPJoIv82211248 = JesNNPJoIv42760925;     JesNNPJoIv42760925 = JesNNPJoIv28353105;     JesNNPJoIv28353105 = JesNNPJoIv72584457;     JesNNPJoIv72584457 = JesNNPJoIv88821888;     JesNNPJoIv88821888 = JesNNPJoIv37522963;     JesNNPJoIv37522963 = JesNNPJoIv58459366;     JesNNPJoIv58459366 = JesNNPJoIv8686343;     JesNNPJoIv8686343 = JesNNPJoIv27203927;     JesNNPJoIv27203927 = JesNNPJoIv87661875;     JesNNPJoIv87661875 = JesNNPJoIv35964185;     JesNNPJoIv35964185 = JesNNPJoIv4820147;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void QOuiSZrkFy91511126() {     double WzybkkeBee10930782 = -484785034;    double WzybkkeBee28575244 = -643459081;    double WzybkkeBee20944112 = -335822137;    double WzybkkeBee75380629 = -873682706;    double WzybkkeBee24366630 = -28261581;    double WzybkkeBee73750338 = 4139710;    double WzybkkeBee46073647 = -233366884;    double WzybkkeBee19201536 = -27012712;    double WzybkkeBee5046237 = -882629845;    double WzybkkeBee65497436 = -784145776;    double WzybkkeBee22846013 = -127472323;    double WzybkkeBee93673479 = -814659195;    double WzybkkeBee84983932 = 75123893;    double WzybkkeBee74213868 = -632599423;    double WzybkkeBee13522121 = -464072866;    double WzybkkeBee64949046 = -268353583;    double WzybkkeBee55432163 = -552934203;    double WzybkkeBee29991985 = -914327614;    double WzybkkeBee60537308 = -851124271;    double WzybkkeBee54159473 = -93674169;    double WzybkkeBee10934158 = -621793876;    double WzybkkeBee30551374 = -839252118;    double WzybkkeBee15490624 = -585916635;    double WzybkkeBee99270480 = -732333980;    double WzybkkeBee50592376 = -881637141;    double WzybkkeBee39542123 = -124527315;    double WzybkkeBee38350351 = -367678031;    double WzybkkeBee36256786 = -751887547;    double WzybkkeBee55592457 = -489332879;    double WzybkkeBee38430685 = -984320594;    double WzybkkeBee68329838 = -179591015;    double WzybkkeBee81348915 = -580002427;    double WzybkkeBee81307027 = -184373251;    double WzybkkeBee13958480 = -8935096;    double WzybkkeBee65130001 = -509944761;    double WzybkkeBee57923240 = -959398474;    double WzybkkeBee53517126 = -906424413;    double WzybkkeBee61368300 = -365397621;    double WzybkkeBee46130407 = -257710937;    double WzybkkeBee74756506 = -320244377;    double WzybkkeBee81275466 = -504115367;    double WzybkkeBee49980301 = -794725333;    double WzybkkeBee29492664 = -42087074;    double WzybkkeBee19255168 = -848657606;    double WzybkkeBee75335384 = -940271157;    double WzybkkeBee59204175 = -692115985;    double WzybkkeBee3438265 = -624845459;    double WzybkkeBee69463673 = -965020060;    double WzybkkeBee67082270 = -861562234;    double WzybkkeBee99771776 = -198724720;    double WzybkkeBee85349290 = -661021135;    double WzybkkeBee53555497 = -135588946;    double WzybkkeBee74234191 = -457227494;    double WzybkkeBee83554020 = -563362568;    double WzybkkeBee80576968 = 94015024;    double WzybkkeBee80379408 = -645532917;    double WzybkkeBee13084620 = 42457553;    double WzybkkeBee21673632 = -603488158;    double WzybkkeBee24788253 = -992045565;    double WzybkkeBee84824507 = -903734266;    double WzybkkeBee35399988 = -628182259;    double WzybkkeBee9816861 = -481479338;    double WzybkkeBee63609079 = -537679833;    double WzybkkeBee66615551 = -898309252;    double WzybkkeBee97167598 = -504554762;    double WzybkkeBee41497098 = -547469896;    double WzybkkeBee12366452 = -530285944;    double WzybkkeBee71025453 = -915941012;    double WzybkkeBee9083868 = -22654662;    double WzybkkeBee55598880 = -504674392;    double WzybkkeBee11431920 = -361929170;    double WzybkkeBee94063862 = -87536582;    double WzybkkeBee83861577 = -556616678;    double WzybkkeBee85780801 = -430879894;    double WzybkkeBee72884006 = -589558802;    double WzybkkeBee60953857 = -827068543;    double WzybkkeBee1058710 = -697165045;    double WzybkkeBee96235455 = -737259030;    double WzybkkeBee23935096 = -792062823;    double WzybkkeBee91388200 = -89521157;    double WzybkkeBee36103859 = -499681857;    double WzybkkeBee68886677 = -402657971;    double WzybkkeBee69174516 = -890325313;    double WzybkkeBee55820680 = -190608160;    double WzybkkeBee53081394 = -223299459;    double WzybkkeBee14774341 = 55997931;    double WzybkkeBee7114724 = -22774933;    double WzybkkeBee97753007 = -621010684;    double WzybkkeBee33381511 = -2950120;    double WzybkkeBee84750592 = -864411845;    double WzybkkeBee44838620 = -901856027;    double WzybkkeBee31843494 = -202936256;    double WzybkkeBee36580047 = -373352057;    double WzybkkeBee61305900 = -353976671;    double WzybkkeBee39356518 = -692062118;    double WzybkkeBee71458605 = 77363970;    double WzybkkeBee86371222 = -157045501;    double WzybkkeBee62877112 = -143777823;    double WzybkkeBee22087570 = -244102844;    double WzybkkeBee33838286 = -484785034;     WzybkkeBee10930782 = WzybkkeBee28575244;     WzybkkeBee28575244 = WzybkkeBee20944112;     WzybkkeBee20944112 = WzybkkeBee75380629;     WzybkkeBee75380629 = WzybkkeBee24366630;     WzybkkeBee24366630 = WzybkkeBee73750338;     WzybkkeBee73750338 = WzybkkeBee46073647;     WzybkkeBee46073647 = WzybkkeBee19201536;     WzybkkeBee19201536 = WzybkkeBee5046237;     WzybkkeBee5046237 = WzybkkeBee65497436;     WzybkkeBee65497436 = WzybkkeBee22846013;     WzybkkeBee22846013 = WzybkkeBee93673479;     WzybkkeBee93673479 = WzybkkeBee84983932;     WzybkkeBee84983932 = WzybkkeBee74213868;     WzybkkeBee74213868 = WzybkkeBee13522121;     WzybkkeBee13522121 = WzybkkeBee64949046;     WzybkkeBee64949046 = WzybkkeBee55432163;     WzybkkeBee55432163 = WzybkkeBee29991985;     WzybkkeBee29991985 = WzybkkeBee60537308;     WzybkkeBee60537308 = WzybkkeBee54159473;     WzybkkeBee54159473 = WzybkkeBee10934158;     WzybkkeBee10934158 = WzybkkeBee30551374;     WzybkkeBee30551374 = WzybkkeBee15490624;     WzybkkeBee15490624 = WzybkkeBee99270480;     WzybkkeBee99270480 = WzybkkeBee50592376;     WzybkkeBee50592376 = WzybkkeBee39542123;     WzybkkeBee39542123 = WzybkkeBee38350351;     WzybkkeBee38350351 = WzybkkeBee36256786;     WzybkkeBee36256786 = WzybkkeBee55592457;     WzybkkeBee55592457 = WzybkkeBee38430685;     WzybkkeBee38430685 = WzybkkeBee68329838;     WzybkkeBee68329838 = WzybkkeBee81348915;     WzybkkeBee81348915 = WzybkkeBee81307027;     WzybkkeBee81307027 = WzybkkeBee13958480;     WzybkkeBee13958480 = WzybkkeBee65130001;     WzybkkeBee65130001 = WzybkkeBee57923240;     WzybkkeBee57923240 = WzybkkeBee53517126;     WzybkkeBee53517126 = WzybkkeBee61368300;     WzybkkeBee61368300 = WzybkkeBee46130407;     WzybkkeBee46130407 = WzybkkeBee74756506;     WzybkkeBee74756506 = WzybkkeBee81275466;     WzybkkeBee81275466 = WzybkkeBee49980301;     WzybkkeBee49980301 = WzybkkeBee29492664;     WzybkkeBee29492664 = WzybkkeBee19255168;     WzybkkeBee19255168 = WzybkkeBee75335384;     WzybkkeBee75335384 = WzybkkeBee59204175;     WzybkkeBee59204175 = WzybkkeBee3438265;     WzybkkeBee3438265 = WzybkkeBee69463673;     WzybkkeBee69463673 = WzybkkeBee67082270;     WzybkkeBee67082270 = WzybkkeBee99771776;     WzybkkeBee99771776 = WzybkkeBee85349290;     WzybkkeBee85349290 = WzybkkeBee53555497;     WzybkkeBee53555497 = WzybkkeBee74234191;     WzybkkeBee74234191 = WzybkkeBee83554020;     WzybkkeBee83554020 = WzybkkeBee80576968;     WzybkkeBee80576968 = WzybkkeBee80379408;     WzybkkeBee80379408 = WzybkkeBee13084620;     WzybkkeBee13084620 = WzybkkeBee21673632;     WzybkkeBee21673632 = WzybkkeBee24788253;     WzybkkeBee24788253 = WzybkkeBee84824507;     WzybkkeBee84824507 = WzybkkeBee35399988;     WzybkkeBee35399988 = WzybkkeBee9816861;     WzybkkeBee9816861 = WzybkkeBee63609079;     WzybkkeBee63609079 = WzybkkeBee66615551;     WzybkkeBee66615551 = WzybkkeBee97167598;     WzybkkeBee97167598 = WzybkkeBee41497098;     WzybkkeBee41497098 = WzybkkeBee12366452;     WzybkkeBee12366452 = WzybkkeBee71025453;     WzybkkeBee71025453 = WzybkkeBee9083868;     WzybkkeBee9083868 = WzybkkeBee55598880;     WzybkkeBee55598880 = WzybkkeBee11431920;     WzybkkeBee11431920 = WzybkkeBee94063862;     WzybkkeBee94063862 = WzybkkeBee83861577;     WzybkkeBee83861577 = WzybkkeBee85780801;     WzybkkeBee85780801 = WzybkkeBee72884006;     WzybkkeBee72884006 = WzybkkeBee60953857;     WzybkkeBee60953857 = WzybkkeBee1058710;     WzybkkeBee1058710 = WzybkkeBee96235455;     WzybkkeBee96235455 = WzybkkeBee23935096;     WzybkkeBee23935096 = WzybkkeBee91388200;     WzybkkeBee91388200 = WzybkkeBee36103859;     WzybkkeBee36103859 = WzybkkeBee68886677;     WzybkkeBee68886677 = WzybkkeBee69174516;     WzybkkeBee69174516 = WzybkkeBee55820680;     WzybkkeBee55820680 = WzybkkeBee53081394;     WzybkkeBee53081394 = WzybkkeBee14774341;     WzybkkeBee14774341 = WzybkkeBee7114724;     WzybkkeBee7114724 = WzybkkeBee97753007;     WzybkkeBee97753007 = WzybkkeBee33381511;     WzybkkeBee33381511 = WzybkkeBee84750592;     WzybkkeBee84750592 = WzybkkeBee44838620;     WzybkkeBee44838620 = WzybkkeBee31843494;     WzybkkeBee31843494 = WzybkkeBee36580047;     WzybkkeBee36580047 = WzybkkeBee61305900;     WzybkkeBee61305900 = WzybkkeBee39356518;     WzybkkeBee39356518 = WzybkkeBee71458605;     WzybkkeBee71458605 = WzybkkeBee86371222;     WzybkkeBee86371222 = WzybkkeBee62877112;     WzybkkeBee62877112 = WzybkkeBee22087570;     WzybkkeBee22087570 = WzybkkeBee33838286;     WzybkkeBee33838286 = WzybkkeBee10930782;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void MrmVJQnzHW22599854() {     double ZrohIAWrWZ59182388 = -113578484;    double ZrohIAWrWZ90045893 = -651749576;    double ZrohIAWrWZ74770176 = -452719980;    double ZrohIAWrWZ70464949 = -698495223;    double ZrohIAWrWZ65322901 = -157321570;    double ZrohIAWrWZ18477849 = -335698687;    double ZrohIAWrWZ9391476 = -919228222;    double ZrohIAWrWZ38838159 = -411587792;    double ZrohIAWrWZ19228488 = -519073275;    double ZrohIAWrWZ89979340 = -616113535;    double ZrohIAWrWZ68194525 = -84693995;    double ZrohIAWrWZ11900456 = -350634420;    double ZrohIAWrWZ61508967 = -359012795;    double ZrohIAWrWZ23134590 = -596224979;    double ZrohIAWrWZ49851081 = -911770860;    double ZrohIAWrWZ2350868 = -122260929;    double ZrohIAWrWZ11167157 = -924068653;    double ZrohIAWrWZ90310128 = -145894363;    double ZrohIAWrWZ41819998 = -459174621;    double ZrohIAWrWZ78577424 = -507454922;    double ZrohIAWrWZ24525654 = 40081545;    double ZrohIAWrWZ84724451 = -585754877;    double ZrohIAWrWZ87897902 = -795594871;    double ZrohIAWrWZ93920446 = -622583074;    double ZrohIAWrWZ36061897 = -689370410;    double ZrohIAWrWZ14984863 = -695329393;    double ZrohIAWrWZ39964879 = -506868739;    double ZrohIAWrWZ8934612 = -486490838;    double ZrohIAWrWZ6199278 = -631574607;    double ZrohIAWrWZ20625341 = -973282546;    double ZrohIAWrWZ97936387 = -620895017;    double ZrohIAWrWZ37766900 = 60128241;    double ZrohIAWrWZ54118565 = -5879797;    double ZrohIAWrWZ20500442 = -101701395;    double ZrohIAWrWZ31640949 = -811762967;    double ZrohIAWrWZ61880009 = -882761138;    double ZrohIAWrWZ27751635 = -461376426;    double ZrohIAWrWZ370047 = -272410615;    double ZrohIAWrWZ46982758 = -137756374;    double ZrohIAWrWZ93419875 = -20492082;    double ZrohIAWrWZ88302715 = -560844376;    double ZrohIAWrWZ61350223 = -93789876;    double ZrohIAWrWZ93476151 = -159571051;    double ZrohIAWrWZ44783146 = -37197815;    double ZrohIAWrWZ71342281 = -186292877;    double ZrohIAWrWZ38365665 = -992313386;    double ZrohIAWrWZ72667655 = -25066250;    double ZrohIAWrWZ41246371 = -678138077;    double ZrohIAWrWZ15380597 = -25137227;    double ZrohIAWrWZ51206363 = -613763112;    double ZrohIAWrWZ71188138 = -109626994;    double ZrohIAWrWZ50670260 = -438280882;    double ZrohIAWrWZ1892143 = -497222323;    double ZrohIAWrWZ33995321 = -912402958;    double ZrohIAWrWZ98074200 = -490020330;    double ZrohIAWrWZ74457937 = -527823608;    double ZrohIAWrWZ2147992 = -856154705;    double ZrohIAWrWZ80849729 = -830136907;    double ZrohIAWrWZ34403052 = 90875186;    double ZrohIAWrWZ50338039 = -461992178;    double ZrohIAWrWZ78512969 = -828829948;    double ZrohIAWrWZ456865 = -332737385;    double ZrohIAWrWZ32638881 = -780013185;    double ZrohIAWrWZ98603146 = -545790729;    double ZrohIAWrWZ92042952 = -995218519;    double ZrohIAWrWZ30427626 = -44822237;    double ZrohIAWrWZ57781891 = -244754623;    double ZrohIAWrWZ41008525 = -157311400;    double ZrohIAWrWZ91493641 = -784462012;    double ZrohIAWrWZ87971071 = 70990277;    double ZrohIAWrWZ74599233 = -660884503;    double ZrohIAWrWZ10797110 = -551658038;    double ZrohIAWrWZ43327371 = 91862010;    double ZrohIAWrWZ48400123 = -338682539;    double ZrohIAWrWZ90274709 = -946610547;    double ZrohIAWrWZ63175431 = -866128579;    double ZrohIAWrWZ91248300 = -326183827;    double ZrohIAWrWZ43114757 = -658397057;    double ZrohIAWrWZ22578166 = -336290197;    double ZrohIAWrWZ97696231 = -697057025;    double ZrohIAWrWZ42317208 = -570263144;    double ZrohIAWrWZ98718508 = -828730663;    double ZrohIAWrWZ93554014 = -361353611;    double ZrohIAWrWZ54992914 = 82188505;    double ZrohIAWrWZ49437203 = -763655552;    double ZrohIAWrWZ47266128 = -82614135;    double ZrohIAWrWZ35874758 = -442649436;    double ZrohIAWrWZ20123244 = -93476839;    double ZrohIAWrWZ22426241 = -611681065;    double ZrohIAWrWZ57183012 = -183939360;    double ZrohIAWrWZ59732018 = 73393567;    double ZrohIAWrWZ46901905 = -631239519;    double ZrohIAWrWZ65966995 = -263285802;    double ZrohIAWrWZ96644719 = -675764197;    double ZrohIAWrWZ14906906 = -191662135;    double ZrohIAWrWZ87845850 = -128106992;    double ZrohIAWrWZ28711342 = -313776691;    double ZrohIAWrWZ94873005 = -613780322;    double ZrohIAWrWZ52740193 = -41979297;    double ZrohIAWrWZ40914656 = -113578484;     ZrohIAWrWZ59182388 = ZrohIAWrWZ90045893;     ZrohIAWrWZ90045893 = ZrohIAWrWZ74770176;     ZrohIAWrWZ74770176 = ZrohIAWrWZ70464949;     ZrohIAWrWZ70464949 = ZrohIAWrWZ65322901;     ZrohIAWrWZ65322901 = ZrohIAWrWZ18477849;     ZrohIAWrWZ18477849 = ZrohIAWrWZ9391476;     ZrohIAWrWZ9391476 = ZrohIAWrWZ38838159;     ZrohIAWrWZ38838159 = ZrohIAWrWZ19228488;     ZrohIAWrWZ19228488 = ZrohIAWrWZ89979340;     ZrohIAWrWZ89979340 = ZrohIAWrWZ68194525;     ZrohIAWrWZ68194525 = ZrohIAWrWZ11900456;     ZrohIAWrWZ11900456 = ZrohIAWrWZ61508967;     ZrohIAWrWZ61508967 = ZrohIAWrWZ23134590;     ZrohIAWrWZ23134590 = ZrohIAWrWZ49851081;     ZrohIAWrWZ49851081 = ZrohIAWrWZ2350868;     ZrohIAWrWZ2350868 = ZrohIAWrWZ11167157;     ZrohIAWrWZ11167157 = ZrohIAWrWZ90310128;     ZrohIAWrWZ90310128 = ZrohIAWrWZ41819998;     ZrohIAWrWZ41819998 = ZrohIAWrWZ78577424;     ZrohIAWrWZ78577424 = ZrohIAWrWZ24525654;     ZrohIAWrWZ24525654 = ZrohIAWrWZ84724451;     ZrohIAWrWZ84724451 = ZrohIAWrWZ87897902;     ZrohIAWrWZ87897902 = ZrohIAWrWZ93920446;     ZrohIAWrWZ93920446 = ZrohIAWrWZ36061897;     ZrohIAWrWZ36061897 = ZrohIAWrWZ14984863;     ZrohIAWrWZ14984863 = ZrohIAWrWZ39964879;     ZrohIAWrWZ39964879 = ZrohIAWrWZ8934612;     ZrohIAWrWZ8934612 = ZrohIAWrWZ6199278;     ZrohIAWrWZ6199278 = ZrohIAWrWZ20625341;     ZrohIAWrWZ20625341 = ZrohIAWrWZ97936387;     ZrohIAWrWZ97936387 = ZrohIAWrWZ37766900;     ZrohIAWrWZ37766900 = ZrohIAWrWZ54118565;     ZrohIAWrWZ54118565 = ZrohIAWrWZ20500442;     ZrohIAWrWZ20500442 = ZrohIAWrWZ31640949;     ZrohIAWrWZ31640949 = ZrohIAWrWZ61880009;     ZrohIAWrWZ61880009 = ZrohIAWrWZ27751635;     ZrohIAWrWZ27751635 = ZrohIAWrWZ370047;     ZrohIAWrWZ370047 = ZrohIAWrWZ46982758;     ZrohIAWrWZ46982758 = ZrohIAWrWZ93419875;     ZrohIAWrWZ93419875 = ZrohIAWrWZ88302715;     ZrohIAWrWZ88302715 = ZrohIAWrWZ61350223;     ZrohIAWrWZ61350223 = ZrohIAWrWZ93476151;     ZrohIAWrWZ93476151 = ZrohIAWrWZ44783146;     ZrohIAWrWZ44783146 = ZrohIAWrWZ71342281;     ZrohIAWrWZ71342281 = ZrohIAWrWZ38365665;     ZrohIAWrWZ38365665 = ZrohIAWrWZ72667655;     ZrohIAWrWZ72667655 = ZrohIAWrWZ41246371;     ZrohIAWrWZ41246371 = ZrohIAWrWZ15380597;     ZrohIAWrWZ15380597 = ZrohIAWrWZ51206363;     ZrohIAWrWZ51206363 = ZrohIAWrWZ71188138;     ZrohIAWrWZ71188138 = ZrohIAWrWZ50670260;     ZrohIAWrWZ50670260 = ZrohIAWrWZ1892143;     ZrohIAWrWZ1892143 = ZrohIAWrWZ33995321;     ZrohIAWrWZ33995321 = ZrohIAWrWZ98074200;     ZrohIAWrWZ98074200 = ZrohIAWrWZ74457937;     ZrohIAWrWZ74457937 = ZrohIAWrWZ2147992;     ZrohIAWrWZ2147992 = ZrohIAWrWZ80849729;     ZrohIAWrWZ80849729 = ZrohIAWrWZ34403052;     ZrohIAWrWZ34403052 = ZrohIAWrWZ50338039;     ZrohIAWrWZ50338039 = ZrohIAWrWZ78512969;     ZrohIAWrWZ78512969 = ZrohIAWrWZ456865;     ZrohIAWrWZ456865 = ZrohIAWrWZ32638881;     ZrohIAWrWZ32638881 = ZrohIAWrWZ98603146;     ZrohIAWrWZ98603146 = ZrohIAWrWZ92042952;     ZrohIAWrWZ92042952 = ZrohIAWrWZ30427626;     ZrohIAWrWZ30427626 = ZrohIAWrWZ57781891;     ZrohIAWrWZ57781891 = ZrohIAWrWZ41008525;     ZrohIAWrWZ41008525 = ZrohIAWrWZ91493641;     ZrohIAWrWZ91493641 = ZrohIAWrWZ87971071;     ZrohIAWrWZ87971071 = ZrohIAWrWZ74599233;     ZrohIAWrWZ74599233 = ZrohIAWrWZ10797110;     ZrohIAWrWZ10797110 = ZrohIAWrWZ43327371;     ZrohIAWrWZ43327371 = ZrohIAWrWZ48400123;     ZrohIAWrWZ48400123 = ZrohIAWrWZ90274709;     ZrohIAWrWZ90274709 = ZrohIAWrWZ63175431;     ZrohIAWrWZ63175431 = ZrohIAWrWZ91248300;     ZrohIAWrWZ91248300 = ZrohIAWrWZ43114757;     ZrohIAWrWZ43114757 = ZrohIAWrWZ22578166;     ZrohIAWrWZ22578166 = ZrohIAWrWZ97696231;     ZrohIAWrWZ97696231 = ZrohIAWrWZ42317208;     ZrohIAWrWZ42317208 = ZrohIAWrWZ98718508;     ZrohIAWrWZ98718508 = ZrohIAWrWZ93554014;     ZrohIAWrWZ93554014 = ZrohIAWrWZ54992914;     ZrohIAWrWZ54992914 = ZrohIAWrWZ49437203;     ZrohIAWrWZ49437203 = ZrohIAWrWZ47266128;     ZrohIAWrWZ47266128 = ZrohIAWrWZ35874758;     ZrohIAWrWZ35874758 = ZrohIAWrWZ20123244;     ZrohIAWrWZ20123244 = ZrohIAWrWZ22426241;     ZrohIAWrWZ22426241 = ZrohIAWrWZ57183012;     ZrohIAWrWZ57183012 = ZrohIAWrWZ59732018;     ZrohIAWrWZ59732018 = ZrohIAWrWZ46901905;     ZrohIAWrWZ46901905 = ZrohIAWrWZ65966995;     ZrohIAWrWZ65966995 = ZrohIAWrWZ96644719;     ZrohIAWrWZ96644719 = ZrohIAWrWZ14906906;     ZrohIAWrWZ14906906 = ZrohIAWrWZ87845850;     ZrohIAWrWZ87845850 = ZrohIAWrWZ28711342;     ZrohIAWrWZ28711342 = ZrohIAWrWZ94873005;     ZrohIAWrWZ94873005 = ZrohIAWrWZ52740193;     ZrohIAWrWZ52740193 = ZrohIAWrWZ40914656;     ZrohIAWrWZ40914656 = ZrohIAWrWZ59182388;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void dnwpuQchLL50194111() {     double dcymLRrUCJ84767665 = -638611585;    double dcymLRrUCJ86443037 = -907227353;    double dcymLRrUCJ7649353 = -255181516;    double dcymLRrUCJ16186879 = -705818117;    double dcymLRrUCJ34664906 = -204243857;    double dcymLRrUCJ35487126 = -490679690;    double dcymLRrUCJ14712321 = -401499429;    double dcymLRrUCJ53848283 = -792269671;    double dcymLRrUCJ44557780 = 84702681;    double dcymLRrUCJ9137723 = -950675059;    double dcymLRrUCJ82528079 = -395121882;    double dcymLRrUCJ47218111 = -794343326;    double dcymLRrUCJ38089745 = -123261160;    double dcymLRrUCJ14694307 = -570749273;    double dcymLRrUCJ6119969 = -800316818;    double dcymLRrUCJ10071911 = -558452406;    double dcymLRrUCJ10965273 = -612388447;    double dcymLRrUCJ11426034 = -662171724;    double dcymLRrUCJ3284720 = -142148478;    double dcymLRrUCJ39738891 = -481894298;    double dcymLRrUCJ25534919 = -421618236;    double dcymLRrUCJ86227558 = 94512194;    double dcymLRrUCJ91661700 = -839686977;    double dcymLRrUCJ95634489 = -481432053;    double dcymLRrUCJ90965036 = -256866553;    double dcymLRrUCJ44473999 = -259779934;    double dcymLRrUCJ22352789 = -72681873;    double dcymLRrUCJ72833411 = -716153070;    double dcymLRrUCJ14076490 = -867868457;    double dcymLRrUCJ73947832 = -882192108;    double dcymLRrUCJ19983022 = -399542048;    double dcymLRrUCJ74956832 = -213667592;    double dcymLRrUCJ75305616 = -453700934;    double dcymLRrUCJ74087512 = -157846367;    double dcymLRrUCJ33045937 = -413198879;    double dcymLRrUCJ66671859 = -300355854;    double dcymLRrUCJ77397020 = -941888370;    double dcymLRrUCJ75942733 = -121125440;    double dcymLRrUCJ87906336 = -596094696;    double dcymLRrUCJ2203550 = -490462402;    double dcymLRrUCJ35453996 = -35904566;    double dcymLRrUCJ5359813 = -602828380;    double dcymLRrUCJ42676371 = -188177432;    double dcymLRrUCJ15576425 = -505613414;    double dcymLRrUCJ63323157 = -125313995;    double dcymLRrUCJ4765988 = -414860923;    double dcymLRrUCJ72436109 = -57535110;    double dcymLRrUCJ49359141 = -871320923;    double dcymLRrUCJ66191916 = -124813454;    double dcymLRrUCJ5016359 = -461786266;    double dcymLRrUCJ81324385 = -358285596;    double dcymLRrUCJ77928839 = -616360062;    double dcymLRrUCJ19965746 = 34879129;    double dcymLRrUCJ2894231 = -127466740;    double dcymLRrUCJ24659192 = -965110748;    double dcymLRrUCJ98540107 = -633123779;    double dcymLRrUCJ94781336 = 32459623;    double dcymLRrUCJ12014863 = -773749463;    double dcymLRrUCJ25221843 = -348951565;    double dcymLRrUCJ90190907 = -944463923;    double dcymLRrUCJ13134338 = -317997817;    double dcymLRrUCJ41878909 = -685346359;    double dcymLRrUCJ39771793 = -924401214;    double dcymLRrUCJ70609948 = -33105212;    double dcymLRrUCJ89154700 = -451133011;    double dcymLRrUCJ7571247 = -81454290;    double dcymLRrUCJ71912495 = -240642393;    double dcymLRrUCJ64002232 = -965414794;    double dcymLRrUCJ81648370 = -57550394;    double dcymLRrUCJ39448109 = -399960964;    double dcymLRrUCJ32674891 = -616564036;    double dcymLRrUCJ35022539 = -391263007;    double dcymLRrUCJ23519697 = 33922972;    double dcymLRrUCJ1081171 = -651686077;    double dcymLRrUCJ4284896 = -345989732;    double dcymLRrUCJ20175106 = -818789857;    double dcymLRrUCJ43551187 = -717310375;    double dcymLRrUCJ76085275 = -234073563;    double dcymLRrUCJ32311332 = -256118059;    double dcymLRrUCJ86199048 = -842005630;    double dcymLRrUCJ72037890 = -102244825;    double dcymLRrUCJ72993647 = -201360951;    double dcymLRrUCJ6641495 = -491339617;    double dcymLRrUCJ9060132 = -306082192;    double dcymLRrUCJ92623446 = -423906512;    double dcymLRrUCJ42054182 = -783181987;    double dcymLRrUCJ54991086 = -148546722;    double dcymLRrUCJ72411386 = -226234195;    double dcymLRrUCJ49428321 = -192735619;    double dcymLRrUCJ34505830 = -780075100;    double dcymLRrUCJ71890523 = -232815477;    double dcymLRrUCJ65382157 = -68138908;    double dcymLRrUCJ50720891 = -772173876;    double dcymLRrUCJ97715429 = -651630773;    double dcymLRrUCJ89069211 = -72464585;    double dcymLRrUCJ93575087 = -350558207;    double dcymLRrUCJ65588019 = -678427167;    double dcymLRrUCJ72066423 = -55072220;    double dcymLRrUCJ26421724 = 45519597;    double dcymLRrUCJ55751911 = -638611585;     dcymLRrUCJ84767665 = dcymLRrUCJ86443037;     dcymLRrUCJ86443037 = dcymLRrUCJ7649353;     dcymLRrUCJ7649353 = dcymLRrUCJ16186879;     dcymLRrUCJ16186879 = dcymLRrUCJ34664906;     dcymLRrUCJ34664906 = dcymLRrUCJ35487126;     dcymLRrUCJ35487126 = dcymLRrUCJ14712321;     dcymLRrUCJ14712321 = dcymLRrUCJ53848283;     dcymLRrUCJ53848283 = dcymLRrUCJ44557780;     dcymLRrUCJ44557780 = dcymLRrUCJ9137723;     dcymLRrUCJ9137723 = dcymLRrUCJ82528079;     dcymLRrUCJ82528079 = dcymLRrUCJ47218111;     dcymLRrUCJ47218111 = dcymLRrUCJ38089745;     dcymLRrUCJ38089745 = dcymLRrUCJ14694307;     dcymLRrUCJ14694307 = dcymLRrUCJ6119969;     dcymLRrUCJ6119969 = dcymLRrUCJ10071911;     dcymLRrUCJ10071911 = dcymLRrUCJ10965273;     dcymLRrUCJ10965273 = dcymLRrUCJ11426034;     dcymLRrUCJ11426034 = dcymLRrUCJ3284720;     dcymLRrUCJ3284720 = dcymLRrUCJ39738891;     dcymLRrUCJ39738891 = dcymLRrUCJ25534919;     dcymLRrUCJ25534919 = dcymLRrUCJ86227558;     dcymLRrUCJ86227558 = dcymLRrUCJ91661700;     dcymLRrUCJ91661700 = dcymLRrUCJ95634489;     dcymLRrUCJ95634489 = dcymLRrUCJ90965036;     dcymLRrUCJ90965036 = dcymLRrUCJ44473999;     dcymLRrUCJ44473999 = dcymLRrUCJ22352789;     dcymLRrUCJ22352789 = dcymLRrUCJ72833411;     dcymLRrUCJ72833411 = dcymLRrUCJ14076490;     dcymLRrUCJ14076490 = dcymLRrUCJ73947832;     dcymLRrUCJ73947832 = dcymLRrUCJ19983022;     dcymLRrUCJ19983022 = dcymLRrUCJ74956832;     dcymLRrUCJ74956832 = dcymLRrUCJ75305616;     dcymLRrUCJ75305616 = dcymLRrUCJ74087512;     dcymLRrUCJ74087512 = dcymLRrUCJ33045937;     dcymLRrUCJ33045937 = dcymLRrUCJ66671859;     dcymLRrUCJ66671859 = dcymLRrUCJ77397020;     dcymLRrUCJ77397020 = dcymLRrUCJ75942733;     dcymLRrUCJ75942733 = dcymLRrUCJ87906336;     dcymLRrUCJ87906336 = dcymLRrUCJ2203550;     dcymLRrUCJ2203550 = dcymLRrUCJ35453996;     dcymLRrUCJ35453996 = dcymLRrUCJ5359813;     dcymLRrUCJ5359813 = dcymLRrUCJ42676371;     dcymLRrUCJ42676371 = dcymLRrUCJ15576425;     dcymLRrUCJ15576425 = dcymLRrUCJ63323157;     dcymLRrUCJ63323157 = dcymLRrUCJ4765988;     dcymLRrUCJ4765988 = dcymLRrUCJ72436109;     dcymLRrUCJ72436109 = dcymLRrUCJ49359141;     dcymLRrUCJ49359141 = dcymLRrUCJ66191916;     dcymLRrUCJ66191916 = dcymLRrUCJ5016359;     dcymLRrUCJ5016359 = dcymLRrUCJ81324385;     dcymLRrUCJ81324385 = dcymLRrUCJ77928839;     dcymLRrUCJ77928839 = dcymLRrUCJ19965746;     dcymLRrUCJ19965746 = dcymLRrUCJ2894231;     dcymLRrUCJ2894231 = dcymLRrUCJ24659192;     dcymLRrUCJ24659192 = dcymLRrUCJ98540107;     dcymLRrUCJ98540107 = dcymLRrUCJ94781336;     dcymLRrUCJ94781336 = dcymLRrUCJ12014863;     dcymLRrUCJ12014863 = dcymLRrUCJ25221843;     dcymLRrUCJ25221843 = dcymLRrUCJ90190907;     dcymLRrUCJ90190907 = dcymLRrUCJ13134338;     dcymLRrUCJ13134338 = dcymLRrUCJ41878909;     dcymLRrUCJ41878909 = dcymLRrUCJ39771793;     dcymLRrUCJ39771793 = dcymLRrUCJ70609948;     dcymLRrUCJ70609948 = dcymLRrUCJ89154700;     dcymLRrUCJ89154700 = dcymLRrUCJ7571247;     dcymLRrUCJ7571247 = dcymLRrUCJ71912495;     dcymLRrUCJ71912495 = dcymLRrUCJ64002232;     dcymLRrUCJ64002232 = dcymLRrUCJ81648370;     dcymLRrUCJ81648370 = dcymLRrUCJ39448109;     dcymLRrUCJ39448109 = dcymLRrUCJ32674891;     dcymLRrUCJ32674891 = dcymLRrUCJ35022539;     dcymLRrUCJ35022539 = dcymLRrUCJ23519697;     dcymLRrUCJ23519697 = dcymLRrUCJ1081171;     dcymLRrUCJ1081171 = dcymLRrUCJ4284896;     dcymLRrUCJ4284896 = dcymLRrUCJ20175106;     dcymLRrUCJ20175106 = dcymLRrUCJ43551187;     dcymLRrUCJ43551187 = dcymLRrUCJ76085275;     dcymLRrUCJ76085275 = dcymLRrUCJ32311332;     dcymLRrUCJ32311332 = dcymLRrUCJ86199048;     dcymLRrUCJ86199048 = dcymLRrUCJ72037890;     dcymLRrUCJ72037890 = dcymLRrUCJ72993647;     dcymLRrUCJ72993647 = dcymLRrUCJ6641495;     dcymLRrUCJ6641495 = dcymLRrUCJ9060132;     dcymLRrUCJ9060132 = dcymLRrUCJ92623446;     dcymLRrUCJ92623446 = dcymLRrUCJ42054182;     dcymLRrUCJ42054182 = dcymLRrUCJ54991086;     dcymLRrUCJ54991086 = dcymLRrUCJ72411386;     dcymLRrUCJ72411386 = dcymLRrUCJ49428321;     dcymLRrUCJ49428321 = dcymLRrUCJ34505830;     dcymLRrUCJ34505830 = dcymLRrUCJ71890523;     dcymLRrUCJ71890523 = dcymLRrUCJ65382157;     dcymLRrUCJ65382157 = dcymLRrUCJ50720891;     dcymLRrUCJ50720891 = dcymLRrUCJ97715429;     dcymLRrUCJ97715429 = dcymLRrUCJ89069211;     dcymLRrUCJ89069211 = dcymLRrUCJ93575087;     dcymLRrUCJ93575087 = dcymLRrUCJ65588019;     dcymLRrUCJ65588019 = dcymLRrUCJ72066423;     dcymLRrUCJ72066423 = dcymLRrUCJ26421724;     dcymLRrUCJ26421724 = dcymLRrUCJ55751911;     dcymLRrUCJ55751911 = dcymLRrUCJ84767665;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void DgSMtffTNU17155513() {     double YsNZKcPAmE74887503 = -569891927;    double YsNZKcPAmE8140419 = -224748649;    double YsNZKcPAmE4455264 = -349104591;    double YsNZKcPAmE74765314 = -712530769;    double YsNZKcPAmE56561744 = -613922621;    double YsNZKcPAmE51078962 = -82745610;    double YsNZKcPAmE77923094 = -843581368;    double YsNZKcPAmE75940897 = -132894727;    double YsNZKcPAmE51109632 = -736836027;    double YsNZKcPAmE10032907 = -157356455;    double YsNZKcPAmE79000503 = -863014111;    double YsNZKcPAmE96259296 = -9409824;    double YsNZKcPAmE8288791 = -457155495;    double YsNZKcPAmE6957381 = -914063208;    double YsNZKcPAmE49366449 = -148150613;    double YsNZKcPAmE8816201 = -591627926;    double YsNZKcPAmE10780213 = -693348258;    double YsNZKcPAmE55782279 = -402092638;    double YsNZKcPAmE84627380 = -126541181;    double YsNZKcPAmE79136902 = -641797059;    double YsNZKcPAmE93126745 = -936509702;    double YsNZKcPAmE62605406 = -748576325;    double YsNZKcPAmE61778515 = -605104740;    double YsNZKcPAmE47205695 = -810376952;    double YsNZKcPAmE66292914 = -227071350;    double YsNZKcPAmE79839041 = -43859597;    double YsNZKcPAmE14541705 = -133010580;    double YsNZKcPAmE31407312 = -285010117;    double YsNZKcPAmE87963934 = -76137820;    double YsNZKcPAmE97826781 = -432025873;    double YsNZKcPAmE56859103 = -13301826;    double YsNZKcPAmE59047603 = -6313773;    double YsNZKcPAmE69727081 = -955870310;    double YsNZKcPAmE98208994 = -25979257;    double YsNZKcPAmE51000509 = -322848464;    double YsNZKcPAmE62731056 = -683151010;    double YsNZKcPAmE89571956 = -557357653;    double YsNZKcPAmE70217696 = 17552637;    double YsNZKcPAmE33752951 = 83761842;    double YsNZKcPAmE18588584 = -4601861;    double YsNZKcPAmE37009337 = -929709740;    double YsNZKcPAmE45701937 = -611113675;    double YsNZKcPAmE62776572 = -122733282;    double YsNZKcPAmE5470264 = 73338954;    double YsNZKcPAmE39305627 = -711083352;    double YsNZKcPAmE65632949 = -710529500;    double YsNZKcPAmE80557192 = -87298232;    double YsNZKcPAmE15129182 = -406738533;    double YsNZKcPAmE12768960 = -124516662;    double YsNZKcPAmE54342187 = -505807489;    double YsNZKcPAmE23949279 = -311222648;    double YsNZKcPAmE36249204 = -962932643;    double YsNZKcPAmE44866549 = -669027874;    double YsNZKcPAmE66051563 = -782941873;    double YsNZKcPAmE24028767 = -850610297;    double YsNZKcPAmE12282097 = -821315603;    double YsNZKcPAmE46361903 = -619643909;    double YsNZKcPAmE57249568 = -538727640;    double YsNZKcPAmE8472401 = -385459420;    double YsNZKcPAmE76722702 = -470063024;    double YsNZKcPAmE36537258 = -949735030;    double YsNZKcPAmE46515783 = -458571252;    double YsNZKcPAmE87976962 = 43243093;    double YsNZKcPAmE53282850 = -204810155;    double YsNZKcPAmE53173803 = -44054630;    double YsNZKcPAmE19952900 = -756700338;    double YsNZKcPAmE26532215 = -53539515;    double YsNZKcPAmE10079797 = -331176238;    double YsNZKcPAmE55956871 = -491214745;    double YsNZKcPAmE86635393 = -464999603;    double YsNZKcPAmE19244244 = 65729726;    double YsNZKcPAmE40562516 = -610900896;    double YsNZKcPAmE22029328 = -385854481;    double YsNZKcPAmE66038797 = -21939320;    double YsNZKcPAmE42127566 = -712087319;    double YsNZKcPAmE47424809 = -225396027;    double YsNZKcPAmE99828833 = -525843044;    double YsNZKcPAmE56308251 = -578443694;    double YsNZKcPAmE7900068 = 706400;    double YsNZKcPAmE659965 = -516541851;    double YsNZKcPAmE99281849 = -956561366;    double YsNZKcPAmE99412523 = -726272048;    double YsNZKcPAmE18638352 = -60493455;    double YsNZKcPAmE33621748 = -570330331;    double YsNZKcPAmE73877503 = -20803225;    double YsNZKcPAmE20609900 = -50369184;    double YsNZKcPAmE14181055 = -337285900;    double YsNZKcPAmE3675518 = -72928437;    double YsNZKcPAmE74180227 = -175368961;    double YsNZKcPAmE38718413 = -501532862;    double YsNZKcPAmE16369153 = 36492899;    double YsNZKcPAmE32322389 = 81369987;    double YsNZKcPAmE61745296 = -596987944;    double YsNZKcPAmE57030248 = -446175135;    double YsNZKcPAmE82051326 = -54866831;    double YsNZKcPAmE90493554 = -371138488;    double YsNZKcPAmE57724974 = -554356769;    double YsNZKcPAmE9493723 = -917923127;    double YsNZKcPAmE52296461 = -882606417;    double YsNZKcPAmE19352728 = -569891927;     YsNZKcPAmE74887503 = YsNZKcPAmE8140419;     YsNZKcPAmE8140419 = YsNZKcPAmE4455264;     YsNZKcPAmE4455264 = YsNZKcPAmE74765314;     YsNZKcPAmE74765314 = YsNZKcPAmE56561744;     YsNZKcPAmE56561744 = YsNZKcPAmE51078962;     YsNZKcPAmE51078962 = YsNZKcPAmE77923094;     YsNZKcPAmE77923094 = YsNZKcPAmE75940897;     YsNZKcPAmE75940897 = YsNZKcPAmE51109632;     YsNZKcPAmE51109632 = YsNZKcPAmE10032907;     YsNZKcPAmE10032907 = YsNZKcPAmE79000503;     YsNZKcPAmE79000503 = YsNZKcPAmE96259296;     YsNZKcPAmE96259296 = YsNZKcPAmE8288791;     YsNZKcPAmE8288791 = YsNZKcPAmE6957381;     YsNZKcPAmE6957381 = YsNZKcPAmE49366449;     YsNZKcPAmE49366449 = YsNZKcPAmE8816201;     YsNZKcPAmE8816201 = YsNZKcPAmE10780213;     YsNZKcPAmE10780213 = YsNZKcPAmE55782279;     YsNZKcPAmE55782279 = YsNZKcPAmE84627380;     YsNZKcPAmE84627380 = YsNZKcPAmE79136902;     YsNZKcPAmE79136902 = YsNZKcPAmE93126745;     YsNZKcPAmE93126745 = YsNZKcPAmE62605406;     YsNZKcPAmE62605406 = YsNZKcPAmE61778515;     YsNZKcPAmE61778515 = YsNZKcPAmE47205695;     YsNZKcPAmE47205695 = YsNZKcPAmE66292914;     YsNZKcPAmE66292914 = YsNZKcPAmE79839041;     YsNZKcPAmE79839041 = YsNZKcPAmE14541705;     YsNZKcPAmE14541705 = YsNZKcPAmE31407312;     YsNZKcPAmE31407312 = YsNZKcPAmE87963934;     YsNZKcPAmE87963934 = YsNZKcPAmE97826781;     YsNZKcPAmE97826781 = YsNZKcPAmE56859103;     YsNZKcPAmE56859103 = YsNZKcPAmE59047603;     YsNZKcPAmE59047603 = YsNZKcPAmE69727081;     YsNZKcPAmE69727081 = YsNZKcPAmE98208994;     YsNZKcPAmE98208994 = YsNZKcPAmE51000509;     YsNZKcPAmE51000509 = YsNZKcPAmE62731056;     YsNZKcPAmE62731056 = YsNZKcPAmE89571956;     YsNZKcPAmE89571956 = YsNZKcPAmE70217696;     YsNZKcPAmE70217696 = YsNZKcPAmE33752951;     YsNZKcPAmE33752951 = YsNZKcPAmE18588584;     YsNZKcPAmE18588584 = YsNZKcPAmE37009337;     YsNZKcPAmE37009337 = YsNZKcPAmE45701937;     YsNZKcPAmE45701937 = YsNZKcPAmE62776572;     YsNZKcPAmE62776572 = YsNZKcPAmE5470264;     YsNZKcPAmE5470264 = YsNZKcPAmE39305627;     YsNZKcPAmE39305627 = YsNZKcPAmE65632949;     YsNZKcPAmE65632949 = YsNZKcPAmE80557192;     YsNZKcPAmE80557192 = YsNZKcPAmE15129182;     YsNZKcPAmE15129182 = YsNZKcPAmE12768960;     YsNZKcPAmE12768960 = YsNZKcPAmE54342187;     YsNZKcPAmE54342187 = YsNZKcPAmE23949279;     YsNZKcPAmE23949279 = YsNZKcPAmE36249204;     YsNZKcPAmE36249204 = YsNZKcPAmE44866549;     YsNZKcPAmE44866549 = YsNZKcPAmE66051563;     YsNZKcPAmE66051563 = YsNZKcPAmE24028767;     YsNZKcPAmE24028767 = YsNZKcPAmE12282097;     YsNZKcPAmE12282097 = YsNZKcPAmE46361903;     YsNZKcPAmE46361903 = YsNZKcPAmE57249568;     YsNZKcPAmE57249568 = YsNZKcPAmE8472401;     YsNZKcPAmE8472401 = YsNZKcPAmE76722702;     YsNZKcPAmE76722702 = YsNZKcPAmE36537258;     YsNZKcPAmE36537258 = YsNZKcPAmE46515783;     YsNZKcPAmE46515783 = YsNZKcPAmE87976962;     YsNZKcPAmE87976962 = YsNZKcPAmE53282850;     YsNZKcPAmE53282850 = YsNZKcPAmE53173803;     YsNZKcPAmE53173803 = YsNZKcPAmE19952900;     YsNZKcPAmE19952900 = YsNZKcPAmE26532215;     YsNZKcPAmE26532215 = YsNZKcPAmE10079797;     YsNZKcPAmE10079797 = YsNZKcPAmE55956871;     YsNZKcPAmE55956871 = YsNZKcPAmE86635393;     YsNZKcPAmE86635393 = YsNZKcPAmE19244244;     YsNZKcPAmE19244244 = YsNZKcPAmE40562516;     YsNZKcPAmE40562516 = YsNZKcPAmE22029328;     YsNZKcPAmE22029328 = YsNZKcPAmE66038797;     YsNZKcPAmE66038797 = YsNZKcPAmE42127566;     YsNZKcPAmE42127566 = YsNZKcPAmE47424809;     YsNZKcPAmE47424809 = YsNZKcPAmE99828833;     YsNZKcPAmE99828833 = YsNZKcPAmE56308251;     YsNZKcPAmE56308251 = YsNZKcPAmE7900068;     YsNZKcPAmE7900068 = YsNZKcPAmE659965;     YsNZKcPAmE659965 = YsNZKcPAmE99281849;     YsNZKcPAmE99281849 = YsNZKcPAmE99412523;     YsNZKcPAmE99412523 = YsNZKcPAmE18638352;     YsNZKcPAmE18638352 = YsNZKcPAmE33621748;     YsNZKcPAmE33621748 = YsNZKcPAmE73877503;     YsNZKcPAmE73877503 = YsNZKcPAmE20609900;     YsNZKcPAmE20609900 = YsNZKcPAmE14181055;     YsNZKcPAmE14181055 = YsNZKcPAmE3675518;     YsNZKcPAmE3675518 = YsNZKcPAmE74180227;     YsNZKcPAmE74180227 = YsNZKcPAmE38718413;     YsNZKcPAmE38718413 = YsNZKcPAmE16369153;     YsNZKcPAmE16369153 = YsNZKcPAmE32322389;     YsNZKcPAmE32322389 = YsNZKcPAmE61745296;     YsNZKcPAmE61745296 = YsNZKcPAmE57030248;     YsNZKcPAmE57030248 = YsNZKcPAmE82051326;     YsNZKcPAmE82051326 = YsNZKcPAmE90493554;     YsNZKcPAmE90493554 = YsNZKcPAmE57724974;     YsNZKcPAmE57724974 = YsNZKcPAmE9493723;     YsNZKcPAmE9493723 = YsNZKcPAmE52296461;     YsNZKcPAmE52296461 = YsNZKcPAmE19352728;     YsNZKcPAmE19352728 = YsNZKcPAmE74887503;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void uqhNKIvhZS84116914() {     double RLPfSlYFVU65007340 = -501172270;    double RLPfSlYFVU29837800 = -642269944;    double RLPfSlYFVU1261175 = -443027666;    double RLPfSlYFVU33343750 = -719243421;    double RLPfSlYFVU78458581 = 76398616;    double RLPfSlYFVU66670799 = -774811529;    double RLPfSlYFVU41133869 = -185663308;    double RLPfSlYFVU98033510 = -573519783;    double RLPfSlYFVU57661484 = -458374735;    double RLPfSlYFVU10928091 = -464037852;    double RLPfSlYFVU75472927 = -230906341;    double RLPfSlYFVU45300481 = -324476322;    double RLPfSlYFVU78487837 = -791049830;    double RLPfSlYFVU99220454 = -157377144;    double RLPfSlYFVU92612930 = -595984407;    double RLPfSlYFVU7560490 = -624803447;    double RLPfSlYFVU10595153 = -774308070;    double RLPfSlYFVU138525 = -142013552;    double RLPfSlYFVU65970041 = -110933883;    double RLPfSlYFVU18534914 = -801699820;    double RLPfSlYFVU60718572 = -351401168;    double RLPfSlYFVU38983254 = -491664844;    double RLPfSlYFVU31895330 = -370522503;    double RLPfSlYFVU98776900 = -39321850;    double RLPfSlYFVU41620791 = -197276147;    double RLPfSlYFVU15204084 = -927939261;    double RLPfSlYFVU6730622 = -193339287;    double RLPfSlYFVU89981211 = -953867163;    double RLPfSlYFVU61851379 = -384407183;    double RLPfSlYFVU21705732 = 18140362;    double RLPfSlYFVU93735184 = -727061605;    double RLPfSlYFVU43138375 = -898959955;    double RLPfSlYFVU64148545 = -358039685;    double RLPfSlYFVU22330477 = -994112148;    double RLPfSlYFVU68955081 = -232498050;    double RLPfSlYFVU58790252 = 34053833;    double RLPfSlYFVU1746894 = -172826935;    double RLPfSlYFVU64492659 = -943769286;    double RLPfSlYFVU79599564 = -336381619;    double RLPfSlYFVU34973618 = -618741320;    double RLPfSlYFVU38564678 = -723514914;    double RLPfSlYFVU86044061 = -619398971;    double RLPfSlYFVU82876773 = -57289131;    double RLPfSlYFVU95364103 = -447708678;    double RLPfSlYFVU15288097 = -196852710;    double RLPfSlYFVU26499911 = 93801924;    double RLPfSlYFVU88678275 = -117061354;    double RLPfSlYFVU80899221 = 57843858;    double RLPfSlYFVU59346003 = -124219870;    double RLPfSlYFVU3668016 = -549828713;    double RLPfSlYFVU66574172 = -264159701;    double RLPfSlYFVU94569568 = -209505224;    double RLPfSlYFVU69767352 = -272934877;    double RLPfSlYFVU29208897 = -338417006;    double RLPfSlYFVU23398343 = -736109846;    double RLPfSlYFVU26024086 = 90492574;    double RLPfSlYFVU97942469 = -171747442;    double RLPfSlYFVU2484274 = -303705817;    double RLPfSlYFVU91722958 = -421967275;    double RLPfSlYFVU63254498 = 4337876;    double RLPfSlYFVU59940178 = -481472243;    double RLPfSlYFVU51152657 = -231796145;    double RLPfSlYFVU36182132 = -89112600;    double RLPfSlYFVU35955752 = -376515098;    double RLPfSlYFVU17192906 = -736976248;    double RLPfSlYFVU32334553 = -331946387;    double RLPfSlYFVU81151935 = -966436637;    double RLPfSlYFVU56157361 = -796937683;    double RLPfSlYFVU30265373 = -924879095;    double RLPfSlYFVU33822678 = -530038241;    double RLPfSlYFVU5813597 = -351976512;    double RLPfSlYFVU46102494 = -830538784;    double RLPfSlYFVU20538960 = -805631933;    double RLPfSlYFVU30996424 = -492192564;    double RLPfSlYFVU79970235 = 21815094;    double RLPfSlYFVU74674511 = -732002198;    double RLPfSlYFVU56106481 = -334375713;    double RLPfSlYFVU36531227 = -922813825;    double RLPfSlYFVU83488803 = -842469140;    double RLPfSlYFVU15120881 = -191078072;    double RLPfSlYFVU26525808 = -710877907;    double RLPfSlYFVU25831400 = -151183145;    double RLPfSlYFVU30635209 = -729647294;    double RLPfSlYFVU58183363 = -834578471;    double RLPfSlYFVU55131559 = -717699938;    double RLPfSlYFVU99165616 = -417556381;    double RLPfSlYFVU73371022 = -526025078;    double RLPfSlYFVU34939649 = 80377320;    double RLPfSlYFVU98932133 = -158002302;    double RLPfSlYFVU42930996 = -222990624;    double RLPfSlYFVU60847782 = -794198725;    double RLPfSlYFVU99262619 = -869121119;    double RLPfSlYFVU72769701 = -421802012;    double RLPfSlYFVU16345066 = -240719496;    double RLPfSlYFVU75033440 = -37269078;    double RLPfSlYFVU87412021 = -391718769;    double RLPfSlYFVU49861930 = -430286371;    double RLPfSlYFVU46921022 = -680774034;    double RLPfSlYFVU78171197 = -710732431;    double RLPfSlYFVU82953544 = -501172270;     RLPfSlYFVU65007340 = RLPfSlYFVU29837800;     RLPfSlYFVU29837800 = RLPfSlYFVU1261175;     RLPfSlYFVU1261175 = RLPfSlYFVU33343750;     RLPfSlYFVU33343750 = RLPfSlYFVU78458581;     RLPfSlYFVU78458581 = RLPfSlYFVU66670799;     RLPfSlYFVU66670799 = RLPfSlYFVU41133869;     RLPfSlYFVU41133869 = RLPfSlYFVU98033510;     RLPfSlYFVU98033510 = RLPfSlYFVU57661484;     RLPfSlYFVU57661484 = RLPfSlYFVU10928091;     RLPfSlYFVU10928091 = RLPfSlYFVU75472927;     RLPfSlYFVU75472927 = RLPfSlYFVU45300481;     RLPfSlYFVU45300481 = RLPfSlYFVU78487837;     RLPfSlYFVU78487837 = RLPfSlYFVU99220454;     RLPfSlYFVU99220454 = RLPfSlYFVU92612930;     RLPfSlYFVU92612930 = RLPfSlYFVU7560490;     RLPfSlYFVU7560490 = RLPfSlYFVU10595153;     RLPfSlYFVU10595153 = RLPfSlYFVU138525;     RLPfSlYFVU138525 = RLPfSlYFVU65970041;     RLPfSlYFVU65970041 = RLPfSlYFVU18534914;     RLPfSlYFVU18534914 = RLPfSlYFVU60718572;     RLPfSlYFVU60718572 = RLPfSlYFVU38983254;     RLPfSlYFVU38983254 = RLPfSlYFVU31895330;     RLPfSlYFVU31895330 = RLPfSlYFVU98776900;     RLPfSlYFVU98776900 = RLPfSlYFVU41620791;     RLPfSlYFVU41620791 = RLPfSlYFVU15204084;     RLPfSlYFVU15204084 = RLPfSlYFVU6730622;     RLPfSlYFVU6730622 = RLPfSlYFVU89981211;     RLPfSlYFVU89981211 = RLPfSlYFVU61851379;     RLPfSlYFVU61851379 = RLPfSlYFVU21705732;     RLPfSlYFVU21705732 = RLPfSlYFVU93735184;     RLPfSlYFVU93735184 = RLPfSlYFVU43138375;     RLPfSlYFVU43138375 = RLPfSlYFVU64148545;     RLPfSlYFVU64148545 = RLPfSlYFVU22330477;     RLPfSlYFVU22330477 = RLPfSlYFVU68955081;     RLPfSlYFVU68955081 = RLPfSlYFVU58790252;     RLPfSlYFVU58790252 = RLPfSlYFVU1746894;     RLPfSlYFVU1746894 = RLPfSlYFVU64492659;     RLPfSlYFVU64492659 = RLPfSlYFVU79599564;     RLPfSlYFVU79599564 = RLPfSlYFVU34973618;     RLPfSlYFVU34973618 = RLPfSlYFVU38564678;     RLPfSlYFVU38564678 = RLPfSlYFVU86044061;     RLPfSlYFVU86044061 = RLPfSlYFVU82876773;     RLPfSlYFVU82876773 = RLPfSlYFVU95364103;     RLPfSlYFVU95364103 = RLPfSlYFVU15288097;     RLPfSlYFVU15288097 = RLPfSlYFVU26499911;     RLPfSlYFVU26499911 = RLPfSlYFVU88678275;     RLPfSlYFVU88678275 = RLPfSlYFVU80899221;     RLPfSlYFVU80899221 = RLPfSlYFVU59346003;     RLPfSlYFVU59346003 = RLPfSlYFVU3668016;     RLPfSlYFVU3668016 = RLPfSlYFVU66574172;     RLPfSlYFVU66574172 = RLPfSlYFVU94569568;     RLPfSlYFVU94569568 = RLPfSlYFVU69767352;     RLPfSlYFVU69767352 = RLPfSlYFVU29208897;     RLPfSlYFVU29208897 = RLPfSlYFVU23398343;     RLPfSlYFVU23398343 = RLPfSlYFVU26024086;     RLPfSlYFVU26024086 = RLPfSlYFVU97942469;     RLPfSlYFVU97942469 = RLPfSlYFVU2484274;     RLPfSlYFVU2484274 = RLPfSlYFVU91722958;     RLPfSlYFVU91722958 = RLPfSlYFVU63254498;     RLPfSlYFVU63254498 = RLPfSlYFVU59940178;     RLPfSlYFVU59940178 = RLPfSlYFVU51152657;     RLPfSlYFVU51152657 = RLPfSlYFVU36182132;     RLPfSlYFVU36182132 = RLPfSlYFVU35955752;     RLPfSlYFVU35955752 = RLPfSlYFVU17192906;     RLPfSlYFVU17192906 = RLPfSlYFVU32334553;     RLPfSlYFVU32334553 = RLPfSlYFVU81151935;     RLPfSlYFVU81151935 = RLPfSlYFVU56157361;     RLPfSlYFVU56157361 = RLPfSlYFVU30265373;     RLPfSlYFVU30265373 = RLPfSlYFVU33822678;     RLPfSlYFVU33822678 = RLPfSlYFVU5813597;     RLPfSlYFVU5813597 = RLPfSlYFVU46102494;     RLPfSlYFVU46102494 = RLPfSlYFVU20538960;     RLPfSlYFVU20538960 = RLPfSlYFVU30996424;     RLPfSlYFVU30996424 = RLPfSlYFVU79970235;     RLPfSlYFVU79970235 = RLPfSlYFVU74674511;     RLPfSlYFVU74674511 = RLPfSlYFVU56106481;     RLPfSlYFVU56106481 = RLPfSlYFVU36531227;     RLPfSlYFVU36531227 = RLPfSlYFVU83488803;     RLPfSlYFVU83488803 = RLPfSlYFVU15120881;     RLPfSlYFVU15120881 = RLPfSlYFVU26525808;     RLPfSlYFVU26525808 = RLPfSlYFVU25831400;     RLPfSlYFVU25831400 = RLPfSlYFVU30635209;     RLPfSlYFVU30635209 = RLPfSlYFVU58183363;     RLPfSlYFVU58183363 = RLPfSlYFVU55131559;     RLPfSlYFVU55131559 = RLPfSlYFVU99165616;     RLPfSlYFVU99165616 = RLPfSlYFVU73371022;     RLPfSlYFVU73371022 = RLPfSlYFVU34939649;     RLPfSlYFVU34939649 = RLPfSlYFVU98932133;     RLPfSlYFVU98932133 = RLPfSlYFVU42930996;     RLPfSlYFVU42930996 = RLPfSlYFVU60847782;     RLPfSlYFVU60847782 = RLPfSlYFVU99262619;     RLPfSlYFVU99262619 = RLPfSlYFVU72769701;     RLPfSlYFVU72769701 = RLPfSlYFVU16345066;     RLPfSlYFVU16345066 = RLPfSlYFVU75033440;     RLPfSlYFVU75033440 = RLPfSlYFVU87412021;     RLPfSlYFVU87412021 = RLPfSlYFVU49861930;     RLPfSlYFVU49861930 = RLPfSlYFVU46921022;     RLPfSlYFVU46921022 = RLPfSlYFVU78171197;     RLPfSlYFVU78171197 = RLPfSlYFVU82953544;     RLPfSlYFVU82953544 = RLPfSlYFVU65007340;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void QDHqqEYnxo81064546() {     double XPpJALWzdw77520766 = -194332433;    double XPpJALWzdw97310364 = -965739169;    double XPpJALWzdw25523152 = -819475971;    double XPpJALWzdw21849013 = -911822775;    double XPpJALWzdw89689571 = -455981827;    double XPpJALWzdw62340320 = -528053015;    double XPpJALWzdw27953046 = -745196087;    double XPpJALWzdw26545933 = -680564165;    double XPpJALWzdw78636302 = -350463411;    double XPpJALWzdw6947346 = -876653710;    double XPpJALWzdw89166606 = -735950899;    double XPpJALWzdw35952937 = -54809750;    double XPpJALWzdw83842150 = -622003010;    double XPpJALWzdw80254060 = -683246785;    double XPpJALWzdw27422579 = -708583063;    double XPpJALWzdw75996144 = -706850859;    double XPpJALWzdw4380685 = -212933131;    double XPpJALWzdw27470654 = 63394465;    double XPpJALWzdw68166063 = -712446445;    double XPpJALWzdw64375445 = -602212583;    double XPpJALWzdw49524082 = -47313569;    double XPpJALWzdw880055 = -229527792;    double XPpJALWzdw68427071 = -953063016;    double XPpJALWzdw33197785 = 48660918;    double XPpJALWzdw24046227 = -462346216;    double XPpJALWzdw22298043 = -147707219;    double XPpJALWzdw75787377 = -810454774;    double XPpJALWzdw19063037 = -802211675;    double XPpJALWzdw29952938 = -390863350;    double XPpJALWzdw78651991 = -876557895;    double XPpJALWzdw41489393 = -35044300;    double XPpJALWzdw46480 = -951855729;    double XPpJALWzdw54156256 = -87608340;    double XPpJALWzdw5557809 = -209690156;    double XPpJALWzdw80780980 = 53409867;    double XPpJALWzdw53714128 = -584370953;    double XPpJALWzdw95420174 = -521590791;    double XPpJALWzdw42476044 = -677454002;    double XPpJALWzdw38440713 = -444889697;    double XPpJALWzdw99671473 = -659673122;    double XPpJALWzdw81021722 = -932553855;    double XPpJALWzdw29196916 = -191800875;    double XPpJALWzdw48243807 = -420245310;    double XPpJALWzdw25470164 = -309155516;    double XPpJALWzdw75235781 = -118506143;    double XPpJALWzdw55039187 = -572051076;    double XPpJALWzdw81398962 = -243954107;    double XPpJALWzdw15884355 = -825347386;    double XPpJALWzdw81724562 = -509875914;    double XPpJALWzdw30032167 = -48845309;    double XPpJALWzdw4808913 = -993618022;    double XPpJALWzdw12193933 = -604751339;    double XPpJALWzdw97534210 = -756699102;    double XPpJALWzdw42402504 = -737653096;    double XPpJALWzdw31540465 = 94585767;    double XPpJALWzdw76640711 = -964804642;    double XPpJALWzdw28883294 = 87323847;    double XPpJALWzdw92325366 = -768136889;    double XPpJALWzdw97802786 = -349476560;    double XPpJALWzdw67391529 = -208274608;    double XPpJALWzdw86552943 = -717598242;    double XPpJALWzdw8890009 = -942984412;    double XPpJALWzdw96592994 = -189700816;    double XPpJALWzdw99984310 = -473905516;    double XPpJALWzdw65457952 = -741609410;    double XPpJALWzdw89120126 = -784095171;    double XPpJALWzdw81796680 = -967201411;    double XPpJALWzdw78284341 = -312312855;    double XPpJALWzdw99473079 = -636656653;    double XPpJALWzdw73708451 = -24212110;    double XPpJALWzdw80575969 = -85260069;    double XPpJALWzdw61904641 = -535479129;    double XPpJALWzdw89029940 = -491715838;    double XPpJALWzdw68494589 = 47226677;    double XPpJALWzdw83353723 = -669658728;    double XPpJALWzdw20327166 = -855512694;    double XPpJALWzdw52636248 = -809282482;    double XPpJALWzdw42956908 = -543907500;    double XPpJALWzdw57962004 = -832832939;    double XPpJALWzdw69007039 = -890295140;    double XPpJALWzdw40899080 = -903753113;    double XPpJALWzdw59903022 = -985107388;    double XPpJALWzdw37338475 = -192335761;    double XPpJALWzdw99920770 = -242018041;    double XPpJALWzdw73843078 = -882939874;    double XPpJALWzdw29295460 = -430292962;    double XPpJALWzdw2512270 = -95156627;    double XPpJALWzdw11753753 = -349955244;    double XPpJALWzdw74017343 = -204275923;    double XPpJALWzdw4140269 = 18214508;    double XPpJALWzdw24830834 = -571694800;    double XPpJALWzdw3094808 = -753453902;    double XPpJALWzdw44673257 = -227977443;    double XPpJALWzdw71049184 = -136615089;    double XPpJALWzdw13118531 = -942074881;    double XPpJALWzdw72131713 = -989569443;    double XPpJALWzdw32603921 = 97899940;    double XPpJALWzdw48259496 = -946339794;    double XPpJALWzdw60012211 = -567546107;    double XPpJALWzdw86115654 = -194332433;     XPpJALWzdw77520766 = XPpJALWzdw97310364;     XPpJALWzdw97310364 = XPpJALWzdw25523152;     XPpJALWzdw25523152 = XPpJALWzdw21849013;     XPpJALWzdw21849013 = XPpJALWzdw89689571;     XPpJALWzdw89689571 = XPpJALWzdw62340320;     XPpJALWzdw62340320 = XPpJALWzdw27953046;     XPpJALWzdw27953046 = XPpJALWzdw26545933;     XPpJALWzdw26545933 = XPpJALWzdw78636302;     XPpJALWzdw78636302 = XPpJALWzdw6947346;     XPpJALWzdw6947346 = XPpJALWzdw89166606;     XPpJALWzdw89166606 = XPpJALWzdw35952937;     XPpJALWzdw35952937 = XPpJALWzdw83842150;     XPpJALWzdw83842150 = XPpJALWzdw80254060;     XPpJALWzdw80254060 = XPpJALWzdw27422579;     XPpJALWzdw27422579 = XPpJALWzdw75996144;     XPpJALWzdw75996144 = XPpJALWzdw4380685;     XPpJALWzdw4380685 = XPpJALWzdw27470654;     XPpJALWzdw27470654 = XPpJALWzdw68166063;     XPpJALWzdw68166063 = XPpJALWzdw64375445;     XPpJALWzdw64375445 = XPpJALWzdw49524082;     XPpJALWzdw49524082 = XPpJALWzdw880055;     XPpJALWzdw880055 = XPpJALWzdw68427071;     XPpJALWzdw68427071 = XPpJALWzdw33197785;     XPpJALWzdw33197785 = XPpJALWzdw24046227;     XPpJALWzdw24046227 = XPpJALWzdw22298043;     XPpJALWzdw22298043 = XPpJALWzdw75787377;     XPpJALWzdw75787377 = XPpJALWzdw19063037;     XPpJALWzdw19063037 = XPpJALWzdw29952938;     XPpJALWzdw29952938 = XPpJALWzdw78651991;     XPpJALWzdw78651991 = XPpJALWzdw41489393;     XPpJALWzdw41489393 = XPpJALWzdw46480;     XPpJALWzdw46480 = XPpJALWzdw54156256;     XPpJALWzdw54156256 = XPpJALWzdw5557809;     XPpJALWzdw5557809 = XPpJALWzdw80780980;     XPpJALWzdw80780980 = XPpJALWzdw53714128;     XPpJALWzdw53714128 = XPpJALWzdw95420174;     XPpJALWzdw95420174 = XPpJALWzdw42476044;     XPpJALWzdw42476044 = XPpJALWzdw38440713;     XPpJALWzdw38440713 = XPpJALWzdw99671473;     XPpJALWzdw99671473 = XPpJALWzdw81021722;     XPpJALWzdw81021722 = XPpJALWzdw29196916;     XPpJALWzdw29196916 = XPpJALWzdw48243807;     XPpJALWzdw48243807 = XPpJALWzdw25470164;     XPpJALWzdw25470164 = XPpJALWzdw75235781;     XPpJALWzdw75235781 = XPpJALWzdw55039187;     XPpJALWzdw55039187 = XPpJALWzdw81398962;     XPpJALWzdw81398962 = XPpJALWzdw15884355;     XPpJALWzdw15884355 = XPpJALWzdw81724562;     XPpJALWzdw81724562 = XPpJALWzdw30032167;     XPpJALWzdw30032167 = XPpJALWzdw4808913;     XPpJALWzdw4808913 = XPpJALWzdw12193933;     XPpJALWzdw12193933 = XPpJALWzdw97534210;     XPpJALWzdw97534210 = XPpJALWzdw42402504;     XPpJALWzdw42402504 = XPpJALWzdw31540465;     XPpJALWzdw31540465 = XPpJALWzdw76640711;     XPpJALWzdw76640711 = XPpJALWzdw28883294;     XPpJALWzdw28883294 = XPpJALWzdw92325366;     XPpJALWzdw92325366 = XPpJALWzdw97802786;     XPpJALWzdw97802786 = XPpJALWzdw67391529;     XPpJALWzdw67391529 = XPpJALWzdw86552943;     XPpJALWzdw86552943 = XPpJALWzdw8890009;     XPpJALWzdw8890009 = XPpJALWzdw96592994;     XPpJALWzdw96592994 = XPpJALWzdw99984310;     XPpJALWzdw99984310 = XPpJALWzdw65457952;     XPpJALWzdw65457952 = XPpJALWzdw89120126;     XPpJALWzdw89120126 = XPpJALWzdw81796680;     XPpJALWzdw81796680 = XPpJALWzdw78284341;     XPpJALWzdw78284341 = XPpJALWzdw99473079;     XPpJALWzdw99473079 = XPpJALWzdw73708451;     XPpJALWzdw73708451 = XPpJALWzdw80575969;     XPpJALWzdw80575969 = XPpJALWzdw61904641;     XPpJALWzdw61904641 = XPpJALWzdw89029940;     XPpJALWzdw89029940 = XPpJALWzdw68494589;     XPpJALWzdw68494589 = XPpJALWzdw83353723;     XPpJALWzdw83353723 = XPpJALWzdw20327166;     XPpJALWzdw20327166 = XPpJALWzdw52636248;     XPpJALWzdw52636248 = XPpJALWzdw42956908;     XPpJALWzdw42956908 = XPpJALWzdw57962004;     XPpJALWzdw57962004 = XPpJALWzdw69007039;     XPpJALWzdw69007039 = XPpJALWzdw40899080;     XPpJALWzdw40899080 = XPpJALWzdw59903022;     XPpJALWzdw59903022 = XPpJALWzdw37338475;     XPpJALWzdw37338475 = XPpJALWzdw99920770;     XPpJALWzdw99920770 = XPpJALWzdw73843078;     XPpJALWzdw73843078 = XPpJALWzdw29295460;     XPpJALWzdw29295460 = XPpJALWzdw2512270;     XPpJALWzdw2512270 = XPpJALWzdw11753753;     XPpJALWzdw11753753 = XPpJALWzdw74017343;     XPpJALWzdw74017343 = XPpJALWzdw4140269;     XPpJALWzdw4140269 = XPpJALWzdw24830834;     XPpJALWzdw24830834 = XPpJALWzdw3094808;     XPpJALWzdw3094808 = XPpJALWzdw44673257;     XPpJALWzdw44673257 = XPpJALWzdw71049184;     XPpJALWzdw71049184 = XPpJALWzdw13118531;     XPpJALWzdw13118531 = XPpJALWzdw72131713;     XPpJALWzdw72131713 = XPpJALWzdw32603921;     XPpJALWzdw32603921 = XPpJALWzdw48259496;     XPpJALWzdw48259496 = XPpJALWzdw60012211;     XPpJALWzdw60012211 = XPpJALWzdw86115654;     XPpJALWzdw86115654 = XPpJALWzdw77520766;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void JVDeDvnQhY48025949() {     double AsBYRGvRkP67640603 = -125612776;    double AsBYRGvRkP19007746 = -283260464;    double AsBYRGvRkP22329063 = -913399046;    double AsBYRGvRkP80427448 = -918535427;    double AsBYRGvRkP11586410 = -865660590;    double AsBYRGvRkP77932157 = -120118935;    double AsBYRGvRkP91163819 = -87278027;    double AsBYRGvRkP48638547 = -21189221;    double AsBYRGvRkP85188153 = -72002119;    double AsBYRGvRkP7842530 = -83335107;    double AsBYRGvRkP85639030 = -103843128;    double AsBYRGvRkP84994121 = -369876248;    double AsBYRGvRkP54041196 = -955897345;    double AsBYRGvRkP72517134 = 73439279;    double AsBYRGvRkP70669059 = -56416858;    double AsBYRGvRkP74740433 = -740026380;    double AsBYRGvRkP4195625 = -293892942;    double AsBYRGvRkP71826899 = -776526449;    double AsBYRGvRkP49508724 = -696839147;    double AsBYRGvRkP3773456 = -762115344;    double AsBYRGvRkP17115908 = -562205035;    double AsBYRGvRkP77257902 = 27383689;    double AsBYRGvRkP38543886 = -718480779;    double AsBYRGvRkP84768990 = -280283980;    double AsBYRGvRkP99374103 = -432551013;    double AsBYRGvRkP57663085 = 68213118;    double AsBYRGvRkP67976293 = -870783480;    double AsBYRGvRkP77636937 = -371068722;    double AsBYRGvRkP3840383 = -699132713;    double AsBYRGvRkP2530942 = -426391660;    double AsBYRGvRkP78365474 = -748804079;    double AsBYRGvRkP84137251 = -744501910;    double AsBYRGvRkP48577721 = -589777715;    double AsBYRGvRkP29679291 = -77823046;    double AsBYRGvRkP98735552 = -956239718;    double AsBYRGvRkP49773324 = -967166109;    double AsBYRGvRkP7595111 = -137060073;    double AsBYRGvRkP36751007 = -538775925;    double AsBYRGvRkP84287326 = -865033159;    double AsBYRGvRkP16056509 = -173812582;    double AsBYRGvRkP82577063 = -726359029;    double AsBYRGvRkP69539039 = -200086170;    double AsBYRGvRkP68344008 = -354801160;    double AsBYRGvRkP15364003 = -830203149;    double AsBYRGvRkP51218251 = -704275501;    double AsBYRGvRkP15906149 = -867719653;    double AsBYRGvRkP89520045 = -273717229;    double AsBYRGvRkP81654395 = -360764996;    double AsBYRGvRkP28301606 = -509579122;    double AsBYRGvRkP79357996 = -92866533;    double AsBYRGvRkP47433806 = -946555074;    double AsBYRGvRkP70514297 = -951323920;    double AsBYRGvRkP22435014 = -360606105;    double AsBYRGvRkP5559837 = -293128229;    double AsBYRGvRkP30910041 = -890913782;    double AsBYRGvRkP90382701 = -52996465;    double AsBYRGvRkP80463860 = -564779686;    double AsBYRGvRkP37560072 = -533115066;    double AsBYRGvRkP81053344 = -385984415;    double AsBYRGvRkP53923325 = -833873708;    double AsBYRGvRkP9955864 = -249335455;    double AsBYRGvRkP13526883 = -716209306;    double AsBYRGvRkP44798164 = -322056509;    double AsBYRGvRkP82657212 = -645610459;    double AsBYRGvRkP29477055 = -334531028;    double AsBYRGvRkP1501780 = -359341219;    double AsBYRGvRkP36416401 = -780098533;    double AsBYRGvRkP24361906 = -778074299;    double AsBYRGvRkP73781581 = 29678996;    double AsBYRGvRkP20895736 = -89250749;    double AsBYRGvRkP67145322 = -502966307;    double AsBYRGvRkP67444618 = -755117018;    double AsBYRGvRkP87539572 = -911493291;    double AsBYRGvRkP33452216 = -423026566;    double AsBYRGvRkP21196393 = 64243685;    double AsBYRGvRkP47576869 = -262118865;    double AsBYRGvRkP8913895 = -617815151;    double AsBYRGvRkP23179883 = -888277631;    double AsBYRGvRkP33550740 = -576008480;    double AsBYRGvRkP83467955 = -564831361;    double AsBYRGvRkP68143039 = -658069654;    double AsBYRGvRkP86321898 = -410018485;    double AsBYRGvRkP49335332 = -861489600;    double AsBYRGvRkP24482387 = -506266181;    double AsBYRGvRkP55097135 = -479836586;    double AsBYRGvRkP7851177 = -797480159;    double AsBYRGvRkP61702237 = -283895805;    double AsBYRGvRkP43017884 = -196649487;    double AsBYRGvRkP98769249 = -186909264;    double AsBYRGvRkP8352852 = -803243254;    double AsBYRGvRkP69309463 = -302386424;    double AsBYRGvRkP70035039 = -603945008;    double AsBYRGvRkP55697662 = -52791511;    double AsBYRGvRkP30364002 = 68840549;    double AsBYRGvRkP6100645 = -924477127;    double AsBYRGvRkP69050180 = 89850276;    double AsBYRGvRkP24740876 = -878029662;    double AsBYRGvRkP85686795 = -709190701;    double AsBYRGvRkP85886948 = -395672121;    double AsBYRGvRkP49716471 = -125612776;     AsBYRGvRkP67640603 = AsBYRGvRkP19007746;     AsBYRGvRkP19007746 = AsBYRGvRkP22329063;     AsBYRGvRkP22329063 = AsBYRGvRkP80427448;     AsBYRGvRkP80427448 = AsBYRGvRkP11586410;     AsBYRGvRkP11586410 = AsBYRGvRkP77932157;     AsBYRGvRkP77932157 = AsBYRGvRkP91163819;     AsBYRGvRkP91163819 = AsBYRGvRkP48638547;     AsBYRGvRkP48638547 = AsBYRGvRkP85188153;     AsBYRGvRkP85188153 = AsBYRGvRkP7842530;     AsBYRGvRkP7842530 = AsBYRGvRkP85639030;     AsBYRGvRkP85639030 = AsBYRGvRkP84994121;     AsBYRGvRkP84994121 = AsBYRGvRkP54041196;     AsBYRGvRkP54041196 = AsBYRGvRkP72517134;     AsBYRGvRkP72517134 = AsBYRGvRkP70669059;     AsBYRGvRkP70669059 = AsBYRGvRkP74740433;     AsBYRGvRkP74740433 = AsBYRGvRkP4195625;     AsBYRGvRkP4195625 = AsBYRGvRkP71826899;     AsBYRGvRkP71826899 = AsBYRGvRkP49508724;     AsBYRGvRkP49508724 = AsBYRGvRkP3773456;     AsBYRGvRkP3773456 = AsBYRGvRkP17115908;     AsBYRGvRkP17115908 = AsBYRGvRkP77257902;     AsBYRGvRkP77257902 = AsBYRGvRkP38543886;     AsBYRGvRkP38543886 = AsBYRGvRkP84768990;     AsBYRGvRkP84768990 = AsBYRGvRkP99374103;     AsBYRGvRkP99374103 = AsBYRGvRkP57663085;     AsBYRGvRkP57663085 = AsBYRGvRkP67976293;     AsBYRGvRkP67976293 = AsBYRGvRkP77636937;     AsBYRGvRkP77636937 = AsBYRGvRkP3840383;     AsBYRGvRkP3840383 = AsBYRGvRkP2530942;     AsBYRGvRkP2530942 = AsBYRGvRkP78365474;     AsBYRGvRkP78365474 = AsBYRGvRkP84137251;     AsBYRGvRkP84137251 = AsBYRGvRkP48577721;     AsBYRGvRkP48577721 = AsBYRGvRkP29679291;     AsBYRGvRkP29679291 = AsBYRGvRkP98735552;     AsBYRGvRkP98735552 = AsBYRGvRkP49773324;     AsBYRGvRkP49773324 = AsBYRGvRkP7595111;     AsBYRGvRkP7595111 = AsBYRGvRkP36751007;     AsBYRGvRkP36751007 = AsBYRGvRkP84287326;     AsBYRGvRkP84287326 = AsBYRGvRkP16056509;     AsBYRGvRkP16056509 = AsBYRGvRkP82577063;     AsBYRGvRkP82577063 = AsBYRGvRkP69539039;     AsBYRGvRkP69539039 = AsBYRGvRkP68344008;     AsBYRGvRkP68344008 = AsBYRGvRkP15364003;     AsBYRGvRkP15364003 = AsBYRGvRkP51218251;     AsBYRGvRkP51218251 = AsBYRGvRkP15906149;     AsBYRGvRkP15906149 = AsBYRGvRkP89520045;     AsBYRGvRkP89520045 = AsBYRGvRkP81654395;     AsBYRGvRkP81654395 = AsBYRGvRkP28301606;     AsBYRGvRkP28301606 = AsBYRGvRkP79357996;     AsBYRGvRkP79357996 = AsBYRGvRkP47433806;     AsBYRGvRkP47433806 = AsBYRGvRkP70514297;     AsBYRGvRkP70514297 = AsBYRGvRkP22435014;     AsBYRGvRkP22435014 = AsBYRGvRkP5559837;     AsBYRGvRkP5559837 = AsBYRGvRkP30910041;     AsBYRGvRkP30910041 = AsBYRGvRkP90382701;     AsBYRGvRkP90382701 = AsBYRGvRkP80463860;     AsBYRGvRkP80463860 = AsBYRGvRkP37560072;     AsBYRGvRkP37560072 = AsBYRGvRkP81053344;     AsBYRGvRkP81053344 = AsBYRGvRkP53923325;     AsBYRGvRkP53923325 = AsBYRGvRkP9955864;     AsBYRGvRkP9955864 = AsBYRGvRkP13526883;     AsBYRGvRkP13526883 = AsBYRGvRkP44798164;     AsBYRGvRkP44798164 = AsBYRGvRkP82657212;     AsBYRGvRkP82657212 = AsBYRGvRkP29477055;     AsBYRGvRkP29477055 = AsBYRGvRkP1501780;     AsBYRGvRkP1501780 = AsBYRGvRkP36416401;     AsBYRGvRkP36416401 = AsBYRGvRkP24361906;     AsBYRGvRkP24361906 = AsBYRGvRkP73781581;     AsBYRGvRkP73781581 = AsBYRGvRkP20895736;     AsBYRGvRkP20895736 = AsBYRGvRkP67145322;     AsBYRGvRkP67145322 = AsBYRGvRkP67444618;     AsBYRGvRkP67444618 = AsBYRGvRkP87539572;     AsBYRGvRkP87539572 = AsBYRGvRkP33452216;     AsBYRGvRkP33452216 = AsBYRGvRkP21196393;     AsBYRGvRkP21196393 = AsBYRGvRkP47576869;     AsBYRGvRkP47576869 = AsBYRGvRkP8913895;     AsBYRGvRkP8913895 = AsBYRGvRkP23179883;     AsBYRGvRkP23179883 = AsBYRGvRkP33550740;     AsBYRGvRkP33550740 = AsBYRGvRkP83467955;     AsBYRGvRkP83467955 = AsBYRGvRkP68143039;     AsBYRGvRkP68143039 = AsBYRGvRkP86321898;     AsBYRGvRkP86321898 = AsBYRGvRkP49335332;     AsBYRGvRkP49335332 = AsBYRGvRkP24482387;     AsBYRGvRkP24482387 = AsBYRGvRkP55097135;     AsBYRGvRkP55097135 = AsBYRGvRkP7851177;     AsBYRGvRkP7851177 = AsBYRGvRkP61702237;     AsBYRGvRkP61702237 = AsBYRGvRkP43017884;     AsBYRGvRkP43017884 = AsBYRGvRkP98769249;     AsBYRGvRkP98769249 = AsBYRGvRkP8352852;     AsBYRGvRkP8352852 = AsBYRGvRkP69309463;     AsBYRGvRkP69309463 = AsBYRGvRkP70035039;     AsBYRGvRkP70035039 = AsBYRGvRkP55697662;     AsBYRGvRkP55697662 = AsBYRGvRkP30364002;     AsBYRGvRkP30364002 = AsBYRGvRkP6100645;     AsBYRGvRkP6100645 = AsBYRGvRkP69050180;     AsBYRGvRkP69050180 = AsBYRGvRkP24740876;     AsBYRGvRkP24740876 = AsBYRGvRkP85686795;     AsBYRGvRkP85686795 = AsBYRGvRkP85886948;     AsBYRGvRkP85886948 = AsBYRGvRkP49716471;     AsBYRGvRkP49716471 = AsBYRGvRkP67640603;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void cYJtdksQDo75950403() {     double EHGNhPOzGF38565012 = -85642434;    double EHGNhPOzGF6979587 = -1768552;    double EHGNhPOzGF95788804 = -287604582;    double EHGNhPOzGF39794297 = -740296739;    double EHGNhPOzGF15316846 = -608502959;    double EHGNhPOzGF15572469 = -945381914;    double EHGNhPOzGF43931297 = -72193028;    double EHGNhPOzGF3687618 = -705480185;    double EHGNhPOzGF5483200 = -235018863;    double EHGNhPOzGF41008440 = -875902232;    double EHGNhPOzGF41681895 = -848386515;    double EHGNhPOzGF71838741 = -362639428;    double EHGNhPOzGF98657573 = -938263880;    double EHGNhPOzGF24954641 = -634134488;    double EHGNhPOzGF41885983 = -554036;    double EHGNhPOzGF67258488 = -778853944;    double EHGNhPOzGF60014737 = -428227478;    double EHGNhPOzGF48346750 = -526310964;    double EHGNhPOzGF30181114 = -711983723;    double EHGNhPOzGF19374130 = 96786976;    double EHGNhPOzGF63620210 = -166288039;    double EHGNhPOzGF5804686 = -735897016;    double EHGNhPOzGF42716249 = -634787305;    double EHGNhPOzGF28704773 = -321012666;    double EHGNhPOzGF86967316 = -53827556;    double EHGNhPOzGF62485351 = -500734568;    double EHGNhPOzGF18595860 = -182552049;    double EHGNhPOzGF23690263 = -101646082;    double EHGNhPOzGF84498364 = -101252003;    double EHGNhPOzGF37507893 = -819974628;    double EHGNhPOzGF82119259 = -365671818;    double EHGNhPOzGF75059431 = -998622977;    double EHGNhPOzGF87561319 = -683025454;    double EHGNhPOzGF88893306 = -330528941;    double EHGNhPOzGF47994422 = -599126295;    double EHGNhPOzGF10066823 = -216530975;    double EHGNhPOzGF94477376 = -866798776;    double EHGNhPOzGF69264133 = -508824408;    double EHGNhPOzGF9754853 = -554104295;    double EHGNhPOzGF72726680 = -594905988;    double EHGNhPOzGF61624611 = -176812959;    double EHGNhPOzGF62571632 = -295384670;    double EHGNhPOzGF86827404 = -2032478;    double EHGNhPOzGF36394781 = -281903525;    double EHGNhPOzGF67233116 = -984038422;    double EHGNhPOzGF67400837 = -33522246;    double EHGNhPOzGF512581 = -760409328;    double EHGNhPOzGF41723438 = -85056826;    double EHGNhPOzGF55428548 = -273289021;    double EHGNhPOzGF8371752 = -387895278;    double EHGNhPOzGF95715884 = -16553182;    double EHGNhPOzGF22937985 = -996482865;    double EHGNhPOzGF84228963 = 19356795;    double EHGNhPOzGF27293259 = -144225377;    double EHGNhPOzGF12330193 = -726994796;    double EHGNhPOzGF32760326 = -349745419;    double EHGNhPOzGF64263338 = -366981247;    double EHGNhPOzGF67084031 = -966591916;    double EHGNhPOzGF52826980 = -586469184;    double EHGNhPOzGF52831494 = -7768392;    double EHGNhPOzGF96976609 = -662829865;    double EHGNhPOzGF20241034 = -970546947;    double EHGNhPOzGF19189253 = -504228182;    double EHGNhPOzGF67975307 = -415044236;    double EHGNhPOzGF58889181 = -410230414;    double EHGNhPOzGF66622464 = -849763538;    double EHGNhPOzGF84277422 = -679613975;    double EHGNhPOzGF9764268 = -507734940;    double EHGNhPOzGF76960218 = 64991806;    double EHGNhPOzGF31819161 = -784023061;    double EHGNhPOzGF72781111 = -912055168;    double EHGNhPOzGF90750603 = -919403070;    double EHGNhPOzGF38591897 = -972206669;    double EHGNhPOzGF57454434 = -17077736;    double EHGNhPOzGF57749519 = -726400065;    double EHGNhPOzGF1048578 = -870903369;    double EHGNhPOzGF18977282 = -633864538;    double EHGNhPOzGF6321468 = -252883781;    double EHGNhPOzGF61471657 = -336974245;    double EHGNhPOzGF19566480 = 79694690;    double EHGNhPOzGF61972770 = -740325240;    double EHGNhPOzGF76872422 = 2504777;    double EHGNhPOzGF68261714 = -828357061;    double EHGNhPOzGF76126613 = -713356725;    double EHGNhPOzGF41792009 = -703421446;    double EHGNhPOzGF59181274 = -369188954;    double EHGNhPOzGF90830467 = -917979772;    double EHGNhPOzGF60268060 = -438800077;    double EHGNhPOzGF76563113 = -603534145;    double EHGNhPOzGF15234097 = -149380877;    double EHGNhPOzGF45803484 = -849549728;    double EHGNhPOzGF27393345 = -900206860;    double EHGNhPOzGF16437154 = -922355225;    double EHGNhPOzGF56923358 = -446335903;    double EHGNhPOzGF75750071 = -932076123;    double EHGNhPOzGF41383577 = -206266013;    double EHGNhPOzGF43382379 = -791156488;    double EHGNhPOzGF18852098 = -586988243;    double EHGNhPOzGF77505600 = -871673112;    double EHGNhPOzGF610652 = -85642434;     EHGNhPOzGF38565012 = EHGNhPOzGF6979587;     EHGNhPOzGF6979587 = EHGNhPOzGF95788804;     EHGNhPOzGF95788804 = EHGNhPOzGF39794297;     EHGNhPOzGF39794297 = EHGNhPOzGF15316846;     EHGNhPOzGF15316846 = EHGNhPOzGF15572469;     EHGNhPOzGF15572469 = EHGNhPOzGF43931297;     EHGNhPOzGF43931297 = EHGNhPOzGF3687618;     EHGNhPOzGF3687618 = EHGNhPOzGF5483200;     EHGNhPOzGF5483200 = EHGNhPOzGF41008440;     EHGNhPOzGF41008440 = EHGNhPOzGF41681895;     EHGNhPOzGF41681895 = EHGNhPOzGF71838741;     EHGNhPOzGF71838741 = EHGNhPOzGF98657573;     EHGNhPOzGF98657573 = EHGNhPOzGF24954641;     EHGNhPOzGF24954641 = EHGNhPOzGF41885983;     EHGNhPOzGF41885983 = EHGNhPOzGF67258488;     EHGNhPOzGF67258488 = EHGNhPOzGF60014737;     EHGNhPOzGF60014737 = EHGNhPOzGF48346750;     EHGNhPOzGF48346750 = EHGNhPOzGF30181114;     EHGNhPOzGF30181114 = EHGNhPOzGF19374130;     EHGNhPOzGF19374130 = EHGNhPOzGF63620210;     EHGNhPOzGF63620210 = EHGNhPOzGF5804686;     EHGNhPOzGF5804686 = EHGNhPOzGF42716249;     EHGNhPOzGF42716249 = EHGNhPOzGF28704773;     EHGNhPOzGF28704773 = EHGNhPOzGF86967316;     EHGNhPOzGF86967316 = EHGNhPOzGF62485351;     EHGNhPOzGF62485351 = EHGNhPOzGF18595860;     EHGNhPOzGF18595860 = EHGNhPOzGF23690263;     EHGNhPOzGF23690263 = EHGNhPOzGF84498364;     EHGNhPOzGF84498364 = EHGNhPOzGF37507893;     EHGNhPOzGF37507893 = EHGNhPOzGF82119259;     EHGNhPOzGF82119259 = EHGNhPOzGF75059431;     EHGNhPOzGF75059431 = EHGNhPOzGF87561319;     EHGNhPOzGF87561319 = EHGNhPOzGF88893306;     EHGNhPOzGF88893306 = EHGNhPOzGF47994422;     EHGNhPOzGF47994422 = EHGNhPOzGF10066823;     EHGNhPOzGF10066823 = EHGNhPOzGF94477376;     EHGNhPOzGF94477376 = EHGNhPOzGF69264133;     EHGNhPOzGF69264133 = EHGNhPOzGF9754853;     EHGNhPOzGF9754853 = EHGNhPOzGF72726680;     EHGNhPOzGF72726680 = EHGNhPOzGF61624611;     EHGNhPOzGF61624611 = EHGNhPOzGF62571632;     EHGNhPOzGF62571632 = EHGNhPOzGF86827404;     EHGNhPOzGF86827404 = EHGNhPOzGF36394781;     EHGNhPOzGF36394781 = EHGNhPOzGF67233116;     EHGNhPOzGF67233116 = EHGNhPOzGF67400837;     EHGNhPOzGF67400837 = EHGNhPOzGF512581;     EHGNhPOzGF512581 = EHGNhPOzGF41723438;     EHGNhPOzGF41723438 = EHGNhPOzGF55428548;     EHGNhPOzGF55428548 = EHGNhPOzGF8371752;     EHGNhPOzGF8371752 = EHGNhPOzGF95715884;     EHGNhPOzGF95715884 = EHGNhPOzGF22937985;     EHGNhPOzGF22937985 = EHGNhPOzGF84228963;     EHGNhPOzGF84228963 = EHGNhPOzGF27293259;     EHGNhPOzGF27293259 = EHGNhPOzGF12330193;     EHGNhPOzGF12330193 = EHGNhPOzGF32760326;     EHGNhPOzGF32760326 = EHGNhPOzGF64263338;     EHGNhPOzGF64263338 = EHGNhPOzGF67084031;     EHGNhPOzGF67084031 = EHGNhPOzGF52826980;     EHGNhPOzGF52826980 = EHGNhPOzGF52831494;     EHGNhPOzGF52831494 = EHGNhPOzGF96976609;     EHGNhPOzGF96976609 = EHGNhPOzGF20241034;     EHGNhPOzGF20241034 = EHGNhPOzGF19189253;     EHGNhPOzGF19189253 = EHGNhPOzGF67975307;     EHGNhPOzGF67975307 = EHGNhPOzGF58889181;     EHGNhPOzGF58889181 = EHGNhPOzGF66622464;     EHGNhPOzGF66622464 = EHGNhPOzGF84277422;     EHGNhPOzGF84277422 = EHGNhPOzGF9764268;     EHGNhPOzGF9764268 = EHGNhPOzGF76960218;     EHGNhPOzGF76960218 = EHGNhPOzGF31819161;     EHGNhPOzGF31819161 = EHGNhPOzGF72781111;     EHGNhPOzGF72781111 = EHGNhPOzGF90750603;     EHGNhPOzGF90750603 = EHGNhPOzGF38591897;     EHGNhPOzGF38591897 = EHGNhPOzGF57454434;     EHGNhPOzGF57454434 = EHGNhPOzGF57749519;     EHGNhPOzGF57749519 = EHGNhPOzGF1048578;     EHGNhPOzGF1048578 = EHGNhPOzGF18977282;     EHGNhPOzGF18977282 = EHGNhPOzGF6321468;     EHGNhPOzGF6321468 = EHGNhPOzGF61471657;     EHGNhPOzGF61471657 = EHGNhPOzGF19566480;     EHGNhPOzGF19566480 = EHGNhPOzGF61972770;     EHGNhPOzGF61972770 = EHGNhPOzGF76872422;     EHGNhPOzGF76872422 = EHGNhPOzGF68261714;     EHGNhPOzGF68261714 = EHGNhPOzGF76126613;     EHGNhPOzGF76126613 = EHGNhPOzGF41792009;     EHGNhPOzGF41792009 = EHGNhPOzGF59181274;     EHGNhPOzGF59181274 = EHGNhPOzGF90830467;     EHGNhPOzGF90830467 = EHGNhPOzGF60268060;     EHGNhPOzGF60268060 = EHGNhPOzGF76563113;     EHGNhPOzGF76563113 = EHGNhPOzGF15234097;     EHGNhPOzGF15234097 = EHGNhPOzGF45803484;     EHGNhPOzGF45803484 = EHGNhPOzGF27393345;     EHGNhPOzGF27393345 = EHGNhPOzGF16437154;     EHGNhPOzGF16437154 = EHGNhPOzGF56923358;     EHGNhPOzGF56923358 = EHGNhPOzGF75750071;     EHGNhPOzGF75750071 = EHGNhPOzGF41383577;     EHGNhPOzGF41383577 = EHGNhPOzGF43382379;     EHGNhPOzGF43382379 = EHGNhPOzGF18852098;     EHGNhPOzGF18852098 = EHGNhPOzGF77505600;     EHGNhPOzGF77505600 = EHGNhPOzGF610652;     EHGNhPOzGF610652 = EHGNhPOzGF38565012;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ozboiKVmnl72898035() {     double xDeYmukiEQ51078437 = -878802598;    double xDeYmukiEQ74452152 = -325237777;    double xDeYmukiEQ20050782 = -664052887;    double xDeYmukiEQ28299561 = -932876093;    double xDeYmukiEQ26547835 = -40883402;    double xDeYmukiEQ11241991 = -698623400;    double xDeYmukiEQ30750474 = -631725807;    double xDeYmukiEQ32200040 = -812524568;    double xDeYmukiEQ26458019 = -127107540;    double xDeYmukiEQ37027695 = -188518090;    double xDeYmukiEQ55375574 = -253431073;    double xDeYmukiEQ62491198 = -92972857;    double xDeYmukiEQ4011887 = -769217060;    double xDeYmukiEQ5988247 = -60004130;    double xDeYmukiEQ76695632 = -113152692;    double xDeYmukiEQ35694142 = -860901356;    double xDeYmukiEQ53800269 = -966852539;    double xDeYmukiEQ75678878 = -320902947;    double xDeYmukiEQ32377136 = -213496285;    double xDeYmukiEQ65214661 = -803725788;    double xDeYmukiEQ52425719 = -962200440;    double xDeYmukiEQ67701486 = -473759965;    double xDeYmukiEQ79247990 = -117327818;    double xDeYmukiEQ63125657 = -233029899;    double xDeYmukiEQ69392751 = -318897625;    double xDeYmukiEQ69579310 = -820502526;    double xDeYmukiEQ87652615 = -799667536;    double xDeYmukiEQ52772088 = 50009406;    double xDeYmukiEQ52599923 = -107708170;    double xDeYmukiEQ94454152 = -614672886;    double xDeYmukiEQ29873467 = -773654514;    double xDeYmukiEQ31967536 = 48481249;    double xDeYmukiEQ77569030 = -412594109;    double xDeYmukiEQ72120638 = -646106949;    double xDeYmukiEQ59820321 = -313218378;    double xDeYmukiEQ4990698 = -834955761;    double xDeYmukiEQ88150657 = -115562632;    double xDeYmukiEQ47247518 = -242509124;    double xDeYmukiEQ68596001 = -662612372;    double xDeYmukiEQ37424536 = -635837790;    double xDeYmukiEQ4081655 = -385851901;    double xDeYmukiEQ5724487 = -967786574;    double xDeYmukiEQ52194438 = -364988657;    double xDeYmukiEQ66500841 = -143350363;    double xDeYmukiEQ27180800 = -905691856;    double xDeYmukiEQ95940113 = -699375247;    double xDeYmukiEQ93233268 = -887302081;    double xDeYmukiEQ76708571 = -968248070;    double xDeYmukiEQ77807107 = -658945066;    double xDeYmukiEQ34735903 = -986911874;    double xDeYmukiEQ33950624 = -746011504;    double xDeYmukiEQ40562349 = -291728980;    double xDeYmukiEQ11995822 = -464407430;    double xDeYmukiEQ40486867 = -543461468;    double xDeYmukiEQ20472316 = -996299183;    double xDeYmukiEQ83376951 = -305042634;    double xDeYmukiEQ95204161 = -107909959;    double xDeYmukiEQ56925124 = -331022989;    double xDeYmukiEQ58906809 = -513978469;    double xDeYmukiEQ56968525 = -220380877;    double xDeYmukiEQ23589375 = -898955864;    double xDeYmukiEQ77978386 = -581735214;    double xDeYmukiEQ79600116 = -604816398;    double xDeYmukiEQ32003866 = -512434655;    double xDeYmukiEQ7154228 = -414863576;    double xDeYmukiEQ23408038 = -201912323;    double xDeYmukiEQ84922167 = -680378749;    double xDeYmukiEQ31891248 = -23110112;    double xDeYmukiEQ46167925 = -746785752;    double xDeYmukiEQ71704934 = -278196931;    double xDeYmukiEQ47543485 = -645338725;    double xDeYmukiEQ6552752 = -624343416;    double xDeYmukiEQ7082878 = -658290575;    double xDeYmukiEQ94952600 = -577658495;    double xDeYmukiEQ61133007 = -317873887;    double xDeYmukiEQ46701233 = -994413866;    double xDeYmukiEQ15507049 = -8771308;    double xDeYmukiEQ12747149 = -973977456;    double xDeYmukiEQ35944857 = -327338044;    double xDeYmukiEQ73452638 = -619522378;    double xDeYmukiEQ76346042 = -933200446;    double xDeYmukiEQ10944044 = -831419466;    double xDeYmukiEQ74964980 = -291045528;    double xDeYmukiEQ17864021 = -120796296;    double xDeYmukiEQ60503528 = -868661382;    double xDeYmukiEQ89311117 = -381925534;    double xDeYmukiEQ19971715 = -487111322;    double xDeYmukiEQ37082164 = -869132641;    double xDeYmukiEQ51648323 = -649807766;    double xDeYmukiEQ76443370 = 91824255;    double xDeYmukiEQ9786536 = -627045803;    double xDeYmukiEQ31225533 = -784539643;    double xDeYmukiEQ88340709 = -728530656;    double xDeYmukiEQ11627477 = -342231496;    double xDeYmukiEQ13835161 = -736881926;    double xDeYmukiEQ26103269 = -804116688;    double xDeYmukiEQ26124371 = -262970176;    double xDeYmukiEQ20190572 = -852554003;    double xDeYmukiEQ59346613 = -728486787;    double xDeYmukiEQ3772762 = -878802598;     xDeYmukiEQ51078437 = xDeYmukiEQ74452152;     xDeYmukiEQ74452152 = xDeYmukiEQ20050782;     xDeYmukiEQ20050782 = xDeYmukiEQ28299561;     xDeYmukiEQ28299561 = xDeYmukiEQ26547835;     xDeYmukiEQ26547835 = xDeYmukiEQ11241991;     xDeYmukiEQ11241991 = xDeYmukiEQ30750474;     xDeYmukiEQ30750474 = xDeYmukiEQ32200040;     xDeYmukiEQ32200040 = xDeYmukiEQ26458019;     xDeYmukiEQ26458019 = xDeYmukiEQ37027695;     xDeYmukiEQ37027695 = xDeYmukiEQ55375574;     xDeYmukiEQ55375574 = xDeYmukiEQ62491198;     xDeYmukiEQ62491198 = xDeYmukiEQ4011887;     xDeYmukiEQ4011887 = xDeYmukiEQ5988247;     xDeYmukiEQ5988247 = xDeYmukiEQ76695632;     xDeYmukiEQ76695632 = xDeYmukiEQ35694142;     xDeYmukiEQ35694142 = xDeYmukiEQ53800269;     xDeYmukiEQ53800269 = xDeYmukiEQ75678878;     xDeYmukiEQ75678878 = xDeYmukiEQ32377136;     xDeYmukiEQ32377136 = xDeYmukiEQ65214661;     xDeYmukiEQ65214661 = xDeYmukiEQ52425719;     xDeYmukiEQ52425719 = xDeYmukiEQ67701486;     xDeYmukiEQ67701486 = xDeYmukiEQ79247990;     xDeYmukiEQ79247990 = xDeYmukiEQ63125657;     xDeYmukiEQ63125657 = xDeYmukiEQ69392751;     xDeYmukiEQ69392751 = xDeYmukiEQ69579310;     xDeYmukiEQ69579310 = xDeYmukiEQ87652615;     xDeYmukiEQ87652615 = xDeYmukiEQ52772088;     xDeYmukiEQ52772088 = xDeYmukiEQ52599923;     xDeYmukiEQ52599923 = xDeYmukiEQ94454152;     xDeYmukiEQ94454152 = xDeYmukiEQ29873467;     xDeYmukiEQ29873467 = xDeYmukiEQ31967536;     xDeYmukiEQ31967536 = xDeYmukiEQ77569030;     xDeYmukiEQ77569030 = xDeYmukiEQ72120638;     xDeYmukiEQ72120638 = xDeYmukiEQ59820321;     xDeYmukiEQ59820321 = xDeYmukiEQ4990698;     xDeYmukiEQ4990698 = xDeYmukiEQ88150657;     xDeYmukiEQ88150657 = xDeYmukiEQ47247518;     xDeYmukiEQ47247518 = xDeYmukiEQ68596001;     xDeYmukiEQ68596001 = xDeYmukiEQ37424536;     xDeYmukiEQ37424536 = xDeYmukiEQ4081655;     xDeYmukiEQ4081655 = xDeYmukiEQ5724487;     xDeYmukiEQ5724487 = xDeYmukiEQ52194438;     xDeYmukiEQ52194438 = xDeYmukiEQ66500841;     xDeYmukiEQ66500841 = xDeYmukiEQ27180800;     xDeYmukiEQ27180800 = xDeYmukiEQ95940113;     xDeYmukiEQ95940113 = xDeYmukiEQ93233268;     xDeYmukiEQ93233268 = xDeYmukiEQ76708571;     xDeYmukiEQ76708571 = xDeYmukiEQ77807107;     xDeYmukiEQ77807107 = xDeYmukiEQ34735903;     xDeYmukiEQ34735903 = xDeYmukiEQ33950624;     xDeYmukiEQ33950624 = xDeYmukiEQ40562349;     xDeYmukiEQ40562349 = xDeYmukiEQ11995822;     xDeYmukiEQ11995822 = xDeYmukiEQ40486867;     xDeYmukiEQ40486867 = xDeYmukiEQ20472316;     xDeYmukiEQ20472316 = xDeYmukiEQ83376951;     xDeYmukiEQ83376951 = xDeYmukiEQ95204161;     xDeYmukiEQ95204161 = xDeYmukiEQ56925124;     xDeYmukiEQ56925124 = xDeYmukiEQ58906809;     xDeYmukiEQ58906809 = xDeYmukiEQ56968525;     xDeYmukiEQ56968525 = xDeYmukiEQ23589375;     xDeYmukiEQ23589375 = xDeYmukiEQ77978386;     xDeYmukiEQ77978386 = xDeYmukiEQ79600116;     xDeYmukiEQ79600116 = xDeYmukiEQ32003866;     xDeYmukiEQ32003866 = xDeYmukiEQ7154228;     xDeYmukiEQ7154228 = xDeYmukiEQ23408038;     xDeYmukiEQ23408038 = xDeYmukiEQ84922167;     xDeYmukiEQ84922167 = xDeYmukiEQ31891248;     xDeYmukiEQ31891248 = xDeYmukiEQ46167925;     xDeYmukiEQ46167925 = xDeYmukiEQ71704934;     xDeYmukiEQ71704934 = xDeYmukiEQ47543485;     xDeYmukiEQ47543485 = xDeYmukiEQ6552752;     xDeYmukiEQ6552752 = xDeYmukiEQ7082878;     xDeYmukiEQ7082878 = xDeYmukiEQ94952600;     xDeYmukiEQ94952600 = xDeYmukiEQ61133007;     xDeYmukiEQ61133007 = xDeYmukiEQ46701233;     xDeYmukiEQ46701233 = xDeYmukiEQ15507049;     xDeYmukiEQ15507049 = xDeYmukiEQ12747149;     xDeYmukiEQ12747149 = xDeYmukiEQ35944857;     xDeYmukiEQ35944857 = xDeYmukiEQ73452638;     xDeYmukiEQ73452638 = xDeYmukiEQ76346042;     xDeYmukiEQ76346042 = xDeYmukiEQ10944044;     xDeYmukiEQ10944044 = xDeYmukiEQ74964980;     xDeYmukiEQ74964980 = xDeYmukiEQ17864021;     xDeYmukiEQ17864021 = xDeYmukiEQ60503528;     xDeYmukiEQ60503528 = xDeYmukiEQ89311117;     xDeYmukiEQ89311117 = xDeYmukiEQ19971715;     xDeYmukiEQ19971715 = xDeYmukiEQ37082164;     xDeYmukiEQ37082164 = xDeYmukiEQ51648323;     xDeYmukiEQ51648323 = xDeYmukiEQ76443370;     xDeYmukiEQ76443370 = xDeYmukiEQ9786536;     xDeYmukiEQ9786536 = xDeYmukiEQ31225533;     xDeYmukiEQ31225533 = xDeYmukiEQ88340709;     xDeYmukiEQ88340709 = xDeYmukiEQ11627477;     xDeYmukiEQ11627477 = xDeYmukiEQ13835161;     xDeYmukiEQ13835161 = xDeYmukiEQ26103269;     xDeYmukiEQ26103269 = xDeYmukiEQ26124371;     xDeYmukiEQ26124371 = xDeYmukiEQ20190572;     xDeYmukiEQ20190572 = xDeYmukiEQ59346613;     xDeYmukiEQ59346613 = xDeYmukiEQ3772762;     xDeYmukiEQ3772762 = xDeYmukiEQ51078437;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void oJBIXPQxDo822489() {     double udDyuJzSyf22002846 = -838832256;    double udDyuJzSyf62423992 = -43745865;    double udDyuJzSyf93510523 = -38258423;    double udDyuJzSyf87666409 = -754637405;    double udDyuJzSyf30278272 = -883725772;    double udDyuJzSyf48882302 = -423886379;    double udDyuJzSyf83517950 = -616640809;    double udDyuJzSyf87249111 = -396815532;    double udDyuJzSyf46753065 = -290124284;    double udDyuJzSyf70193605 = -981085215;    double udDyuJzSyf11418439 = -997974460;    double udDyuJzSyf49335818 = -85736037;    double udDyuJzSyf48628263 = -751583596;    double udDyuJzSyf58425752 = -767577897;    double udDyuJzSyf47912556 = -57289870;    double udDyuJzSyf28212197 = -899728920;    double udDyuJzSyf9619382 = -1187075;    double udDyuJzSyf52198729 = -70687462;    double udDyuJzSyf13049527 = -228640861;    double udDyuJzSyf80815335 = 55176532;    double udDyuJzSyf98930021 = -566283443;    double udDyuJzSyf96248269 = -137040669;    double udDyuJzSyf83420352 = -33634345;    double udDyuJzSyf7061440 = -273758585;    double udDyuJzSyf56985964 = 59825832;    double udDyuJzSyf74401577 = -289450212;    double udDyuJzSyf38272182 = -111436104;    double udDyuJzSyf98825412 = -780567954;    double udDyuJzSyf33257906 = -609827460;    double udDyuJzSyf29431105 = 91744147;    double udDyuJzSyf33627252 = -390522254;    double udDyuJzSyf22889715 = -205639818;    double udDyuJzSyf16552630 = -505841847;    double udDyuJzSyf31334654 = -898812843;    double udDyuJzSyf9079191 = 43895045;    double udDyuJzSyf65284196 = -84320627;    double udDyuJzSyf75032922 = -845301334;    double udDyuJzSyf79760645 = -212557607;    double udDyuJzSyf94063527 = -351683509;    double udDyuJzSyf94094707 = 43068804;    double udDyuJzSyf83129202 = -936305831;    double udDyuJzSyf98757079 = 36914926;    double udDyuJzSyf70677834 = -12219975;    double udDyuJzSyf87531619 = -695050739;    double udDyuJzSyf43195665 = -85454777;    double udDyuJzSyf47434802 = -965177841;    double udDyuJzSyf4225804 = -273994180;    double udDyuJzSyf36777614 = -692539901;    double udDyuJzSyf4934050 = -422654965;    double udDyuJzSyf63749658 = -181940620;    double udDyuJzSyf82232702 = -916009612;    double udDyuJzSyf92986036 = -336887925;    double udDyuJzSyf73789770 = -84444530;    double udDyuJzSyf62220289 = -394558616;    double udDyuJzSyf1892468 = -832380197;    double udDyuJzSyf25754576 = -601791587;    double udDyuJzSyf79003639 = 89888479;    double udDyuJzSyf86449084 = -764499839;    double udDyuJzSyf30680445 = -714463238;    double udDyuJzSyf55876694 = -494275561;    double udDyuJzSyf10610121 = -212450275;    double udDyuJzSyf84692537 = -836072855;    double udDyuJzSyf53991205 = -786988072;    double udDyuJzSyf17321961 = -281868431;    double udDyuJzSyf36566354 = -490562962;    double udDyuJzSyf88528723 = -692334642;    double udDyuJzSyf32783189 = -579894190;    double udDyuJzSyf17293610 = -852770753;    double udDyuJzSyf49346562 = -711472943;    double udDyuJzSyf82628359 = -972969243;    double udDyuJzSyf53179274 = 45572414;    double udDyuJzSyf29858736 = -788629468;    double udDyuJzSyf58135201 = -719003954;    double udDyuJzSyf18954819 = -171709665;    double udDyuJzSyf97686132 = -8517638;    double udDyuJzSyf172942 = -503198370;    double udDyuJzSyf25570436 = -24820695;    double udDyuJzSyf95888733 = -338583606;    double udDyuJzSyf63865774 = -88303808;    double udDyuJzSyf9551163 = 25003672;    double udDyuJzSyf70175773 = 84543967;    double udDyuJzSyf1494568 = -418896204;    double udDyuJzSyf93891362 = -257912990;    double udDyuJzSyf69508247 = -327886841;    double udDyuJzSyf47198402 = 7753758;    double udDyuJzSyf40641215 = 46365671;    double udDyuJzSyf49099945 = -21195289;    double udDyuJzSyf54332340 = -11283232;    double udDyuJzSyf29442186 = 33567353;    double udDyuJzSyf83324615 = -354313368;    double udDyuJzSyf86280556 = -74209107;    double udDyuJzSyf88583838 = 19198505;    double udDyuJzSyf49080200 = -498094370;    double udDyuJzSyf38186833 = -857407949;    double udDyuJzSyf83484587 = -744480922;    double udDyuJzSyf98436664 = -232977;    double udDyuJzSyf44765874 = -176097002;    double udDyuJzSyf53355874 = -730351544;    double udDyuJzSyf50965265 = -104487778;    double udDyuJzSyf54666942 = -838832256;     udDyuJzSyf22002846 = udDyuJzSyf62423992;     udDyuJzSyf62423992 = udDyuJzSyf93510523;     udDyuJzSyf93510523 = udDyuJzSyf87666409;     udDyuJzSyf87666409 = udDyuJzSyf30278272;     udDyuJzSyf30278272 = udDyuJzSyf48882302;     udDyuJzSyf48882302 = udDyuJzSyf83517950;     udDyuJzSyf83517950 = udDyuJzSyf87249111;     udDyuJzSyf87249111 = udDyuJzSyf46753065;     udDyuJzSyf46753065 = udDyuJzSyf70193605;     udDyuJzSyf70193605 = udDyuJzSyf11418439;     udDyuJzSyf11418439 = udDyuJzSyf49335818;     udDyuJzSyf49335818 = udDyuJzSyf48628263;     udDyuJzSyf48628263 = udDyuJzSyf58425752;     udDyuJzSyf58425752 = udDyuJzSyf47912556;     udDyuJzSyf47912556 = udDyuJzSyf28212197;     udDyuJzSyf28212197 = udDyuJzSyf9619382;     udDyuJzSyf9619382 = udDyuJzSyf52198729;     udDyuJzSyf52198729 = udDyuJzSyf13049527;     udDyuJzSyf13049527 = udDyuJzSyf80815335;     udDyuJzSyf80815335 = udDyuJzSyf98930021;     udDyuJzSyf98930021 = udDyuJzSyf96248269;     udDyuJzSyf96248269 = udDyuJzSyf83420352;     udDyuJzSyf83420352 = udDyuJzSyf7061440;     udDyuJzSyf7061440 = udDyuJzSyf56985964;     udDyuJzSyf56985964 = udDyuJzSyf74401577;     udDyuJzSyf74401577 = udDyuJzSyf38272182;     udDyuJzSyf38272182 = udDyuJzSyf98825412;     udDyuJzSyf98825412 = udDyuJzSyf33257906;     udDyuJzSyf33257906 = udDyuJzSyf29431105;     udDyuJzSyf29431105 = udDyuJzSyf33627252;     udDyuJzSyf33627252 = udDyuJzSyf22889715;     udDyuJzSyf22889715 = udDyuJzSyf16552630;     udDyuJzSyf16552630 = udDyuJzSyf31334654;     udDyuJzSyf31334654 = udDyuJzSyf9079191;     udDyuJzSyf9079191 = udDyuJzSyf65284196;     udDyuJzSyf65284196 = udDyuJzSyf75032922;     udDyuJzSyf75032922 = udDyuJzSyf79760645;     udDyuJzSyf79760645 = udDyuJzSyf94063527;     udDyuJzSyf94063527 = udDyuJzSyf94094707;     udDyuJzSyf94094707 = udDyuJzSyf83129202;     udDyuJzSyf83129202 = udDyuJzSyf98757079;     udDyuJzSyf98757079 = udDyuJzSyf70677834;     udDyuJzSyf70677834 = udDyuJzSyf87531619;     udDyuJzSyf87531619 = udDyuJzSyf43195665;     udDyuJzSyf43195665 = udDyuJzSyf47434802;     udDyuJzSyf47434802 = udDyuJzSyf4225804;     udDyuJzSyf4225804 = udDyuJzSyf36777614;     udDyuJzSyf36777614 = udDyuJzSyf4934050;     udDyuJzSyf4934050 = udDyuJzSyf63749658;     udDyuJzSyf63749658 = udDyuJzSyf82232702;     udDyuJzSyf82232702 = udDyuJzSyf92986036;     udDyuJzSyf92986036 = udDyuJzSyf73789770;     udDyuJzSyf73789770 = udDyuJzSyf62220289;     udDyuJzSyf62220289 = udDyuJzSyf1892468;     udDyuJzSyf1892468 = udDyuJzSyf25754576;     udDyuJzSyf25754576 = udDyuJzSyf79003639;     udDyuJzSyf79003639 = udDyuJzSyf86449084;     udDyuJzSyf86449084 = udDyuJzSyf30680445;     udDyuJzSyf30680445 = udDyuJzSyf55876694;     udDyuJzSyf55876694 = udDyuJzSyf10610121;     udDyuJzSyf10610121 = udDyuJzSyf84692537;     udDyuJzSyf84692537 = udDyuJzSyf53991205;     udDyuJzSyf53991205 = udDyuJzSyf17321961;     udDyuJzSyf17321961 = udDyuJzSyf36566354;     udDyuJzSyf36566354 = udDyuJzSyf88528723;     udDyuJzSyf88528723 = udDyuJzSyf32783189;     udDyuJzSyf32783189 = udDyuJzSyf17293610;     udDyuJzSyf17293610 = udDyuJzSyf49346562;     udDyuJzSyf49346562 = udDyuJzSyf82628359;     udDyuJzSyf82628359 = udDyuJzSyf53179274;     udDyuJzSyf53179274 = udDyuJzSyf29858736;     udDyuJzSyf29858736 = udDyuJzSyf58135201;     udDyuJzSyf58135201 = udDyuJzSyf18954819;     udDyuJzSyf18954819 = udDyuJzSyf97686132;     udDyuJzSyf97686132 = udDyuJzSyf172942;     udDyuJzSyf172942 = udDyuJzSyf25570436;     udDyuJzSyf25570436 = udDyuJzSyf95888733;     udDyuJzSyf95888733 = udDyuJzSyf63865774;     udDyuJzSyf63865774 = udDyuJzSyf9551163;     udDyuJzSyf9551163 = udDyuJzSyf70175773;     udDyuJzSyf70175773 = udDyuJzSyf1494568;     udDyuJzSyf1494568 = udDyuJzSyf93891362;     udDyuJzSyf93891362 = udDyuJzSyf69508247;     udDyuJzSyf69508247 = udDyuJzSyf47198402;     udDyuJzSyf47198402 = udDyuJzSyf40641215;     udDyuJzSyf40641215 = udDyuJzSyf49099945;     udDyuJzSyf49099945 = udDyuJzSyf54332340;     udDyuJzSyf54332340 = udDyuJzSyf29442186;     udDyuJzSyf29442186 = udDyuJzSyf83324615;     udDyuJzSyf83324615 = udDyuJzSyf86280556;     udDyuJzSyf86280556 = udDyuJzSyf88583838;     udDyuJzSyf88583838 = udDyuJzSyf49080200;     udDyuJzSyf49080200 = udDyuJzSyf38186833;     udDyuJzSyf38186833 = udDyuJzSyf83484587;     udDyuJzSyf83484587 = udDyuJzSyf98436664;     udDyuJzSyf98436664 = udDyuJzSyf44765874;     udDyuJzSyf44765874 = udDyuJzSyf53355874;     udDyuJzSyf53355874 = udDyuJzSyf50965265;     udDyuJzSyf50965265 = udDyuJzSyf54666942;     udDyuJzSyf54666942 = udDyuJzSyf22002846;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void YnDsYEwfzE79998882() {     double RlqCUUbOKD86251722 = -648247253;    double RlqCUUbOKD45570540 = -444114845;    double RlqCUUbOKD66572860 = -212066113;    double RlqCUUbOKD51247074 = -763485901;    double RlqCUUbOKD18233194 = -23756869;    double RlqCUUbOKD69435178 = -336155091;    double RlqCUUbOKD44113971 = -999385184;    double RlqCUUbOKD34553011 = -627639469;    double RlqCUUbOKD19025960 = 26938329;    double RlqCUUbOKD35009984 = -835347056;    double RlqCUUbOKD20404816 = -364741489;    double RlqCUUbOKD50344652 = -851050966;    double RlqCUUbOKD41163370 = -191717037;    double RlqCUUbOKD98227077 = -920128085;    double RlqCUUbOKD36737462 = -747616236;    double RlqCUUbOKD8375124 = -693460288;    double RlqCUUbOKD59375439 = -907906826;    double RlqCUUbOKD65213780 = -327855940;    double RlqCUUbOKD74819397 = -258067605;    double RlqCUUbOKD46385441 = -555604380;    double RlqCUUbOKD33482884 = -345004012;    double RlqCUUbOKD60564524 = -48384626;    double RlqCUUbOKD21301609 = -224412305;    double RlqCUUbOKD34132574 = -57367768;    double RlqCUUbOKD10827258 = -150898674;    double RlqCUUbOKD39200951 = -954827949;    double RlqCUUbOKD46157572 = -90960309;    double RlqCUUbOKD26036463 = 87756848;    double RlqCUUbOKD76109537 = -666182529;    double RlqCUUbOKD56362447 = -164854907;    double RlqCUUbOKD18600268 = -31387416;    double RlqCUUbOKD92827550 = -582309784;    double RlqCUUbOKD4653651 = -817792388;    double RlqCUUbOKD8585699 = -874988017;    double RlqCUUbOKD19110218 = -987006681;    double RlqCUUbOKD41907682 = -938914242;    double RlqCUUbOKD18354430 = -738419934;    double RlqCUUbOKD58577642 = -29754688;    double RlqCUUbOKD22679519 = -905508981;    double RlqCUUbOKD83874980 = -616478665;    double RlqCUUbOKD94270333 = -164503560;    double RlqCUUbOKD1935334 = -624006599;    double RlqCUUbOKD92628099 = -275952686;    double RlqCUUbOKD10573499 = -481886255;    double RlqCUUbOKD75172557 = -607605294;    double RlqCUUbOKD77668524 = -954922782;    double RlqCUUbOKD83112685 = -863227386;    double RlqCUUbOKD50747213 = -880135841;    double RlqCUUbOKD16331062 = -772263739;    double RlqCUUbOKD78770069 = -639968596;    double RlqCUUbOKD61147334 = -253972089;    double RlqCUUbOKD42590154 = -93733600;    double RlqCUUbOKD24795375 = -312321943;    double RlqCUUbOKD45473137 = -408594019;    double RlqCUUbOKD46515999 = -31447785;    double RlqCUUbOKD25687198 = -499862627;    double RlqCUUbOKD24268932 = -119702541;    double RlqCUUbOKD32440287 = -54698345;    double RlqCUUbOKD40419817 = -512587228;    double RlqCUUbOKD79032243 = -68928920;    double RlqCUUbOKD23277606 = -145194783;    double RlqCUUbOKD18077508 = -987142032;    double RlqCUUbOKD58443474 = -961456940;    double RlqCUUbOKD62663513 = -808206765;    double RlqCUUbOKD16409716 = -703959640;    double RlqCUUbOKD27577266 = -782431706;    double RlqCUUbOKD45691002 = 66741421;    double RlqCUUbOKD32577672 = -316729020;    double RlqCUUbOKD79116859 = -933121404;    double RlqCUUbOKD94829780 = -808701994;    double RlqCUUbOKD90020693 = -955040355;    double RlqCUUbOKD797797 = -778152139;    double RlqCUUbOKD42534261 = -422346959;    double RlqCUUbOKD90944417 = -641588941;    double RlqCUUbOKD52115107 = -291100820;    double RlqCUUbOKD31547550 = -720997413;    double RlqCUUbOKD67936424 = -772431941;    double RlqCUUbOKD10728111 = -742526051;    double RlqCUUbOKD58960017 = -449762475;    double RlqCUUbOKD33158734 = -195975892;    double RlqCUUbOKD56088265 = 8399436;    double RlqCUUbOKD95410359 = -210824468;    double RlqCUUbOKD9705401 = -139979414;    double RlqCUUbOKD97339468 = 73786066;    double RlqCUUbOKD95215113 = -910882818;    double RlqCUUbOKD76010114 = -937653816;    double RlqCUUbOKD68032176 = -169987842;    double RlqCUUbOKD59180513 = -309198370;    double RlqCUUbOKD62069699 = -743540233;    double RlqCUUbOKD93423019 = -387144054;    double RlqCUUbOKD17638751 = -719211702;    double RlqCUUbOKD85914143 = -583721589;    double RlqCUUbOKD18157825 = -517167460;    double RlqCUUbOKD43647275 = -736580062;    double RlqCUUbOKD60597374 = -371283883;    double RlqCUUbOKD76192826 = -177361529;    double RlqCUUbOKD43491860 = -662549660;    double RlqCUUbOKD29964587 = -467745921;    double RlqCUUbOKD94163782 = -777926615;    double RlqCUUbOKD47595291 = -648247253;     RlqCUUbOKD86251722 = RlqCUUbOKD45570540;     RlqCUUbOKD45570540 = RlqCUUbOKD66572860;     RlqCUUbOKD66572860 = RlqCUUbOKD51247074;     RlqCUUbOKD51247074 = RlqCUUbOKD18233194;     RlqCUUbOKD18233194 = RlqCUUbOKD69435178;     RlqCUUbOKD69435178 = RlqCUUbOKD44113971;     RlqCUUbOKD44113971 = RlqCUUbOKD34553011;     RlqCUUbOKD34553011 = RlqCUUbOKD19025960;     RlqCUUbOKD19025960 = RlqCUUbOKD35009984;     RlqCUUbOKD35009984 = RlqCUUbOKD20404816;     RlqCUUbOKD20404816 = RlqCUUbOKD50344652;     RlqCUUbOKD50344652 = RlqCUUbOKD41163370;     RlqCUUbOKD41163370 = RlqCUUbOKD98227077;     RlqCUUbOKD98227077 = RlqCUUbOKD36737462;     RlqCUUbOKD36737462 = RlqCUUbOKD8375124;     RlqCUUbOKD8375124 = RlqCUUbOKD59375439;     RlqCUUbOKD59375439 = RlqCUUbOKD65213780;     RlqCUUbOKD65213780 = RlqCUUbOKD74819397;     RlqCUUbOKD74819397 = RlqCUUbOKD46385441;     RlqCUUbOKD46385441 = RlqCUUbOKD33482884;     RlqCUUbOKD33482884 = RlqCUUbOKD60564524;     RlqCUUbOKD60564524 = RlqCUUbOKD21301609;     RlqCUUbOKD21301609 = RlqCUUbOKD34132574;     RlqCUUbOKD34132574 = RlqCUUbOKD10827258;     RlqCUUbOKD10827258 = RlqCUUbOKD39200951;     RlqCUUbOKD39200951 = RlqCUUbOKD46157572;     RlqCUUbOKD46157572 = RlqCUUbOKD26036463;     RlqCUUbOKD26036463 = RlqCUUbOKD76109537;     RlqCUUbOKD76109537 = RlqCUUbOKD56362447;     RlqCUUbOKD56362447 = RlqCUUbOKD18600268;     RlqCUUbOKD18600268 = RlqCUUbOKD92827550;     RlqCUUbOKD92827550 = RlqCUUbOKD4653651;     RlqCUUbOKD4653651 = RlqCUUbOKD8585699;     RlqCUUbOKD8585699 = RlqCUUbOKD19110218;     RlqCUUbOKD19110218 = RlqCUUbOKD41907682;     RlqCUUbOKD41907682 = RlqCUUbOKD18354430;     RlqCUUbOKD18354430 = RlqCUUbOKD58577642;     RlqCUUbOKD58577642 = RlqCUUbOKD22679519;     RlqCUUbOKD22679519 = RlqCUUbOKD83874980;     RlqCUUbOKD83874980 = RlqCUUbOKD94270333;     RlqCUUbOKD94270333 = RlqCUUbOKD1935334;     RlqCUUbOKD1935334 = RlqCUUbOKD92628099;     RlqCUUbOKD92628099 = RlqCUUbOKD10573499;     RlqCUUbOKD10573499 = RlqCUUbOKD75172557;     RlqCUUbOKD75172557 = RlqCUUbOKD77668524;     RlqCUUbOKD77668524 = RlqCUUbOKD83112685;     RlqCUUbOKD83112685 = RlqCUUbOKD50747213;     RlqCUUbOKD50747213 = RlqCUUbOKD16331062;     RlqCUUbOKD16331062 = RlqCUUbOKD78770069;     RlqCUUbOKD78770069 = RlqCUUbOKD61147334;     RlqCUUbOKD61147334 = RlqCUUbOKD42590154;     RlqCUUbOKD42590154 = RlqCUUbOKD24795375;     RlqCUUbOKD24795375 = RlqCUUbOKD45473137;     RlqCUUbOKD45473137 = RlqCUUbOKD46515999;     RlqCUUbOKD46515999 = RlqCUUbOKD25687198;     RlqCUUbOKD25687198 = RlqCUUbOKD24268932;     RlqCUUbOKD24268932 = RlqCUUbOKD32440287;     RlqCUUbOKD32440287 = RlqCUUbOKD40419817;     RlqCUUbOKD40419817 = RlqCUUbOKD79032243;     RlqCUUbOKD79032243 = RlqCUUbOKD23277606;     RlqCUUbOKD23277606 = RlqCUUbOKD18077508;     RlqCUUbOKD18077508 = RlqCUUbOKD58443474;     RlqCUUbOKD58443474 = RlqCUUbOKD62663513;     RlqCUUbOKD62663513 = RlqCUUbOKD16409716;     RlqCUUbOKD16409716 = RlqCUUbOKD27577266;     RlqCUUbOKD27577266 = RlqCUUbOKD45691002;     RlqCUUbOKD45691002 = RlqCUUbOKD32577672;     RlqCUUbOKD32577672 = RlqCUUbOKD79116859;     RlqCUUbOKD79116859 = RlqCUUbOKD94829780;     RlqCUUbOKD94829780 = RlqCUUbOKD90020693;     RlqCUUbOKD90020693 = RlqCUUbOKD797797;     RlqCUUbOKD797797 = RlqCUUbOKD42534261;     RlqCUUbOKD42534261 = RlqCUUbOKD90944417;     RlqCUUbOKD90944417 = RlqCUUbOKD52115107;     RlqCUUbOKD52115107 = RlqCUUbOKD31547550;     RlqCUUbOKD31547550 = RlqCUUbOKD67936424;     RlqCUUbOKD67936424 = RlqCUUbOKD10728111;     RlqCUUbOKD10728111 = RlqCUUbOKD58960017;     RlqCUUbOKD58960017 = RlqCUUbOKD33158734;     RlqCUUbOKD33158734 = RlqCUUbOKD56088265;     RlqCUUbOKD56088265 = RlqCUUbOKD95410359;     RlqCUUbOKD95410359 = RlqCUUbOKD9705401;     RlqCUUbOKD9705401 = RlqCUUbOKD97339468;     RlqCUUbOKD97339468 = RlqCUUbOKD95215113;     RlqCUUbOKD95215113 = RlqCUUbOKD76010114;     RlqCUUbOKD76010114 = RlqCUUbOKD68032176;     RlqCUUbOKD68032176 = RlqCUUbOKD59180513;     RlqCUUbOKD59180513 = RlqCUUbOKD62069699;     RlqCUUbOKD62069699 = RlqCUUbOKD93423019;     RlqCUUbOKD93423019 = RlqCUUbOKD17638751;     RlqCUUbOKD17638751 = RlqCUUbOKD85914143;     RlqCUUbOKD85914143 = RlqCUUbOKD18157825;     RlqCUUbOKD18157825 = RlqCUUbOKD43647275;     RlqCUUbOKD43647275 = RlqCUUbOKD60597374;     RlqCUUbOKD60597374 = RlqCUUbOKD76192826;     RlqCUUbOKD76192826 = RlqCUUbOKD43491860;     RlqCUUbOKD43491860 = RlqCUUbOKD29964587;     RlqCUUbOKD29964587 = RlqCUUbOKD94163782;     RlqCUUbOKD94163782 = RlqCUUbOKD47595291;     RlqCUUbOKD47595291 = RlqCUUbOKD86251722;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void jIvhanheUH55680805() {     double tJkOWKOoPs27834269 = -253901900;    double tJkOWKOoPs63643581 = 8328893;    double tJkOWKOoPs18688309 = -71437495;    double tJkOWKOoPs65465349 = -954844773;    double tJkOWKOoPs34573850 = -181650264;    double tJkOWKOoPs62269820 = -63566410;    double tJkOWKOoPs46713007 = -178539428;    double tJkOWKOoPs77230412 = -854570205;    double tJkOWKOoPs2445897 = -515779674;    double tJkOWKOoPs94502842 = -92202660;    double tJkOWKOoPs98376235 = -84714733;    double tJkOWKOoPs68444166 = -324099577;    double tJkOWKOoPs33754220 = -61962156;    double tJkOWKOoPs80667397 = 16422989;    double tJkOWKOoPs45502296 = -878790565;    double tJkOWKOoPs58857271 = 30524213;    double tJkOWKOoPs53194618 = -31811922;    double tJkOWKOoPs39026592 = -769735029;    double tJkOWKOoPs16771300 = -362417857;    double tJkOWKOoPs48699061 = -727043914;    double tJkOWKOoPs55453515 = -147299783;    double tJkOWKOoPs72210806 = -632958753;    double tJkOWKOoPs90539383 = -249604134;    double tJkOWKOoPs68267784 = -909576838;    double tJkOWKOoPs34102170 = -121386052;    double tJkOWKOoPs58046720 = -613854151;    double tJkOWKOoPs34816343 = -597106940;    double tJkOWKOoPs44468488 = -638977292;    double tJkOWKOoPs76231560 = -816589721;    double tJkOWKOoPs54421625 = -341401571;    double tJkOWKOoPs96013370 = -109595607;    double tJkOWKOoPs43537333 = -772906253;    double tJkOWKOoPs41130186 = -656057520;    double tJkOWKOoPs32881852 = -814541863;    double tJkOWKOoPs64035286 = -217526112;    double tJkOWKOoPs19366250 = -187739909;    double tJkOWKOoPs37086813 = -457098465;    double tJkOWKOoPs73965578 = -888653599;    double tJkOWKOoPs91366737 = -937627338;    double tJkOWKOoPs63775557 = -945748748;    double tJkOWKOoPs45535498 = 88967530;    double tJkOWKOoPs37753257 = -294902086;    double tJkOWKOoPs99795095 = -450807801;    double tJkOWKOoPs78880678 = -448597159;    double tJkOWKOoPs3123429 = -722755208;    double tJkOWKOoPs95141079 = -67017860;    double tJkOWKOoPs92538631 = -984708662;    double tJkOWKOoPs1046885 = -447796610;    double tJkOWKOoPs30241068 = -957973746;    double tJkOWKOoPs96165888 = -530981334;    double tJkOWKOoPs64359366 = -391987311;    double tJkOWKOoPs22338089 = -825966519;    double tJkOWKOoPs66216632 = 31896924;    double tJkOWKOoPs47183593 = -388652812;    double tJkOWKOoPs227290 = -221570435;    double tJkOWKOoPs55623462 = -620943148;    double tJkOWKOoPs73104198 = -742066974;    double tJkOWKOoPs50420524 = -161860658;    double tJkOWKOoPs31363180 = -733458722;    double tJkOWKOoPs76527129 = -567796113;    double tJkOWKOoPs27453478 = -466459470;    double tJkOWKOoPs2244519 = -539562137;    double tJkOWKOoPs998852 = 62019516;    double tJkOWKOoPs48024272 = -74378103;    double tJkOWKOoPs98489471 = -982607054;    double tJkOWKOoPs54838902 = -311808481;    double tJkOWKOoPs27313980 = -668042058;    double tJkOWKOoPs872368 = -247420293;    double tJkOWKOoPs16632111 = -766050899;    double tJkOWKOoPs26136047 = -591050656;    double tJkOWKOoPs21770458 = -512377323;    double tJkOWKOoPs79229040 = -143158323;    double tJkOWKOoPs47659854 = -832107692;    double tJkOWKOoPs52995742 = -416669110;    double tJkOWKOoPs3163564 = -716011444;    double tJkOWKOoPs17700259 = -852397697;    double tJkOWKOoPs72415710 = -82150952;    double tJkOWKOoPs11658705 = -801006975;    double tJkOWKOoPs65144356 = -86821631;    double tJkOWKOoPs38961090 = 45631808;    double tJkOWKOoPs65508089 = -629145490;    double tJkOWKOoPs33769458 = -49310330;    double tJkOWKOoPs14227421 = -681003546;    double tJkOWKOoPs80065672 = -185608388;    double tJkOWKOoPs90062258 = -949414261;    double tJkOWKOoPs73675282 = -283629089;    double tJkOWKOoPs77320701 = -704803177;    double tJkOWKOoPs93946593 = -167404708;    double tJkOWKOoPs32654562 = -492971429;    double tJkOWKOoPs8411824 = -596582965;    double tJkOWKOoPs46262051 = -445672936;    double tJkOWKOoPs86666289 = -195237808;    double tJkOWKOoPs42602398 = -55194878;    double tJkOWKOoPs14839609 = -269831225;    double tJkOWKOoPs36322080 = -379289278;    double tJkOWKOoPs43290979 = -371470334;    double tJkOWKOoPs36754405 = -256921602;    double tJkOWKOoPs51770824 = -276429698;    double tJkOWKOoPs80391206 = -465990106;    double tJkOWKOoPs48284526 = -253901900;     tJkOWKOoPs27834269 = tJkOWKOoPs63643581;     tJkOWKOoPs63643581 = tJkOWKOoPs18688309;     tJkOWKOoPs18688309 = tJkOWKOoPs65465349;     tJkOWKOoPs65465349 = tJkOWKOoPs34573850;     tJkOWKOoPs34573850 = tJkOWKOoPs62269820;     tJkOWKOoPs62269820 = tJkOWKOoPs46713007;     tJkOWKOoPs46713007 = tJkOWKOoPs77230412;     tJkOWKOoPs77230412 = tJkOWKOoPs2445897;     tJkOWKOoPs2445897 = tJkOWKOoPs94502842;     tJkOWKOoPs94502842 = tJkOWKOoPs98376235;     tJkOWKOoPs98376235 = tJkOWKOoPs68444166;     tJkOWKOoPs68444166 = tJkOWKOoPs33754220;     tJkOWKOoPs33754220 = tJkOWKOoPs80667397;     tJkOWKOoPs80667397 = tJkOWKOoPs45502296;     tJkOWKOoPs45502296 = tJkOWKOoPs58857271;     tJkOWKOoPs58857271 = tJkOWKOoPs53194618;     tJkOWKOoPs53194618 = tJkOWKOoPs39026592;     tJkOWKOoPs39026592 = tJkOWKOoPs16771300;     tJkOWKOoPs16771300 = tJkOWKOoPs48699061;     tJkOWKOoPs48699061 = tJkOWKOoPs55453515;     tJkOWKOoPs55453515 = tJkOWKOoPs72210806;     tJkOWKOoPs72210806 = tJkOWKOoPs90539383;     tJkOWKOoPs90539383 = tJkOWKOoPs68267784;     tJkOWKOoPs68267784 = tJkOWKOoPs34102170;     tJkOWKOoPs34102170 = tJkOWKOoPs58046720;     tJkOWKOoPs58046720 = tJkOWKOoPs34816343;     tJkOWKOoPs34816343 = tJkOWKOoPs44468488;     tJkOWKOoPs44468488 = tJkOWKOoPs76231560;     tJkOWKOoPs76231560 = tJkOWKOoPs54421625;     tJkOWKOoPs54421625 = tJkOWKOoPs96013370;     tJkOWKOoPs96013370 = tJkOWKOoPs43537333;     tJkOWKOoPs43537333 = tJkOWKOoPs41130186;     tJkOWKOoPs41130186 = tJkOWKOoPs32881852;     tJkOWKOoPs32881852 = tJkOWKOoPs64035286;     tJkOWKOoPs64035286 = tJkOWKOoPs19366250;     tJkOWKOoPs19366250 = tJkOWKOoPs37086813;     tJkOWKOoPs37086813 = tJkOWKOoPs73965578;     tJkOWKOoPs73965578 = tJkOWKOoPs91366737;     tJkOWKOoPs91366737 = tJkOWKOoPs63775557;     tJkOWKOoPs63775557 = tJkOWKOoPs45535498;     tJkOWKOoPs45535498 = tJkOWKOoPs37753257;     tJkOWKOoPs37753257 = tJkOWKOoPs99795095;     tJkOWKOoPs99795095 = tJkOWKOoPs78880678;     tJkOWKOoPs78880678 = tJkOWKOoPs3123429;     tJkOWKOoPs3123429 = tJkOWKOoPs95141079;     tJkOWKOoPs95141079 = tJkOWKOoPs92538631;     tJkOWKOoPs92538631 = tJkOWKOoPs1046885;     tJkOWKOoPs1046885 = tJkOWKOoPs30241068;     tJkOWKOoPs30241068 = tJkOWKOoPs96165888;     tJkOWKOoPs96165888 = tJkOWKOoPs64359366;     tJkOWKOoPs64359366 = tJkOWKOoPs22338089;     tJkOWKOoPs22338089 = tJkOWKOoPs66216632;     tJkOWKOoPs66216632 = tJkOWKOoPs47183593;     tJkOWKOoPs47183593 = tJkOWKOoPs227290;     tJkOWKOoPs227290 = tJkOWKOoPs55623462;     tJkOWKOoPs55623462 = tJkOWKOoPs73104198;     tJkOWKOoPs73104198 = tJkOWKOoPs50420524;     tJkOWKOoPs50420524 = tJkOWKOoPs31363180;     tJkOWKOoPs31363180 = tJkOWKOoPs76527129;     tJkOWKOoPs76527129 = tJkOWKOoPs27453478;     tJkOWKOoPs27453478 = tJkOWKOoPs2244519;     tJkOWKOoPs2244519 = tJkOWKOoPs998852;     tJkOWKOoPs998852 = tJkOWKOoPs48024272;     tJkOWKOoPs48024272 = tJkOWKOoPs98489471;     tJkOWKOoPs98489471 = tJkOWKOoPs54838902;     tJkOWKOoPs54838902 = tJkOWKOoPs27313980;     tJkOWKOoPs27313980 = tJkOWKOoPs872368;     tJkOWKOoPs872368 = tJkOWKOoPs16632111;     tJkOWKOoPs16632111 = tJkOWKOoPs26136047;     tJkOWKOoPs26136047 = tJkOWKOoPs21770458;     tJkOWKOoPs21770458 = tJkOWKOoPs79229040;     tJkOWKOoPs79229040 = tJkOWKOoPs47659854;     tJkOWKOoPs47659854 = tJkOWKOoPs52995742;     tJkOWKOoPs52995742 = tJkOWKOoPs3163564;     tJkOWKOoPs3163564 = tJkOWKOoPs17700259;     tJkOWKOoPs17700259 = tJkOWKOoPs72415710;     tJkOWKOoPs72415710 = tJkOWKOoPs11658705;     tJkOWKOoPs11658705 = tJkOWKOoPs65144356;     tJkOWKOoPs65144356 = tJkOWKOoPs38961090;     tJkOWKOoPs38961090 = tJkOWKOoPs65508089;     tJkOWKOoPs65508089 = tJkOWKOoPs33769458;     tJkOWKOoPs33769458 = tJkOWKOoPs14227421;     tJkOWKOoPs14227421 = tJkOWKOoPs80065672;     tJkOWKOoPs80065672 = tJkOWKOoPs90062258;     tJkOWKOoPs90062258 = tJkOWKOoPs73675282;     tJkOWKOoPs73675282 = tJkOWKOoPs77320701;     tJkOWKOoPs77320701 = tJkOWKOoPs93946593;     tJkOWKOoPs93946593 = tJkOWKOoPs32654562;     tJkOWKOoPs32654562 = tJkOWKOoPs8411824;     tJkOWKOoPs8411824 = tJkOWKOoPs46262051;     tJkOWKOoPs46262051 = tJkOWKOoPs86666289;     tJkOWKOoPs86666289 = tJkOWKOoPs42602398;     tJkOWKOoPs42602398 = tJkOWKOoPs14839609;     tJkOWKOoPs14839609 = tJkOWKOoPs36322080;     tJkOWKOoPs36322080 = tJkOWKOoPs43290979;     tJkOWKOoPs43290979 = tJkOWKOoPs36754405;     tJkOWKOoPs36754405 = tJkOWKOoPs51770824;     tJkOWKOoPs51770824 = tJkOWKOoPs80391206;     tJkOWKOoPs80391206 = tJkOWKOoPs48284526;     tJkOWKOoPs48284526 = tJkOWKOoPs27834269;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void wxPhgtXgNm83605259() {     double BFOkgCxJlN98758676 = -213931558;    double BFOkgCxJlN51615422 = -810179195;    double BFOkgCxJlN92148050 = -545643032;    double BFOkgCxJlN24832198 = -776606085;    double BFOkgCxJlN38304286 = 75507367;    double BFOkgCxJlN99910131 = -888829389;    double BFOkgCxJlN99480483 = -163454429;    double BFOkgCxJlN32279484 = -438861169;    double BFOkgCxJlN22740943 = -678796418;    double BFOkgCxJlN27668753 = -884769785;    double BFOkgCxJlN54419100 = -829258120;    double BFOkgCxJlN55288785 = -316862757;    double BFOkgCxJlN78370596 = -44328692;    double BFOkgCxJlN33104903 = -691150778;    double BFOkgCxJlN16719220 = -822927743;    double BFOkgCxJlN51375325 = -8303351;    double BFOkgCxJlN9013731 = -166146457;    double BFOkgCxJlN15546442 = -519519545;    double BFOkgCxJlN97443689 = -377562433;    double BFOkgCxJlN64299735 = -968141595;    double BFOkgCxJlN1957818 = -851382787;    double BFOkgCxJlN757591 = -296239458;    double BFOkgCxJlN94711746 = -165910660;    double BFOkgCxJlN12203567 = -950305524;    double BFOkgCxJlN21695382 = -842662595;    double BFOkgCxJlN62868987 = -82801836;    double BFOkgCxJlN85435909 = 91124492;    double BFOkgCxJlN90521813 = -369554652;    double BFOkgCxJlN56889543 = -218709011;    double BFOkgCxJlN89398576 = -734984538;    double BFOkgCxJlN99767154 = -826463346;    double BFOkgCxJlN34459513 = 72972680;    double BFOkgCxJlN80113785 = -749305258;    double BFOkgCxJlN92095867 = 32752242;    double BFOkgCxJlN13294155 = -960412689;    double BFOkgCxJlN79659747 = -537104775;    double BFOkgCxJlN23969079 = -86837168;    double BFOkgCxJlN6478706 = -858702083;    double BFOkgCxJlN16834264 = -626698475;    double BFOkgCxJlN20445730 = -266842154;    double BFOkgCxJlN24583046 = -461486400;    double BFOkgCxJlN30785849 = -390200586;    double BFOkgCxJlN18278493 = -98039119;    double BFOkgCxJlN99911456 = 99702464;    double BFOkgCxJlN19138294 = 97481871;    double BFOkgCxJlN46635768 = -332820454;    double BFOkgCxJlN3531166 = -371400761;    double BFOkgCxJlN61115927 = -172088441;    double BFOkgCxJlN57368010 = -721683645;    double BFOkgCxJlN25179644 = -826010079;    double BFOkgCxJlN12641445 = -561985418;    double BFOkgCxJlN74761775 = -871125463;    double BFOkgCxJlN28010581 = -688140176;    double BFOkgCxJlN68917015 = -239749960;    double BFOkgCxJlN81647442 = -57651449;    double BFOkgCxJlN98001086 = -917692101;    double BFOkgCxJlN56903675 = -544268536;    double BFOkgCxJlN79944483 = -595337509;    double BFOkgCxJlN3136817 = -933943490;    double BFOkgCxJlN75435299 = -841690798;    double BFOkgCxJlN14474223 = -879953881;    double BFOkgCxJlN8958671 = -793899778;    double BFOkgCxJlN75389941 = -120152158;    double BFOkgCxJlN33342366 = -943811880;    double BFOkgCxJlN27901598 = 41693561;    double BFOkgCxJlN19959588 = -802230800;    double BFOkgCxJlN75175000 = -567557499;    double BFOkgCxJlN86274729 = 22919066;    double BFOkgCxJlN19810748 = -730738089;    double BFOkgCxJlN37059472 = -185822969;    double BFOkgCxJlN27406247 = -921466184;    double BFOkgCxJlN2535025 = -307444375;    double BFOkgCxJlN98712178 = -892821070;    double BFOkgCxJlN76997960 = -10720280;    double BFOkgCxJlN39716690 = -406655195;    double BFOkgCxJlN71171968 = -361182201;    double BFOkgCxJlN82479097 = -98200339;    double BFOkgCxJlN94800289 = -165613125;    double BFOkgCxJlN93065273 = -947787395;    double BFOkgCxJlN75059614 = -409842142;    double BFOkgCxJlN59337821 = -711401076;    double BFOkgCxJlN24319982 = -736787068;    double BFOkgCxJlN33153803 = -647871008;    double BFOkgCxJlN31709900 = -392698933;    double BFOkgCxJlN76757132 = -72999121;    double BFOkgCxJlN25005379 = -955337883;    double BFOkgCxJlN6448932 = -238887145;    double BFOkgCxJlN11196770 = -409555298;    double BFOkgCxJlN10448426 = -909596309;    double BFOkgCxJlN15293069 = 57279411;    double BFOkgCxJlN22756072 = -992836240;    double BFOkgCxJlN44024595 = -491499659;    double BFOkgCxJlN3341890 = -924758593;    double BFOkgCxJlN41398965 = -785007678;    double BFOkgCxJlN5971507 = -386888273;    double BFOkgCxJlN15624375 = -667586623;    double BFOkgCxJlN55395908 = -170048428;    double BFOkgCxJlN84936126 = -154227240;    double BFOkgCxJlN72009858 = -941991097;    double BFOkgCxJlN99178705 = -213931558;     BFOkgCxJlN98758676 = BFOkgCxJlN51615422;     BFOkgCxJlN51615422 = BFOkgCxJlN92148050;     BFOkgCxJlN92148050 = BFOkgCxJlN24832198;     BFOkgCxJlN24832198 = BFOkgCxJlN38304286;     BFOkgCxJlN38304286 = BFOkgCxJlN99910131;     BFOkgCxJlN99910131 = BFOkgCxJlN99480483;     BFOkgCxJlN99480483 = BFOkgCxJlN32279484;     BFOkgCxJlN32279484 = BFOkgCxJlN22740943;     BFOkgCxJlN22740943 = BFOkgCxJlN27668753;     BFOkgCxJlN27668753 = BFOkgCxJlN54419100;     BFOkgCxJlN54419100 = BFOkgCxJlN55288785;     BFOkgCxJlN55288785 = BFOkgCxJlN78370596;     BFOkgCxJlN78370596 = BFOkgCxJlN33104903;     BFOkgCxJlN33104903 = BFOkgCxJlN16719220;     BFOkgCxJlN16719220 = BFOkgCxJlN51375325;     BFOkgCxJlN51375325 = BFOkgCxJlN9013731;     BFOkgCxJlN9013731 = BFOkgCxJlN15546442;     BFOkgCxJlN15546442 = BFOkgCxJlN97443689;     BFOkgCxJlN97443689 = BFOkgCxJlN64299735;     BFOkgCxJlN64299735 = BFOkgCxJlN1957818;     BFOkgCxJlN1957818 = BFOkgCxJlN757591;     BFOkgCxJlN757591 = BFOkgCxJlN94711746;     BFOkgCxJlN94711746 = BFOkgCxJlN12203567;     BFOkgCxJlN12203567 = BFOkgCxJlN21695382;     BFOkgCxJlN21695382 = BFOkgCxJlN62868987;     BFOkgCxJlN62868987 = BFOkgCxJlN85435909;     BFOkgCxJlN85435909 = BFOkgCxJlN90521813;     BFOkgCxJlN90521813 = BFOkgCxJlN56889543;     BFOkgCxJlN56889543 = BFOkgCxJlN89398576;     BFOkgCxJlN89398576 = BFOkgCxJlN99767154;     BFOkgCxJlN99767154 = BFOkgCxJlN34459513;     BFOkgCxJlN34459513 = BFOkgCxJlN80113785;     BFOkgCxJlN80113785 = BFOkgCxJlN92095867;     BFOkgCxJlN92095867 = BFOkgCxJlN13294155;     BFOkgCxJlN13294155 = BFOkgCxJlN79659747;     BFOkgCxJlN79659747 = BFOkgCxJlN23969079;     BFOkgCxJlN23969079 = BFOkgCxJlN6478706;     BFOkgCxJlN6478706 = BFOkgCxJlN16834264;     BFOkgCxJlN16834264 = BFOkgCxJlN20445730;     BFOkgCxJlN20445730 = BFOkgCxJlN24583046;     BFOkgCxJlN24583046 = BFOkgCxJlN30785849;     BFOkgCxJlN30785849 = BFOkgCxJlN18278493;     BFOkgCxJlN18278493 = BFOkgCxJlN99911456;     BFOkgCxJlN99911456 = BFOkgCxJlN19138294;     BFOkgCxJlN19138294 = BFOkgCxJlN46635768;     BFOkgCxJlN46635768 = BFOkgCxJlN3531166;     BFOkgCxJlN3531166 = BFOkgCxJlN61115927;     BFOkgCxJlN61115927 = BFOkgCxJlN57368010;     BFOkgCxJlN57368010 = BFOkgCxJlN25179644;     BFOkgCxJlN25179644 = BFOkgCxJlN12641445;     BFOkgCxJlN12641445 = BFOkgCxJlN74761775;     BFOkgCxJlN74761775 = BFOkgCxJlN28010581;     BFOkgCxJlN28010581 = BFOkgCxJlN68917015;     BFOkgCxJlN68917015 = BFOkgCxJlN81647442;     BFOkgCxJlN81647442 = BFOkgCxJlN98001086;     BFOkgCxJlN98001086 = BFOkgCxJlN56903675;     BFOkgCxJlN56903675 = BFOkgCxJlN79944483;     BFOkgCxJlN79944483 = BFOkgCxJlN3136817;     BFOkgCxJlN3136817 = BFOkgCxJlN75435299;     BFOkgCxJlN75435299 = BFOkgCxJlN14474223;     BFOkgCxJlN14474223 = BFOkgCxJlN8958671;     BFOkgCxJlN8958671 = BFOkgCxJlN75389941;     BFOkgCxJlN75389941 = BFOkgCxJlN33342366;     BFOkgCxJlN33342366 = BFOkgCxJlN27901598;     BFOkgCxJlN27901598 = BFOkgCxJlN19959588;     BFOkgCxJlN19959588 = BFOkgCxJlN75175000;     BFOkgCxJlN75175000 = BFOkgCxJlN86274729;     BFOkgCxJlN86274729 = BFOkgCxJlN19810748;     BFOkgCxJlN19810748 = BFOkgCxJlN37059472;     BFOkgCxJlN37059472 = BFOkgCxJlN27406247;     BFOkgCxJlN27406247 = BFOkgCxJlN2535025;     BFOkgCxJlN2535025 = BFOkgCxJlN98712178;     BFOkgCxJlN98712178 = BFOkgCxJlN76997960;     BFOkgCxJlN76997960 = BFOkgCxJlN39716690;     BFOkgCxJlN39716690 = BFOkgCxJlN71171968;     BFOkgCxJlN71171968 = BFOkgCxJlN82479097;     BFOkgCxJlN82479097 = BFOkgCxJlN94800289;     BFOkgCxJlN94800289 = BFOkgCxJlN93065273;     BFOkgCxJlN93065273 = BFOkgCxJlN75059614;     BFOkgCxJlN75059614 = BFOkgCxJlN59337821;     BFOkgCxJlN59337821 = BFOkgCxJlN24319982;     BFOkgCxJlN24319982 = BFOkgCxJlN33153803;     BFOkgCxJlN33153803 = BFOkgCxJlN31709900;     BFOkgCxJlN31709900 = BFOkgCxJlN76757132;     BFOkgCxJlN76757132 = BFOkgCxJlN25005379;     BFOkgCxJlN25005379 = BFOkgCxJlN6448932;     BFOkgCxJlN6448932 = BFOkgCxJlN11196770;     BFOkgCxJlN11196770 = BFOkgCxJlN10448426;     BFOkgCxJlN10448426 = BFOkgCxJlN15293069;     BFOkgCxJlN15293069 = BFOkgCxJlN22756072;     BFOkgCxJlN22756072 = BFOkgCxJlN44024595;     BFOkgCxJlN44024595 = BFOkgCxJlN3341890;     BFOkgCxJlN3341890 = BFOkgCxJlN41398965;     BFOkgCxJlN41398965 = BFOkgCxJlN5971507;     BFOkgCxJlN5971507 = BFOkgCxJlN15624375;     BFOkgCxJlN15624375 = BFOkgCxJlN55395908;     BFOkgCxJlN55395908 = BFOkgCxJlN84936126;     BFOkgCxJlN84936126 = BFOkgCxJlN72009858;     BFOkgCxJlN72009858 = BFOkgCxJlN99178705;     BFOkgCxJlN99178705 = BFOkgCxJlN98758676;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void UHiWLPsDlF20250234() {     double kXaWsYbldf21145794 = -948335521;    double kXaWsYbldf35962922 = -758722250;    double kXaWsYbldf20917329 = -785296876;    double kXaWsYbldf39838887 = -783013617;    double kXaWsYbldf36478540 = -515549635;    double kXaWsYbldf14793249 = -749437766;    double kXaWsYbldf91636222 = 14558264;    double kXaWsYbldf7913343 = -909457813;    double kXaWsYbldf19904074 = -562992457;    double kXaWsYbldf19432338 = -627511118;    double kXaWsYbldf91960959 = -825882521;    double kXaWsYbldf11191735 = -567608051;    double kXaWsYbldf45378777 = -663046011;    double kXaWsYbldf75719655 = -118859535;    double kXaWsYbldf53454497 = -450405456;    double kXaWsYbldf95631237 = -389970893;    double kXaWsYbldf58837082 = -443426277;    double kXaWsYbldf21522859 = -971262235;    double kXaWsYbldf38725320 = -512664558;    double kXaWsYbldf42816019 = -120776048;    double kXaWsYbldf2840925 = -842870095;    double kXaWsYbldf64572808 = -801005771;    double kXaWsYbldf98005069 = -341991252;    double kXaWsYbldf38703354 = -414298381;    double kXaWsYbldf57235629 = -464221720;    double kXaWsYbldf51171981 = -526696060;    double kXaWsYbldf32525330 = -766462001;    double kXaWsYbldf96433263 = -158009106;    double kXaWsYbldf63782104 = -562966131;    double kXaWsYbldf98555756 = -655280405;    double kXaWsYbldf44057960 = -907779498;    double kXaWsYbldf92000703 = -579098675;    double kXaWsYbldf61152455 = -178648753;    double kXaWsYbldf51484555 = -291374608;    double kXaWsYbldf89523519 = 75830888;    double kXaWsYbldf21352617 = -852500151;    double kXaWsYbldf17408791 = -919785119;    double kXaWsYbldf60104806 = -726327555;    double kXaWsYbldf65142395 = 72255493;    double kXaWsYbldf40631444 = -403066183;    double kXaWsYbldf53340416 = -964664066;    double kXaWsYbldf19294241 = -148109277;    double kXaWsYbldf23828685 = 14430297;    double kXaWsYbldf99355575 = -997661185;    double kXaWsYbldf87121559 = -811661607;    double kXaWsYbldf54736050 = -515049549;    double kXaWsYbldf15828564 = -949811014;    double kXaWsYbldf5714602 = 71376568;    double kXaWsYbldf51827915 = -671400343;    double kXaWsYbldf22263390 = -968030338;    double kXaWsYbldf21510661 = -917061695;    double kXaWsYbldf48613033 = -201944746;    double kXaWsYbldf6324985 = -360051406;    double kXaWsYbldf29203561 = -515430769;    double kXaWsYbldf17409310 = -198355564;    double kXaWsYbldf56572986 = -47329751;    double kXaWsYbldf37957853 = -316730998;    double kXaWsYbldf82213975 = -270998495;    double kXaWsYbldf82603257 = -218791898;    double kXaWsYbldf85306558 = -988853575;    double kXaWsYbldf82267919 = -982975766;    double kXaWsYbldf95202959 = -827432630;    double kXaWsYbldf44131239 = -246491683;    double kXaWsYbldf21348318 = -907712052;    double kXaWsYbldf75374377 = -719731620;    double kXaWsYbldf99960256 = -146783846;    double kXaWsYbldf50039279 = -288959298;    double kXaWsYbldf93894222 = -271671404;    double kXaWsYbldf86196135 = -94690424;    double kXaWsYbldf32101880 = -597905306;    double kXaWsYbldf78222447 = -470185775;    double kXaWsYbldf98732275 = -717098723;    double kXaWsYbldf56380463 = -943517729;    double kXaWsYbldf98093876 = -9598376;    double kXaWsYbldf89475602 = -156111982;    double kXaWsYbldf83546684 = -594760819;    double kXaWsYbldf40744124 = -715436069;    double kXaWsYbldf98649493 = -344330068;    double kXaWsYbldf51581794 = -602636775;    double kXaWsYbldf2499579 = -949172171;    double kXaWsYbldf35343418 = -576885047;    double kXaWsYbldf26810728 = -737838570;    double kXaWsYbldf44605348 = -486608763;    double kXaWsYbldf41518715 = -594935793;    double kXaWsYbldf77045095 = -738218710;    double kXaWsYbldf95444927 = -605834753;    double kXaWsYbldf85675719 = -119047269;    double kXaWsYbldf31948895 = -663217985;    double kXaWsYbldf34075245 = 6980956;    double kXaWsYbldf32950534 = -876839361;    double kXaWsYbldf83394763 = -435769154;    double kXaWsYbldf35194816 = -548786624;    double kXaWsYbldf77501548 = -407535657;    double kXaWsYbldf79835836 = 61109068;    double kXaWsYbldf58363524 = -420090418;    double kXaWsYbldf58137457 = -37231437;    double kXaWsYbldf75163002 = -901617594;    double kXaWsYbldf2480367 = -77857651;    double kXaWsYbldf23981199 = -177929565;    double kXaWsYbldf87161303 = -948335521;     kXaWsYbldf21145794 = kXaWsYbldf35962922;     kXaWsYbldf35962922 = kXaWsYbldf20917329;     kXaWsYbldf20917329 = kXaWsYbldf39838887;     kXaWsYbldf39838887 = kXaWsYbldf36478540;     kXaWsYbldf36478540 = kXaWsYbldf14793249;     kXaWsYbldf14793249 = kXaWsYbldf91636222;     kXaWsYbldf91636222 = kXaWsYbldf7913343;     kXaWsYbldf7913343 = kXaWsYbldf19904074;     kXaWsYbldf19904074 = kXaWsYbldf19432338;     kXaWsYbldf19432338 = kXaWsYbldf91960959;     kXaWsYbldf91960959 = kXaWsYbldf11191735;     kXaWsYbldf11191735 = kXaWsYbldf45378777;     kXaWsYbldf45378777 = kXaWsYbldf75719655;     kXaWsYbldf75719655 = kXaWsYbldf53454497;     kXaWsYbldf53454497 = kXaWsYbldf95631237;     kXaWsYbldf95631237 = kXaWsYbldf58837082;     kXaWsYbldf58837082 = kXaWsYbldf21522859;     kXaWsYbldf21522859 = kXaWsYbldf38725320;     kXaWsYbldf38725320 = kXaWsYbldf42816019;     kXaWsYbldf42816019 = kXaWsYbldf2840925;     kXaWsYbldf2840925 = kXaWsYbldf64572808;     kXaWsYbldf64572808 = kXaWsYbldf98005069;     kXaWsYbldf98005069 = kXaWsYbldf38703354;     kXaWsYbldf38703354 = kXaWsYbldf57235629;     kXaWsYbldf57235629 = kXaWsYbldf51171981;     kXaWsYbldf51171981 = kXaWsYbldf32525330;     kXaWsYbldf32525330 = kXaWsYbldf96433263;     kXaWsYbldf96433263 = kXaWsYbldf63782104;     kXaWsYbldf63782104 = kXaWsYbldf98555756;     kXaWsYbldf98555756 = kXaWsYbldf44057960;     kXaWsYbldf44057960 = kXaWsYbldf92000703;     kXaWsYbldf92000703 = kXaWsYbldf61152455;     kXaWsYbldf61152455 = kXaWsYbldf51484555;     kXaWsYbldf51484555 = kXaWsYbldf89523519;     kXaWsYbldf89523519 = kXaWsYbldf21352617;     kXaWsYbldf21352617 = kXaWsYbldf17408791;     kXaWsYbldf17408791 = kXaWsYbldf60104806;     kXaWsYbldf60104806 = kXaWsYbldf65142395;     kXaWsYbldf65142395 = kXaWsYbldf40631444;     kXaWsYbldf40631444 = kXaWsYbldf53340416;     kXaWsYbldf53340416 = kXaWsYbldf19294241;     kXaWsYbldf19294241 = kXaWsYbldf23828685;     kXaWsYbldf23828685 = kXaWsYbldf99355575;     kXaWsYbldf99355575 = kXaWsYbldf87121559;     kXaWsYbldf87121559 = kXaWsYbldf54736050;     kXaWsYbldf54736050 = kXaWsYbldf15828564;     kXaWsYbldf15828564 = kXaWsYbldf5714602;     kXaWsYbldf5714602 = kXaWsYbldf51827915;     kXaWsYbldf51827915 = kXaWsYbldf22263390;     kXaWsYbldf22263390 = kXaWsYbldf21510661;     kXaWsYbldf21510661 = kXaWsYbldf48613033;     kXaWsYbldf48613033 = kXaWsYbldf6324985;     kXaWsYbldf6324985 = kXaWsYbldf29203561;     kXaWsYbldf29203561 = kXaWsYbldf17409310;     kXaWsYbldf17409310 = kXaWsYbldf56572986;     kXaWsYbldf56572986 = kXaWsYbldf37957853;     kXaWsYbldf37957853 = kXaWsYbldf82213975;     kXaWsYbldf82213975 = kXaWsYbldf82603257;     kXaWsYbldf82603257 = kXaWsYbldf85306558;     kXaWsYbldf85306558 = kXaWsYbldf82267919;     kXaWsYbldf82267919 = kXaWsYbldf95202959;     kXaWsYbldf95202959 = kXaWsYbldf44131239;     kXaWsYbldf44131239 = kXaWsYbldf21348318;     kXaWsYbldf21348318 = kXaWsYbldf75374377;     kXaWsYbldf75374377 = kXaWsYbldf99960256;     kXaWsYbldf99960256 = kXaWsYbldf50039279;     kXaWsYbldf50039279 = kXaWsYbldf93894222;     kXaWsYbldf93894222 = kXaWsYbldf86196135;     kXaWsYbldf86196135 = kXaWsYbldf32101880;     kXaWsYbldf32101880 = kXaWsYbldf78222447;     kXaWsYbldf78222447 = kXaWsYbldf98732275;     kXaWsYbldf98732275 = kXaWsYbldf56380463;     kXaWsYbldf56380463 = kXaWsYbldf98093876;     kXaWsYbldf98093876 = kXaWsYbldf89475602;     kXaWsYbldf89475602 = kXaWsYbldf83546684;     kXaWsYbldf83546684 = kXaWsYbldf40744124;     kXaWsYbldf40744124 = kXaWsYbldf98649493;     kXaWsYbldf98649493 = kXaWsYbldf51581794;     kXaWsYbldf51581794 = kXaWsYbldf2499579;     kXaWsYbldf2499579 = kXaWsYbldf35343418;     kXaWsYbldf35343418 = kXaWsYbldf26810728;     kXaWsYbldf26810728 = kXaWsYbldf44605348;     kXaWsYbldf44605348 = kXaWsYbldf41518715;     kXaWsYbldf41518715 = kXaWsYbldf77045095;     kXaWsYbldf77045095 = kXaWsYbldf95444927;     kXaWsYbldf95444927 = kXaWsYbldf85675719;     kXaWsYbldf85675719 = kXaWsYbldf31948895;     kXaWsYbldf31948895 = kXaWsYbldf34075245;     kXaWsYbldf34075245 = kXaWsYbldf32950534;     kXaWsYbldf32950534 = kXaWsYbldf83394763;     kXaWsYbldf83394763 = kXaWsYbldf35194816;     kXaWsYbldf35194816 = kXaWsYbldf77501548;     kXaWsYbldf77501548 = kXaWsYbldf79835836;     kXaWsYbldf79835836 = kXaWsYbldf58363524;     kXaWsYbldf58363524 = kXaWsYbldf58137457;     kXaWsYbldf58137457 = kXaWsYbldf75163002;     kXaWsYbldf75163002 = kXaWsYbldf2480367;     kXaWsYbldf2480367 = kXaWsYbldf23981199;     kXaWsYbldf23981199 = kXaWsYbldf87161303;     kXaWsYbldf87161303 = kXaWsYbldf21145794;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void vakxYCvmmJ95932156() {     double UmloghZQmr62728340 = -553990168;    double UmloghZQmr54035964 = -306278512;    double UmloghZQmr73032777 = -644668258;    double UmloghZQmr54057162 = -974372488;    double UmloghZQmr52819196 = -673443030;    double UmloghZQmr7627891 = -476849085;    double UmloghZQmr94235258 = -264595980;    double UmloghZQmr50590744 = -36388550;    double UmloghZQmr3324011 = -5710460;    double UmloghZQmr78925195 = -984366722;    double UmloghZQmr69932379 = -545855764;    double UmloghZQmr29291249 = -40656661;    double UmloghZQmr37969627 = -533291131;    double UmloghZQmr58159975 = -282308460;    double UmloghZQmr62219331 = -581579786;    double UmloghZQmr46113385 = -765986393;    double UmloghZQmr52656261 = -667331373;    double UmloghZQmr95335669 = -313141325;    double UmloghZQmr80677222 = -617014810;    double UmloghZQmr45129639 = -292215582;    double UmloghZQmr24811557 = -645165866;    double UmloghZQmr76219091 = -285579898;    double UmloghZQmr67242844 = -367183081;    double UmloghZQmr72838564 = -166507450;    double UmloghZQmr80510540 = -434709098;    double UmloghZQmr70017751 = -185722262;    double UmloghZQmr21184100 = -172608632;    double UmloghZQmr14865289 = -884743245;    double UmloghZQmr63904127 = -713373323;    double UmloghZQmr96614933 = -831827069;    double UmloghZQmr21471063 = -985987689;    double UmloghZQmr42710486 = -769695143;    double UmloghZQmr97628991 = -16913885;    double UmloghZQmr75780708 = -230928454;    double UmloghZQmr34448588 = -254688543;    double UmloghZQmr98811183 = -101325819;    double UmloghZQmr36141174 = -638463651;    double UmloghZQmr75492742 = -485226466;    double UmloghZQmr33829614 = 40137136;    double UmloghZQmr20532021 = -732336265;    double UmloghZQmr4605581 = -711192976;    double UmloghZQmr55112163 = -919004764;    double UmloghZQmr30995681 = -160424818;    double UmloghZQmr67662756 = -964372090;    double UmloghZQmr15072432 = -926811521;    double UmloghZQmr72208605 = -727144627;    double UmloghZQmr25254509 = 28707710;    double UmloghZQmr56014273 = -596284202;    double UmloghZQmr65737921 = -857110350;    double UmloghZQmr39659208 = -859043075;    double UmloghZQmr24722693 = 44923083;    double UmloghZQmr28360968 = -934177664;    double UmloghZQmr47746242 = -15832540;    double UmloghZQmr30914017 = -495489563;    double UmloghZQmr71120600 = -388478215;    double UmloghZQmr86509249 = -168410271;    double UmloghZQmr86793119 = -939095431;    double UmloghZQmr194213 = -378160808;    double UmloghZQmr73546621 = -439663391;    double UmloghZQmr82801444 = -387720768;    double UmloghZQmr86443791 = -204240454;    double UmloghZQmr79369970 = -379852735;    double UmloghZQmr86686616 = -323015227;    double UmloghZQmr6709077 = -173883391;    double UmloghZQmr57454133 = -998379034;    double UmloghZQmr27221893 = -776160622;    double UmloghZQmr31662257 = 76257223;    double UmloghZQmr62188919 = -202362677;    double UmloghZQmr23711388 = 72380082;    double UmloghZQmr63408147 = -380253968;    double UmloghZQmr9972211 = -27522743;    double UmloghZQmr77163519 = -82104907;    double UmloghZQmr61506056 = -253278462;    double UmloghZQmr60145201 = -884678545;    double UmloghZQmr40524059 = -581022606;    double UmloghZQmr69699393 = -726161103;    double UmloghZQmr45223410 = -25155080;    double UmloghZQmr99580088 = -402810992;    double UmloghZQmr57766133 = -239695930;    double UmloghZQmr8301936 = -707564472;    double UmloghZQmr44763243 = -114429973;    double UmloghZQmr65169826 = -576324431;    double UmloghZQmr49127368 = 72367104;    double UmloghZQmr24244919 = -854330248;    double UmloghZQmr71892241 = -776750153;    double UmloghZQmr93110095 = 48189974;    double UmloghZQmr94964244 = -653862604;    double UmloghZQmr66714975 = -521424323;    double UmloghZQmr4660109 = -842450240;    double UmloghZQmr47939338 = 13721727;    double UmloghZQmr12018065 = -162230388;    double UmloghZQmr35946962 = -160302843;    double UmloghZQmr1946122 = 54436924;    double UmloghZQmr51028170 = -572142096;    double UmloghZQmr34088230 = -428095812;    double UmloghZQmr25235610 = -231340242;    double UmloghZQmr68425546 = -495989537;    double UmloghZQmr24286605 = -986541428;    double UmloghZQmr10208624 = -965993056;    double UmloghZQmr87850538 = -553990168;     UmloghZQmr62728340 = UmloghZQmr54035964;     UmloghZQmr54035964 = UmloghZQmr73032777;     UmloghZQmr73032777 = UmloghZQmr54057162;     UmloghZQmr54057162 = UmloghZQmr52819196;     UmloghZQmr52819196 = UmloghZQmr7627891;     UmloghZQmr7627891 = UmloghZQmr94235258;     UmloghZQmr94235258 = UmloghZQmr50590744;     UmloghZQmr50590744 = UmloghZQmr3324011;     UmloghZQmr3324011 = UmloghZQmr78925195;     UmloghZQmr78925195 = UmloghZQmr69932379;     UmloghZQmr69932379 = UmloghZQmr29291249;     UmloghZQmr29291249 = UmloghZQmr37969627;     UmloghZQmr37969627 = UmloghZQmr58159975;     UmloghZQmr58159975 = UmloghZQmr62219331;     UmloghZQmr62219331 = UmloghZQmr46113385;     UmloghZQmr46113385 = UmloghZQmr52656261;     UmloghZQmr52656261 = UmloghZQmr95335669;     UmloghZQmr95335669 = UmloghZQmr80677222;     UmloghZQmr80677222 = UmloghZQmr45129639;     UmloghZQmr45129639 = UmloghZQmr24811557;     UmloghZQmr24811557 = UmloghZQmr76219091;     UmloghZQmr76219091 = UmloghZQmr67242844;     UmloghZQmr67242844 = UmloghZQmr72838564;     UmloghZQmr72838564 = UmloghZQmr80510540;     UmloghZQmr80510540 = UmloghZQmr70017751;     UmloghZQmr70017751 = UmloghZQmr21184100;     UmloghZQmr21184100 = UmloghZQmr14865289;     UmloghZQmr14865289 = UmloghZQmr63904127;     UmloghZQmr63904127 = UmloghZQmr96614933;     UmloghZQmr96614933 = UmloghZQmr21471063;     UmloghZQmr21471063 = UmloghZQmr42710486;     UmloghZQmr42710486 = UmloghZQmr97628991;     UmloghZQmr97628991 = UmloghZQmr75780708;     UmloghZQmr75780708 = UmloghZQmr34448588;     UmloghZQmr34448588 = UmloghZQmr98811183;     UmloghZQmr98811183 = UmloghZQmr36141174;     UmloghZQmr36141174 = UmloghZQmr75492742;     UmloghZQmr75492742 = UmloghZQmr33829614;     UmloghZQmr33829614 = UmloghZQmr20532021;     UmloghZQmr20532021 = UmloghZQmr4605581;     UmloghZQmr4605581 = UmloghZQmr55112163;     UmloghZQmr55112163 = UmloghZQmr30995681;     UmloghZQmr30995681 = UmloghZQmr67662756;     UmloghZQmr67662756 = UmloghZQmr15072432;     UmloghZQmr15072432 = UmloghZQmr72208605;     UmloghZQmr72208605 = UmloghZQmr25254509;     UmloghZQmr25254509 = UmloghZQmr56014273;     UmloghZQmr56014273 = UmloghZQmr65737921;     UmloghZQmr65737921 = UmloghZQmr39659208;     UmloghZQmr39659208 = UmloghZQmr24722693;     UmloghZQmr24722693 = UmloghZQmr28360968;     UmloghZQmr28360968 = UmloghZQmr47746242;     UmloghZQmr47746242 = UmloghZQmr30914017;     UmloghZQmr30914017 = UmloghZQmr71120600;     UmloghZQmr71120600 = UmloghZQmr86509249;     UmloghZQmr86509249 = UmloghZQmr86793119;     UmloghZQmr86793119 = UmloghZQmr194213;     UmloghZQmr194213 = UmloghZQmr73546621;     UmloghZQmr73546621 = UmloghZQmr82801444;     UmloghZQmr82801444 = UmloghZQmr86443791;     UmloghZQmr86443791 = UmloghZQmr79369970;     UmloghZQmr79369970 = UmloghZQmr86686616;     UmloghZQmr86686616 = UmloghZQmr6709077;     UmloghZQmr6709077 = UmloghZQmr57454133;     UmloghZQmr57454133 = UmloghZQmr27221893;     UmloghZQmr27221893 = UmloghZQmr31662257;     UmloghZQmr31662257 = UmloghZQmr62188919;     UmloghZQmr62188919 = UmloghZQmr23711388;     UmloghZQmr23711388 = UmloghZQmr63408147;     UmloghZQmr63408147 = UmloghZQmr9972211;     UmloghZQmr9972211 = UmloghZQmr77163519;     UmloghZQmr77163519 = UmloghZQmr61506056;     UmloghZQmr61506056 = UmloghZQmr60145201;     UmloghZQmr60145201 = UmloghZQmr40524059;     UmloghZQmr40524059 = UmloghZQmr69699393;     UmloghZQmr69699393 = UmloghZQmr45223410;     UmloghZQmr45223410 = UmloghZQmr99580088;     UmloghZQmr99580088 = UmloghZQmr57766133;     UmloghZQmr57766133 = UmloghZQmr8301936;     UmloghZQmr8301936 = UmloghZQmr44763243;     UmloghZQmr44763243 = UmloghZQmr65169826;     UmloghZQmr65169826 = UmloghZQmr49127368;     UmloghZQmr49127368 = UmloghZQmr24244919;     UmloghZQmr24244919 = UmloghZQmr71892241;     UmloghZQmr71892241 = UmloghZQmr93110095;     UmloghZQmr93110095 = UmloghZQmr94964244;     UmloghZQmr94964244 = UmloghZQmr66714975;     UmloghZQmr66714975 = UmloghZQmr4660109;     UmloghZQmr4660109 = UmloghZQmr47939338;     UmloghZQmr47939338 = UmloghZQmr12018065;     UmloghZQmr12018065 = UmloghZQmr35946962;     UmloghZQmr35946962 = UmloghZQmr1946122;     UmloghZQmr1946122 = UmloghZQmr51028170;     UmloghZQmr51028170 = UmloghZQmr34088230;     UmloghZQmr34088230 = UmloghZQmr25235610;     UmloghZQmr25235610 = UmloghZQmr68425546;     UmloghZQmr68425546 = UmloghZQmr24286605;     UmloghZQmr24286605 = UmloghZQmr10208624;     UmloghZQmr10208624 = UmloghZQmr87850538;     UmloghZQmr87850538 = UmloghZQmr62728340;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void MlUrdnrLCV23856611() {     double uIzTyePvgQ33652749 = -514019826;    double uIzTyePvgQ42007804 = -24786600;    double uIzTyePvgQ46492518 = -18873795;    double uIzTyePvgQ13424011 = -796133801;    double uIzTyePvgQ56549632 = -416285399;    double uIzTyePvgQ45268203 = -202112064;    double uIzTyePvgQ47002736 = -249510981;    double uIzTyePvgQ5639815 = -720679513;    double uIzTyePvgQ23619057 = -168727204;    double uIzTyePvgQ12091106 = -676933847;    double uIzTyePvgQ25975244 = -190399151;    double uIzTyePvgQ16135868 = -33419842;    double uIzTyePvgQ82586004 = -515657666;    double uIzTyePvgQ10597482 = -989882227;    double uIzTyePvgQ33436255 = -525716964;    double uIzTyePvgQ38631440 = -804813956;    double uIzTyePvgQ8475374 = -801665908;    double uIzTyePvgQ71855520 = -62925840;    double uIzTyePvgQ61349612 = -632159386;    double uIzTyePvgQ60730313 = -533313263;    double uIzTyePvgQ71315858 = -249248870;    double uIzTyePvgQ4765875 = 51139397;    double uIzTyePvgQ71415207 = -283489608;    double uIzTyePvgQ16774347 = -207236136;    double uIzTyePvgQ68103753 = -55985642;    double uIzTyePvgQ74840018 = -754669947;    double uIzTyePvgQ71803666 = -584377201;    double uIzTyePvgQ60918613 = -615320606;    double uIzTyePvgQ44562109 = -115492613;    double uIzTyePvgQ31591886 = -125410037;    double uIzTyePvgQ25224847 = -602855429;    double uIzTyePvgQ33632666 = 76183790;    double uIzTyePvgQ36612590 = -110161624;    double uIzTyePvgQ34994724 = -483634349;    double uIzTyePvgQ83707456 = -997575119;    double uIzTyePvgQ59104682 = -450690684;    double uIzTyePvgQ23023440 = -268202353;    double uIzTyePvgQ8005870 = -455274949;    double uIzTyePvgQ59297140 = -748934000;    double uIzTyePvgQ77202193 = -53429671;    double uIzTyePvgQ83653128 = -161646906;    double uIzTyePvgQ48144756 = 85696737;    double uIzTyePvgQ49479078 = -907656136;    double uIzTyePvgQ88693534 = -416072466;    double uIzTyePvgQ31087296 = -106574442;    double uIzTyePvgQ23703294 = -992947221;    double uIzTyePvgQ36247044 = -457984389;    double uIzTyePvgQ16083317 = -320576032;    double uIzTyePvgQ92864863 = -620820249;    double uIzTyePvgQ68672964 = -54071821;    double uIzTyePvgQ73004770 = -125075025;    double uIzTyePvgQ80784654 = -979336609;    double uIzTyePvgQ9540191 = -735869639;    double uIzTyePvgQ52647439 = -346586711;    double uIzTyePvgQ52540752 = -224559229;    double uIzTyePvgQ28886874 = -465159224;    double uIzTyePvgQ70592596 = -741296993;    double uIzTyePvgQ29718172 = -811637659;    double uIzTyePvgQ45320257 = -640148160;    double uIzTyePvgQ81709614 = -661615452;    double uIzTyePvgQ73464536 = -617734864;    double uIzTyePvgQ86084122 = -634190376;    double uIzTyePvgQ61077706 = -505186901;    double uIzTyePvgQ92027170 = 56682832;    double uIzTyePvgQ86866259 = 25921581;    double uIzTyePvgQ92342577 = -166582941;    double uIzTyePvgQ79523278 = -923258219;    double uIzTyePvgQ47591280 = 67976682;    double uIzTyePvgQ26890025 = -992307108;    double uIzTyePvgQ74331572 = 24973719;    double uIzTyePvgQ15608000 = -436611604;    double uIzTyePvgQ469504 = -246390959;    double uIzTyePvgQ12558381 = -313991841;    double uIzTyePvgQ84147419 = -478729715;    double uIzTyePvgQ77077184 = -271666357;    double uIzTyePvgQ23171102 = -234945607;    double uIzTyePvgQ55286797 = -41204467;    double uIzTyePvgQ82721673 = -867417142;    double uIzTyePvgQ85687050 = -661695;    double uIzTyePvgQ44400460 = -63038421;    double uIzTyePvgQ38592974 = -196685559;    double uIzTyePvgQ55720350 = -163801169;    double uIzTyePvgQ68053750 = -994500357;    double uIzTyePvgQ75889145 = 38579208;    double uIzTyePvgQ58587115 = 99664987;    double uIzTyePvgQ44440192 = -623518821;    double uIzTyePvgQ24092475 = -187946572;    double uIzTyePvgQ83965151 = -763574913;    double uIzTyePvgQ82453971 = -159075120;    double uIzTyePvgQ54820583 = -432415896;    double uIzTyePvgQ88512085 = -709393692;    double uIzTyePvgQ93305267 = -456564695;    double uIzTyePvgQ62685613 = -815126790;    double uIzTyePvgQ77587526 = 12681452;    double uIzTyePvgQ3737657 = -435694808;    double uIzTyePvgQ97569006 = -527456531;    double uIzTyePvgQ87067050 = -409116363;    double uIzTyePvgQ57451907 = -864338969;    double uIzTyePvgQ1827276 = -341994048;    double uIzTyePvgQ38744719 = -514019826;     uIzTyePvgQ33652749 = uIzTyePvgQ42007804;     uIzTyePvgQ42007804 = uIzTyePvgQ46492518;     uIzTyePvgQ46492518 = uIzTyePvgQ13424011;     uIzTyePvgQ13424011 = uIzTyePvgQ56549632;     uIzTyePvgQ56549632 = uIzTyePvgQ45268203;     uIzTyePvgQ45268203 = uIzTyePvgQ47002736;     uIzTyePvgQ47002736 = uIzTyePvgQ5639815;     uIzTyePvgQ5639815 = uIzTyePvgQ23619057;     uIzTyePvgQ23619057 = uIzTyePvgQ12091106;     uIzTyePvgQ12091106 = uIzTyePvgQ25975244;     uIzTyePvgQ25975244 = uIzTyePvgQ16135868;     uIzTyePvgQ16135868 = uIzTyePvgQ82586004;     uIzTyePvgQ82586004 = uIzTyePvgQ10597482;     uIzTyePvgQ10597482 = uIzTyePvgQ33436255;     uIzTyePvgQ33436255 = uIzTyePvgQ38631440;     uIzTyePvgQ38631440 = uIzTyePvgQ8475374;     uIzTyePvgQ8475374 = uIzTyePvgQ71855520;     uIzTyePvgQ71855520 = uIzTyePvgQ61349612;     uIzTyePvgQ61349612 = uIzTyePvgQ60730313;     uIzTyePvgQ60730313 = uIzTyePvgQ71315858;     uIzTyePvgQ71315858 = uIzTyePvgQ4765875;     uIzTyePvgQ4765875 = uIzTyePvgQ71415207;     uIzTyePvgQ71415207 = uIzTyePvgQ16774347;     uIzTyePvgQ16774347 = uIzTyePvgQ68103753;     uIzTyePvgQ68103753 = uIzTyePvgQ74840018;     uIzTyePvgQ74840018 = uIzTyePvgQ71803666;     uIzTyePvgQ71803666 = uIzTyePvgQ60918613;     uIzTyePvgQ60918613 = uIzTyePvgQ44562109;     uIzTyePvgQ44562109 = uIzTyePvgQ31591886;     uIzTyePvgQ31591886 = uIzTyePvgQ25224847;     uIzTyePvgQ25224847 = uIzTyePvgQ33632666;     uIzTyePvgQ33632666 = uIzTyePvgQ36612590;     uIzTyePvgQ36612590 = uIzTyePvgQ34994724;     uIzTyePvgQ34994724 = uIzTyePvgQ83707456;     uIzTyePvgQ83707456 = uIzTyePvgQ59104682;     uIzTyePvgQ59104682 = uIzTyePvgQ23023440;     uIzTyePvgQ23023440 = uIzTyePvgQ8005870;     uIzTyePvgQ8005870 = uIzTyePvgQ59297140;     uIzTyePvgQ59297140 = uIzTyePvgQ77202193;     uIzTyePvgQ77202193 = uIzTyePvgQ83653128;     uIzTyePvgQ83653128 = uIzTyePvgQ48144756;     uIzTyePvgQ48144756 = uIzTyePvgQ49479078;     uIzTyePvgQ49479078 = uIzTyePvgQ88693534;     uIzTyePvgQ88693534 = uIzTyePvgQ31087296;     uIzTyePvgQ31087296 = uIzTyePvgQ23703294;     uIzTyePvgQ23703294 = uIzTyePvgQ36247044;     uIzTyePvgQ36247044 = uIzTyePvgQ16083317;     uIzTyePvgQ16083317 = uIzTyePvgQ92864863;     uIzTyePvgQ92864863 = uIzTyePvgQ68672964;     uIzTyePvgQ68672964 = uIzTyePvgQ73004770;     uIzTyePvgQ73004770 = uIzTyePvgQ80784654;     uIzTyePvgQ80784654 = uIzTyePvgQ9540191;     uIzTyePvgQ9540191 = uIzTyePvgQ52647439;     uIzTyePvgQ52647439 = uIzTyePvgQ52540752;     uIzTyePvgQ52540752 = uIzTyePvgQ28886874;     uIzTyePvgQ28886874 = uIzTyePvgQ70592596;     uIzTyePvgQ70592596 = uIzTyePvgQ29718172;     uIzTyePvgQ29718172 = uIzTyePvgQ45320257;     uIzTyePvgQ45320257 = uIzTyePvgQ81709614;     uIzTyePvgQ81709614 = uIzTyePvgQ73464536;     uIzTyePvgQ73464536 = uIzTyePvgQ86084122;     uIzTyePvgQ86084122 = uIzTyePvgQ61077706;     uIzTyePvgQ61077706 = uIzTyePvgQ92027170;     uIzTyePvgQ92027170 = uIzTyePvgQ86866259;     uIzTyePvgQ86866259 = uIzTyePvgQ92342577;     uIzTyePvgQ92342577 = uIzTyePvgQ79523278;     uIzTyePvgQ79523278 = uIzTyePvgQ47591280;     uIzTyePvgQ47591280 = uIzTyePvgQ26890025;     uIzTyePvgQ26890025 = uIzTyePvgQ74331572;     uIzTyePvgQ74331572 = uIzTyePvgQ15608000;     uIzTyePvgQ15608000 = uIzTyePvgQ469504;     uIzTyePvgQ469504 = uIzTyePvgQ12558381;     uIzTyePvgQ12558381 = uIzTyePvgQ84147419;     uIzTyePvgQ84147419 = uIzTyePvgQ77077184;     uIzTyePvgQ77077184 = uIzTyePvgQ23171102;     uIzTyePvgQ23171102 = uIzTyePvgQ55286797;     uIzTyePvgQ55286797 = uIzTyePvgQ82721673;     uIzTyePvgQ82721673 = uIzTyePvgQ85687050;     uIzTyePvgQ85687050 = uIzTyePvgQ44400460;     uIzTyePvgQ44400460 = uIzTyePvgQ38592974;     uIzTyePvgQ38592974 = uIzTyePvgQ55720350;     uIzTyePvgQ55720350 = uIzTyePvgQ68053750;     uIzTyePvgQ68053750 = uIzTyePvgQ75889145;     uIzTyePvgQ75889145 = uIzTyePvgQ58587115;     uIzTyePvgQ58587115 = uIzTyePvgQ44440192;     uIzTyePvgQ44440192 = uIzTyePvgQ24092475;     uIzTyePvgQ24092475 = uIzTyePvgQ83965151;     uIzTyePvgQ83965151 = uIzTyePvgQ82453971;     uIzTyePvgQ82453971 = uIzTyePvgQ54820583;     uIzTyePvgQ54820583 = uIzTyePvgQ88512085;     uIzTyePvgQ88512085 = uIzTyePvgQ93305267;     uIzTyePvgQ93305267 = uIzTyePvgQ62685613;     uIzTyePvgQ62685613 = uIzTyePvgQ77587526;     uIzTyePvgQ77587526 = uIzTyePvgQ3737657;     uIzTyePvgQ3737657 = uIzTyePvgQ97569006;     uIzTyePvgQ97569006 = uIzTyePvgQ87067050;     uIzTyePvgQ87067050 = uIzTyePvgQ57451907;     uIzTyePvgQ57451907 = uIzTyePvgQ1827276;     uIzTyePvgQ1827276 = uIzTyePvgQ38744719;     uIzTyePvgQ38744719 = uIzTyePvgQ33652749;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void COMIwhXoXc99538533() {     double maswpgnQfd75235295 = -119674474;    double maswpgnQfd60080845 = -672342862;    double maswpgnQfd98607966 = -978245177;    double maswpgnQfd27642286 = -987492672;    double maswpgnQfd72890287 = -574178794;    double maswpgnQfd38102845 = 70476617;    double maswpgnQfd49601772 = -528665226;    double maswpgnQfd48317216 = -947610250;    double maswpgnQfd7038994 = -711445206;    double maswpgnQfd71583964 = 66210548;    double maswpgnQfd3946664 = 89627605;    double maswpgnQfd34235382 = -606468453;    double maswpgnQfd75176854 = -385902785;    double maswpgnQfd93037801 = -53331153;    double maswpgnQfd42201089 = -656891294;    double maswpgnQfd89113587 = -80829456;    double maswpgnQfd2294554 = 74428996;    double maswpgnQfd45668332 = -504804930;    double maswpgnQfd3301514 = -736509638;    double maswpgnQfd63043933 = -704752797;    double maswpgnQfd93286490 = -51544640;    double maswpgnQfd16412158 = -533434730;    double maswpgnQfd40652982 = -308681436;    double maswpgnQfd50909557 = 40554794;    double maswpgnQfd91378665 = -26473020;    double maswpgnQfd93685788 = -413696149;    double maswpgnQfd60462437 = 9476168;    double maswpgnQfd79350639 = -242054746;    double maswpgnQfd44684133 = -265899805;    double maswpgnQfd29651064 = -301956701;    double maswpgnQfd2637950 = -681063619;    double maswpgnQfd84342448 = -114412679;    double maswpgnQfd73089126 = 51573245;    double maswpgnQfd59290877 = -423188195;    double maswpgnQfd28632525 = -228094551;    double maswpgnQfd36563249 = -799516351;    double maswpgnQfd41755823 = 13119115;    double maswpgnQfd23393807 = -214173861;    double maswpgnQfd27984359 = -781052357;    double maswpgnQfd57102770 = -382699754;    double maswpgnQfd34918292 = 91824184;    double maswpgnQfd83962678 = -685198750;    double maswpgnQfd56646074 = 17488748;    double maswpgnQfd57000715 = -382783371;    double maswpgnQfd59038167 = -221724356;    double maswpgnQfd41175849 = -105042298;    double maswpgnQfd45672989 = -579465665;    double maswpgnQfd66382988 = -988236802;    double maswpgnQfd6774869 = -806530256;    double maswpgnQfd86068782 = 54915442;    double maswpgnQfd76216803 = -263090246;    double maswpgnQfd60532589 = -611569527;    double maswpgnQfd50961448 = -391650773;    double maswpgnQfd54357895 = -326645504;    double maswpgnQfd6252044 = -414681879;    double maswpgnQfd58823138 = -586239744;    double maswpgnQfd19427863 = -263661426;    double maswpgnQfd47698409 = -918799972;    double maswpgnQfd36263620 = -861019653;    double maswpgnQfd79204499 = -60482646;    double maswpgnQfd77640407 = -938999552;    double maswpgnQfd70251133 = -186610481;    double maswpgnQfd3633084 = -581710445;    double maswpgnQfd77387929 = -309488506;    double maswpgnQfd68946015 = -252725833;    double maswpgnQfd19604215 = -795959716;    double maswpgnQfd61146256 = -558041698;    double maswpgnQfd15885977 = -962714591;    double maswpgnQfd64405277 = -825236603;    double maswpgnQfd5637840 = -857374943;    double maswpgnQfd47357764 = 6051428;    double maswpgnQfd78900747 = -711397143;    double maswpgnQfd17683974 = -723752573;    double maswpgnQfd46198744 = -253809884;    double maswpgnQfd28125641 = -696576981;    double maswpgnQfd9323812 = -366345891;    double maswpgnQfd59766083 = -450923479;    double maswpgnQfd83652267 = -925898066;    double maswpgnQfd91871389 = -737720850;    double maswpgnQfd50202816 = -921430722;    double maswpgnQfd48012799 = -834230485;    double maswpgnQfd94079449 = -2287030;    double maswpgnQfd72575770 = -435524490;    double maswpgnQfd58615350 = -220815247;    double maswpgnQfd53434260 = 61133545;    double maswpgnQfd42105360 = 30505907;    double maswpgnQfd33381000 = -722761907;    double maswpgnQfd18731231 = -621781251;    double maswpgnQfd53038834 = 91493684;    double maswpgnQfd69809386 = -641854807;    double maswpgnQfd17135387 = -435854926;    double maswpgnQfd94057413 = -68080913;    double maswpgnQfd87130186 = -353154209;    double maswpgnQfd48779859 = -620569712;    double maswpgnQfd79462362 = -443700203;    double maswpgnQfd64667159 = -721565336;    double maswpgnQfd80329595 = -3488305;    double maswpgnQfd79258144 = -673022746;    double maswpgnQfd88054700 = -30057539;    double maswpgnQfd39433953 = -119674474;     maswpgnQfd75235295 = maswpgnQfd60080845;     maswpgnQfd60080845 = maswpgnQfd98607966;     maswpgnQfd98607966 = maswpgnQfd27642286;     maswpgnQfd27642286 = maswpgnQfd72890287;     maswpgnQfd72890287 = maswpgnQfd38102845;     maswpgnQfd38102845 = maswpgnQfd49601772;     maswpgnQfd49601772 = maswpgnQfd48317216;     maswpgnQfd48317216 = maswpgnQfd7038994;     maswpgnQfd7038994 = maswpgnQfd71583964;     maswpgnQfd71583964 = maswpgnQfd3946664;     maswpgnQfd3946664 = maswpgnQfd34235382;     maswpgnQfd34235382 = maswpgnQfd75176854;     maswpgnQfd75176854 = maswpgnQfd93037801;     maswpgnQfd93037801 = maswpgnQfd42201089;     maswpgnQfd42201089 = maswpgnQfd89113587;     maswpgnQfd89113587 = maswpgnQfd2294554;     maswpgnQfd2294554 = maswpgnQfd45668332;     maswpgnQfd45668332 = maswpgnQfd3301514;     maswpgnQfd3301514 = maswpgnQfd63043933;     maswpgnQfd63043933 = maswpgnQfd93286490;     maswpgnQfd93286490 = maswpgnQfd16412158;     maswpgnQfd16412158 = maswpgnQfd40652982;     maswpgnQfd40652982 = maswpgnQfd50909557;     maswpgnQfd50909557 = maswpgnQfd91378665;     maswpgnQfd91378665 = maswpgnQfd93685788;     maswpgnQfd93685788 = maswpgnQfd60462437;     maswpgnQfd60462437 = maswpgnQfd79350639;     maswpgnQfd79350639 = maswpgnQfd44684133;     maswpgnQfd44684133 = maswpgnQfd29651064;     maswpgnQfd29651064 = maswpgnQfd2637950;     maswpgnQfd2637950 = maswpgnQfd84342448;     maswpgnQfd84342448 = maswpgnQfd73089126;     maswpgnQfd73089126 = maswpgnQfd59290877;     maswpgnQfd59290877 = maswpgnQfd28632525;     maswpgnQfd28632525 = maswpgnQfd36563249;     maswpgnQfd36563249 = maswpgnQfd41755823;     maswpgnQfd41755823 = maswpgnQfd23393807;     maswpgnQfd23393807 = maswpgnQfd27984359;     maswpgnQfd27984359 = maswpgnQfd57102770;     maswpgnQfd57102770 = maswpgnQfd34918292;     maswpgnQfd34918292 = maswpgnQfd83962678;     maswpgnQfd83962678 = maswpgnQfd56646074;     maswpgnQfd56646074 = maswpgnQfd57000715;     maswpgnQfd57000715 = maswpgnQfd59038167;     maswpgnQfd59038167 = maswpgnQfd41175849;     maswpgnQfd41175849 = maswpgnQfd45672989;     maswpgnQfd45672989 = maswpgnQfd66382988;     maswpgnQfd66382988 = maswpgnQfd6774869;     maswpgnQfd6774869 = maswpgnQfd86068782;     maswpgnQfd86068782 = maswpgnQfd76216803;     maswpgnQfd76216803 = maswpgnQfd60532589;     maswpgnQfd60532589 = maswpgnQfd50961448;     maswpgnQfd50961448 = maswpgnQfd54357895;     maswpgnQfd54357895 = maswpgnQfd6252044;     maswpgnQfd6252044 = maswpgnQfd58823138;     maswpgnQfd58823138 = maswpgnQfd19427863;     maswpgnQfd19427863 = maswpgnQfd47698409;     maswpgnQfd47698409 = maswpgnQfd36263620;     maswpgnQfd36263620 = maswpgnQfd79204499;     maswpgnQfd79204499 = maswpgnQfd77640407;     maswpgnQfd77640407 = maswpgnQfd70251133;     maswpgnQfd70251133 = maswpgnQfd3633084;     maswpgnQfd3633084 = maswpgnQfd77387929;     maswpgnQfd77387929 = maswpgnQfd68946015;     maswpgnQfd68946015 = maswpgnQfd19604215;     maswpgnQfd19604215 = maswpgnQfd61146256;     maswpgnQfd61146256 = maswpgnQfd15885977;     maswpgnQfd15885977 = maswpgnQfd64405277;     maswpgnQfd64405277 = maswpgnQfd5637840;     maswpgnQfd5637840 = maswpgnQfd47357764;     maswpgnQfd47357764 = maswpgnQfd78900747;     maswpgnQfd78900747 = maswpgnQfd17683974;     maswpgnQfd17683974 = maswpgnQfd46198744;     maswpgnQfd46198744 = maswpgnQfd28125641;     maswpgnQfd28125641 = maswpgnQfd9323812;     maswpgnQfd9323812 = maswpgnQfd59766083;     maswpgnQfd59766083 = maswpgnQfd83652267;     maswpgnQfd83652267 = maswpgnQfd91871389;     maswpgnQfd91871389 = maswpgnQfd50202816;     maswpgnQfd50202816 = maswpgnQfd48012799;     maswpgnQfd48012799 = maswpgnQfd94079449;     maswpgnQfd94079449 = maswpgnQfd72575770;     maswpgnQfd72575770 = maswpgnQfd58615350;     maswpgnQfd58615350 = maswpgnQfd53434260;     maswpgnQfd53434260 = maswpgnQfd42105360;     maswpgnQfd42105360 = maswpgnQfd33381000;     maswpgnQfd33381000 = maswpgnQfd18731231;     maswpgnQfd18731231 = maswpgnQfd53038834;     maswpgnQfd53038834 = maswpgnQfd69809386;     maswpgnQfd69809386 = maswpgnQfd17135387;     maswpgnQfd17135387 = maswpgnQfd94057413;     maswpgnQfd94057413 = maswpgnQfd87130186;     maswpgnQfd87130186 = maswpgnQfd48779859;     maswpgnQfd48779859 = maswpgnQfd79462362;     maswpgnQfd79462362 = maswpgnQfd64667159;     maswpgnQfd64667159 = maswpgnQfd80329595;     maswpgnQfd80329595 = maswpgnQfd79258144;     maswpgnQfd79258144 = maswpgnQfd88054700;     maswpgnQfd88054700 = maswpgnQfd39433953;     maswpgnQfd39433953 = maswpgnQfd75235295;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void AJVjiWuuhk66499935() {     double xqNDrRUSTG65355132 = -50954816;    double xqNDrRUSTG81778226 = 10135842;    double xqNDrRUSTG95413877 = 27831748;    double xqNDrRUSTG86220721 = -994205324;    double xqNDrRUSTG94787125 = -983857558;    double xqNDrRUSTG53694681 = -621589302;    double xqNDrRUSTG12812546 = -970747166;    double xqNDrRUSTG70409830 = -288235305;    double xqNDrRUSTG13590845 = -432983914;    double xqNDrRUSTG72479147 = -240470848;    double xqNDrRUSTG419088 = -378264624;    double xqNDrRUSTG83276566 = -921534950;    double xqNDrRUSTG45375900 = -719797120;    double xqNDrRUSTG85300875 = -396645089;    double xqNDrRUSTG85447569 = -4725088;    double xqNDrRUSTG87857876 = -114004977;    double xqNDrRUSTG2109494 = -6530815;    double xqNDrRUSTG90024577 = -244725844;    double xqNDrRUSTG84644175 = -720902340;    double xqNDrRUSTG2441945 = -864655558;    double xqNDrRUSTG60878316 = -566436106;    double xqNDrRUSTG92790005 = -276523249;    double xqNDrRUSTG10769798 = -74099200;    double xqNDrRUSTG2480763 = -288390104;    double xqNDrRUSTG66706543 = 3322183;    double xqNDrRUSTG29050830 = -197775812;    double xqNDrRUSTG52651354 = -50852538;    double xqNDrRUSTG37924539 = -910911792;    double xqNDrRUSTG18571578 = -574169168;    double xqNDrRUSTG53530013 = -951790466;    double xqNDrRUSTG39514031 = -294823398;    double xqNDrRUSTG68433220 = 92941140;    double xqNDrRUSTG67510590 = -450596131;    double xqNDrRUSTG83412359 = -291321085;    double xqNDrRUSTG46587097 = -137744136;    double xqNDrRUSTG32622446 = -82311508;    double xqNDrRUSTG53930760 = -702350167;    double xqNDrRUSTG17668770 = -75495784;    double xqNDrRUSTG73830972 = -101195819;    double xqNDrRUSTG73487804 = -996839213;    double xqNDrRUSTG36473633 = -801980990;    double xqNDrRUSTG24304803 = -693484045;    double xqNDrRUSTG76746275 = 82932899;    double xqNDrRUSTG46894554 = -903831003;    double xqNDrRUSTG35020637 = -807493714;    double xqNDrRUSTG2042812 = -400710875;    double xqNDrRUSTG53794072 = -609228787;    double xqNDrRUSTG32153028 = -523654411;    double xqNDrRUSTG53351912 = -806233464;    double xqNDrRUSTG35394612 = 10894218;    double xqNDrRUSTG18841697 = -216027298;    double xqNDrRUSTG18852954 = -958142108;    double xqNDrRUSTG75862252 = 4442224;    double xqNDrRUSTG17515228 = -982120637;    double xqNDrRUSTG5621619 = -300181429;    double xqNDrRUSTG72565127 = -774431568;    double xqNDrRUSTG71008429 = -915764958;    double xqNDrRUSTG92933114 = -683778149;    double xqNDrRUSTG19514179 = -897527508;    double xqNDrRUSTG65736295 = -686081746;    double xqNDrRUSTG1043328 = -470736764;    double xqNDrRUSTG74888007 = 40164626;    double xqNDrRUSTG51838253 = -714066138;    double xqNDrRUSTG60060831 = -481193449;    double xqNDrRUSTG32965117 = -945647451;    double xqNDrRUSTG31985868 = -371205765;    double xqNDrRUSTG15765976 = -370938820;    double xqNDrRUSTG61963541 = -328476035;    double xqNDrRUSTG38713778 = -158900953;    double xqNDrRUSTG52825124 = -922413581;    double xqNDrRUSTG33927117 = -411654810;    double xqNDrRUSTG84440724 = -931035031;    double xqNDrRUSTG16193606 = -43530025;    double xqNDrRUSTG11156371 = -724063128;    double xqNDrRUSTG65968311 = 37325432;    double xqNDrRUSTG36573514 = -872952061;    double xqNDrRUSTG16043730 = -259456148;    double xqNDrRUSTG63875243 = -170268197;    double xqNDrRUSTG67460125 = -480896391;    double xqNDrRUSTG64663732 = -595966943;    double xqNDrRUSTG75256758 = -588547026;    double xqNDrRUSTG20498326 = -527198128;    double xqNDrRUSTG84572626 = -4678329;    double xqNDrRUSTG83176966 = -485063386;    double xqNDrRUSTG34688317 = -635763168;    double xqNDrRUSTG20661077 = -336681290;    double xqNDrRUSTG92570968 = -911501085;    double xqNDrRUSTG49995362 = -468475494;    double xqNDrRUSTG77790741 = -991139657;    double xqNDrRUSTG74021969 = -363312569;    double xqNDrRUSTG61614016 = -166546550;    double xqNDrRUSTG60997645 = 81427981;    double xqNDrRUSTG98154590 = -177968277;    double xqNDrRUSTG8094678 = -415114073;    double xqNDrRUSTG72444476 = -426102449;    double xqNDrRUSTG61585626 = -742145617;    double xqNDrRUSTG72466550 = -979417907;    double xqNDrRUSTG16685444 = -435873653;    double xqNDrRUSTG13929437 = -958183553;    double xqNDrRUSTG3034770 = -50954816;     xqNDrRUSTG65355132 = xqNDrRUSTG81778226;     xqNDrRUSTG81778226 = xqNDrRUSTG95413877;     xqNDrRUSTG95413877 = xqNDrRUSTG86220721;     xqNDrRUSTG86220721 = xqNDrRUSTG94787125;     xqNDrRUSTG94787125 = xqNDrRUSTG53694681;     xqNDrRUSTG53694681 = xqNDrRUSTG12812546;     xqNDrRUSTG12812546 = xqNDrRUSTG70409830;     xqNDrRUSTG70409830 = xqNDrRUSTG13590845;     xqNDrRUSTG13590845 = xqNDrRUSTG72479147;     xqNDrRUSTG72479147 = xqNDrRUSTG419088;     xqNDrRUSTG419088 = xqNDrRUSTG83276566;     xqNDrRUSTG83276566 = xqNDrRUSTG45375900;     xqNDrRUSTG45375900 = xqNDrRUSTG85300875;     xqNDrRUSTG85300875 = xqNDrRUSTG85447569;     xqNDrRUSTG85447569 = xqNDrRUSTG87857876;     xqNDrRUSTG87857876 = xqNDrRUSTG2109494;     xqNDrRUSTG2109494 = xqNDrRUSTG90024577;     xqNDrRUSTG90024577 = xqNDrRUSTG84644175;     xqNDrRUSTG84644175 = xqNDrRUSTG2441945;     xqNDrRUSTG2441945 = xqNDrRUSTG60878316;     xqNDrRUSTG60878316 = xqNDrRUSTG92790005;     xqNDrRUSTG92790005 = xqNDrRUSTG10769798;     xqNDrRUSTG10769798 = xqNDrRUSTG2480763;     xqNDrRUSTG2480763 = xqNDrRUSTG66706543;     xqNDrRUSTG66706543 = xqNDrRUSTG29050830;     xqNDrRUSTG29050830 = xqNDrRUSTG52651354;     xqNDrRUSTG52651354 = xqNDrRUSTG37924539;     xqNDrRUSTG37924539 = xqNDrRUSTG18571578;     xqNDrRUSTG18571578 = xqNDrRUSTG53530013;     xqNDrRUSTG53530013 = xqNDrRUSTG39514031;     xqNDrRUSTG39514031 = xqNDrRUSTG68433220;     xqNDrRUSTG68433220 = xqNDrRUSTG67510590;     xqNDrRUSTG67510590 = xqNDrRUSTG83412359;     xqNDrRUSTG83412359 = xqNDrRUSTG46587097;     xqNDrRUSTG46587097 = xqNDrRUSTG32622446;     xqNDrRUSTG32622446 = xqNDrRUSTG53930760;     xqNDrRUSTG53930760 = xqNDrRUSTG17668770;     xqNDrRUSTG17668770 = xqNDrRUSTG73830972;     xqNDrRUSTG73830972 = xqNDrRUSTG73487804;     xqNDrRUSTG73487804 = xqNDrRUSTG36473633;     xqNDrRUSTG36473633 = xqNDrRUSTG24304803;     xqNDrRUSTG24304803 = xqNDrRUSTG76746275;     xqNDrRUSTG76746275 = xqNDrRUSTG46894554;     xqNDrRUSTG46894554 = xqNDrRUSTG35020637;     xqNDrRUSTG35020637 = xqNDrRUSTG2042812;     xqNDrRUSTG2042812 = xqNDrRUSTG53794072;     xqNDrRUSTG53794072 = xqNDrRUSTG32153028;     xqNDrRUSTG32153028 = xqNDrRUSTG53351912;     xqNDrRUSTG53351912 = xqNDrRUSTG35394612;     xqNDrRUSTG35394612 = xqNDrRUSTG18841697;     xqNDrRUSTG18841697 = xqNDrRUSTG18852954;     xqNDrRUSTG18852954 = xqNDrRUSTG75862252;     xqNDrRUSTG75862252 = xqNDrRUSTG17515228;     xqNDrRUSTG17515228 = xqNDrRUSTG5621619;     xqNDrRUSTG5621619 = xqNDrRUSTG72565127;     xqNDrRUSTG72565127 = xqNDrRUSTG71008429;     xqNDrRUSTG71008429 = xqNDrRUSTG92933114;     xqNDrRUSTG92933114 = xqNDrRUSTG19514179;     xqNDrRUSTG19514179 = xqNDrRUSTG65736295;     xqNDrRUSTG65736295 = xqNDrRUSTG1043328;     xqNDrRUSTG1043328 = xqNDrRUSTG74888007;     xqNDrRUSTG74888007 = xqNDrRUSTG51838253;     xqNDrRUSTG51838253 = xqNDrRUSTG60060831;     xqNDrRUSTG60060831 = xqNDrRUSTG32965117;     xqNDrRUSTG32965117 = xqNDrRUSTG31985868;     xqNDrRUSTG31985868 = xqNDrRUSTG15765976;     xqNDrRUSTG15765976 = xqNDrRUSTG61963541;     xqNDrRUSTG61963541 = xqNDrRUSTG38713778;     xqNDrRUSTG38713778 = xqNDrRUSTG52825124;     xqNDrRUSTG52825124 = xqNDrRUSTG33927117;     xqNDrRUSTG33927117 = xqNDrRUSTG84440724;     xqNDrRUSTG84440724 = xqNDrRUSTG16193606;     xqNDrRUSTG16193606 = xqNDrRUSTG11156371;     xqNDrRUSTG11156371 = xqNDrRUSTG65968311;     xqNDrRUSTG65968311 = xqNDrRUSTG36573514;     xqNDrRUSTG36573514 = xqNDrRUSTG16043730;     xqNDrRUSTG16043730 = xqNDrRUSTG63875243;     xqNDrRUSTG63875243 = xqNDrRUSTG67460125;     xqNDrRUSTG67460125 = xqNDrRUSTG64663732;     xqNDrRUSTG64663732 = xqNDrRUSTG75256758;     xqNDrRUSTG75256758 = xqNDrRUSTG20498326;     xqNDrRUSTG20498326 = xqNDrRUSTG84572626;     xqNDrRUSTG84572626 = xqNDrRUSTG83176966;     xqNDrRUSTG83176966 = xqNDrRUSTG34688317;     xqNDrRUSTG34688317 = xqNDrRUSTG20661077;     xqNDrRUSTG20661077 = xqNDrRUSTG92570968;     xqNDrRUSTG92570968 = xqNDrRUSTG49995362;     xqNDrRUSTG49995362 = xqNDrRUSTG77790741;     xqNDrRUSTG77790741 = xqNDrRUSTG74021969;     xqNDrRUSTG74021969 = xqNDrRUSTG61614016;     xqNDrRUSTG61614016 = xqNDrRUSTG60997645;     xqNDrRUSTG60997645 = xqNDrRUSTG98154590;     xqNDrRUSTG98154590 = xqNDrRUSTG8094678;     xqNDrRUSTG8094678 = xqNDrRUSTG72444476;     xqNDrRUSTG72444476 = xqNDrRUSTG61585626;     xqNDrRUSTG61585626 = xqNDrRUSTG72466550;     xqNDrRUSTG72466550 = xqNDrRUSTG16685444;     xqNDrRUSTG16685444 = xqNDrRUSTG13929437;     xqNDrRUSTG13929437 = xqNDrRUSTG3034770;     xqNDrRUSTG3034770 = xqNDrRUSTG65355132;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void DuKwYkzVVA94424389() {     double IryVAoBgsc36279541 = -10984474;    double IryVAoBgsc69750067 = -808372246;    double IryVAoBgsc68873619 = -446373788;    double IryVAoBgsc45587570 = -815966637;    double IryVAoBgsc98517561 = -726699927;    double IryVAoBgsc91334993 = -346852281;    double IryVAoBgsc65580023 = -955662167;    double IryVAoBgsc25458902 = -972526269;    double IryVAoBgsc33885891 = -596000658;    double IryVAoBgsc5645059 = 66962027;    double IryVAoBgsc56461952 = -22808011;    double IryVAoBgsc70121186 = -914298131;    double IryVAoBgsc89992277 = -702163655;    double IryVAoBgsc37738381 = -4218856;    double IryVAoBgsc56664493 = 51137733;    double IryVAoBgsc80375930 = -152832540;    double IryVAoBgsc57928605 = -140865351;    double IryVAoBgsc66544428 = 5489641;    double IryVAoBgsc65316565 = -736046917;    double IryVAoBgsc18042619 = -5753238;    double IryVAoBgsc7382619 = -170519110;    double IryVAoBgsc21336789 = 60196047;    double IryVAoBgsc14942160 = 9594274;    double IryVAoBgsc46416545 = -329118789;    double IryVAoBgsc54299756 = -717954360;    double IryVAoBgsc33873097 = -766723497;    double IryVAoBgsc3270921 = -462621107;    double IryVAoBgsc83977864 = -641489153;    double IryVAoBgsc99229559 = 23711542;    double IryVAoBgsc88506965 = -245373433;    double IryVAoBgsc43267815 = 88308863;    double IryVAoBgsc59355399 = -161179927;    double IryVAoBgsc6494189 = -543843870;    double IryVAoBgsc42626375 = -544026980;    double IryVAoBgsc95845966 = -880630713;    double IryVAoBgsc92915943 = -431676373;    double IryVAoBgsc40813025 = -332088869;    double IryVAoBgsc50181896 = -45544267;    double IryVAoBgsc99298498 = -890266955;    double IryVAoBgsc30157976 = -317932619;    double IryVAoBgsc15521181 = -252434920;    double IryVAoBgsc17337396 = -788782545;    double IryVAoBgsc95229672 = -664298419;    double IryVAoBgsc67925332 = -355531380;    double IryVAoBgsc51035502 = 12743365;    double IryVAoBgsc53537500 = -666513468;    double IryVAoBgsc64786607 = 4079114;    double IryVAoBgsc92222070 = -247946242;    double IryVAoBgsc80478855 = -569943363;    double IryVAoBgsc64408367 = -284134527;    double IryVAoBgsc67123774 = -386025406;    double IryVAoBgsc71276641 = 96698947;    double IryVAoBgsc37656201 = -715594875;    double IryVAoBgsc39248651 = -833217786;    double IryVAoBgsc87041770 = -136262443;    double IryVAoBgsc14942752 = 28819479;    double IryVAoBgsc54807907 = -717966520;    double IryVAoBgsc22457074 = -17254999;    double IryVAoBgsc91287814 = 1987723;    double IryVAoBgsc64644465 = -959976430;    double IryVAoBgsc88064073 = -884231175;    double IryVAoBgsc81602158 = -214173015;    double IryVAoBgsc26229342 = -896237812;    double IryVAoBgsc45378926 = -250627225;    double IryVAoBgsc62377243 = 78653164;    double IryVAoBgsc97106552 = -861628084;    double IryVAoBgsc63626997 = -270454261;    double IryVAoBgsc47365902 = -58136676;    double IryVAoBgsc41892415 = -123588144;    double IryVAoBgsc63748549 = -517185894;    double IryVAoBgsc39562906 = -820743671;    double IryVAoBgsc7746709 = 4678916;    double IryVAoBgsc67245929 = -104243404;    double IryVAoBgsc35158589 = -318114298;    double IryVAoBgsc2521438 = -753318318;    double IryVAoBgsc90045223 = -381736566;    double IryVAoBgsc26107117 = -275505535;    double IryVAoBgsc47016828 = -634874347;    double IryVAoBgsc95381042 = -241862155;    double IryVAoBgsc762256 = 48559107;    double IryVAoBgsc69086489 = -670802612;    double IryVAoBgsc11048850 = -114674866;    double IryVAoBgsc3499009 = 28454210;    double IryVAoBgsc34821193 = -692153931;    double IryVAoBgsc21383191 = -859348028;    double IryVAoBgsc71991174 = 91609915;    double IryVAoBgsc21699199 = -445585052;    double IryVAoBgsc67245538 = -710626085;    double IryVAoBgsc55584604 = -307764538;    double IryVAoBgsc80903214 = -809450192;    double IryVAoBgsc38108037 = -713709853;    double IryVAoBgsc18355951 = -214833871;    double IryVAoBgsc58894082 = 52468009;    double IryVAoBgsc34654034 = -930290526;    double IryVAoBgsc42093903 = -433701445;    double IryVAoBgsc33919022 = 61738094;    double IryVAoBgsc91108053 = -892544733;    double IryVAoBgsc49850746 = -313671194;    double IryVAoBgsc5548089 = -334184544;    double IryVAoBgsc53928950 = -10984474;     IryVAoBgsc36279541 = IryVAoBgsc69750067;     IryVAoBgsc69750067 = IryVAoBgsc68873619;     IryVAoBgsc68873619 = IryVAoBgsc45587570;     IryVAoBgsc45587570 = IryVAoBgsc98517561;     IryVAoBgsc98517561 = IryVAoBgsc91334993;     IryVAoBgsc91334993 = IryVAoBgsc65580023;     IryVAoBgsc65580023 = IryVAoBgsc25458902;     IryVAoBgsc25458902 = IryVAoBgsc33885891;     IryVAoBgsc33885891 = IryVAoBgsc5645059;     IryVAoBgsc5645059 = IryVAoBgsc56461952;     IryVAoBgsc56461952 = IryVAoBgsc70121186;     IryVAoBgsc70121186 = IryVAoBgsc89992277;     IryVAoBgsc89992277 = IryVAoBgsc37738381;     IryVAoBgsc37738381 = IryVAoBgsc56664493;     IryVAoBgsc56664493 = IryVAoBgsc80375930;     IryVAoBgsc80375930 = IryVAoBgsc57928605;     IryVAoBgsc57928605 = IryVAoBgsc66544428;     IryVAoBgsc66544428 = IryVAoBgsc65316565;     IryVAoBgsc65316565 = IryVAoBgsc18042619;     IryVAoBgsc18042619 = IryVAoBgsc7382619;     IryVAoBgsc7382619 = IryVAoBgsc21336789;     IryVAoBgsc21336789 = IryVAoBgsc14942160;     IryVAoBgsc14942160 = IryVAoBgsc46416545;     IryVAoBgsc46416545 = IryVAoBgsc54299756;     IryVAoBgsc54299756 = IryVAoBgsc33873097;     IryVAoBgsc33873097 = IryVAoBgsc3270921;     IryVAoBgsc3270921 = IryVAoBgsc83977864;     IryVAoBgsc83977864 = IryVAoBgsc99229559;     IryVAoBgsc99229559 = IryVAoBgsc88506965;     IryVAoBgsc88506965 = IryVAoBgsc43267815;     IryVAoBgsc43267815 = IryVAoBgsc59355399;     IryVAoBgsc59355399 = IryVAoBgsc6494189;     IryVAoBgsc6494189 = IryVAoBgsc42626375;     IryVAoBgsc42626375 = IryVAoBgsc95845966;     IryVAoBgsc95845966 = IryVAoBgsc92915943;     IryVAoBgsc92915943 = IryVAoBgsc40813025;     IryVAoBgsc40813025 = IryVAoBgsc50181896;     IryVAoBgsc50181896 = IryVAoBgsc99298498;     IryVAoBgsc99298498 = IryVAoBgsc30157976;     IryVAoBgsc30157976 = IryVAoBgsc15521181;     IryVAoBgsc15521181 = IryVAoBgsc17337396;     IryVAoBgsc17337396 = IryVAoBgsc95229672;     IryVAoBgsc95229672 = IryVAoBgsc67925332;     IryVAoBgsc67925332 = IryVAoBgsc51035502;     IryVAoBgsc51035502 = IryVAoBgsc53537500;     IryVAoBgsc53537500 = IryVAoBgsc64786607;     IryVAoBgsc64786607 = IryVAoBgsc92222070;     IryVAoBgsc92222070 = IryVAoBgsc80478855;     IryVAoBgsc80478855 = IryVAoBgsc64408367;     IryVAoBgsc64408367 = IryVAoBgsc67123774;     IryVAoBgsc67123774 = IryVAoBgsc71276641;     IryVAoBgsc71276641 = IryVAoBgsc37656201;     IryVAoBgsc37656201 = IryVAoBgsc39248651;     IryVAoBgsc39248651 = IryVAoBgsc87041770;     IryVAoBgsc87041770 = IryVAoBgsc14942752;     IryVAoBgsc14942752 = IryVAoBgsc54807907;     IryVAoBgsc54807907 = IryVAoBgsc22457074;     IryVAoBgsc22457074 = IryVAoBgsc91287814;     IryVAoBgsc91287814 = IryVAoBgsc64644465;     IryVAoBgsc64644465 = IryVAoBgsc88064073;     IryVAoBgsc88064073 = IryVAoBgsc81602158;     IryVAoBgsc81602158 = IryVAoBgsc26229342;     IryVAoBgsc26229342 = IryVAoBgsc45378926;     IryVAoBgsc45378926 = IryVAoBgsc62377243;     IryVAoBgsc62377243 = IryVAoBgsc97106552;     IryVAoBgsc97106552 = IryVAoBgsc63626997;     IryVAoBgsc63626997 = IryVAoBgsc47365902;     IryVAoBgsc47365902 = IryVAoBgsc41892415;     IryVAoBgsc41892415 = IryVAoBgsc63748549;     IryVAoBgsc63748549 = IryVAoBgsc39562906;     IryVAoBgsc39562906 = IryVAoBgsc7746709;     IryVAoBgsc7746709 = IryVAoBgsc67245929;     IryVAoBgsc67245929 = IryVAoBgsc35158589;     IryVAoBgsc35158589 = IryVAoBgsc2521438;     IryVAoBgsc2521438 = IryVAoBgsc90045223;     IryVAoBgsc90045223 = IryVAoBgsc26107117;     IryVAoBgsc26107117 = IryVAoBgsc47016828;     IryVAoBgsc47016828 = IryVAoBgsc95381042;     IryVAoBgsc95381042 = IryVAoBgsc762256;     IryVAoBgsc762256 = IryVAoBgsc69086489;     IryVAoBgsc69086489 = IryVAoBgsc11048850;     IryVAoBgsc11048850 = IryVAoBgsc3499009;     IryVAoBgsc3499009 = IryVAoBgsc34821193;     IryVAoBgsc34821193 = IryVAoBgsc21383191;     IryVAoBgsc21383191 = IryVAoBgsc71991174;     IryVAoBgsc71991174 = IryVAoBgsc21699199;     IryVAoBgsc21699199 = IryVAoBgsc67245538;     IryVAoBgsc67245538 = IryVAoBgsc55584604;     IryVAoBgsc55584604 = IryVAoBgsc80903214;     IryVAoBgsc80903214 = IryVAoBgsc38108037;     IryVAoBgsc38108037 = IryVAoBgsc18355951;     IryVAoBgsc18355951 = IryVAoBgsc58894082;     IryVAoBgsc58894082 = IryVAoBgsc34654034;     IryVAoBgsc34654034 = IryVAoBgsc42093903;     IryVAoBgsc42093903 = IryVAoBgsc33919022;     IryVAoBgsc33919022 = IryVAoBgsc91108053;     IryVAoBgsc91108053 = IryVAoBgsc49850746;     IryVAoBgsc49850746 = IryVAoBgsc5548089;     IryVAoBgsc5548089 = IryVAoBgsc53928950;     IryVAoBgsc53928950 = IryVAoBgsc36279541;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void lRNuRWGMjR70106312() {     double LNtZGgIroZ77862087 = -716639121;    double LNtZGgIroZ87823108 = -355928508;    double LNtZGgIroZ20989068 = -305745171;    double LNtZGgIroZ59805845 = 92674492;    double LNtZGgIroZ14858217 = -884593322;    double LNtZGgIroZ84169635 = -74263600;    double LNtZGgIroZ68179059 = -134816411;    double LNtZGgIroZ68136303 = -99457006;    double LNtZGgIroZ17305828 = -38718661;    double LNtZGgIroZ65137916 = -289893578;    double LNtZGgIroZ34433372 = -842781254;    double LNtZGgIroZ88220700 = -387346741;    double LNtZGgIroZ82583127 = -572408775;    double LNtZGgIroZ20178701 = -167667782;    double LNtZGgIroZ65429327 = -80036596;    double LNtZGgIroZ30858078 = -528848040;    double LNtZGgIroZ51747785 = -364770446;    double LNtZGgIroZ40357240 = -436389448;    double LNtZGgIroZ7268467 = -840397168;    double LNtZGgIroZ20356239 = -177192772;    double LNtZGgIroZ29353251 = 27185119;    double LNtZGgIroZ32983071 = -524378081;    double LNtZGgIroZ84179935 = -15597555;    double LNtZGgIroZ80551755 = -81327859;    double LNtZGgIroZ77574667 = -688441739;    double LNtZGgIroZ52718866 = -425749699;    double LNtZGgIroZ91929690 = -968767738;    double LNtZGgIroZ2409890 = -268223292;    double LNtZGgIroZ99351582 = -126695650;    double LNtZGgIroZ86566142 = -421920097;    double LNtZGgIroZ20680918 = 10100672;    double LNtZGgIroZ10065183 = -351776396;    double LNtZGgIroZ42970725 = -382109001;    double LNtZGgIroZ66922528 = -483580826;    double LNtZGgIroZ40771034 = -111150144;    double LNtZGgIroZ70374511 = -780502040;    double LNtZGgIroZ59545408 = -50767401;    double LNtZGgIroZ65569833 = -904443179;    double LNtZGgIroZ67985717 = -922385312;    double LNtZGgIroZ10058554 = -647202702;    double LNtZGgIroZ66786345 = 1036170;    double LNtZGgIroZ53155318 = -459678032;    double LNtZGgIroZ2396669 = -839153535;    double LNtZGgIroZ36232513 = -322242284;    double LNtZGgIroZ78986373 = -102406549;    double LNtZGgIroZ71010055 = -878608546;    double LNtZGgIroZ74212552 = -117402162;    double LNtZGgIroZ42521743 = -915607012;    double LNtZGgIroZ94388860 = -755653370;    double LNtZGgIroZ81804186 = -175147264;    double LNtZGgIroZ70335806 = -524040627;    double LNtZGgIroZ51024576 = -635533972;    double LNtZGgIroZ79077458 = -371376009;    double LNtZGgIroZ40959106 = -813276579;    double LNtZGgIroZ40753062 = -326385093;    double LNtZGgIroZ44879016 = -92261041;    double LNtZGgIroZ3643174 = -240330953;    double LNtZGgIroZ40437312 = -124417312;    double LNtZGgIroZ82231177 = -218883770;    double LNtZGgIroZ62139351 = -358843624;    double LNtZGgIroZ92239944 = -105495863;    double LNtZGgIroZ65769170 = -866593120;    double LNtZGgIroZ68784720 = -972761356;    double LNtZGgIroZ30739685 = -616798564;    double LNtZGgIroZ44456999 = -199994250;    double LNtZGgIroZ24368190 = -391004859;    double LNtZGgIroZ45249975 = 94762260;    double LNtZGgIroZ15660599 = 11172051;    double LNtZGgIroZ79407667 = 43482362;    double LNtZGgIroZ95054815 = -299534556;    double LNtZGgIroZ71312669 = -378080639;    double LNtZGgIroZ86177951 = -460327268;    double LNtZGgIroZ72371522 = -514004136;    double LNtZGgIroZ97209913 = -93194467;    double LNtZGgIroZ53569894 = -78228942;    double LNtZGgIroZ76197932 = -513136849;    double LNtZGgIroZ30586403 = -685224546;    double LNtZGgIroZ47947423 = -693355271;    double LNtZGgIroZ1565382 = -978921311;    double LNtZGgIroZ6564613 = -809833193;    double LNtZGgIroZ78506314 = -208347538;    double LNtZGgIroZ49407948 = 46839273;    double LNtZGgIroZ8021029 = -512569923;    double LNtZGgIroZ17547397 = -951548386;    double LNtZGgIroZ16230337 = -897879471;    double LNtZGgIroZ69656342 = -354365357;    double LNtZGgIroZ30987724 = -980400387;    double LNtZGgIroZ2011619 = -568832423;    double LNtZGgIroZ26169467 = -57195733;    double LNtZGgIroZ95892018 = 81110896;    double LNtZGgIroZ66731337 = -440171088;    double LNtZGgIroZ19108097 = -926350089;    double LNtZGgIroZ83338655 = -585559409;    double LNtZGgIroZ5846367 = -463541689;    double LNtZGgIroZ17818609 = -441706840;    double LNtZGgIroZ1017176 = -132370711;    double LNtZGgIroZ84370598 = -486916676;    double LNtZGgIroZ71656984 = -122354971;    double LNtZGgIroZ91775513 = -22248035;    double LNtZGgIroZ54618184 = -716639121;     LNtZGgIroZ77862087 = LNtZGgIroZ87823108;     LNtZGgIroZ87823108 = LNtZGgIroZ20989068;     LNtZGgIroZ20989068 = LNtZGgIroZ59805845;     LNtZGgIroZ59805845 = LNtZGgIroZ14858217;     LNtZGgIroZ14858217 = LNtZGgIroZ84169635;     LNtZGgIroZ84169635 = LNtZGgIroZ68179059;     LNtZGgIroZ68179059 = LNtZGgIroZ68136303;     LNtZGgIroZ68136303 = LNtZGgIroZ17305828;     LNtZGgIroZ17305828 = LNtZGgIroZ65137916;     LNtZGgIroZ65137916 = LNtZGgIroZ34433372;     LNtZGgIroZ34433372 = LNtZGgIroZ88220700;     LNtZGgIroZ88220700 = LNtZGgIroZ82583127;     LNtZGgIroZ82583127 = LNtZGgIroZ20178701;     LNtZGgIroZ20178701 = LNtZGgIroZ65429327;     LNtZGgIroZ65429327 = LNtZGgIroZ30858078;     LNtZGgIroZ30858078 = LNtZGgIroZ51747785;     LNtZGgIroZ51747785 = LNtZGgIroZ40357240;     LNtZGgIroZ40357240 = LNtZGgIroZ7268467;     LNtZGgIroZ7268467 = LNtZGgIroZ20356239;     LNtZGgIroZ20356239 = LNtZGgIroZ29353251;     LNtZGgIroZ29353251 = LNtZGgIroZ32983071;     LNtZGgIroZ32983071 = LNtZGgIroZ84179935;     LNtZGgIroZ84179935 = LNtZGgIroZ80551755;     LNtZGgIroZ80551755 = LNtZGgIroZ77574667;     LNtZGgIroZ77574667 = LNtZGgIroZ52718866;     LNtZGgIroZ52718866 = LNtZGgIroZ91929690;     LNtZGgIroZ91929690 = LNtZGgIroZ2409890;     LNtZGgIroZ2409890 = LNtZGgIroZ99351582;     LNtZGgIroZ99351582 = LNtZGgIroZ86566142;     LNtZGgIroZ86566142 = LNtZGgIroZ20680918;     LNtZGgIroZ20680918 = LNtZGgIroZ10065183;     LNtZGgIroZ10065183 = LNtZGgIroZ42970725;     LNtZGgIroZ42970725 = LNtZGgIroZ66922528;     LNtZGgIroZ66922528 = LNtZGgIroZ40771034;     LNtZGgIroZ40771034 = LNtZGgIroZ70374511;     LNtZGgIroZ70374511 = LNtZGgIroZ59545408;     LNtZGgIroZ59545408 = LNtZGgIroZ65569833;     LNtZGgIroZ65569833 = LNtZGgIroZ67985717;     LNtZGgIroZ67985717 = LNtZGgIroZ10058554;     LNtZGgIroZ10058554 = LNtZGgIroZ66786345;     LNtZGgIroZ66786345 = LNtZGgIroZ53155318;     LNtZGgIroZ53155318 = LNtZGgIroZ2396669;     LNtZGgIroZ2396669 = LNtZGgIroZ36232513;     LNtZGgIroZ36232513 = LNtZGgIroZ78986373;     LNtZGgIroZ78986373 = LNtZGgIroZ71010055;     LNtZGgIroZ71010055 = LNtZGgIroZ74212552;     LNtZGgIroZ74212552 = LNtZGgIroZ42521743;     LNtZGgIroZ42521743 = LNtZGgIroZ94388860;     LNtZGgIroZ94388860 = LNtZGgIroZ81804186;     LNtZGgIroZ81804186 = LNtZGgIroZ70335806;     LNtZGgIroZ70335806 = LNtZGgIroZ51024576;     LNtZGgIroZ51024576 = LNtZGgIroZ79077458;     LNtZGgIroZ79077458 = LNtZGgIroZ40959106;     LNtZGgIroZ40959106 = LNtZGgIroZ40753062;     LNtZGgIroZ40753062 = LNtZGgIroZ44879016;     LNtZGgIroZ44879016 = LNtZGgIroZ3643174;     LNtZGgIroZ3643174 = LNtZGgIroZ40437312;     LNtZGgIroZ40437312 = LNtZGgIroZ82231177;     LNtZGgIroZ82231177 = LNtZGgIroZ62139351;     LNtZGgIroZ62139351 = LNtZGgIroZ92239944;     LNtZGgIroZ92239944 = LNtZGgIroZ65769170;     LNtZGgIroZ65769170 = LNtZGgIroZ68784720;     LNtZGgIroZ68784720 = LNtZGgIroZ30739685;     LNtZGgIroZ30739685 = LNtZGgIroZ44456999;     LNtZGgIroZ44456999 = LNtZGgIroZ24368190;     LNtZGgIroZ24368190 = LNtZGgIroZ45249975;     LNtZGgIroZ45249975 = LNtZGgIroZ15660599;     LNtZGgIroZ15660599 = LNtZGgIroZ79407667;     LNtZGgIroZ79407667 = LNtZGgIroZ95054815;     LNtZGgIroZ95054815 = LNtZGgIroZ71312669;     LNtZGgIroZ71312669 = LNtZGgIroZ86177951;     LNtZGgIroZ86177951 = LNtZGgIroZ72371522;     LNtZGgIroZ72371522 = LNtZGgIroZ97209913;     LNtZGgIroZ97209913 = LNtZGgIroZ53569894;     LNtZGgIroZ53569894 = LNtZGgIroZ76197932;     LNtZGgIroZ76197932 = LNtZGgIroZ30586403;     LNtZGgIroZ30586403 = LNtZGgIroZ47947423;     LNtZGgIroZ47947423 = LNtZGgIroZ1565382;     LNtZGgIroZ1565382 = LNtZGgIroZ6564613;     LNtZGgIroZ6564613 = LNtZGgIroZ78506314;     LNtZGgIroZ78506314 = LNtZGgIroZ49407948;     LNtZGgIroZ49407948 = LNtZGgIroZ8021029;     LNtZGgIroZ8021029 = LNtZGgIroZ17547397;     LNtZGgIroZ17547397 = LNtZGgIroZ16230337;     LNtZGgIroZ16230337 = LNtZGgIroZ69656342;     LNtZGgIroZ69656342 = LNtZGgIroZ30987724;     LNtZGgIroZ30987724 = LNtZGgIroZ2011619;     LNtZGgIroZ2011619 = LNtZGgIroZ26169467;     LNtZGgIroZ26169467 = LNtZGgIroZ95892018;     LNtZGgIroZ95892018 = LNtZGgIroZ66731337;     LNtZGgIroZ66731337 = LNtZGgIroZ19108097;     LNtZGgIroZ19108097 = LNtZGgIroZ83338655;     LNtZGgIroZ83338655 = LNtZGgIroZ5846367;     LNtZGgIroZ5846367 = LNtZGgIroZ17818609;     LNtZGgIroZ17818609 = LNtZGgIroZ1017176;     LNtZGgIroZ1017176 = LNtZGgIroZ84370598;     LNtZGgIroZ84370598 = LNtZGgIroZ71656984;     LNtZGgIroZ71656984 = LNtZGgIroZ91775513;     LNtZGgIroZ91775513 = LNtZGgIroZ54618184;     LNtZGgIroZ54618184 = LNtZGgIroZ77862087;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void xpqeXFMoZa98030765() {     double zatHkpdAIj48786495 = -676668779;    double zatHkpdAIj75794949 = -74436596;    double zatHkpdAIj94448808 = -779950707;    double zatHkpdAIj19172694 = -829086821;    double zatHkpdAIj18588654 = -627435691;    double zatHkpdAIj21809947 = -899526579;    double zatHkpdAIj20946536 = -119731413;    double zatHkpdAIj23185374 = -783747969;    double zatHkpdAIj37600874 = -201735405;    double zatHkpdAIj98303826 = 17539297;    double zatHkpdAIj90476236 = -487324641;    double zatHkpdAIj75065320 = -380109922;    double zatHkpdAIj27199504 = -554775310;    double zatHkpdAIj72616207 = -875241549;    double zatHkpdAIj36646251 = -24173774;    double zatHkpdAIj23376133 = -567675603;    double zatHkpdAIj7566897 = -499104982;    double zatHkpdAIj16877090 = -186173964;    double zatHkpdAIj87940856 = -855541744;    double zatHkpdAIj35956913 = -418290453;    double zatHkpdAIj75857552 = -676897884;    double zatHkpdAIj61529855 = -187658785;    double zatHkpdAIj88352298 = 68095919;    double zatHkpdAIj24487538 = -122056545;    double zatHkpdAIj65167880 = -309718282;    double zatHkpdAIj57541133 = -994697384;    double zatHkpdAIj42549257 = -280536307;    double zatHkpdAIj48463214 = 1199347;    double zatHkpdAIj80009565 = -628814940;    double zatHkpdAIj21543095 = -815503065;    double zatHkpdAIj24434702 = -706767068;    double zatHkpdAIj987362 = -605897463;    double zatHkpdAIj81954323 = -475356740;    double zatHkpdAIj26136545 = -736286720;    double zatHkpdAIj90029903 = -854036721;    double zatHkpdAIj30668009 = -29866906;    double zatHkpdAIj46427674 = -780506103;    double zatHkpdAIj98082960 = -874491662;    double zatHkpdAIj93453243 = -611456449;    double zatHkpdAIj66728725 = 31703892;    double zatHkpdAIj45833893 = -549417761;    double zatHkpdAIj46187911 = -554976531;    double zatHkpdAIj20880066 = -486384853;    double zatHkpdAIj57263290 = -873942661;    double zatHkpdAIj95001238 = -382169470;    double zatHkpdAIj22504744 = -44411140;    double zatHkpdAIj85205087 = -604094261;    double zatHkpdAIj2590786 = -639898842;    double zatHkpdAIj21515804 = -519363269;    double zatHkpdAIj10817942 = -470176010;    double zatHkpdAIj18617884 = -694038735;    double zatHkpdAIj3448263 = -680692916;    double zatHkpdAIj40871407 = 8586891;    double zatHkpdAIj62692529 = -664373727;    double zatHkpdAIj22173214 = -162466107;    double zatHkpdAIj87256640 = -389009995;    double zatHkpdAIj87442650 = -42532515;    double zatHkpdAIj69961271 = -557894163;    double zatHkpdAIj54004814 = -419368539;    double zatHkpdAIj61047520 = -632738308;    double zatHkpdAIj79260690 = -518990273;    double zatHkpdAIj72483321 = -20930761;    double zatHkpdAIj43175809 = -54933030;    double zatHkpdAIj16057779 = -386232341;    double zatHkpdAIj73869125 = -275693635;    double zatHkpdAIj89488874 = -881427178;    double zatHkpdAIj93110996 = -904753182;    double zatHkpdAIj1062960 = -818488590;    double zatHkpdAIj82586304 = 78795172;    double zatHkpdAIj5978242 = -994306869;    double zatHkpdAIj76948459 = -787169500;    double zatHkpdAIj9483937 = -624613320;    double zatHkpdAIj23423846 = -574717515;    double zatHkpdAIj21212132 = -787245637;    double zatHkpdAIj90123020 = -868872693;    double zatHkpdAIj29669641 = -21921354;    double zatHkpdAIj40649790 = -701273933;    double zatHkpdAIj31089008 = -57961421;    double zatHkpdAIj29486299 = -739887075;    double zatHkpdAIj42663136 = -165307143;    double zatHkpdAIj72336045 = -290603124;    double zatHkpdAIj39958472 = -640637465;    double zatHkpdAIj26947411 = -479437384;    double zatHkpdAIj69191624 = -58638930;    double zatHkpdAIj2925211 = -21464330;    double zatHkpdAIj20986439 = 73925848;    double zatHkpdAIj60115954 = -514484355;    double zatHkpdAIj19261795 = -810983013;    double zatHkpdAIj3963331 = -473820614;    double zatHkpdAIj2773263 = -365026727;    double zatHkpdAIj43225358 = -987334391;    double zatHkpdAIj76466403 = -122611941;    double zatHkpdAIj44078146 = -355123124;    double zatHkpdAIj32405724 = -978718142;    double zatHkpdAIj87468035 = -449305835;    double zatHkpdAIj73350571 = -428487000;    double zatHkpdAIj3012102 = -400043502;    double zatHkpdAIj4822287 = -152513;    double zatHkpdAIj83394165 = -498249026;    double zatHkpdAIj5512365 = -676668779;     zatHkpdAIj48786495 = zatHkpdAIj75794949;     zatHkpdAIj75794949 = zatHkpdAIj94448808;     zatHkpdAIj94448808 = zatHkpdAIj19172694;     zatHkpdAIj19172694 = zatHkpdAIj18588654;     zatHkpdAIj18588654 = zatHkpdAIj21809947;     zatHkpdAIj21809947 = zatHkpdAIj20946536;     zatHkpdAIj20946536 = zatHkpdAIj23185374;     zatHkpdAIj23185374 = zatHkpdAIj37600874;     zatHkpdAIj37600874 = zatHkpdAIj98303826;     zatHkpdAIj98303826 = zatHkpdAIj90476236;     zatHkpdAIj90476236 = zatHkpdAIj75065320;     zatHkpdAIj75065320 = zatHkpdAIj27199504;     zatHkpdAIj27199504 = zatHkpdAIj72616207;     zatHkpdAIj72616207 = zatHkpdAIj36646251;     zatHkpdAIj36646251 = zatHkpdAIj23376133;     zatHkpdAIj23376133 = zatHkpdAIj7566897;     zatHkpdAIj7566897 = zatHkpdAIj16877090;     zatHkpdAIj16877090 = zatHkpdAIj87940856;     zatHkpdAIj87940856 = zatHkpdAIj35956913;     zatHkpdAIj35956913 = zatHkpdAIj75857552;     zatHkpdAIj75857552 = zatHkpdAIj61529855;     zatHkpdAIj61529855 = zatHkpdAIj88352298;     zatHkpdAIj88352298 = zatHkpdAIj24487538;     zatHkpdAIj24487538 = zatHkpdAIj65167880;     zatHkpdAIj65167880 = zatHkpdAIj57541133;     zatHkpdAIj57541133 = zatHkpdAIj42549257;     zatHkpdAIj42549257 = zatHkpdAIj48463214;     zatHkpdAIj48463214 = zatHkpdAIj80009565;     zatHkpdAIj80009565 = zatHkpdAIj21543095;     zatHkpdAIj21543095 = zatHkpdAIj24434702;     zatHkpdAIj24434702 = zatHkpdAIj987362;     zatHkpdAIj987362 = zatHkpdAIj81954323;     zatHkpdAIj81954323 = zatHkpdAIj26136545;     zatHkpdAIj26136545 = zatHkpdAIj90029903;     zatHkpdAIj90029903 = zatHkpdAIj30668009;     zatHkpdAIj30668009 = zatHkpdAIj46427674;     zatHkpdAIj46427674 = zatHkpdAIj98082960;     zatHkpdAIj98082960 = zatHkpdAIj93453243;     zatHkpdAIj93453243 = zatHkpdAIj66728725;     zatHkpdAIj66728725 = zatHkpdAIj45833893;     zatHkpdAIj45833893 = zatHkpdAIj46187911;     zatHkpdAIj46187911 = zatHkpdAIj20880066;     zatHkpdAIj20880066 = zatHkpdAIj57263290;     zatHkpdAIj57263290 = zatHkpdAIj95001238;     zatHkpdAIj95001238 = zatHkpdAIj22504744;     zatHkpdAIj22504744 = zatHkpdAIj85205087;     zatHkpdAIj85205087 = zatHkpdAIj2590786;     zatHkpdAIj2590786 = zatHkpdAIj21515804;     zatHkpdAIj21515804 = zatHkpdAIj10817942;     zatHkpdAIj10817942 = zatHkpdAIj18617884;     zatHkpdAIj18617884 = zatHkpdAIj3448263;     zatHkpdAIj3448263 = zatHkpdAIj40871407;     zatHkpdAIj40871407 = zatHkpdAIj62692529;     zatHkpdAIj62692529 = zatHkpdAIj22173214;     zatHkpdAIj22173214 = zatHkpdAIj87256640;     zatHkpdAIj87256640 = zatHkpdAIj87442650;     zatHkpdAIj87442650 = zatHkpdAIj69961271;     zatHkpdAIj69961271 = zatHkpdAIj54004814;     zatHkpdAIj54004814 = zatHkpdAIj61047520;     zatHkpdAIj61047520 = zatHkpdAIj79260690;     zatHkpdAIj79260690 = zatHkpdAIj72483321;     zatHkpdAIj72483321 = zatHkpdAIj43175809;     zatHkpdAIj43175809 = zatHkpdAIj16057779;     zatHkpdAIj16057779 = zatHkpdAIj73869125;     zatHkpdAIj73869125 = zatHkpdAIj89488874;     zatHkpdAIj89488874 = zatHkpdAIj93110996;     zatHkpdAIj93110996 = zatHkpdAIj1062960;     zatHkpdAIj1062960 = zatHkpdAIj82586304;     zatHkpdAIj82586304 = zatHkpdAIj5978242;     zatHkpdAIj5978242 = zatHkpdAIj76948459;     zatHkpdAIj76948459 = zatHkpdAIj9483937;     zatHkpdAIj9483937 = zatHkpdAIj23423846;     zatHkpdAIj23423846 = zatHkpdAIj21212132;     zatHkpdAIj21212132 = zatHkpdAIj90123020;     zatHkpdAIj90123020 = zatHkpdAIj29669641;     zatHkpdAIj29669641 = zatHkpdAIj40649790;     zatHkpdAIj40649790 = zatHkpdAIj31089008;     zatHkpdAIj31089008 = zatHkpdAIj29486299;     zatHkpdAIj29486299 = zatHkpdAIj42663136;     zatHkpdAIj42663136 = zatHkpdAIj72336045;     zatHkpdAIj72336045 = zatHkpdAIj39958472;     zatHkpdAIj39958472 = zatHkpdAIj26947411;     zatHkpdAIj26947411 = zatHkpdAIj69191624;     zatHkpdAIj69191624 = zatHkpdAIj2925211;     zatHkpdAIj2925211 = zatHkpdAIj20986439;     zatHkpdAIj20986439 = zatHkpdAIj60115954;     zatHkpdAIj60115954 = zatHkpdAIj19261795;     zatHkpdAIj19261795 = zatHkpdAIj3963331;     zatHkpdAIj3963331 = zatHkpdAIj2773263;     zatHkpdAIj2773263 = zatHkpdAIj43225358;     zatHkpdAIj43225358 = zatHkpdAIj76466403;     zatHkpdAIj76466403 = zatHkpdAIj44078146;     zatHkpdAIj44078146 = zatHkpdAIj32405724;     zatHkpdAIj32405724 = zatHkpdAIj87468035;     zatHkpdAIj87468035 = zatHkpdAIj73350571;     zatHkpdAIj73350571 = zatHkpdAIj3012102;     zatHkpdAIj3012102 = zatHkpdAIj4822287;     zatHkpdAIj4822287 = zatHkpdAIj83394165;     zatHkpdAIj83394165 = zatHkpdAIj5512365;     zatHkpdAIj5512365 = zatHkpdAIj48786495;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void xTBBUfWwRR73712688() {     double rXClBhsmlN90369041 = -282323427;    double rXClBhsmlN93867990 = -721992858;    double rXClBhsmlN46564257 = -639322090;    double rXClBhsmlN33390969 = 79554308;    double rXClBhsmlN34929309 = -785329087;    double rXClBhsmlN14644589 = -626937898;    double rXClBhsmlN23545572 = -398885657;    double rXClBhsmlN65862775 = 89321294;    double rXClBhsmlN21020810 = -744453408;    double rXClBhsmlN57796685 = -339316307;    double rXClBhsmlN68447656 = -207297885;    double rXClBhsmlN93164833 = -953158533;    double rXClBhsmlN19790354 = -425020429;    double rXClBhsmlN55056527 = 61309526;    double rXClBhsmlN45411085 = -155348104;    double rXClBhsmlN73858280 = -943691103;    double rXClBhsmlN1386077 = -723010077;    double rXClBhsmlN90689901 = -628053053;    double rXClBhsmlN29892759 = -959891996;    double rXClBhsmlN38270533 = -589729987;    double rXClBhsmlN97828184 = -479193655;    double rXClBhsmlN73176137 = -772232913;    double rXClBhsmlN57590073 = 42904090;    double rXClBhsmlN58622748 = -974265614;    double rXClBhsmlN88442791 = -280205660;    double rXClBhsmlN76386903 = -653723586;    double rXClBhsmlN31208028 = -786682938;    double rXClBhsmlN66895239 = -725534792;    double rXClBhsmlN80131588 = -779222132;    double rXClBhsmlN19602272 = -992049729;    double rXClBhsmlN1847805 = -784975258;    double rXClBhsmlN51697145 = -796493931;    double rXClBhsmlN18430860 = -313621872;    double rXClBhsmlN50432698 = -675840567;    double rXClBhsmlN34954971 = -84556152;    double rXClBhsmlN8126577 = -378692573;    double rXClBhsmlN65160057 = -499184635;    double rXClBhsmlN13470897 = -633390574;    double rXClBhsmlN62140462 = -643574806;    double rXClBhsmlN46629302 = -297566190;    double rXClBhsmlN97099056 = -295946670;    double rXClBhsmlN82005833 = -225872018;    double rXClBhsmlN28047062 = -661239968;    double rXClBhsmlN25570471 = -840653566;    double rXClBhsmlN22952110 = -497319384;    double rXClBhsmlN39977299 = -256506218;    double rXClBhsmlN94631032 = -725575537;    double rXClBhsmlN52890457 = -207559612;    double rXClBhsmlN35425809 = -705073276;    double rXClBhsmlN28213761 = -361188747;    double rXClBhsmlN21829917 = -832053956;    double rXClBhsmlN83196197 = -312925835;    double rXClBhsmlN82292665 = -747194242;    double rXClBhsmlN64402985 = -644432521;    double rXClBhsmlN75884504 = -352588758;    double rXClBhsmlN17192905 = -510090515;    double rXClBhsmlN36277917 = -664896948;    double rXClBhsmlN87941508 = -665056476;    double rXClBhsmlN44948177 = -640240032;    double rXClBhsmlN58542406 = -31605501;    double rXClBhsmlN83436561 = -840254961;    double rXClBhsmlN56650333 = -673350865;    double rXClBhsmlN85731187 = -131456574;    double rXClBhsmlN1418538 = -752403679;    double rXClBhsmlN55948881 = -554341049;    double rXClBhsmlN16750511 = -410803954;    double rXClBhsmlN74733974 = -539536661;    double rXClBhsmlN69357656 = -749179863;    double rXClBhsmlN20101557 = -854134323;    double rXClBhsmlN37284508 = -776655531;    double rXClBhsmlN8698223 = -344506468;    double rXClBhsmlN87915179 = 10380496;    double rXClBhsmlN28549439 = -984478248;    double rXClBhsmlN83263456 = -562325806;    double rXClBhsmlN41171476 = -193783317;    double rXClBhsmlN15822351 = -153321637;    double rXClBhsmlN45129076 = -10992945;    double rXClBhsmlN32019602 = -116442345;    double rXClBhsmlN35670639 = -376946231;    double rXClBhsmlN48465493 = 76300557;    double rXClBhsmlN81755870 = -928148050;    double rXClBhsmlN78317570 = -479123326;    double rXClBhsmlN31469431 = 79538483;    double rXClBhsmlN51917828 = -318033385;    double rXClBhsmlN97772355 = -59995773;    double rXClBhsmlN18651607 = -372049424;    double rXClBhsmlN69404480 = 50700310;    double rXClBhsmlN54027875 = -669189351;    double rXClBhsmlN74548193 = -223251809;    double rXClBhsmlN17762067 = -574465638;    double rXClBhsmlN71848659 = -713795625;    double rXClBhsmlN77218548 = -834128160;    double rXClBhsmlN68522719 = -993150542;    double rXClBhsmlN3598057 = -511969305;    double rXClBhsmlN63192741 = -457311230;    double rXClBhsmlN40448724 = -622595806;    double rXClBhsmlN96274646 = 5584556;    double rXClBhsmlN26628524 = -908836290;    double rXClBhsmlN69621590 = -186312517;    double rXClBhsmlN6201599 = -282323427;     rXClBhsmlN90369041 = rXClBhsmlN93867990;     rXClBhsmlN93867990 = rXClBhsmlN46564257;     rXClBhsmlN46564257 = rXClBhsmlN33390969;     rXClBhsmlN33390969 = rXClBhsmlN34929309;     rXClBhsmlN34929309 = rXClBhsmlN14644589;     rXClBhsmlN14644589 = rXClBhsmlN23545572;     rXClBhsmlN23545572 = rXClBhsmlN65862775;     rXClBhsmlN65862775 = rXClBhsmlN21020810;     rXClBhsmlN21020810 = rXClBhsmlN57796685;     rXClBhsmlN57796685 = rXClBhsmlN68447656;     rXClBhsmlN68447656 = rXClBhsmlN93164833;     rXClBhsmlN93164833 = rXClBhsmlN19790354;     rXClBhsmlN19790354 = rXClBhsmlN55056527;     rXClBhsmlN55056527 = rXClBhsmlN45411085;     rXClBhsmlN45411085 = rXClBhsmlN73858280;     rXClBhsmlN73858280 = rXClBhsmlN1386077;     rXClBhsmlN1386077 = rXClBhsmlN90689901;     rXClBhsmlN90689901 = rXClBhsmlN29892759;     rXClBhsmlN29892759 = rXClBhsmlN38270533;     rXClBhsmlN38270533 = rXClBhsmlN97828184;     rXClBhsmlN97828184 = rXClBhsmlN73176137;     rXClBhsmlN73176137 = rXClBhsmlN57590073;     rXClBhsmlN57590073 = rXClBhsmlN58622748;     rXClBhsmlN58622748 = rXClBhsmlN88442791;     rXClBhsmlN88442791 = rXClBhsmlN76386903;     rXClBhsmlN76386903 = rXClBhsmlN31208028;     rXClBhsmlN31208028 = rXClBhsmlN66895239;     rXClBhsmlN66895239 = rXClBhsmlN80131588;     rXClBhsmlN80131588 = rXClBhsmlN19602272;     rXClBhsmlN19602272 = rXClBhsmlN1847805;     rXClBhsmlN1847805 = rXClBhsmlN51697145;     rXClBhsmlN51697145 = rXClBhsmlN18430860;     rXClBhsmlN18430860 = rXClBhsmlN50432698;     rXClBhsmlN50432698 = rXClBhsmlN34954971;     rXClBhsmlN34954971 = rXClBhsmlN8126577;     rXClBhsmlN8126577 = rXClBhsmlN65160057;     rXClBhsmlN65160057 = rXClBhsmlN13470897;     rXClBhsmlN13470897 = rXClBhsmlN62140462;     rXClBhsmlN62140462 = rXClBhsmlN46629302;     rXClBhsmlN46629302 = rXClBhsmlN97099056;     rXClBhsmlN97099056 = rXClBhsmlN82005833;     rXClBhsmlN82005833 = rXClBhsmlN28047062;     rXClBhsmlN28047062 = rXClBhsmlN25570471;     rXClBhsmlN25570471 = rXClBhsmlN22952110;     rXClBhsmlN22952110 = rXClBhsmlN39977299;     rXClBhsmlN39977299 = rXClBhsmlN94631032;     rXClBhsmlN94631032 = rXClBhsmlN52890457;     rXClBhsmlN52890457 = rXClBhsmlN35425809;     rXClBhsmlN35425809 = rXClBhsmlN28213761;     rXClBhsmlN28213761 = rXClBhsmlN21829917;     rXClBhsmlN21829917 = rXClBhsmlN83196197;     rXClBhsmlN83196197 = rXClBhsmlN82292665;     rXClBhsmlN82292665 = rXClBhsmlN64402985;     rXClBhsmlN64402985 = rXClBhsmlN75884504;     rXClBhsmlN75884504 = rXClBhsmlN17192905;     rXClBhsmlN17192905 = rXClBhsmlN36277917;     rXClBhsmlN36277917 = rXClBhsmlN87941508;     rXClBhsmlN87941508 = rXClBhsmlN44948177;     rXClBhsmlN44948177 = rXClBhsmlN58542406;     rXClBhsmlN58542406 = rXClBhsmlN83436561;     rXClBhsmlN83436561 = rXClBhsmlN56650333;     rXClBhsmlN56650333 = rXClBhsmlN85731187;     rXClBhsmlN85731187 = rXClBhsmlN1418538;     rXClBhsmlN1418538 = rXClBhsmlN55948881;     rXClBhsmlN55948881 = rXClBhsmlN16750511;     rXClBhsmlN16750511 = rXClBhsmlN74733974;     rXClBhsmlN74733974 = rXClBhsmlN69357656;     rXClBhsmlN69357656 = rXClBhsmlN20101557;     rXClBhsmlN20101557 = rXClBhsmlN37284508;     rXClBhsmlN37284508 = rXClBhsmlN8698223;     rXClBhsmlN8698223 = rXClBhsmlN87915179;     rXClBhsmlN87915179 = rXClBhsmlN28549439;     rXClBhsmlN28549439 = rXClBhsmlN83263456;     rXClBhsmlN83263456 = rXClBhsmlN41171476;     rXClBhsmlN41171476 = rXClBhsmlN15822351;     rXClBhsmlN15822351 = rXClBhsmlN45129076;     rXClBhsmlN45129076 = rXClBhsmlN32019602;     rXClBhsmlN32019602 = rXClBhsmlN35670639;     rXClBhsmlN35670639 = rXClBhsmlN48465493;     rXClBhsmlN48465493 = rXClBhsmlN81755870;     rXClBhsmlN81755870 = rXClBhsmlN78317570;     rXClBhsmlN78317570 = rXClBhsmlN31469431;     rXClBhsmlN31469431 = rXClBhsmlN51917828;     rXClBhsmlN51917828 = rXClBhsmlN97772355;     rXClBhsmlN97772355 = rXClBhsmlN18651607;     rXClBhsmlN18651607 = rXClBhsmlN69404480;     rXClBhsmlN69404480 = rXClBhsmlN54027875;     rXClBhsmlN54027875 = rXClBhsmlN74548193;     rXClBhsmlN74548193 = rXClBhsmlN17762067;     rXClBhsmlN17762067 = rXClBhsmlN71848659;     rXClBhsmlN71848659 = rXClBhsmlN77218548;     rXClBhsmlN77218548 = rXClBhsmlN68522719;     rXClBhsmlN68522719 = rXClBhsmlN3598057;     rXClBhsmlN3598057 = rXClBhsmlN63192741;     rXClBhsmlN63192741 = rXClBhsmlN40448724;     rXClBhsmlN40448724 = rXClBhsmlN96274646;     rXClBhsmlN96274646 = rXClBhsmlN26628524;     rXClBhsmlN26628524 = rXClBhsmlN69621590;     rXClBhsmlN69621590 = rXClBhsmlN6201599;     rXClBhsmlN6201599 = rXClBhsmlN90369041;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void rETgfFhdUE40417057() {     double FzCaWepOFb35599108 = -338124855;    double FzCaWepOFb80507683 = -345000344;    double FzCaWepOFb58115159 = 86434628;    double FzCaWepOFb86183230 = -878416015;    double FzCaWepOFb73163882 = -573649156;    double FzCaWepOFb36436682 = -87437594;    double FzCaWepOFb49673604 = 44679706;    double FzCaWepOFb87737398 = -698223377;    double FzCaWepOFb72086238 = -86033648;    double FzCaWepOFb83734965 = -760399076;    double FzCaWepOFb22866383 = -59907090;    double FzCaWepOFb29198793 = 27564413;    double FzCaWepOFb31936866 = -893818069;    double FzCaWepOFb61333779 = 57684457;    double FzCaWepOFb14010457 = -5384761;    double FzCaWepOFb17952995 = -850114553;    double FzCaWepOFb14686167 = -651433846;    double FzCaWepOFb59351645 = 50595787;    double FzCaWepOFb53332959 = -760973082;    double FzCaWepOFb1875722 = -364562291;    double FzCaWepOFb35187795 = -934496788;    double FzCaWepOFb86850517 = -837297197;    double FzCaWepOFb36052591 = -956286394;    double FzCaWepOFb86287123 = -78783928;    double FzCaWepOFb22720374 = -154295253;    double FzCaWepOFb3815261 = -13033742;    double FzCaWepOFb84871784 = -696412224;    double FzCaWepOFb76128834 = -180955825;    double FzCaWepOFb49456220 = -870957224;    double FzCaWepOFb86363918 = -862362083;    double FzCaWepOFb51584788 = -230130858;    double FzCaWepOFb50547698 = -720126999;    double FzCaWepOFb33958612 = 79956657;    double FzCaWepOFb66596082 = -885799921;    double FzCaWepOFb13167727 = -921468174;    double FzCaWepOFb90791649 = -786780065;    double FzCaWepOFb50028412 = -569106203;    double FzCaWepOFb75275067 = -661157674;    double FzCaWepOFb77120852 = -955853673;    double FzCaWepOFb96583347 = -108643801;    double FzCaWepOFb31453977 = -126465469;    double FzCaWepOFb51740434 = -571774298;    double FzCaWepOFb23564919 = 70972833;    double FzCaWepOFb85012445 = -564565910;    double FzCaWepOFb24111992 = -131482408;    double FzCaWepOFb55410649 = -417862288;    double FzCaWepOFb24886207 = -245977785;    double FzCaWepOFb46932837 = -827750145;    double FzCaWepOFb34271897 = -809120695;    double FzCaWepOFb6683750 = -654682500;    double FzCaWepOFb22371318 = -711564877;    double FzCaWepOFb77201675 = -802543969;    double FzCaWepOFb84183850 = -822758336;    double FzCaWepOFb53509595 = 46047236;    double FzCaWepOFb5229263 = -495776841;    double FzCaWepOFb48748590 = -500827659;    double FzCaWepOFb44455093 = -388713950;    double FzCaWepOFb71828035 = -834781444;    double FzCaWepOFb63462857 = -624120763;    double FzCaWepOFb69348621 = -460615415;    double FzCaWepOFb51564898 = -391025370;    double FzCaWepOFb73544770 = -774364470;    double FzCaWepOFb38281178 = -827266153;    double FzCaWepOFb85722320 = -223671565;    double FzCaWepOFb32150177 = -430268218;    double FzCaWepOFb72318685 = -339780092;    double FzCaWepOFb95240180 = 47607756;    double FzCaWepOFb65340784 = 91981852;    double FzCaWepOFb48166052 = -20847370;    double FzCaWepOFb23218807 = -218604697;    double FzCaWepOFb67924582 = -181008350;    double FzCaWepOFb39411099 = -990276172;    double FzCaWepOFb82230793 = 6449460;    double FzCaWepOFb56749611 = -552329282;    double FzCaWepOFb70421745 = -138096822;    double FzCaWepOFb83447360 = -262722490;    double FzCaWepOFb63285598 = -808270030;    double FzCaWepOFb51040146 = -291720485;    double FzCaWepOFb62175132 = -947301520;    double FzCaWepOFb67309725 = -736432965;    double FzCaWepOFb78929054 = -767055958;    double FzCaWepOFb37938948 = -868662079;    double FzCaWepOFb41856938 = -371835130;    double FzCaWepOFb42772470 = -116274725;    double FzCaWepOFb63992600 = -50797206;    double FzCaWepOFb74383112 = -427586890;    double FzCaWepOFb66363848 = -897368663;    double FzCaWepOFb80449017 = -966090580;    double FzCaWepOFb61366819 = -290023080;    double FzCaWepOFb64419136 = -320640515;    double FzCaWepOFb46336557 = -298066115;    double FzCaWepOFb78200377 = -734324759;    double FzCaWepOFb11812211 = 62963088;    double FzCaWepOFb7772232 = -395238258;    double FzCaWepOFb45018450 = -717618431;    double FzCaWepOFb57909207 = -352101000;    double FzCaWepOFb13459257 = -744508146;    double FzCaWepOFb37842599 = -705355602;    double FzCaWepOFb52862268 = -34297693;    double FzCaWepOFb51793307 = -338124855;     FzCaWepOFb35599108 = FzCaWepOFb80507683;     FzCaWepOFb80507683 = FzCaWepOFb58115159;     FzCaWepOFb58115159 = FzCaWepOFb86183230;     FzCaWepOFb86183230 = FzCaWepOFb73163882;     FzCaWepOFb73163882 = FzCaWepOFb36436682;     FzCaWepOFb36436682 = FzCaWepOFb49673604;     FzCaWepOFb49673604 = FzCaWepOFb87737398;     FzCaWepOFb87737398 = FzCaWepOFb72086238;     FzCaWepOFb72086238 = FzCaWepOFb83734965;     FzCaWepOFb83734965 = FzCaWepOFb22866383;     FzCaWepOFb22866383 = FzCaWepOFb29198793;     FzCaWepOFb29198793 = FzCaWepOFb31936866;     FzCaWepOFb31936866 = FzCaWepOFb61333779;     FzCaWepOFb61333779 = FzCaWepOFb14010457;     FzCaWepOFb14010457 = FzCaWepOFb17952995;     FzCaWepOFb17952995 = FzCaWepOFb14686167;     FzCaWepOFb14686167 = FzCaWepOFb59351645;     FzCaWepOFb59351645 = FzCaWepOFb53332959;     FzCaWepOFb53332959 = FzCaWepOFb1875722;     FzCaWepOFb1875722 = FzCaWepOFb35187795;     FzCaWepOFb35187795 = FzCaWepOFb86850517;     FzCaWepOFb86850517 = FzCaWepOFb36052591;     FzCaWepOFb36052591 = FzCaWepOFb86287123;     FzCaWepOFb86287123 = FzCaWepOFb22720374;     FzCaWepOFb22720374 = FzCaWepOFb3815261;     FzCaWepOFb3815261 = FzCaWepOFb84871784;     FzCaWepOFb84871784 = FzCaWepOFb76128834;     FzCaWepOFb76128834 = FzCaWepOFb49456220;     FzCaWepOFb49456220 = FzCaWepOFb86363918;     FzCaWepOFb86363918 = FzCaWepOFb51584788;     FzCaWepOFb51584788 = FzCaWepOFb50547698;     FzCaWepOFb50547698 = FzCaWepOFb33958612;     FzCaWepOFb33958612 = FzCaWepOFb66596082;     FzCaWepOFb66596082 = FzCaWepOFb13167727;     FzCaWepOFb13167727 = FzCaWepOFb90791649;     FzCaWepOFb90791649 = FzCaWepOFb50028412;     FzCaWepOFb50028412 = FzCaWepOFb75275067;     FzCaWepOFb75275067 = FzCaWepOFb77120852;     FzCaWepOFb77120852 = FzCaWepOFb96583347;     FzCaWepOFb96583347 = FzCaWepOFb31453977;     FzCaWepOFb31453977 = FzCaWepOFb51740434;     FzCaWepOFb51740434 = FzCaWepOFb23564919;     FzCaWepOFb23564919 = FzCaWepOFb85012445;     FzCaWepOFb85012445 = FzCaWepOFb24111992;     FzCaWepOFb24111992 = FzCaWepOFb55410649;     FzCaWepOFb55410649 = FzCaWepOFb24886207;     FzCaWepOFb24886207 = FzCaWepOFb46932837;     FzCaWepOFb46932837 = FzCaWepOFb34271897;     FzCaWepOFb34271897 = FzCaWepOFb6683750;     FzCaWepOFb6683750 = FzCaWepOFb22371318;     FzCaWepOFb22371318 = FzCaWepOFb77201675;     FzCaWepOFb77201675 = FzCaWepOFb84183850;     FzCaWepOFb84183850 = FzCaWepOFb53509595;     FzCaWepOFb53509595 = FzCaWepOFb5229263;     FzCaWepOFb5229263 = FzCaWepOFb48748590;     FzCaWepOFb48748590 = FzCaWepOFb44455093;     FzCaWepOFb44455093 = FzCaWepOFb71828035;     FzCaWepOFb71828035 = FzCaWepOFb63462857;     FzCaWepOFb63462857 = FzCaWepOFb69348621;     FzCaWepOFb69348621 = FzCaWepOFb51564898;     FzCaWepOFb51564898 = FzCaWepOFb73544770;     FzCaWepOFb73544770 = FzCaWepOFb38281178;     FzCaWepOFb38281178 = FzCaWepOFb85722320;     FzCaWepOFb85722320 = FzCaWepOFb32150177;     FzCaWepOFb32150177 = FzCaWepOFb72318685;     FzCaWepOFb72318685 = FzCaWepOFb95240180;     FzCaWepOFb95240180 = FzCaWepOFb65340784;     FzCaWepOFb65340784 = FzCaWepOFb48166052;     FzCaWepOFb48166052 = FzCaWepOFb23218807;     FzCaWepOFb23218807 = FzCaWepOFb67924582;     FzCaWepOFb67924582 = FzCaWepOFb39411099;     FzCaWepOFb39411099 = FzCaWepOFb82230793;     FzCaWepOFb82230793 = FzCaWepOFb56749611;     FzCaWepOFb56749611 = FzCaWepOFb70421745;     FzCaWepOFb70421745 = FzCaWepOFb83447360;     FzCaWepOFb83447360 = FzCaWepOFb63285598;     FzCaWepOFb63285598 = FzCaWepOFb51040146;     FzCaWepOFb51040146 = FzCaWepOFb62175132;     FzCaWepOFb62175132 = FzCaWepOFb67309725;     FzCaWepOFb67309725 = FzCaWepOFb78929054;     FzCaWepOFb78929054 = FzCaWepOFb37938948;     FzCaWepOFb37938948 = FzCaWepOFb41856938;     FzCaWepOFb41856938 = FzCaWepOFb42772470;     FzCaWepOFb42772470 = FzCaWepOFb63992600;     FzCaWepOFb63992600 = FzCaWepOFb74383112;     FzCaWepOFb74383112 = FzCaWepOFb66363848;     FzCaWepOFb66363848 = FzCaWepOFb80449017;     FzCaWepOFb80449017 = FzCaWepOFb61366819;     FzCaWepOFb61366819 = FzCaWepOFb64419136;     FzCaWepOFb64419136 = FzCaWepOFb46336557;     FzCaWepOFb46336557 = FzCaWepOFb78200377;     FzCaWepOFb78200377 = FzCaWepOFb11812211;     FzCaWepOFb11812211 = FzCaWepOFb7772232;     FzCaWepOFb7772232 = FzCaWepOFb45018450;     FzCaWepOFb45018450 = FzCaWepOFb57909207;     FzCaWepOFb57909207 = FzCaWepOFb13459257;     FzCaWepOFb13459257 = FzCaWepOFb37842599;     FzCaWepOFb37842599 = FzCaWepOFb52862268;     FzCaWepOFb52862268 = FzCaWepOFb51793307;     FzCaWepOFb51793307 = FzCaWepOFb35599108;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void NRNqIbWxIy59290793() {     double hllbLsWbLU9721676 = -88783651;    double hllbLsWbLU80529166 = -370443154;    double hllbLsWbLU35684797 = 49421400;    double hllbLsWbLU76265320 = -701092689;    double hllbLsWbLU48062069 = -872356812;    double hllbLsWbLU76203153 = -107073198;    double hllbLsWbLU15606186 = -700519196;    double hllbLsWbLU82162735 = -192599575;    double hllbLsWbLU20547447 = -861078397;    double hllbLsWbLU44295674 = 55213609;    double hllbLsWbLU55700942 = -18253963;    double hllbLsWbLU95458120 = -158162381;    double hllbLsWbLU86125840 = -21715650;    double hllbLsWbLU62716250 = -96704847;    double hllbLsWbLU4760991 = -210590184;    double hllbLsWbLU73936179 = -943466051;    double hllbLsWbLU20480043 = -196808355;    double hllbLsWbLU51010984 = -863723398;    double hllbLsWbLU54188439 = -323989391;    double hllbLsWbLU121580 = -327464893;    double hllbLsWbLU81818254 = 91207736;    double hllbLsWbLU53085189 = -415544518;    double hllbLsWbLU40695429 = -740604434;    double hllbLsWbLU5437162 = -514368736;    double hllbLsWbLU29676479 = -821508814;    double hllbLsWbLU49823669 = -802537745;    double hllbLsWbLU70789839 = -916407435;    double hllbLsWbLU80169509 = -352740964;    double hllbLsWbLU31098854 = -165113246;    double hllbLsWbLU65506181 = -144558745;    double hllbLsWbLU33094402 = -644329477;    double hllbLsWbLU21118619 = -595972545;    double hllbLsWbLU13090593 = 68231276;    double hllbLsWbLU20008482 = -870523937;    double hllbLsWbLU87602220 = -102034239;    double hllbLsWbLU14184129 = -238344270;    double hllbLsWbLU93116350 = -946408898;    double hllbLsWbLU29734781 = -612295510;    double hllbLsWbLU95203826 = -702217100;    double hllbLsWbLU41851479 = -863483497;    double hllbLsWbLU28895435 = -748801923;    double hllbLsWbLU274226 = -318202611;    double hllbLsWbLU85698343 = -817334282;    double hllbLsWbLU77392383 = -487318236;    double hllbLsWbLU64124466 = -541122969;    double hllbLsWbLU65205377 = 76016676;    double hllbLsWbLU23349799 = -186728491;    double hllbLsWbLU70515976 = -988689832;    double hllbLsWbLU17750254 = -722790122;    double hllbLsWbLU92423755 = -655714139;    double hllbLsWbLU71920426 = -775145310;    double hllbLsWbLU83032685 = -594962811;    double hllbLsWbLU85736999 = -238782754;    double hllbLsWbLU83855381 = -944432885;    double hllbLsWbLU77472538 = -666244158;    double hllbLsWbLU56636486 = -673239134;    double hllbLsWbLU39833738 = -629838721;    double hllbLsWbLU30247636 = -436209864;    double hllbLsWbLU46588842 = -879583875;    double hllbLsWbLU98238399 = 30180933;    double hllbLsWbLU5413314 = -190665764;    double hllbLsWbLU35436677 = -247778232;    double hllbLsWbLU51063881 = 72513670;    double hllbLsWbLU55041265 = -616519652;    double hllbLsWbLU11201272 = -300456915;    double hllbLsWbLU34582323 = -422281418;    double hllbLsWbLU82367527 = -126393657;    double hllbLsWbLU66117358 = -151191713;    double hllbLsWbLU75114030 = -994670608;    double hllbLsWbLU90576862 = -972245915;    double hllbLsWbLU80819828 = -997057153;    double hllbLsWbLU90745262 = -584512846;    double hllbLsWbLU55807157 = -61506299;    double hllbLsWbLU12336961 = -460505894;    double hllbLsWbLU71226144 = -578662971;    double hllbLsWbLU81544028 = -590589654;    double hllbLsWbLU67386846 = -598210236;    double hllbLsWbLU63303045 = -153286198;    double hllbLsWbLU41312695 = -973245768;    double hllbLsWbLU64471101 = -797525491;    double hllbLsWbLU26473871 = -515809254;    double hllbLsWbLU273864 = -927717603;    double hllbLsWbLU62419255 = -629950842;    double hllbLsWbLU38675099 = -509399107;    double hllbLsWbLU93585755 = -369413436;    double hllbLsWbLU50061717 = 50633334;    double hllbLsWbLU35381620 = -257189791;    double hllbLsWbLU29235211 = 12664160;    double hllbLsWbLU42535943 = -104279780;    double hllbLsWbLU30965734 = -428795106;    double hllbLsWbLU74350390 = -608505549;    double hllbLsWbLU62868714 = -410199034;    double hllbLsWbLU83145938 = -732711635;    double hllbLsWbLU96965426 = -632398033;    double hllbLsWbLU36438165 = -572817733;    double hllbLsWbLU93458757 = -401023691;    double hllbLsWbLU49210345 = -290716281;    double hllbLsWbLU30657078 = -100814630;    double hllbLsWbLU66191111 = -86861322;    double hllbLsWbLU29542144 = -88783651;     hllbLsWbLU9721676 = hllbLsWbLU80529166;     hllbLsWbLU80529166 = hllbLsWbLU35684797;     hllbLsWbLU35684797 = hllbLsWbLU76265320;     hllbLsWbLU76265320 = hllbLsWbLU48062069;     hllbLsWbLU48062069 = hllbLsWbLU76203153;     hllbLsWbLU76203153 = hllbLsWbLU15606186;     hllbLsWbLU15606186 = hllbLsWbLU82162735;     hllbLsWbLU82162735 = hllbLsWbLU20547447;     hllbLsWbLU20547447 = hllbLsWbLU44295674;     hllbLsWbLU44295674 = hllbLsWbLU55700942;     hllbLsWbLU55700942 = hllbLsWbLU95458120;     hllbLsWbLU95458120 = hllbLsWbLU86125840;     hllbLsWbLU86125840 = hllbLsWbLU62716250;     hllbLsWbLU62716250 = hllbLsWbLU4760991;     hllbLsWbLU4760991 = hllbLsWbLU73936179;     hllbLsWbLU73936179 = hllbLsWbLU20480043;     hllbLsWbLU20480043 = hllbLsWbLU51010984;     hllbLsWbLU51010984 = hllbLsWbLU54188439;     hllbLsWbLU54188439 = hllbLsWbLU121580;     hllbLsWbLU121580 = hllbLsWbLU81818254;     hllbLsWbLU81818254 = hllbLsWbLU53085189;     hllbLsWbLU53085189 = hllbLsWbLU40695429;     hllbLsWbLU40695429 = hllbLsWbLU5437162;     hllbLsWbLU5437162 = hllbLsWbLU29676479;     hllbLsWbLU29676479 = hllbLsWbLU49823669;     hllbLsWbLU49823669 = hllbLsWbLU70789839;     hllbLsWbLU70789839 = hllbLsWbLU80169509;     hllbLsWbLU80169509 = hllbLsWbLU31098854;     hllbLsWbLU31098854 = hllbLsWbLU65506181;     hllbLsWbLU65506181 = hllbLsWbLU33094402;     hllbLsWbLU33094402 = hllbLsWbLU21118619;     hllbLsWbLU21118619 = hllbLsWbLU13090593;     hllbLsWbLU13090593 = hllbLsWbLU20008482;     hllbLsWbLU20008482 = hllbLsWbLU87602220;     hllbLsWbLU87602220 = hllbLsWbLU14184129;     hllbLsWbLU14184129 = hllbLsWbLU93116350;     hllbLsWbLU93116350 = hllbLsWbLU29734781;     hllbLsWbLU29734781 = hllbLsWbLU95203826;     hllbLsWbLU95203826 = hllbLsWbLU41851479;     hllbLsWbLU41851479 = hllbLsWbLU28895435;     hllbLsWbLU28895435 = hllbLsWbLU274226;     hllbLsWbLU274226 = hllbLsWbLU85698343;     hllbLsWbLU85698343 = hllbLsWbLU77392383;     hllbLsWbLU77392383 = hllbLsWbLU64124466;     hllbLsWbLU64124466 = hllbLsWbLU65205377;     hllbLsWbLU65205377 = hllbLsWbLU23349799;     hllbLsWbLU23349799 = hllbLsWbLU70515976;     hllbLsWbLU70515976 = hllbLsWbLU17750254;     hllbLsWbLU17750254 = hllbLsWbLU92423755;     hllbLsWbLU92423755 = hllbLsWbLU71920426;     hllbLsWbLU71920426 = hllbLsWbLU83032685;     hllbLsWbLU83032685 = hllbLsWbLU85736999;     hllbLsWbLU85736999 = hllbLsWbLU83855381;     hllbLsWbLU83855381 = hllbLsWbLU77472538;     hllbLsWbLU77472538 = hllbLsWbLU56636486;     hllbLsWbLU56636486 = hllbLsWbLU39833738;     hllbLsWbLU39833738 = hllbLsWbLU30247636;     hllbLsWbLU30247636 = hllbLsWbLU46588842;     hllbLsWbLU46588842 = hllbLsWbLU98238399;     hllbLsWbLU98238399 = hllbLsWbLU5413314;     hllbLsWbLU5413314 = hllbLsWbLU35436677;     hllbLsWbLU35436677 = hllbLsWbLU51063881;     hllbLsWbLU51063881 = hllbLsWbLU55041265;     hllbLsWbLU55041265 = hllbLsWbLU11201272;     hllbLsWbLU11201272 = hllbLsWbLU34582323;     hllbLsWbLU34582323 = hllbLsWbLU82367527;     hllbLsWbLU82367527 = hllbLsWbLU66117358;     hllbLsWbLU66117358 = hllbLsWbLU75114030;     hllbLsWbLU75114030 = hllbLsWbLU90576862;     hllbLsWbLU90576862 = hllbLsWbLU80819828;     hllbLsWbLU80819828 = hllbLsWbLU90745262;     hllbLsWbLU90745262 = hllbLsWbLU55807157;     hllbLsWbLU55807157 = hllbLsWbLU12336961;     hllbLsWbLU12336961 = hllbLsWbLU71226144;     hllbLsWbLU71226144 = hllbLsWbLU81544028;     hllbLsWbLU81544028 = hllbLsWbLU67386846;     hllbLsWbLU67386846 = hllbLsWbLU63303045;     hllbLsWbLU63303045 = hllbLsWbLU41312695;     hllbLsWbLU41312695 = hllbLsWbLU64471101;     hllbLsWbLU64471101 = hllbLsWbLU26473871;     hllbLsWbLU26473871 = hllbLsWbLU273864;     hllbLsWbLU273864 = hllbLsWbLU62419255;     hllbLsWbLU62419255 = hllbLsWbLU38675099;     hllbLsWbLU38675099 = hllbLsWbLU93585755;     hllbLsWbLU93585755 = hllbLsWbLU50061717;     hllbLsWbLU50061717 = hllbLsWbLU35381620;     hllbLsWbLU35381620 = hllbLsWbLU29235211;     hllbLsWbLU29235211 = hllbLsWbLU42535943;     hllbLsWbLU42535943 = hllbLsWbLU30965734;     hllbLsWbLU30965734 = hllbLsWbLU74350390;     hllbLsWbLU74350390 = hllbLsWbLU62868714;     hllbLsWbLU62868714 = hllbLsWbLU83145938;     hllbLsWbLU83145938 = hllbLsWbLU96965426;     hllbLsWbLU96965426 = hllbLsWbLU36438165;     hllbLsWbLU36438165 = hllbLsWbLU93458757;     hllbLsWbLU93458757 = hllbLsWbLU49210345;     hllbLsWbLU49210345 = hllbLsWbLU30657078;     hllbLsWbLU30657078 = hllbLsWbLU66191111;     hllbLsWbLU66191111 = hllbLsWbLU29542144;     hllbLsWbLU29542144 = hllbLsWbLU9721676;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void fwArCFDBIC34972716() {     double uoOPsOaINL51304222 = -794438298;    double uoOPsOaINL98602207 = 82000584;    double uoOPsOaINL87800245 = -909949983;    double uoOPsOaINL90483595 = -892451560;    double uoOPsOaINL64402724 = 69749793;    double uoOPsOaINL69037795 = -934484517;    double uoOPsOaINL18205223 = -979673440;    double uoOPsOaINL24840137 = -419530312;    double uoOPsOaINL3967383 = -303796400;    double uoOPsOaINL3788532 = -301641995;    double uoOPsOaINL33672362 = -838227206;    double uoOPsOaINL13557634 = -731210991;    double uoOPsOaINL78716690 = -991960769;    double uoOPsOaINL45156570 = -260153773;    double uoOPsOaINL13525825 = -341764513;    double uoOPsOaINL24418327 = -219481550;    double uoOPsOaINL14299223 = -420713451;    double uoOPsOaINL24823796 = -205602488;    double uoOPsOaINL96140340 = -428339642;    double uoOPsOaINL2435200 = -498904427;    double uoOPsOaINL3788887 = -811088035;    double uoOPsOaINL64731472 = 99881355;    double uoOPsOaINL9933204 = -765796263;    double uoOPsOaINL39572372 = -266577806;    double uoOPsOaINL52951390 = -791996192;    double uoOPsOaINL68669439 = -461563947;    double uoOPsOaINL59448610 = -322554065;    double uoOPsOaINL98601534 = 20524896;    double uoOPsOaINL31220877 = -315520438;    double uoOPsOaINL63565359 = -321105410;    double uoOPsOaINL10507504 = -722537667;    double uoOPsOaINL71828401 = -786569014;    double uoOPsOaINL49567128 = -870033856;    double uoOPsOaINL44304635 = -810077783;    double uoOPsOaINL32527288 = -432553671;    double uoOPsOaINL91642696 = -587169937;    double uoOPsOaINL11848734 = -665087430;    double uoOPsOaINL45122717 = -371194422;    double uoOPsOaINL63891045 = -734335457;    double uoOPsOaINL21752056 = -92753580;    double uoOPsOaINL80160599 = -495330833;    double uoOPsOaINL36092149 = 10901903;    double uoOPsOaINL92865339 = -992189398;    double uoOPsOaINL45699563 = -454029141;    double uoOPsOaINL92075337 = -656272883;    double uoOPsOaINL82677932 = -136078401;    double uoOPsOaINL32775744 = -308209767;    double uoOPsOaINL20815648 = -556350601;    double uoOPsOaINL31660260 = -908500129;    double uoOPsOaINL9819574 = -546726877;    double uoOPsOaINL75132458 = -913160531;    double uoOPsOaINL62780619 = -227195730;    double uoOPsOaINL27158257 = -994563888;    double uoOPsOaINL85565837 = -924491678;    double uoOPsOaINL31183829 = -856366808;    double uoOPsOaINL86572750 = -794319654;    double uoOPsOaINL88669004 = -152203154;    double uoOPsOaINL48227873 = -543372177;    double uoOPsOaINL37532206 = -455369;    double uoOPsOaINL95733285 = -468686261;    double uoOPsOaINL9589186 = -511930452;    double uoOPsOaINL19603688 = -900198337;    double uoOPsOaINL93619259 = -4009874;    double uoOPsOaINL40402024 = -982690991;    double uoOPsOaINL93281027 = -579104329;    double uoOPsOaINL61843960 = 48341807;    double uoOPsOaINL63990505 = -861177136;    double uoOPsOaINL34412055 = -81882986;    double uoOPsOaINL12629283 = -827600103;    double uoOPsOaINL21883129 = -754594577;    double uoOPsOaINL12569593 = -554394121;    double uoOPsOaINL69176505 = 50480970;    double uoOPsOaINL60932750 = -471267032;    double uoOPsOaINL74388285 = -235586063;    double uoOPsOaINL22274601 = 96426405;    double uoOPsOaINL67696738 = -721989938;    double uoOPsOaINL71866132 = 92070753;    double uoOPsOaINL64233640 = -211767122;    double uoOPsOaINL47497034 = -610304923;    double uoOPsOaINL70273457 = -555917791;    double uoOPsOaINL35893695 = -53354180;    double uoOPsOaINL38632963 = -766203465;    double uoOPsOaINL66941274 = -70974975;    double uoOPsOaINL21401304 = -768793562;    double uoOPsOaINL88432900 = -407944879;    double uoOPsOaINL47726884 = -395341938;    double uoOPsOaINL44670145 = -792005126;    double uoOPsOaINL64001291 = -945542178;    double uoOPsOaINL13120806 = -953710975;    double uoOPsOaINL45954537 = -638234017;    double uoOPsOaINL2973692 = -334966783;    double uoOPsOaINL63620860 = -21715253;    double uoOPsOaINL7590512 = -270739054;    double uoOPsOaINL68157760 = -165649196;    double uoOPsOaINL12162871 = -580823128;    double uoOPsOaINL60556911 = -595132496;    double uoOPsOaINL42472890 = -985088223;    double uoOPsOaINL52463316 = 90501592;    double uoOPsOaINL52418536 = -874924813;    double uoOPsOaINL30231378 = -794438298;     uoOPsOaINL51304222 = uoOPsOaINL98602207;     uoOPsOaINL98602207 = uoOPsOaINL87800245;     uoOPsOaINL87800245 = uoOPsOaINL90483595;     uoOPsOaINL90483595 = uoOPsOaINL64402724;     uoOPsOaINL64402724 = uoOPsOaINL69037795;     uoOPsOaINL69037795 = uoOPsOaINL18205223;     uoOPsOaINL18205223 = uoOPsOaINL24840137;     uoOPsOaINL24840137 = uoOPsOaINL3967383;     uoOPsOaINL3967383 = uoOPsOaINL3788532;     uoOPsOaINL3788532 = uoOPsOaINL33672362;     uoOPsOaINL33672362 = uoOPsOaINL13557634;     uoOPsOaINL13557634 = uoOPsOaINL78716690;     uoOPsOaINL78716690 = uoOPsOaINL45156570;     uoOPsOaINL45156570 = uoOPsOaINL13525825;     uoOPsOaINL13525825 = uoOPsOaINL24418327;     uoOPsOaINL24418327 = uoOPsOaINL14299223;     uoOPsOaINL14299223 = uoOPsOaINL24823796;     uoOPsOaINL24823796 = uoOPsOaINL96140340;     uoOPsOaINL96140340 = uoOPsOaINL2435200;     uoOPsOaINL2435200 = uoOPsOaINL3788887;     uoOPsOaINL3788887 = uoOPsOaINL64731472;     uoOPsOaINL64731472 = uoOPsOaINL9933204;     uoOPsOaINL9933204 = uoOPsOaINL39572372;     uoOPsOaINL39572372 = uoOPsOaINL52951390;     uoOPsOaINL52951390 = uoOPsOaINL68669439;     uoOPsOaINL68669439 = uoOPsOaINL59448610;     uoOPsOaINL59448610 = uoOPsOaINL98601534;     uoOPsOaINL98601534 = uoOPsOaINL31220877;     uoOPsOaINL31220877 = uoOPsOaINL63565359;     uoOPsOaINL63565359 = uoOPsOaINL10507504;     uoOPsOaINL10507504 = uoOPsOaINL71828401;     uoOPsOaINL71828401 = uoOPsOaINL49567128;     uoOPsOaINL49567128 = uoOPsOaINL44304635;     uoOPsOaINL44304635 = uoOPsOaINL32527288;     uoOPsOaINL32527288 = uoOPsOaINL91642696;     uoOPsOaINL91642696 = uoOPsOaINL11848734;     uoOPsOaINL11848734 = uoOPsOaINL45122717;     uoOPsOaINL45122717 = uoOPsOaINL63891045;     uoOPsOaINL63891045 = uoOPsOaINL21752056;     uoOPsOaINL21752056 = uoOPsOaINL80160599;     uoOPsOaINL80160599 = uoOPsOaINL36092149;     uoOPsOaINL36092149 = uoOPsOaINL92865339;     uoOPsOaINL92865339 = uoOPsOaINL45699563;     uoOPsOaINL45699563 = uoOPsOaINL92075337;     uoOPsOaINL92075337 = uoOPsOaINL82677932;     uoOPsOaINL82677932 = uoOPsOaINL32775744;     uoOPsOaINL32775744 = uoOPsOaINL20815648;     uoOPsOaINL20815648 = uoOPsOaINL31660260;     uoOPsOaINL31660260 = uoOPsOaINL9819574;     uoOPsOaINL9819574 = uoOPsOaINL75132458;     uoOPsOaINL75132458 = uoOPsOaINL62780619;     uoOPsOaINL62780619 = uoOPsOaINL27158257;     uoOPsOaINL27158257 = uoOPsOaINL85565837;     uoOPsOaINL85565837 = uoOPsOaINL31183829;     uoOPsOaINL31183829 = uoOPsOaINL86572750;     uoOPsOaINL86572750 = uoOPsOaINL88669004;     uoOPsOaINL88669004 = uoOPsOaINL48227873;     uoOPsOaINL48227873 = uoOPsOaINL37532206;     uoOPsOaINL37532206 = uoOPsOaINL95733285;     uoOPsOaINL95733285 = uoOPsOaINL9589186;     uoOPsOaINL9589186 = uoOPsOaINL19603688;     uoOPsOaINL19603688 = uoOPsOaINL93619259;     uoOPsOaINL93619259 = uoOPsOaINL40402024;     uoOPsOaINL40402024 = uoOPsOaINL93281027;     uoOPsOaINL93281027 = uoOPsOaINL61843960;     uoOPsOaINL61843960 = uoOPsOaINL63990505;     uoOPsOaINL63990505 = uoOPsOaINL34412055;     uoOPsOaINL34412055 = uoOPsOaINL12629283;     uoOPsOaINL12629283 = uoOPsOaINL21883129;     uoOPsOaINL21883129 = uoOPsOaINL12569593;     uoOPsOaINL12569593 = uoOPsOaINL69176505;     uoOPsOaINL69176505 = uoOPsOaINL60932750;     uoOPsOaINL60932750 = uoOPsOaINL74388285;     uoOPsOaINL74388285 = uoOPsOaINL22274601;     uoOPsOaINL22274601 = uoOPsOaINL67696738;     uoOPsOaINL67696738 = uoOPsOaINL71866132;     uoOPsOaINL71866132 = uoOPsOaINL64233640;     uoOPsOaINL64233640 = uoOPsOaINL47497034;     uoOPsOaINL47497034 = uoOPsOaINL70273457;     uoOPsOaINL70273457 = uoOPsOaINL35893695;     uoOPsOaINL35893695 = uoOPsOaINL38632963;     uoOPsOaINL38632963 = uoOPsOaINL66941274;     uoOPsOaINL66941274 = uoOPsOaINL21401304;     uoOPsOaINL21401304 = uoOPsOaINL88432900;     uoOPsOaINL88432900 = uoOPsOaINL47726884;     uoOPsOaINL47726884 = uoOPsOaINL44670145;     uoOPsOaINL44670145 = uoOPsOaINL64001291;     uoOPsOaINL64001291 = uoOPsOaINL13120806;     uoOPsOaINL13120806 = uoOPsOaINL45954537;     uoOPsOaINL45954537 = uoOPsOaINL2973692;     uoOPsOaINL2973692 = uoOPsOaINL63620860;     uoOPsOaINL63620860 = uoOPsOaINL7590512;     uoOPsOaINL7590512 = uoOPsOaINL68157760;     uoOPsOaINL68157760 = uoOPsOaINL12162871;     uoOPsOaINL12162871 = uoOPsOaINL60556911;     uoOPsOaINL60556911 = uoOPsOaINL42472890;     uoOPsOaINL42472890 = uoOPsOaINL52463316;     uoOPsOaINL52463316 = uoOPsOaINL52418536;     uoOPsOaINL52418536 = uoOPsOaINL30231378;     uoOPsOaINL30231378 = uoOPsOaINL51304222;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void mlsNKRQbaA71617690() {     double UnTRufszhO73691339 = -428842261;    double UnTRufszhO82949708 = -966542471;    double UnTRufszhO16569524 = -49603827;    double UnTRufszhO5490285 = -898859092;    double UnTRufszhO62576979 = -521307208;    double UnTRufszhO83920912 = -795092895;    double UnTRufszhO10360962 = -801660746;    double UnTRufszhO473996 = -890126956;    double UnTRufszhO1130515 = -187992439;    double UnTRufszhO95552116 = -44383328;    double UnTRufszhO71214221 = -834851607;    double UnTRufszhO69460583 = -981956285;    double UnTRufszhO45724870 = -510678089;    double UnTRufszhO87771322 = -787862530;    double UnTRufszhO50261102 = 30757774;    double UnTRufszhO68674239 = -601149093;    double UnTRufszhO64122574 = -697993271;    double UnTRufszhO30800212 = -657345178;    double UnTRufszhO37421972 = -563441768;    double UnTRufszhO80951483 = -751538881;    double UnTRufszhO4671994 = -802575343;    double UnTRufszhO28546691 = -404884958;    double UnTRufszhO13226527 = -941876855;    double UnTRufszhO66072159 = -830570663;    double UnTRufszhO88491637 = -413555317;    double UnTRufszhO56972434 = -905458170;    double UnTRufszhO6538031 = -80140558;    double UnTRufszhO4512985 = -867929557;    double UnTRufszhO38113438 = -659777557;    double UnTRufszhO72722538 = -241401276;    double UnTRufszhO54798309 = -803853819;    double UnTRufszhO29369593 = -338640368;    double UnTRufszhO30605799 = -299377350;    double UnTRufszhO3693323 = -34204633;    double UnTRufszhO8756653 = -496310093;    double UnTRufszhO33335565 = -902565313;    double UnTRufszhO5288446 = -398035381;    double UnTRufszhO98748817 = -238819894;    double UnTRufszhO12199177 = -35381488;    double UnTRufszhO41937770 = -228977609;    double UnTRufszhO8917970 = -998508499;    double UnTRufszhO24600540 = -847006788;    double UnTRufszhO98415531 = -879719982;    double UnTRufszhO45143683 = -451392790;    double UnTRufszhO60058604 = -465416361;    double UnTRufszhO90778214 = -318307497;    double UnTRufszhO45073142 = -886620020;    double UnTRufszhO65414322 = -312885592;    double UnTRufszhO26120165 = -858216828;    double UnTRufszhO6903320 = -688747136;    double UnTRufszhO84001675 = -168236808;    double UnTRufszhO36631877 = -658015012;    double UnTRufszhO5472661 = -666475118;    double UnTRufszhO45852383 = -100172487;    double UnTRufszhO66945697 = -997070923;    double UnTRufszhO45144649 = 76042696;    double UnTRufszhO69723182 = 75334383;    double UnTRufszhO50497365 = -219033164;    double UnTRufszhO16998647 = -385303776;    double UnTRufszhO5604545 = -615849038;    double UnTRufszhO77382882 = -614952337;    double UnTRufszhO5847977 = -933731190;    double UnTRufszhO62360557 = -130349400;    double UnTRufszhO28407976 = -946591163;    double UnTRufszhO40753807 = -240529510;    double UnTRufszhO41844629 = -396211239;    double UnTRufszhO38854784 = -582578935;    double UnTRufszhO42031548 = -376473456;    double UnTRufszhO79014670 = -191552437;    double UnTRufszhO16925537 = -66676914;    double UnTRufszhO63385793 = -103113712;    double UnTRufszhO65373756 = -359173378;    double UnTRufszhO18601036 = -521963690;    double UnTRufszhO95484201 = -234464159;    double UnTRufszhO72033513 = -753030383;    double UnTRufszhO80071454 = -955568555;    double UnTRufszhO30131159 = -525164977;    double UnTRufszhO68082844 = -390484065;    double UnTRufszhO6013555 = -265154303;    double UnTRufszhO97713422 = 4752180;    double UnTRufszhO11899293 = 81161849;    double UnTRufszhO41123709 = -767254967;    double UnTRufszhO78392819 = 90287270;    double UnTRufszhO31210119 = -971030422;    double UnTRufszhO88720863 = 26835532;    double UnTRufszhO18166433 = -45838808;    double UnTRufszhO23896933 = -672165251;    double UnTRufszhO84753416 = -99204864;    double UnTRufszhO36747626 = -37133710;    double UnTRufszhO63612003 = -472352790;    double UnTRufszhO63612383 = -877899697;    double UnTRufszhO54791081 = -79002217;    double UnTRufszhO81750171 = -853516119;    double UnTRufszhO6594632 = -419532451;    double UnTRufszhO64554888 = -614025272;    double UnTRufszhO3069993 = 35222690;    double UnTRufszhO62239983 = -616657389;    double UnTRufszhO70007556 = -933128819;    double UnTRufszhO4389876 = -110863281;    double UnTRufszhO18213976 = -428842261;     UnTRufszhO73691339 = UnTRufszhO82949708;     UnTRufszhO82949708 = UnTRufszhO16569524;     UnTRufszhO16569524 = UnTRufszhO5490285;     UnTRufszhO5490285 = UnTRufszhO62576979;     UnTRufszhO62576979 = UnTRufszhO83920912;     UnTRufszhO83920912 = UnTRufszhO10360962;     UnTRufszhO10360962 = UnTRufszhO473996;     UnTRufszhO473996 = UnTRufszhO1130515;     UnTRufszhO1130515 = UnTRufszhO95552116;     UnTRufszhO95552116 = UnTRufszhO71214221;     UnTRufszhO71214221 = UnTRufszhO69460583;     UnTRufszhO69460583 = UnTRufszhO45724870;     UnTRufszhO45724870 = UnTRufszhO87771322;     UnTRufszhO87771322 = UnTRufszhO50261102;     UnTRufszhO50261102 = UnTRufszhO68674239;     UnTRufszhO68674239 = UnTRufszhO64122574;     UnTRufszhO64122574 = UnTRufszhO30800212;     UnTRufszhO30800212 = UnTRufszhO37421972;     UnTRufszhO37421972 = UnTRufszhO80951483;     UnTRufszhO80951483 = UnTRufszhO4671994;     UnTRufszhO4671994 = UnTRufszhO28546691;     UnTRufszhO28546691 = UnTRufszhO13226527;     UnTRufszhO13226527 = UnTRufszhO66072159;     UnTRufszhO66072159 = UnTRufszhO88491637;     UnTRufszhO88491637 = UnTRufszhO56972434;     UnTRufszhO56972434 = UnTRufszhO6538031;     UnTRufszhO6538031 = UnTRufszhO4512985;     UnTRufszhO4512985 = UnTRufszhO38113438;     UnTRufszhO38113438 = UnTRufszhO72722538;     UnTRufszhO72722538 = UnTRufszhO54798309;     UnTRufszhO54798309 = UnTRufszhO29369593;     UnTRufszhO29369593 = UnTRufszhO30605799;     UnTRufszhO30605799 = UnTRufszhO3693323;     UnTRufszhO3693323 = UnTRufszhO8756653;     UnTRufszhO8756653 = UnTRufszhO33335565;     UnTRufszhO33335565 = UnTRufszhO5288446;     UnTRufszhO5288446 = UnTRufszhO98748817;     UnTRufszhO98748817 = UnTRufszhO12199177;     UnTRufszhO12199177 = UnTRufszhO41937770;     UnTRufszhO41937770 = UnTRufszhO8917970;     UnTRufszhO8917970 = UnTRufszhO24600540;     UnTRufszhO24600540 = UnTRufszhO98415531;     UnTRufszhO98415531 = UnTRufszhO45143683;     UnTRufszhO45143683 = UnTRufszhO60058604;     UnTRufszhO60058604 = UnTRufszhO90778214;     UnTRufszhO90778214 = UnTRufszhO45073142;     UnTRufszhO45073142 = UnTRufszhO65414322;     UnTRufszhO65414322 = UnTRufszhO26120165;     UnTRufszhO26120165 = UnTRufszhO6903320;     UnTRufszhO6903320 = UnTRufszhO84001675;     UnTRufszhO84001675 = UnTRufszhO36631877;     UnTRufszhO36631877 = UnTRufszhO5472661;     UnTRufszhO5472661 = UnTRufszhO45852383;     UnTRufszhO45852383 = UnTRufszhO66945697;     UnTRufszhO66945697 = UnTRufszhO45144649;     UnTRufszhO45144649 = UnTRufszhO69723182;     UnTRufszhO69723182 = UnTRufszhO50497365;     UnTRufszhO50497365 = UnTRufszhO16998647;     UnTRufszhO16998647 = UnTRufszhO5604545;     UnTRufszhO5604545 = UnTRufszhO77382882;     UnTRufszhO77382882 = UnTRufszhO5847977;     UnTRufszhO5847977 = UnTRufszhO62360557;     UnTRufszhO62360557 = UnTRufszhO28407976;     UnTRufszhO28407976 = UnTRufszhO40753807;     UnTRufszhO40753807 = UnTRufszhO41844629;     UnTRufszhO41844629 = UnTRufszhO38854784;     UnTRufszhO38854784 = UnTRufszhO42031548;     UnTRufszhO42031548 = UnTRufszhO79014670;     UnTRufszhO79014670 = UnTRufszhO16925537;     UnTRufszhO16925537 = UnTRufszhO63385793;     UnTRufszhO63385793 = UnTRufszhO65373756;     UnTRufszhO65373756 = UnTRufszhO18601036;     UnTRufszhO18601036 = UnTRufszhO95484201;     UnTRufszhO95484201 = UnTRufszhO72033513;     UnTRufszhO72033513 = UnTRufszhO80071454;     UnTRufszhO80071454 = UnTRufszhO30131159;     UnTRufszhO30131159 = UnTRufszhO68082844;     UnTRufszhO68082844 = UnTRufszhO6013555;     UnTRufszhO6013555 = UnTRufszhO97713422;     UnTRufszhO97713422 = UnTRufszhO11899293;     UnTRufszhO11899293 = UnTRufszhO41123709;     UnTRufszhO41123709 = UnTRufszhO78392819;     UnTRufszhO78392819 = UnTRufszhO31210119;     UnTRufszhO31210119 = UnTRufszhO88720863;     UnTRufszhO88720863 = UnTRufszhO18166433;     UnTRufszhO18166433 = UnTRufszhO23896933;     UnTRufszhO23896933 = UnTRufszhO84753416;     UnTRufszhO84753416 = UnTRufszhO36747626;     UnTRufszhO36747626 = UnTRufszhO63612003;     UnTRufszhO63612003 = UnTRufszhO63612383;     UnTRufszhO63612383 = UnTRufszhO54791081;     UnTRufszhO54791081 = UnTRufszhO81750171;     UnTRufszhO81750171 = UnTRufszhO6594632;     UnTRufszhO6594632 = UnTRufszhO64554888;     UnTRufszhO64554888 = UnTRufszhO3069993;     UnTRufszhO3069993 = UnTRufszhO62239983;     UnTRufszhO62239983 = UnTRufszhO70007556;     UnTRufszhO70007556 = UnTRufszhO4389876;     UnTRufszhO4389876 = UnTRufszhO18213976;     UnTRufszhO18213976 = UnTRufszhO73691339;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void QScJGVitPd99542144() {     double JVRCpqlyWO44615748 = -388871920;    double JVRCpqlyWO70921548 = -685050559;    double JVRCpqlyWO90029265 = -523809363;    double JVRCpqlyWO64857133 = -720620404;    double JVRCpqlyWO66307415 = -264149577;    double JVRCpqlyWO21561225 = -520355874;    double JVRCpqlyWO63128438 = -786575748;    double JVRCpqlyWO55523066 = -474417920;    double JVRCpqlyWO21425561 = -351009183;    double JVRCpqlyWO28718027 = -836950453;    double JVRCpqlyWO27257086 = -479394994;    double JVRCpqlyWO56305202 = -974719465;    double JVRCpqlyWO90341247 = -493044624;    double JVRCpqlyWO40208829 = -395436297;    double JVRCpqlyWO21478026 = 86620595;    double JVRCpqlyWO61192293 = -639976656;    double JVRCpqlyWO19941687 = -832327806;    double JVRCpqlyWO7320062 = -407129694;    double JVRCpqlyWO18094362 = -578586344;    double JVRCpqlyWO96552157 = -992636561;    double JVRCpqlyWO51176295 = -406658347;    double JVRCpqlyWO57093474 = -68165663;    double JVRCpqlyWO17398890 = -858183381;    double JVRCpqlyWO10007942 = -871299349;    double JVRCpqlyWO76084850 = -34831860;    double JVRCpqlyWO61794700 = -374405856;    double JVRCpqlyWO57157597 = -491909127;    double JVRCpqlyWO50566309 = -598506918;    double JVRCpqlyWO18771421 = -61896847;    double JVRCpqlyWO7699491 = -634984243;    double JVRCpqlyWO58552094 = -420721559;    double JVRCpqlyWO20291772 = -592761435;    double JVRCpqlyWO69589397 = -392625089;    double JVRCpqlyWO62907338 = -286910528;    double JVRCpqlyWO58015521 = -139196670;    double JVRCpqlyWO93629063 = -151930179;    double JVRCpqlyWO92170711 = -27774084;    double JVRCpqlyWO31261945 = -208868377;    double JVRCpqlyWO37666703 = -824452625;    double JVRCpqlyWO98607942 = -650071015;    double JVRCpqlyWO87965517 = -448962429;    double JVRCpqlyWO17633133 = -942305288;    double JVRCpqlyWO16898928 = -526951300;    double JVRCpqlyWO66174461 = 96906833;    double JVRCpqlyWO76073469 = -745179282;    double JVRCpqlyWO42272903 = -584110091;    double JVRCpqlyWO56065676 = -273312119;    double JVRCpqlyWO25483365 = -37177423;    double JVRCpqlyWO53247107 = -621926727;    double JVRCpqlyWO35917075 = -983775881;    double JVRCpqlyWO32283753 = -338234916;    double JVRCpqlyWO89055564 = -703173956;    double JVRCpqlyWO67266609 = -286512218;    double JVRCpqlyWO67585805 = 48730365;    double JVRCpqlyWO48365849 = -833151937;    double JVRCpqlyWO87522273 = -220706257;    double JVRCpqlyWO53522659 = -826867178;    double JVRCpqlyWO80021324 = -652510015;    double JVRCpqlyWO88772283 = -585788545;    double JVRCpqlyWO4512715 = -889743722;    double JVRCpqlyWO64403627 = 71553253;    double JVRCpqlyWO12562129 = -88068831;    double JVRCpqlyWO36751646 = -312521073;    double JVRCpqlyWO13726070 = -716024940;    double JVRCpqlyWO70165933 = -316228895;    double JVRCpqlyWO6965314 = -886633559;    double JVRCpqlyWO86715805 = -482094376;    double JVRCpqlyWO27433909 = -106134097;    double JVRCpqlyWO82193307 = -156239627;    double JVRCpqlyWO27848963 = -761449226;    double JVRCpqlyWO69021582 = -512202573;    double JVRCpqlyWO88679741 = -523459430;    double JVRCpqlyWO69653359 = -582677069;    double JVRCpqlyWO19486420 = -928515329;    double JVRCpqlyWO8586640 = -443674133;    double JVRCpqlyWO33543163 = -464353060;    double JVRCpqlyWO40194546 = -541214364;    double JVRCpqlyWO51224429 = -855090215;    double JVRCpqlyWO33934472 = -26120067;    double JVRCpqlyWO33811947 = -450721770;    double JVRCpqlyWO5729024 = -1093737;    double JVRCpqlyWO31674232 = -354731705;    double JVRCpqlyWO97319201 = -976580192;    double JVRCpqlyWO82854345 = -78120966;    double JVRCpqlyWO75415737 = -196749328;    double JVRCpqlyWO69496529 = -717547603;    double JVRCpqlyWO53025163 = -206249218;    double JVRCpqlyWO2003593 = -341355455;    double JVRCpqlyWO14541490 = -453758591;    double JVRCpqlyWO70493248 = -918490413;    double JVRCpqlyWO40106404 = -325063001;    double JVRCpqlyWO12149387 = -375264069;    double JVRCpqlyWO42489662 = -623079833;    double JVRCpqlyWO33153988 = -934708903;    double JVRCpqlyWO34204315 = -621624268;    double JVRCpqlyWO75403389 = -260893599;    double JVRCpqlyWO80881486 = -529784215;    double JVRCpqlyWO3172859 = -810926360;    double JVRCpqlyWO96008527 = -586864272;    double JVRCpqlyWO69108156 = -388871920;     JVRCpqlyWO44615748 = JVRCpqlyWO70921548;     JVRCpqlyWO70921548 = JVRCpqlyWO90029265;     JVRCpqlyWO90029265 = JVRCpqlyWO64857133;     JVRCpqlyWO64857133 = JVRCpqlyWO66307415;     JVRCpqlyWO66307415 = JVRCpqlyWO21561225;     JVRCpqlyWO21561225 = JVRCpqlyWO63128438;     JVRCpqlyWO63128438 = JVRCpqlyWO55523066;     JVRCpqlyWO55523066 = JVRCpqlyWO21425561;     JVRCpqlyWO21425561 = JVRCpqlyWO28718027;     JVRCpqlyWO28718027 = JVRCpqlyWO27257086;     JVRCpqlyWO27257086 = JVRCpqlyWO56305202;     JVRCpqlyWO56305202 = JVRCpqlyWO90341247;     JVRCpqlyWO90341247 = JVRCpqlyWO40208829;     JVRCpqlyWO40208829 = JVRCpqlyWO21478026;     JVRCpqlyWO21478026 = JVRCpqlyWO61192293;     JVRCpqlyWO61192293 = JVRCpqlyWO19941687;     JVRCpqlyWO19941687 = JVRCpqlyWO7320062;     JVRCpqlyWO7320062 = JVRCpqlyWO18094362;     JVRCpqlyWO18094362 = JVRCpqlyWO96552157;     JVRCpqlyWO96552157 = JVRCpqlyWO51176295;     JVRCpqlyWO51176295 = JVRCpqlyWO57093474;     JVRCpqlyWO57093474 = JVRCpqlyWO17398890;     JVRCpqlyWO17398890 = JVRCpqlyWO10007942;     JVRCpqlyWO10007942 = JVRCpqlyWO76084850;     JVRCpqlyWO76084850 = JVRCpqlyWO61794700;     JVRCpqlyWO61794700 = JVRCpqlyWO57157597;     JVRCpqlyWO57157597 = JVRCpqlyWO50566309;     JVRCpqlyWO50566309 = JVRCpqlyWO18771421;     JVRCpqlyWO18771421 = JVRCpqlyWO7699491;     JVRCpqlyWO7699491 = JVRCpqlyWO58552094;     JVRCpqlyWO58552094 = JVRCpqlyWO20291772;     JVRCpqlyWO20291772 = JVRCpqlyWO69589397;     JVRCpqlyWO69589397 = JVRCpqlyWO62907338;     JVRCpqlyWO62907338 = JVRCpqlyWO58015521;     JVRCpqlyWO58015521 = JVRCpqlyWO93629063;     JVRCpqlyWO93629063 = JVRCpqlyWO92170711;     JVRCpqlyWO92170711 = JVRCpqlyWO31261945;     JVRCpqlyWO31261945 = JVRCpqlyWO37666703;     JVRCpqlyWO37666703 = JVRCpqlyWO98607942;     JVRCpqlyWO98607942 = JVRCpqlyWO87965517;     JVRCpqlyWO87965517 = JVRCpqlyWO17633133;     JVRCpqlyWO17633133 = JVRCpqlyWO16898928;     JVRCpqlyWO16898928 = JVRCpqlyWO66174461;     JVRCpqlyWO66174461 = JVRCpqlyWO76073469;     JVRCpqlyWO76073469 = JVRCpqlyWO42272903;     JVRCpqlyWO42272903 = JVRCpqlyWO56065676;     JVRCpqlyWO56065676 = JVRCpqlyWO25483365;     JVRCpqlyWO25483365 = JVRCpqlyWO53247107;     JVRCpqlyWO53247107 = JVRCpqlyWO35917075;     JVRCpqlyWO35917075 = JVRCpqlyWO32283753;     JVRCpqlyWO32283753 = JVRCpqlyWO89055564;     JVRCpqlyWO89055564 = JVRCpqlyWO67266609;     JVRCpqlyWO67266609 = JVRCpqlyWO67585805;     JVRCpqlyWO67585805 = JVRCpqlyWO48365849;     JVRCpqlyWO48365849 = JVRCpqlyWO87522273;     JVRCpqlyWO87522273 = JVRCpqlyWO53522659;     JVRCpqlyWO53522659 = JVRCpqlyWO80021324;     JVRCpqlyWO80021324 = JVRCpqlyWO88772283;     JVRCpqlyWO88772283 = JVRCpqlyWO4512715;     JVRCpqlyWO4512715 = JVRCpqlyWO64403627;     JVRCpqlyWO64403627 = JVRCpqlyWO12562129;     JVRCpqlyWO12562129 = JVRCpqlyWO36751646;     JVRCpqlyWO36751646 = JVRCpqlyWO13726070;     JVRCpqlyWO13726070 = JVRCpqlyWO70165933;     JVRCpqlyWO70165933 = JVRCpqlyWO6965314;     JVRCpqlyWO6965314 = JVRCpqlyWO86715805;     JVRCpqlyWO86715805 = JVRCpqlyWO27433909;     JVRCpqlyWO27433909 = JVRCpqlyWO82193307;     JVRCpqlyWO82193307 = JVRCpqlyWO27848963;     JVRCpqlyWO27848963 = JVRCpqlyWO69021582;     JVRCpqlyWO69021582 = JVRCpqlyWO88679741;     JVRCpqlyWO88679741 = JVRCpqlyWO69653359;     JVRCpqlyWO69653359 = JVRCpqlyWO19486420;     JVRCpqlyWO19486420 = JVRCpqlyWO8586640;     JVRCpqlyWO8586640 = JVRCpqlyWO33543163;     JVRCpqlyWO33543163 = JVRCpqlyWO40194546;     JVRCpqlyWO40194546 = JVRCpqlyWO51224429;     JVRCpqlyWO51224429 = JVRCpqlyWO33934472;     JVRCpqlyWO33934472 = JVRCpqlyWO33811947;     JVRCpqlyWO33811947 = JVRCpqlyWO5729024;     JVRCpqlyWO5729024 = JVRCpqlyWO31674232;     JVRCpqlyWO31674232 = JVRCpqlyWO97319201;     JVRCpqlyWO97319201 = JVRCpqlyWO82854345;     JVRCpqlyWO82854345 = JVRCpqlyWO75415737;     JVRCpqlyWO75415737 = JVRCpqlyWO69496529;     JVRCpqlyWO69496529 = JVRCpqlyWO53025163;     JVRCpqlyWO53025163 = JVRCpqlyWO2003593;     JVRCpqlyWO2003593 = JVRCpqlyWO14541490;     JVRCpqlyWO14541490 = JVRCpqlyWO70493248;     JVRCpqlyWO70493248 = JVRCpqlyWO40106404;     JVRCpqlyWO40106404 = JVRCpqlyWO12149387;     JVRCpqlyWO12149387 = JVRCpqlyWO42489662;     JVRCpqlyWO42489662 = JVRCpqlyWO33153988;     JVRCpqlyWO33153988 = JVRCpqlyWO34204315;     JVRCpqlyWO34204315 = JVRCpqlyWO75403389;     JVRCpqlyWO75403389 = JVRCpqlyWO80881486;     JVRCpqlyWO80881486 = JVRCpqlyWO3172859;     JVRCpqlyWO3172859 = JVRCpqlyWO96008527;     JVRCpqlyWO96008527 = JVRCpqlyWO69108156;     JVRCpqlyWO69108156 = JVRCpqlyWO44615748;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void YDJqgaQfAx75224067() {     double cwQBgfffhk86198294 = 5473433;    double cwQBgfffhk88994590 = -232606821;    double cwQBgfffhk42144714 = -383180746;    double cwQBgfffhk79075408 = -911979276;    double cwQBgfffhk82648070 = -422042973;    double cwQBgfffhk14395867 = -247767192;    double cwQBgfffhk65727474 = 34270008;    double cwQBgfffhk98200467 = -701348656;    double cwQBgfffhk4845497 = -893727186;    double cwQBgfffhk88210884 = -93806058;    double cwQBgfffhk5228506 = -199368238;    double cwQBgfffhk74404716 = -447768076;    double cwQBgfffhk82932097 = -363289743;    double cwQBgfffhk22649149 = -558885222;    double cwQBgfffhk30242860 = -44553734;    double cwQBgfffhk11674441 = 84007844;    double cwQBgfffhk13760866 = 43767098;    double cwQBgfffhk81132873 = -849008783;    double cwQBgfffhk60046264 = -682936595;    double cwQBgfffhk98865777 = -64076095;    double cwQBgfffhk73146927 = -208954118;    double cwQBgfffhk68739756 = -652739790;    double cwQBgfffhk86636664 = -883375210;    double cwQBgfffhk44143152 = -623508418;    double cwQBgfffhk99359761 = -5319238;    double cwQBgfffhk80640470 = -33432057;    double cwQBgfffhk45816368 = -998055758;    double cwQBgfffhk68998334 = -225241057;    double cwQBgfffhk18893444 = -212304039;    double cwQBgfffhk5758668 = -811530908;    double cwQBgfffhk35965196 = -498929750;    double cwQBgfffhk71001555 = -783357904;    double cwQBgfffhk6065934 = -230890221;    double cwQBgfffhk87203491 = -226464374;    double cwQBgfffhk2940590 = -469716101;    double cwQBgfffhk71087631 = -500755846;    double cwQBgfffhk10903095 = -846452615;    double cwQBgfffhk46649882 = 32232711;    double cwQBgfffhk6353922 = -856570982;    double cwQBgfffhk78508519 = -979341097;    double cwQBgfffhk39230682 = -195491339;    double cwQBgfffhk53451055 = -613200775;    double cwQBgfffhk24065925 = -701806415;    double cwQBgfffhk34481641 = -969804071;    double cwQBgfffhk4024341 = -860329196;    double cwQBgfffhk59745458 = -796205168;    double cwQBgfffhk65491622 = -394793395;    double cwQBgfffhk75783037 = -704838192;    double cwQBgfffhk67157113 = -807636734;    double cwQBgfffhk53312894 = -874788618;    double cwQBgfffhk35495785 = -476250138;    double cwQBgfffhk68803498 = -335406875;    double cwQBgfffhk8687867 = 57706649;    double cwQBgfffhk69296261 = 68671571;    double cwQBgfffhk2077140 = 76725412;    double cwQBgfffhk17458538 = -341786777;    double cwQBgfffhk2357926 = -349231612;    double cwQBgfffhk98001561 = -759672328;    double cwQBgfffhk79715646 = -806660038;    double cwQBgfffhk2007600 = -288610916;    double cwQBgfffhk68579498 = -249711435;    double cwQBgfffhk96729139 = -740488935;    double cwQBgfffhk79307024 = -389044618;    double cwQBgfffhk99086828 = 17803721;    double cwQBgfffhk52245689 = -594876309;    double cwQBgfffhk34226950 = -416010334;    double cwQBgfffhk68338783 = -116877855;    double cwQBgfffhk95728605 = -36825370;    double cwQBgfffhk19708559 = 10830878;    double cwQBgfffhk59155229 = -543797889;    double cwQBgfffhk771346 = -69539541;    double cwQBgfffhk67110984 = -988465614;    double cwQBgfffhk74778952 = -992437802;    double cwQBgfffhk81537744 = -703595499;    double cwQBgfffhk59635096 = -868584757;    double cwQBgfffhk19695872 = -595753343;    double cwQBgfffhk44673832 = -950933375;    double cwQBgfffhk52155023 = -913571139;    double cwQBgfffhk40118811 = -763179223;    double cwQBgfffhk39614303 = -209114070;    double cwQBgfffhk15148849 = -638638663;    double cwQBgfffhk70033331 = -193217566;    double cwQBgfffhk1841222 = -417604324;    double cwQBgfffhk65580550 = -337515421;    double cwQBgfffhk70262883 = -235280771;    double cwQBgfffhk67161697 = -63522875;    double cwQBgfffhk62313688 = -741064553;    double cwQBgfffhk36769673 = -199561793;    double cwQBgfffhk85126352 = -203189786;    double cwQBgfffhk85482051 = -27929324;    double cwQBgfffhk68729705 = -51524235;    double cwQBgfffhk12901533 = 13219712;    double cwQBgfffhk66934235 = -161107251;    double cwQBgfffhk4346322 = -467960067;    double cwQBgfffhk9929021 = -629629663;    double cwQBgfffhk42501542 = -455002404;    double cwQBgfffhk74144031 = -124156158;    double cwQBgfffhk24979096 = -619610137;    double cwQBgfffhk82235952 = -274927763;    double cwQBgfffhk69797390 = 5473433;     cwQBgfffhk86198294 = cwQBgfffhk88994590;     cwQBgfffhk88994590 = cwQBgfffhk42144714;     cwQBgfffhk42144714 = cwQBgfffhk79075408;     cwQBgfffhk79075408 = cwQBgfffhk82648070;     cwQBgfffhk82648070 = cwQBgfffhk14395867;     cwQBgfffhk14395867 = cwQBgfffhk65727474;     cwQBgfffhk65727474 = cwQBgfffhk98200467;     cwQBgfffhk98200467 = cwQBgfffhk4845497;     cwQBgfffhk4845497 = cwQBgfffhk88210884;     cwQBgfffhk88210884 = cwQBgfffhk5228506;     cwQBgfffhk5228506 = cwQBgfffhk74404716;     cwQBgfffhk74404716 = cwQBgfffhk82932097;     cwQBgfffhk82932097 = cwQBgfffhk22649149;     cwQBgfffhk22649149 = cwQBgfffhk30242860;     cwQBgfffhk30242860 = cwQBgfffhk11674441;     cwQBgfffhk11674441 = cwQBgfffhk13760866;     cwQBgfffhk13760866 = cwQBgfffhk81132873;     cwQBgfffhk81132873 = cwQBgfffhk60046264;     cwQBgfffhk60046264 = cwQBgfffhk98865777;     cwQBgfffhk98865777 = cwQBgfffhk73146927;     cwQBgfffhk73146927 = cwQBgfffhk68739756;     cwQBgfffhk68739756 = cwQBgfffhk86636664;     cwQBgfffhk86636664 = cwQBgfffhk44143152;     cwQBgfffhk44143152 = cwQBgfffhk99359761;     cwQBgfffhk99359761 = cwQBgfffhk80640470;     cwQBgfffhk80640470 = cwQBgfffhk45816368;     cwQBgfffhk45816368 = cwQBgfffhk68998334;     cwQBgfffhk68998334 = cwQBgfffhk18893444;     cwQBgfffhk18893444 = cwQBgfffhk5758668;     cwQBgfffhk5758668 = cwQBgfffhk35965196;     cwQBgfffhk35965196 = cwQBgfffhk71001555;     cwQBgfffhk71001555 = cwQBgfffhk6065934;     cwQBgfffhk6065934 = cwQBgfffhk87203491;     cwQBgfffhk87203491 = cwQBgfffhk2940590;     cwQBgfffhk2940590 = cwQBgfffhk71087631;     cwQBgfffhk71087631 = cwQBgfffhk10903095;     cwQBgfffhk10903095 = cwQBgfffhk46649882;     cwQBgfffhk46649882 = cwQBgfffhk6353922;     cwQBgfffhk6353922 = cwQBgfffhk78508519;     cwQBgfffhk78508519 = cwQBgfffhk39230682;     cwQBgfffhk39230682 = cwQBgfffhk53451055;     cwQBgfffhk53451055 = cwQBgfffhk24065925;     cwQBgfffhk24065925 = cwQBgfffhk34481641;     cwQBgfffhk34481641 = cwQBgfffhk4024341;     cwQBgfffhk4024341 = cwQBgfffhk59745458;     cwQBgfffhk59745458 = cwQBgfffhk65491622;     cwQBgfffhk65491622 = cwQBgfffhk75783037;     cwQBgfffhk75783037 = cwQBgfffhk67157113;     cwQBgfffhk67157113 = cwQBgfffhk53312894;     cwQBgfffhk53312894 = cwQBgfffhk35495785;     cwQBgfffhk35495785 = cwQBgfffhk68803498;     cwQBgfffhk68803498 = cwQBgfffhk8687867;     cwQBgfffhk8687867 = cwQBgfffhk69296261;     cwQBgfffhk69296261 = cwQBgfffhk2077140;     cwQBgfffhk2077140 = cwQBgfffhk17458538;     cwQBgfffhk17458538 = cwQBgfffhk2357926;     cwQBgfffhk2357926 = cwQBgfffhk98001561;     cwQBgfffhk98001561 = cwQBgfffhk79715646;     cwQBgfffhk79715646 = cwQBgfffhk2007600;     cwQBgfffhk2007600 = cwQBgfffhk68579498;     cwQBgfffhk68579498 = cwQBgfffhk96729139;     cwQBgfffhk96729139 = cwQBgfffhk79307024;     cwQBgfffhk79307024 = cwQBgfffhk99086828;     cwQBgfffhk99086828 = cwQBgfffhk52245689;     cwQBgfffhk52245689 = cwQBgfffhk34226950;     cwQBgfffhk34226950 = cwQBgfffhk68338783;     cwQBgfffhk68338783 = cwQBgfffhk95728605;     cwQBgfffhk95728605 = cwQBgfffhk19708559;     cwQBgfffhk19708559 = cwQBgfffhk59155229;     cwQBgfffhk59155229 = cwQBgfffhk771346;     cwQBgfffhk771346 = cwQBgfffhk67110984;     cwQBgfffhk67110984 = cwQBgfffhk74778952;     cwQBgfffhk74778952 = cwQBgfffhk81537744;     cwQBgfffhk81537744 = cwQBgfffhk59635096;     cwQBgfffhk59635096 = cwQBgfffhk19695872;     cwQBgfffhk19695872 = cwQBgfffhk44673832;     cwQBgfffhk44673832 = cwQBgfffhk52155023;     cwQBgfffhk52155023 = cwQBgfffhk40118811;     cwQBgfffhk40118811 = cwQBgfffhk39614303;     cwQBgfffhk39614303 = cwQBgfffhk15148849;     cwQBgfffhk15148849 = cwQBgfffhk70033331;     cwQBgfffhk70033331 = cwQBgfffhk1841222;     cwQBgfffhk1841222 = cwQBgfffhk65580550;     cwQBgfffhk65580550 = cwQBgfffhk70262883;     cwQBgfffhk70262883 = cwQBgfffhk67161697;     cwQBgfffhk67161697 = cwQBgfffhk62313688;     cwQBgfffhk62313688 = cwQBgfffhk36769673;     cwQBgfffhk36769673 = cwQBgfffhk85126352;     cwQBgfffhk85126352 = cwQBgfffhk85482051;     cwQBgfffhk85482051 = cwQBgfffhk68729705;     cwQBgfffhk68729705 = cwQBgfffhk12901533;     cwQBgfffhk12901533 = cwQBgfffhk66934235;     cwQBgfffhk66934235 = cwQBgfffhk4346322;     cwQBgfffhk4346322 = cwQBgfffhk9929021;     cwQBgfffhk9929021 = cwQBgfffhk42501542;     cwQBgfffhk42501542 = cwQBgfffhk74144031;     cwQBgfffhk74144031 = cwQBgfffhk24979096;     cwQBgfffhk24979096 = cwQBgfffhk82235952;     cwQBgfffhk82235952 = cwQBgfffhk69797390;     cwQBgfffhk69797390 = cwQBgfffhk86198294;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void UhnUKaNTbX11869042() {     double kCOyfvCaEn8585412 = -728930530;    double kCOyfvCaEn73342090 = -181149876;    double kCOyfvCaEn70913992 = -622834590;    double kCOyfvCaEn94082096 = -918386807;    double kCOyfvCaEn80822324 = 86900026;    double kCOyfvCaEn29278983 = -108375570;    double kCOyfvCaEn57883213 = -887717298;    double kCOyfvCaEn73834326 = -71945300;    double kCOyfvCaEn2008628 = -777923225;    double kCOyfvCaEn79974469 = -936547391;    double kCOyfvCaEn42770365 = -195992638;    double kCOyfvCaEn30307665 = -698513369;    double kCOyfvCaEn49940278 = -982007063;    double kCOyfvCaEn65263900 = 13406021;    double kCOyfvCaEn66978137 = -772031447;    double kCOyfvCaEn55930353 = -297659698;    double kCOyfvCaEn63584218 = -233512722;    double kCOyfvCaEn87109290 = -200751474;    double kCOyfvCaEn1327895 = -818038721;    double kCOyfvCaEn77382060 = -316710549;    double kCOyfvCaEn74030034 = -200441426;    double kCOyfvCaEn32554975 = -57506103;    double kCOyfvCaEn89929987 = 40544198;    double kCOyfvCaEn70642939 = -87501275;    double kCOyfvCaEn34900009 = -726878363;    double kCOyfvCaEn68943465 = -477326281;    double kCOyfvCaEn92905788 = -755642251;    double kCOyfvCaEn74909784 = -13695511;    double kCOyfvCaEn25786005 = -556561158;    double kCOyfvCaEn14915848 = -731826774;    double kCOyfvCaEn80256001 = -580245902;    double kCOyfvCaEn28542746 = -335429259;    double kCOyfvCaEn87104604 = -760233716;    double kCOyfvCaEn46592179 = -550591224;    double kCOyfvCaEn79169954 = -533472524;    double kCOyfvCaEn12780500 = -816151223;    double kCOyfvCaEn4342807 = -579400567;    double kCOyfvCaEn275983 = -935392761;    double kCOyfvCaEn54662052 = -157617014;    double kCOyfvCaEn98694233 = -15565127;    double kCOyfvCaEn67988052 = -698669005;    double kCOyfvCaEn41959446 = -371109466;    double kCOyfvCaEn29616117 = -589336999;    double kCOyfvCaEn33925761 = -967167720;    double kCOyfvCaEn72007607 = -669472674;    double kCOyfvCaEn67845740 = -978434264;    double kCOyfvCaEn77789019 = -973203648;    double kCOyfvCaEn20381712 = -461373183;    double kCOyfvCaEn61617018 = -757353432;    double kCOyfvCaEn50396640 = 83191123;    double kCOyfvCaEn44365002 = -831326415;    double kCOyfvCaEn42654756 = -766226157;    double kCOyfvCaEn87002269 = -714204581;    double kCOyfvCaEn29582806 = -207009237;    double kCOyfvCaEn37839007 = -63978703;    double kCOyfvCaEn76030436 = -571424427;    double kCOyfvCaEn83412102 = -121694074;    double kCOyfvCaEn271054 = -435333315;    double kCOyfvCaEn59182088 = -91508445;    double kCOyfvCaEn11878860 = -435773693;    double kCOyfvCaEn36373195 = -352733320;    double kCOyfvCaEn82973428 = -774021788;    double kCOyfvCaEn48048322 = -515384143;    double kCOyfvCaEn87092780 = 53903549;    double kCOyfvCaEn99718468 = -256301490;    double kCOyfvCaEn14227619 = -860563380;    double kCOyfvCaEn43203061 = -938279654;    double kCOyfvCaEn3348099 = -331415839;    double kCOyfvCaEn86093946 = -453121456;    double kCOyfvCaEn54197637 = -955880225;    double kCOyfvCaEn51587546 = -718259132;    double kCOyfvCaEn63308235 = -298119962;    double kCOyfvCaEn32447238 = 56865539;    double kCOyfvCaEn2633661 = -702473594;    double kCOyfvCaEn9394009 = -618041545;    double kCOyfvCaEn32070588 = -829331961;    double kCOyfvCaEn2938859 = -468169105;    double kCOyfvCaEn56004227 = 7711918;    double kCOyfvCaEn98635331 = -418028602;    double kCOyfvCaEn67054268 = -748444100;    double kCOyfvCaEn91154445 = -504122634;    double kCOyfvCaEn72524077 = -194269068;    double kCOyfvCaEn13292767 = -256342080;    double kCOyfvCaEn75389365 = -539752281;    double kCOyfvCaEn70550846 = -900500360;    double kCOyfvCaEn37601245 = -814019745;    double kCOyfvCaEn41540476 = -621224678;    double kCOyfvCaEn57521798 = -453224479;    double kCOyfvCaEn8753172 = -386612521;    double kCOyfvCaEn3139518 = -962048097;    double kCOyfvCaEn29368397 = -594457149;    double kCOyfvCaEn4071754 = -44067252;    double kCOyfvCaEn41093894 = -743884316;    double kCOyfvCaEn42783193 = -721843321;    double kCOyfvCaEn62321039 = -662831807;    double kCOyfvCaEn85014624 = -924647217;    double kCOyfvCaEn93911124 = -855725324;    double kCOyfvCaEn42523336 = -543240548;    double kCOyfvCaEn34207292 = -610866231;    double kCOyfvCaEn57779988 = -728930530;     kCOyfvCaEn8585412 = kCOyfvCaEn73342090;     kCOyfvCaEn73342090 = kCOyfvCaEn70913992;     kCOyfvCaEn70913992 = kCOyfvCaEn94082096;     kCOyfvCaEn94082096 = kCOyfvCaEn80822324;     kCOyfvCaEn80822324 = kCOyfvCaEn29278983;     kCOyfvCaEn29278983 = kCOyfvCaEn57883213;     kCOyfvCaEn57883213 = kCOyfvCaEn73834326;     kCOyfvCaEn73834326 = kCOyfvCaEn2008628;     kCOyfvCaEn2008628 = kCOyfvCaEn79974469;     kCOyfvCaEn79974469 = kCOyfvCaEn42770365;     kCOyfvCaEn42770365 = kCOyfvCaEn30307665;     kCOyfvCaEn30307665 = kCOyfvCaEn49940278;     kCOyfvCaEn49940278 = kCOyfvCaEn65263900;     kCOyfvCaEn65263900 = kCOyfvCaEn66978137;     kCOyfvCaEn66978137 = kCOyfvCaEn55930353;     kCOyfvCaEn55930353 = kCOyfvCaEn63584218;     kCOyfvCaEn63584218 = kCOyfvCaEn87109290;     kCOyfvCaEn87109290 = kCOyfvCaEn1327895;     kCOyfvCaEn1327895 = kCOyfvCaEn77382060;     kCOyfvCaEn77382060 = kCOyfvCaEn74030034;     kCOyfvCaEn74030034 = kCOyfvCaEn32554975;     kCOyfvCaEn32554975 = kCOyfvCaEn89929987;     kCOyfvCaEn89929987 = kCOyfvCaEn70642939;     kCOyfvCaEn70642939 = kCOyfvCaEn34900009;     kCOyfvCaEn34900009 = kCOyfvCaEn68943465;     kCOyfvCaEn68943465 = kCOyfvCaEn92905788;     kCOyfvCaEn92905788 = kCOyfvCaEn74909784;     kCOyfvCaEn74909784 = kCOyfvCaEn25786005;     kCOyfvCaEn25786005 = kCOyfvCaEn14915848;     kCOyfvCaEn14915848 = kCOyfvCaEn80256001;     kCOyfvCaEn80256001 = kCOyfvCaEn28542746;     kCOyfvCaEn28542746 = kCOyfvCaEn87104604;     kCOyfvCaEn87104604 = kCOyfvCaEn46592179;     kCOyfvCaEn46592179 = kCOyfvCaEn79169954;     kCOyfvCaEn79169954 = kCOyfvCaEn12780500;     kCOyfvCaEn12780500 = kCOyfvCaEn4342807;     kCOyfvCaEn4342807 = kCOyfvCaEn275983;     kCOyfvCaEn275983 = kCOyfvCaEn54662052;     kCOyfvCaEn54662052 = kCOyfvCaEn98694233;     kCOyfvCaEn98694233 = kCOyfvCaEn67988052;     kCOyfvCaEn67988052 = kCOyfvCaEn41959446;     kCOyfvCaEn41959446 = kCOyfvCaEn29616117;     kCOyfvCaEn29616117 = kCOyfvCaEn33925761;     kCOyfvCaEn33925761 = kCOyfvCaEn72007607;     kCOyfvCaEn72007607 = kCOyfvCaEn67845740;     kCOyfvCaEn67845740 = kCOyfvCaEn77789019;     kCOyfvCaEn77789019 = kCOyfvCaEn20381712;     kCOyfvCaEn20381712 = kCOyfvCaEn61617018;     kCOyfvCaEn61617018 = kCOyfvCaEn50396640;     kCOyfvCaEn50396640 = kCOyfvCaEn44365002;     kCOyfvCaEn44365002 = kCOyfvCaEn42654756;     kCOyfvCaEn42654756 = kCOyfvCaEn87002269;     kCOyfvCaEn87002269 = kCOyfvCaEn29582806;     kCOyfvCaEn29582806 = kCOyfvCaEn37839007;     kCOyfvCaEn37839007 = kCOyfvCaEn76030436;     kCOyfvCaEn76030436 = kCOyfvCaEn83412102;     kCOyfvCaEn83412102 = kCOyfvCaEn271054;     kCOyfvCaEn271054 = kCOyfvCaEn59182088;     kCOyfvCaEn59182088 = kCOyfvCaEn11878860;     kCOyfvCaEn11878860 = kCOyfvCaEn36373195;     kCOyfvCaEn36373195 = kCOyfvCaEn82973428;     kCOyfvCaEn82973428 = kCOyfvCaEn48048322;     kCOyfvCaEn48048322 = kCOyfvCaEn87092780;     kCOyfvCaEn87092780 = kCOyfvCaEn99718468;     kCOyfvCaEn99718468 = kCOyfvCaEn14227619;     kCOyfvCaEn14227619 = kCOyfvCaEn43203061;     kCOyfvCaEn43203061 = kCOyfvCaEn3348099;     kCOyfvCaEn3348099 = kCOyfvCaEn86093946;     kCOyfvCaEn86093946 = kCOyfvCaEn54197637;     kCOyfvCaEn54197637 = kCOyfvCaEn51587546;     kCOyfvCaEn51587546 = kCOyfvCaEn63308235;     kCOyfvCaEn63308235 = kCOyfvCaEn32447238;     kCOyfvCaEn32447238 = kCOyfvCaEn2633661;     kCOyfvCaEn2633661 = kCOyfvCaEn9394009;     kCOyfvCaEn9394009 = kCOyfvCaEn32070588;     kCOyfvCaEn32070588 = kCOyfvCaEn2938859;     kCOyfvCaEn2938859 = kCOyfvCaEn56004227;     kCOyfvCaEn56004227 = kCOyfvCaEn98635331;     kCOyfvCaEn98635331 = kCOyfvCaEn67054268;     kCOyfvCaEn67054268 = kCOyfvCaEn91154445;     kCOyfvCaEn91154445 = kCOyfvCaEn72524077;     kCOyfvCaEn72524077 = kCOyfvCaEn13292767;     kCOyfvCaEn13292767 = kCOyfvCaEn75389365;     kCOyfvCaEn75389365 = kCOyfvCaEn70550846;     kCOyfvCaEn70550846 = kCOyfvCaEn37601245;     kCOyfvCaEn37601245 = kCOyfvCaEn41540476;     kCOyfvCaEn41540476 = kCOyfvCaEn57521798;     kCOyfvCaEn57521798 = kCOyfvCaEn8753172;     kCOyfvCaEn8753172 = kCOyfvCaEn3139518;     kCOyfvCaEn3139518 = kCOyfvCaEn29368397;     kCOyfvCaEn29368397 = kCOyfvCaEn4071754;     kCOyfvCaEn4071754 = kCOyfvCaEn41093894;     kCOyfvCaEn41093894 = kCOyfvCaEn42783193;     kCOyfvCaEn42783193 = kCOyfvCaEn62321039;     kCOyfvCaEn62321039 = kCOyfvCaEn85014624;     kCOyfvCaEn85014624 = kCOyfvCaEn93911124;     kCOyfvCaEn93911124 = kCOyfvCaEn42523336;     kCOyfvCaEn42523336 = kCOyfvCaEn34207292;     kCOyfvCaEn34207292 = kCOyfvCaEn57779988;     kCOyfvCaEn57779988 = kCOyfvCaEn8585412;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void lLykTNrFrQ39793496() {     double vlRDnOgqxD79509820 = -688960188;    double vlRDnOgqxD61313931 = -999657964;    double vlRDnOgqxD44373734 = 2959874;    double vlRDnOgqxD53448945 = -740148120;    double vlRDnOgqxD84552761 = -755942343;    double vlRDnOgqxD66919295 = -933638549;    double vlRDnOgqxD10650690 = -872632300;    double vlRDnOgqxD28883398 = -756236264;    double vlRDnOgqxD22303674 = -940939969;    double vlRDnOgqxD13140380 = -629114516;    double vlRDnOgqxD98813229 = -940536025;    double vlRDnOgqxD17152285 = -691276550;    double vlRDnOgqxD94556654 = -964373598;    double vlRDnOgqxD17701407 = -694167746;    double vlRDnOgqxD38195061 = -716168626;    double vlRDnOgqxD48448408 = -336487262;    double vlRDnOgqxD19403330 = -367847257;    double vlRDnOgqxD63629140 = 49464011;    double vlRDnOgqxD82000284 = -833183297;    double vlRDnOgqxD92982734 = -557808229;    double vlRDnOgqxD20534337 = -904524430;    double vlRDnOgqxD61101758 = -820786808;    double vlRDnOgqxD94102350 = -975762328;    double vlRDnOgqxD14578721 = -128229961;    double vlRDnOgqxD22493221 = -348154906;    double vlRDnOgqxD73765731 = 53726033;    double vlRDnOgqxD43525355 = -67410819;    double vlRDnOgqxD20963110 = -844272871;    double vlRDnOgqxD6443987 = 41319552;    double vlRDnOgqxD49892799 = -25409742;    double vlRDnOgqxD84009785 = -197113641;    double vlRDnOgqxD19464926 = -589550326;    double vlRDnOgqxD26088203 = -853481455;    double vlRDnOgqxD5806195 = -803297118;    double vlRDnOgqxD28428823 = -176359100;    double vlRDnOgqxD73073998 = -65516088;    double vlRDnOgqxD91225072 = -209139269;    double vlRDnOgqxD32789110 = -905441244;    double vlRDnOgqxD80129579 = -946688150;    double vlRDnOgqxD55364406 = -436658533;    double vlRDnOgqxD47035600 = -149122935;    double vlRDnOgqxD34992039 = -466407965;    double vlRDnOgqxD48099513 = -236568317;    double vlRDnOgqxD54956538 = -418868097;    double vlRDnOgqxD88022472 = -949235595;    double vlRDnOgqxD19340429 = -144236857;    double vlRDnOgqxD88781554 = -359895747;    double vlRDnOgqxD80450754 = -185665014;    double vlRDnOgqxD88743960 = -521063331;    double vlRDnOgqxD79410395 = -211837623;    double vlRDnOgqxD92647079 = 98675478;    double vlRDnOgqxD95078443 = -811385102;    double vlRDnOgqxD48796219 = -334241681;    double vlRDnOgqxD51316228 = -58106386;    double vlRDnOgqxD19259160 = 99940283;    double vlRDnOgqxD18408062 = -868173381;    double vlRDnOgqxD67211580 = 76104364;    double vlRDnOgqxD29795013 = -868810165;    double vlRDnOgqxD30955724 = -291993214;    double vlRDnOgqxD10787030 = -709668377;    double vlRDnOgqxD23393941 = -766227730;    double vlRDnOgqxD89687580 = 71640571;    double vlRDnOgqxD22439411 = -697555816;    double vlRDnOgqxD72410875 = -815530228;    double vlRDnOgqxD29130595 = -332000875;    double vlRDnOgqxD79348304 = -250985700;    double vlRDnOgqxD91064082 = -837795095;    double vlRDnOgqxD88750460 = -61076480;    double vlRDnOgqxD89272583 = -417808647;    double vlRDnOgqxD65121062 = -550652538;    double vlRDnOgqxD57223335 = -27347993;    double vlRDnOgqxD86614220 = -462406014;    double vlRDnOgqxD83499561 = -3847839;    double vlRDnOgqxD26635879 = -296524765;    double vlRDnOgqxD45947135 = -308685295;    double vlRDnOgqxD85542297 = -338116465;    double vlRDnOgqxD13002246 = -484218492;    double vlRDnOgqxD39145812 = -456894232;    double vlRDnOgqxD26556249 = -178994367;    double vlRDnOgqxD3152793 = -103918049;    double vlRDnOgqxD84984177 = -586378220;    double vlRDnOgqxD63074600 = -881745806;    double vlRDnOgqxD32219149 = -223209541;    double vlRDnOgqxD27033592 = -746842826;    double vlRDnOgqxD57245720 = -24085220;    double vlRDnOgqxD88931342 = -385728540;    double vlRDnOgqxD70668706 = -155308645;    double vlRDnOgqxD74771974 = -695375070;    double vlRDnOgqxD86547035 = -803237402;    double vlRDnOgqxD10020762 = -308185720;    double vlRDnOgqxD5862418 = -41620453;    double vlRDnOgqxD61430060 = -340329104;    double vlRDnOgqxD1833386 = -513448031;    double vlRDnOgqxD69342549 = -137019773;    double vlRDnOgqxD31970465 = -670430803;    double vlRDnOgqxD57348020 = -120763507;    double vlRDnOgqxD12552629 = -768852150;    double vlRDnOgqxD75688638 = -421038089;    double vlRDnOgqxD25825944 = 13132778;    double vlRDnOgqxD8674169 = -688960188;     vlRDnOgqxD79509820 = vlRDnOgqxD61313931;     vlRDnOgqxD61313931 = vlRDnOgqxD44373734;     vlRDnOgqxD44373734 = vlRDnOgqxD53448945;     vlRDnOgqxD53448945 = vlRDnOgqxD84552761;     vlRDnOgqxD84552761 = vlRDnOgqxD66919295;     vlRDnOgqxD66919295 = vlRDnOgqxD10650690;     vlRDnOgqxD10650690 = vlRDnOgqxD28883398;     vlRDnOgqxD28883398 = vlRDnOgqxD22303674;     vlRDnOgqxD22303674 = vlRDnOgqxD13140380;     vlRDnOgqxD13140380 = vlRDnOgqxD98813229;     vlRDnOgqxD98813229 = vlRDnOgqxD17152285;     vlRDnOgqxD17152285 = vlRDnOgqxD94556654;     vlRDnOgqxD94556654 = vlRDnOgqxD17701407;     vlRDnOgqxD17701407 = vlRDnOgqxD38195061;     vlRDnOgqxD38195061 = vlRDnOgqxD48448408;     vlRDnOgqxD48448408 = vlRDnOgqxD19403330;     vlRDnOgqxD19403330 = vlRDnOgqxD63629140;     vlRDnOgqxD63629140 = vlRDnOgqxD82000284;     vlRDnOgqxD82000284 = vlRDnOgqxD92982734;     vlRDnOgqxD92982734 = vlRDnOgqxD20534337;     vlRDnOgqxD20534337 = vlRDnOgqxD61101758;     vlRDnOgqxD61101758 = vlRDnOgqxD94102350;     vlRDnOgqxD94102350 = vlRDnOgqxD14578721;     vlRDnOgqxD14578721 = vlRDnOgqxD22493221;     vlRDnOgqxD22493221 = vlRDnOgqxD73765731;     vlRDnOgqxD73765731 = vlRDnOgqxD43525355;     vlRDnOgqxD43525355 = vlRDnOgqxD20963110;     vlRDnOgqxD20963110 = vlRDnOgqxD6443987;     vlRDnOgqxD6443987 = vlRDnOgqxD49892799;     vlRDnOgqxD49892799 = vlRDnOgqxD84009785;     vlRDnOgqxD84009785 = vlRDnOgqxD19464926;     vlRDnOgqxD19464926 = vlRDnOgqxD26088203;     vlRDnOgqxD26088203 = vlRDnOgqxD5806195;     vlRDnOgqxD5806195 = vlRDnOgqxD28428823;     vlRDnOgqxD28428823 = vlRDnOgqxD73073998;     vlRDnOgqxD73073998 = vlRDnOgqxD91225072;     vlRDnOgqxD91225072 = vlRDnOgqxD32789110;     vlRDnOgqxD32789110 = vlRDnOgqxD80129579;     vlRDnOgqxD80129579 = vlRDnOgqxD55364406;     vlRDnOgqxD55364406 = vlRDnOgqxD47035600;     vlRDnOgqxD47035600 = vlRDnOgqxD34992039;     vlRDnOgqxD34992039 = vlRDnOgqxD48099513;     vlRDnOgqxD48099513 = vlRDnOgqxD54956538;     vlRDnOgqxD54956538 = vlRDnOgqxD88022472;     vlRDnOgqxD88022472 = vlRDnOgqxD19340429;     vlRDnOgqxD19340429 = vlRDnOgqxD88781554;     vlRDnOgqxD88781554 = vlRDnOgqxD80450754;     vlRDnOgqxD80450754 = vlRDnOgqxD88743960;     vlRDnOgqxD88743960 = vlRDnOgqxD79410395;     vlRDnOgqxD79410395 = vlRDnOgqxD92647079;     vlRDnOgqxD92647079 = vlRDnOgqxD95078443;     vlRDnOgqxD95078443 = vlRDnOgqxD48796219;     vlRDnOgqxD48796219 = vlRDnOgqxD51316228;     vlRDnOgqxD51316228 = vlRDnOgqxD19259160;     vlRDnOgqxD19259160 = vlRDnOgqxD18408062;     vlRDnOgqxD18408062 = vlRDnOgqxD67211580;     vlRDnOgqxD67211580 = vlRDnOgqxD29795013;     vlRDnOgqxD29795013 = vlRDnOgqxD30955724;     vlRDnOgqxD30955724 = vlRDnOgqxD10787030;     vlRDnOgqxD10787030 = vlRDnOgqxD23393941;     vlRDnOgqxD23393941 = vlRDnOgqxD89687580;     vlRDnOgqxD89687580 = vlRDnOgqxD22439411;     vlRDnOgqxD22439411 = vlRDnOgqxD72410875;     vlRDnOgqxD72410875 = vlRDnOgqxD29130595;     vlRDnOgqxD29130595 = vlRDnOgqxD79348304;     vlRDnOgqxD79348304 = vlRDnOgqxD91064082;     vlRDnOgqxD91064082 = vlRDnOgqxD88750460;     vlRDnOgqxD88750460 = vlRDnOgqxD89272583;     vlRDnOgqxD89272583 = vlRDnOgqxD65121062;     vlRDnOgqxD65121062 = vlRDnOgqxD57223335;     vlRDnOgqxD57223335 = vlRDnOgqxD86614220;     vlRDnOgqxD86614220 = vlRDnOgqxD83499561;     vlRDnOgqxD83499561 = vlRDnOgqxD26635879;     vlRDnOgqxD26635879 = vlRDnOgqxD45947135;     vlRDnOgqxD45947135 = vlRDnOgqxD85542297;     vlRDnOgqxD85542297 = vlRDnOgqxD13002246;     vlRDnOgqxD13002246 = vlRDnOgqxD39145812;     vlRDnOgqxD39145812 = vlRDnOgqxD26556249;     vlRDnOgqxD26556249 = vlRDnOgqxD3152793;     vlRDnOgqxD3152793 = vlRDnOgqxD84984177;     vlRDnOgqxD84984177 = vlRDnOgqxD63074600;     vlRDnOgqxD63074600 = vlRDnOgqxD32219149;     vlRDnOgqxD32219149 = vlRDnOgqxD27033592;     vlRDnOgqxD27033592 = vlRDnOgqxD57245720;     vlRDnOgqxD57245720 = vlRDnOgqxD88931342;     vlRDnOgqxD88931342 = vlRDnOgqxD70668706;     vlRDnOgqxD70668706 = vlRDnOgqxD74771974;     vlRDnOgqxD74771974 = vlRDnOgqxD86547035;     vlRDnOgqxD86547035 = vlRDnOgqxD10020762;     vlRDnOgqxD10020762 = vlRDnOgqxD5862418;     vlRDnOgqxD5862418 = vlRDnOgqxD61430060;     vlRDnOgqxD61430060 = vlRDnOgqxD1833386;     vlRDnOgqxD1833386 = vlRDnOgqxD69342549;     vlRDnOgqxD69342549 = vlRDnOgqxD31970465;     vlRDnOgqxD31970465 = vlRDnOgqxD57348020;     vlRDnOgqxD57348020 = vlRDnOgqxD12552629;     vlRDnOgqxD12552629 = vlRDnOgqxD75688638;     vlRDnOgqxD75688638 = vlRDnOgqxD25825944;     vlRDnOgqxD25825944 = vlRDnOgqxD8674169;     vlRDnOgqxD8674169 = vlRDnOgqxD79509820;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void xhMQBExePZ15475419() {     double rKwIcBMvpd21092367 = -294614835;    double rKwIcBMvpd79386972 = -547214226;    double rKwIcBMvpd96489182 = -956411509;    double rKwIcBMvpd67667220 = -931506991;    double rKwIcBMvpd893417 = -913835738;    double rKwIcBMvpd59753937 = -661049868;    double rKwIcBMvpd13249726 = -51786544;    double rKwIcBMvpd71560799 = -983167000;    double rKwIcBMvpd5723611 = -383657972;    double rKwIcBMvpd72633237 = -985970120;    double rKwIcBMvpd76784649 = -660509269;    double rKwIcBMvpd35251799 = -164325160;    double rKwIcBMvpd87147504 = -834618717;    double rKwIcBMvpd141727 = -857616672;    double rKwIcBMvpd46959895 = -847342955;    double rKwIcBMvpd98930555 = -712502761;    double rKwIcBMvpd13222510 = -591752353;    double rKwIcBMvpd37441952 = -392415079;    double rKwIcBMvpd23952187 = -937533548;    double rKwIcBMvpd95296355 = -729247764;    double rKwIcBMvpd42504968 = -706820201;    double rKwIcBMvpd72748041 = -305360935;    double rKwIcBMvpd63340125 = 99045843;    double rKwIcBMvpd48713932 = -980439031;    double rKwIcBMvpd45768133 = -318642285;    double rKwIcBMvpd92611501 = -705300168;    double rKwIcBMvpd32184125 = -573557450;    double rKwIcBMvpd39395135 = -471007011;    double rKwIcBMvpd6566010 = -109087640;    double rKwIcBMvpd47951977 = -201956406;    double rKwIcBMvpd61422888 = -275321832;    double rKwIcBMvpd70174708 = -780146794;    double rKwIcBMvpd62564739 = -691746586;    double rKwIcBMvpd30102348 = -742850964;    double rKwIcBMvpd73353891 = -506878532;    double rKwIcBMvpd50532565 = -414341755;    double rKwIcBMvpd9957456 = 72182199;    double rKwIcBMvpd48177046 = -664340155;    double rKwIcBMvpd48816798 = -978806507;    double rKwIcBMvpd35264983 = -765928615;    double rKwIcBMvpd98300764 = -995651845;    double rKwIcBMvpd70809962 = -137303452;    double rKwIcBMvpd55266510 = -411423432;    double rKwIcBMvpd23263719 = -385579002;    double rKwIcBMvpd15973344 = 35614491;    double rKwIcBMvpd36812984 = -356331935;    double rKwIcBMvpd98207499 = -481377023;    double rKwIcBMvpd30750426 = -853325784;    double rKwIcBMvpd2653967 = -706773338;    double rKwIcBMvpd96806214 = -102850360;    double rKwIcBMvpd95859111 = -39339744;    double rKwIcBMvpd74826377 = -443618020;    double rKwIcBMvpd90217476 = 9977186;    double rKwIcBMvpd53026684 = -38165179;    double rKwIcBMvpd72970450 = -90182368;    double rKwIcBMvpd48344325 = -989253901;    double rKwIcBMvpd16046847 = -546260069;    double rKwIcBMvpd47775250 = -975972478;    double rKwIcBMvpd21899088 = -512864707;    double rKwIcBMvpd8281915 = -108535571;    double rKwIcBMvpd27569812 = 12507582;    double rKwIcBMvpd73854591 = -580779534;    double rKwIcBMvpd64994789 = -774079361;    double rKwIcBMvpd57771634 = -81701566;    double rKwIcBMvpd11210350 = -610648289;    double rKwIcBMvpd6609941 = -880362475;    double rKwIcBMvpd72687060 = -472578574;    double rKwIcBMvpd57045157 = 8232247;    double rKwIcBMvpd26787836 = -250738141;    double rKwIcBMvpd96427329 = -333001200;    double rKwIcBMvpd88973099 = -684684961;    double rKwIcBMvpd65045463 = -927412198;    double rKwIcBMvpd88625154 = -413608572;    double rKwIcBMvpd88687203 = -71604934;    double rKwIcBMvpd96995590 = -733595919;    double rKwIcBMvpd71695006 = -469516749;    double rKwIcBMvpd17481532 = -893937503;    double rKwIcBMvpd40076407 = -515375156;    double rKwIcBMvpd32740588 = -916053522;    double rKwIcBMvpd8955149 = -962310350;    double rKwIcBMvpd94404001 = -123923146;    double rKwIcBMvpd1433700 = -720231667;    double rKwIcBMvpd36741169 = -764233674;    double rKwIcBMvpd9759796 = 93762719;    double rKwIcBMvpd52092865 = -62616663;    double rKwIcBMvpd86596510 = -831703812;    double rKwIcBMvpd79957231 = -690123980;    double rKwIcBMvpd9538055 = -553581408;    double rKwIcBMvpd57131898 = -552668597;    double rKwIcBMvpd25009566 = -517624632;    double rKwIcBMvpd34485719 = -868081687;    double rKwIcBMvpd62182205 = 48154677;    double rKwIcBMvpd26277959 = -51475449;    double rKwIcBMvpd40534883 = -770270937;    double rKwIcBMvpd7695171 = -678436198;    double rKwIcBMvpd24446173 = -314872312;    double rKwIcBMvpd5815173 = -363224092;    double rKwIcBMvpd97494876 = -229721867;    double rKwIcBMvpd12053369 = -774930713;    double rKwIcBMvpd9363403 = -294614835;     rKwIcBMvpd21092367 = rKwIcBMvpd79386972;     rKwIcBMvpd79386972 = rKwIcBMvpd96489182;     rKwIcBMvpd96489182 = rKwIcBMvpd67667220;     rKwIcBMvpd67667220 = rKwIcBMvpd893417;     rKwIcBMvpd893417 = rKwIcBMvpd59753937;     rKwIcBMvpd59753937 = rKwIcBMvpd13249726;     rKwIcBMvpd13249726 = rKwIcBMvpd71560799;     rKwIcBMvpd71560799 = rKwIcBMvpd5723611;     rKwIcBMvpd5723611 = rKwIcBMvpd72633237;     rKwIcBMvpd72633237 = rKwIcBMvpd76784649;     rKwIcBMvpd76784649 = rKwIcBMvpd35251799;     rKwIcBMvpd35251799 = rKwIcBMvpd87147504;     rKwIcBMvpd87147504 = rKwIcBMvpd141727;     rKwIcBMvpd141727 = rKwIcBMvpd46959895;     rKwIcBMvpd46959895 = rKwIcBMvpd98930555;     rKwIcBMvpd98930555 = rKwIcBMvpd13222510;     rKwIcBMvpd13222510 = rKwIcBMvpd37441952;     rKwIcBMvpd37441952 = rKwIcBMvpd23952187;     rKwIcBMvpd23952187 = rKwIcBMvpd95296355;     rKwIcBMvpd95296355 = rKwIcBMvpd42504968;     rKwIcBMvpd42504968 = rKwIcBMvpd72748041;     rKwIcBMvpd72748041 = rKwIcBMvpd63340125;     rKwIcBMvpd63340125 = rKwIcBMvpd48713932;     rKwIcBMvpd48713932 = rKwIcBMvpd45768133;     rKwIcBMvpd45768133 = rKwIcBMvpd92611501;     rKwIcBMvpd92611501 = rKwIcBMvpd32184125;     rKwIcBMvpd32184125 = rKwIcBMvpd39395135;     rKwIcBMvpd39395135 = rKwIcBMvpd6566010;     rKwIcBMvpd6566010 = rKwIcBMvpd47951977;     rKwIcBMvpd47951977 = rKwIcBMvpd61422888;     rKwIcBMvpd61422888 = rKwIcBMvpd70174708;     rKwIcBMvpd70174708 = rKwIcBMvpd62564739;     rKwIcBMvpd62564739 = rKwIcBMvpd30102348;     rKwIcBMvpd30102348 = rKwIcBMvpd73353891;     rKwIcBMvpd73353891 = rKwIcBMvpd50532565;     rKwIcBMvpd50532565 = rKwIcBMvpd9957456;     rKwIcBMvpd9957456 = rKwIcBMvpd48177046;     rKwIcBMvpd48177046 = rKwIcBMvpd48816798;     rKwIcBMvpd48816798 = rKwIcBMvpd35264983;     rKwIcBMvpd35264983 = rKwIcBMvpd98300764;     rKwIcBMvpd98300764 = rKwIcBMvpd70809962;     rKwIcBMvpd70809962 = rKwIcBMvpd55266510;     rKwIcBMvpd55266510 = rKwIcBMvpd23263719;     rKwIcBMvpd23263719 = rKwIcBMvpd15973344;     rKwIcBMvpd15973344 = rKwIcBMvpd36812984;     rKwIcBMvpd36812984 = rKwIcBMvpd98207499;     rKwIcBMvpd98207499 = rKwIcBMvpd30750426;     rKwIcBMvpd30750426 = rKwIcBMvpd2653967;     rKwIcBMvpd2653967 = rKwIcBMvpd96806214;     rKwIcBMvpd96806214 = rKwIcBMvpd95859111;     rKwIcBMvpd95859111 = rKwIcBMvpd74826377;     rKwIcBMvpd74826377 = rKwIcBMvpd90217476;     rKwIcBMvpd90217476 = rKwIcBMvpd53026684;     rKwIcBMvpd53026684 = rKwIcBMvpd72970450;     rKwIcBMvpd72970450 = rKwIcBMvpd48344325;     rKwIcBMvpd48344325 = rKwIcBMvpd16046847;     rKwIcBMvpd16046847 = rKwIcBMvpd47775250;     rKwIcBMvpd47775250 = rKwIcBMvpd21899088;     rKwIcBMvpd21899088 = rKwIcBMvpd8281915;     rKwIcBMvpd8281915 = rKwIcBMvpd27569812;     rKwIcBMvpd27569812 = rKwIcBMvpd73854591;     rKwIcBMvpd73854591 = rKwIcBMvpd64994789;     rKwIcBMvpd64994789 = rKwIcBMvpd57771634;     rKwIcBMvpd57771634 = rKwIcBMvpd11210350;     rKwIcBMvpd11210350 = rKwIcBMvpd6609941;     rKwIcBMvpd6609941 = rKwIcBMvpd72687060;     rKwIcBMvpd72687060 = rKwIcBMvpd57045157;     rKwIcBMvpd57045157 = rKwIcBMvpd26787836;     rKwIcBMvpd26787836 = rKwIcBMvpd96427329;     rKwIcBMvpd96427329 = rKwIcBMvpd88973099;     rKwIcBMvpd88973099 = rKwIcBMvpd65045463;     rKwIcBMvpd65045463 = rKwIcBMvpd88625154;     rKwIcBMvpd88625154 = rKwIcBMvpd88687203;     rKwIcBMvpd88687203 = rKwIcBMvpd96995590;     rKwIcBMvpd96995590 = rKwIcBMvpd71695006;     rKwIcBMvpd71695006 = rKwIcBMvpd17481532;     rKwIcBMvpd17481532 = rKwIcBMvpd40076407;     rKwIcBMvpd40076407 = rKwIcBMvpd32740588;     rKwIcBMvpd32740588 = rKwIcBMvpd8955149;     rKwIcBMvpd8955149 = rKwIcBMvpd94404001;     rKwIcBMvpd94404001 = rKwIcBMvpd1433700;     rKwIcBMvpd1433700 = rKwIcBMvpd36741169;     rKwIcBMvpd36741169 = rKwIcBMvpd9759796;     rKwIcBMvpd9759796 = rKwIcBMvpd52092865;     rKwIcBMvpd52092865 = rKwIcBMvpd86596510;     rKwIcBMvpd86596510 = rKwIcBMvpd79957231;     rKwIcBMvpd79957231 = rKwIcBMvpd9538055;     rKwIcBMvpd9538055 = rKwIcBMvpd57131898;     rKwIcBMvpd57131898 = rKwIcBMvpd25009566;     rKwIcBMvpd25009566 = rKwIcBMvpd34485719;     rKwIcBMvpd34485719 = rKwIcBMvpd62182205;     rKwIcBMvpd62182205 = rKwIcBMvpd26277959;     rKwIcBMvpd26277959 = rKwIcBMvpd40534883;     rKwIcBMvpd40534883 = rKwIcBMvpd7695171;     rKwIcBMvpd7695171 = rKwIcBMvpd24446173;     rKwIcBMvpd24446173 = rKwIcBMvpd5815173;     rKwIcBMvpd5815173 = rKwIcBMvpd97494876;     rKwIcBMvpd97494876 = rKwIcBMvpd12053369;     rKwIcBMvpd12053369 = rKwIcBMvpd9363403;     rKwIcBMvpd9363403 = rKwIcBMvpd21092367;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void qDEKZvhlzi12753248() {     double swGibFXiZm78944923 = -522771557;    double swGibFXiZm38434234 = -333713762;    double swGibFXiZm61331725 = -904603814;    double swGibFXiZm69817403 = -938524764;    double swGibFXiZm46512838 = -42136264;    double swGibFXiZm76054493 = 15426671;    double swGibFXiZm47515535 = -13963117;    double swGibFXiZm40112168 = -293820468;    double swGibFXiZm21664183 = 57460652;    double swGibFXiZm82660021 = -756591580;    double swGibFXiZm32187638 = -499669327;    double swGibFXiZm77431219 = -543712862;    double swGibFXiZm60537417 = -883690068;    double swGibFXiZm42053122 = 83464213;    double swGibFXiZm96717578 = 84467169;    double swGibFXiZm52163221 = -397186260;    double swGibFXiZm63029037 = -476392156;    double swGibFXiZm20178027 = -520514216;    double swGibFXiZm45355877 = -771216828;    double swGibFXiZm95576093 = -796418832;    double swGibFXiZm76805514 = -645115824;    double swGibFXiZm61688518 = -386771659;    double swGibFXiZm280432 = -355709091;    double swGibFXiZm25356556 = 25664030;    double swGibFXiZm60883641 = -637492754;    double swGibFXiZm75038591 = -929565271;    double swGibFXiZm69472538 = -936628371;    double swGibFXiZm50631485 = -920266651;    double swGibFXiZm47448339 = -381369247;    double swGibFXiZm86552697 = -481328069;    double swGibFXiZm90884245 = -521525237;    double swGibFXiZm80815060 = -813367802;    double swGibFXiZm70368997 = -66741843;    double swGibFXiZm18956625 = -154989896;    double swGibFXiZm33033671 = -262421280;    double swGibFXiZm958089 = -864536691;    double swGibFXiZm40867617 = -525808414;    double swGibFXiZm83100871 = -519358530;    double swGibFXiZm92201893 = -318047399;    double swGibFXiZm47849337 = -757983504;    double swGibFXiZm72654075 = -80084527;    double swGibFXiZm62985819 = -395965352;    double swGibFXiZm89916720 = -393004548;    double swGibFXiZm3607279 = -330310617;    double swGibFXiZm99955016 = -226780746;    double swGibFXiZm50446626 = -765439992;    double swGibFXiZm2152269 = 37506986;    double swGibFXiZm17691832 = -167626012;    double swGibFXiZm1348149 = -756463055;    double swGibFXiZm98374126 = -48872548;    double swGibFXiZm72239682 = -690137571;    double swGibFXiZm17615850 = -705943900;    double swGibFXiZm61704680 = -625925590;    double swGibFXiZm19054806 = 26565364;    double swGibFXiZm35947734 = -820477351;    double swGibFXiZm17256405 = -35999898;    double swGibFXiZm38153803 = -978004671;    double swGibFXiZm35975170 = -830267845;    double swGibFXiZm8933762 = -201032010;    double swGibFXiZm71474247 = -112570993;    double swGibFXiZm6581956 = -47944959;    double swGibFXiZm96884050 = -93696467;    double swGibFXiZm92663829 = -912451222;    double swGibFXiZm35111486 = -461211279;    double swGibFXiZm91775775 = -135066344;    double swGibFXiZm51372578 = -686301525;    double swGibFXiZm7062223 = -376971020;    double swGibFXiZm41580792 = -628700172;    double swGibFXiZm9019451 = -654114507;    double swGibFXiZm95759490 = -50996140;    double swGibFXiZm11295605 = -871377847;    double swGibFXiZm79928166 = -957033627;    double swGibFXiZm27976133 = -102466817;    double swGibFXiZm97506540 = 86766675;    double swGibFXiZm22922019 = -616334306;    double swGibFXiZm13819696 = -149150473;    double swGibFXiZm71771798 = -993767112;    double swGibFXiZm96673153 = 74601525;    double swGibFXiZm25401539 = -747555224;    double swGibFXiZm10437015 = -872052763;    double swGibFXiZm72886322 = -867072257;    double swGibFXiZm51780707 = -669002360;    double swGibFXiZm49283337 = -63803596;    double swGibFXiZm49074213 = -232496699;    double swGibFXiZm14313016 = -791190499;    double swGibFXiZm73268396 = -815581337;    double swGibFXiZm19110380 = -87442212;    double swGibFXiZm51314191 = 6692793;    double swGibFXiZm83008891 = -334512545;    double swGibFXiZm15777267 = -126421383;    double swGibFXiZm62804286 = -886532021;    double swGibFXiZm4892448 = -695540570;    double swGibFXiZm74167109 = -218326520;    double swGibFXiZm20727647 = -105476406;    double swGibFXiZm41267381 = -610038546;    double swGibFXiZm75770025 = -986388060;    double swGibFXiZm70321989 = -483514131;    double swGibFXiZm54805235 = -931793269;    double swGibFXiZm11831503 = -95244274;    double swGibFXiZm48582439 = -522771557;     swGibFXiZm78944923 = swGibFXiZm38434234;     swGibFXiZm38434234 = swGibFXiZm61331725;     swGibFXiZm61331725 = swGibFXiZm69817403;     swGibFXiZm69817403 = swGibFXiZm46512838;     swGibFXiZm46512838 = swGibFXiZm76054493;     swGibFXiZm76054493 = swGibFXiZm47515535;     swGibFXiZm47515535 = swGibFXiZm40112168;     swGibFXiZm40112168 = swGibFXiZm21664183;     swGibFXiZm21664183 = swGibFXiZm82660021;     swGibFXiZm82660021 = swGibFXiZm32187638;     swGibFXiZm32187638 = swGibFXiZm77431219;     swGibFXiZm77431219 = swGibFXiZm60537417;     swGibFXiZm60537417 = swGibFXiZm42053122;     swGibFXiZm42053122 = swGibFXiZm96717578;     swGibFXiZm96717578 = swGibFXiZm52163221;     swGibFXiZm52163221 = swGibFXiZm63029037;     swGibFXiZm63029037 = swGibFXiZm20178027;     swGibFXiZm20178027 = swGibFXiZm45355877;     swGibFXiZm45355877 = swGibFXiZm95576093;     swGibFXiZm95576093 = swGibFXiZm76805514;     swGibFXiZm76805514 = swGibFXiZm61688518;     swGibFXiZm61688518 = swGibFXiZm280432;     swGibFXiZm280432 = swGibFXiZm25356556;     swGibFXiZm25356556 = swGibFXiZm60883641;     swGibFXiZm60883641 = swGibFXiZm75038591;     swGibFXiZm75038591 = swGibFXiZm69472538;     swGibFXiZm69472538 = swGibFXiZm50631485;     swGibFXiZm50631485 = swGibFXiZm47448339;     swGibFXiZm47448339 = swGibFXiZm86552697;     swGibFXiZm86552697 = swGibFXiZm90884245;     swGibFXiZm90884245 = swGibFXiZm80815060;     swGibFXiZm80815060 = swGibFXiZm70368997;     swGibFXiZm70368997 = swGibFXiZm18956625;     swGibFXiZm18956625 = swGibFXiZm33033671;     swGibFXiZm33033671 = swGibFXiZm958089;     swGibFXiZm958089 = swGibFXiZm40867617;     swGibFXiZm40867617 = swGibFXiZm83100871;     swGibFXiZm83100871 = swGibFXiZm92201893;     swGibFXiZm92201893 = swGibFXiZm47849337;     swGibFXiZm47849337 = swGibFXiZm72654075;     swGibFXiZm72654075 = swGibFXiZm62985819;     swGibFXiZm62985819 = swGibFXiZm89916720;     swGibFXiZm89916720 = swGibFXiZm3607279;     swGibFXiZm3607279 = swGibFXiZm99955016;     swGibFXiZm99955016 = swGibFXiZm50446626;     swGibFXiZm50446626 = swGibFXiZm2152269;     swGibFXiZm2152269 = swGibFXiZm17691832;     swGibFXiZm17691832 = swGibFXiZm1348149;     swGibFXiZm1348149 = swGibFXiZm98374126;     swGibFXiZm98374126 = swGibFXiZm72239682;     swGibFXiZm72239682 = swGibFXiZm17615850;     swGibFXiZm17615850 = swGibFXiZm61704680;     swGibFXiZm61704680 = swGibFXiZm19054806;     swGibFXiZm19054806 = swGibFXiZm35947734;     swGibFXiZm35947734 = swGibFXiZm17256405;     swGibFXiZm17256405 = swGibFXiZm38153803;     swGibFXiZm38153803 = swGibFXiZm35975170;     swGibFXiZm35975170 = swGibFXiZm8933762;     swGibFXiZm8933762 = swGibFXiZm71474247;     swGibFXiZm71474247 = swGibFXiZm6581956;     swGibFXiZm6581956 = swGibFXiZm96884050;     swGibFXiZm96884050 = swGibFXiZm92663829;     swGibFXiZm92663829 = swGibFXiZm35111486;     swGibFXiZm35111486 = swGibFXiZm91775775;     swGibFXiZm91775775 = swGibFXiZm51372578;     swGibFXiZm51372578 = swGibFXiZm7062223;     swGibFXiZm7062223 = swGibFXiZm41580792;     swGibFXiZm41580792 = swGibFXiZm9019451;     swGibFXiZm9019451 = swGibFXiZm95759490;     swGibFXiZm95759490 = swGibFXiZm11295605;     swGibFXiZm11295605 = swGibFXiZm79928166;     swGibFXiZm79928166 = swGibFXiZm27976133;     swGibFXiZm27976133 = swGibFXiZm97506540;     swGibFXiZm97506540 = swGibFXiZm22922019;     swGibFXiZm22922019 = swGibFXiZm13819696;     swGibFXiZm13819696 = swGibFXiZm71771798;     swGibFXiZm71771798 = swGibFXiZm96673153;     swGibFXiZm96673153 = swGibFXiZm25401539;     swGibFXiZm25401539 = swGibFXiZm10437015;     swGibFXiZm10437015 = swGibFXiZm72886322;     swGibFXiZm72886322 = swGibFXiZm51780707;     swGibFXiZm51780707 = swGibFXiZm49283337;     swGibFXiZm49283337 = swGibFXiZm49074213;     swGibFXiZm49074213 = swGibFXiZm14313016;     swGibFXiZm14313016 = swGibFXiZm73268396;     swGibFXiZm73268396 = swGibFXiZm19110380;     swGibFXiZm19110380 = swGibFXiZm51314191;     swGibFXiZm51314191 = swGibFXiZm83008891;     swGibFXiZm83008891 = swGibFXiZm15777267;     swGibFXiZm15777267 = swGibFXiZm62804286;     swGibFXiZm62804286 = swGibFXiZm4892448;     swGibFXiZm4892448 = swGibFXiZm74167109;     swGibFXiZm74167109 = swGibFXiZm20727647;     swGibFXiZm20727647 = swGibFXiZm41267381;     swGibFXiZm41267381 = swGibFXiZm75770025;     swGibFXiZm75770025 = swGibFXiZm70321989;     swGibFXiZm70321989 = swGibFXiZm54805235;     swGibFXiZm54805235 = swGibFXiZm11831503;     swGibFXiZm11831503 = swGibFXiZm48582439;     swGibFXiZm48582439 = swGibFXiZm78944923;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void FRnWmkITDX40677702() {     double ocEdKmozNe49869332 = -482801215;    double ocEdKmozNe26406075 = -52221850;    double ocEdKmozNe34791467 = -278809350;    double ocEdKmozNe29184252 = -760286076;    double ocEdKmozNe50243274 = -884978633;    double ocEdKmozNe13694806 = -809836308;    double ocEdKmozNe283013 = 1121881;    double ocEdKmozNe95161239 = -978111431;    double ocEdKmozNe41959229 = -105556092;    double ocEdKmozNe15825932 = -449158705;    double ocEdKmozNe88230502 = -144212713;    double ocEdKmozNe64275839 = -536476043;    double ocEdKmozNe5153794 = -866056603;    double ocEdKmozNe94490628 = -624109554;    double ocEdKmozNe67934502 = -959670009;    double ocEdKmozNe44681276 = -436013824;    double ocEdKmozNe18848150 = -610726691;    double ocEdKmozNe96697877 = -270298731;    double ocEdKmozNe26028268 = -786361405;    double ocEdKmozNe11176768 = 62483488;    double ocEdKmozNe23309816 = -249198828;    double ocEdKmozNe90235302 = -50052364;    double ocEdKmozNe4452795 = -272015618;    double ocEdKmozNe69292338 = -15064655;    double ocEdKmozNe48476854 = -258769298;    double ocEdKmozNe79860857 = -398512956;    double ocEdKmozNe20092105 = -248396940;    double ocEdKmozNe96684810 = -650844011;    double ocEdKmozNe28106321 = -883488537;    double ocEdKmozNe21529649 = -874911037;    double ocEdKmozNe94638030 = -138392976;    double ocEdKmozNe71737239 = 32511131;    double ocEdKmozNe9352596 = -159989581;    double ocEdKmozNe78170640 = -407695790;    double ocEdKmozNe82292540 = 94692143;    double ocEdKmozNe61251587 = -113901557;    double ocEdKmozNe27749882 = -155547116;    double ocEdKmozNe15613999 = -489407013;    double ocEdKmozNe17669421 = -7118535;    double ocEdKmozNe4519509 = -79076910;    double ocEdKmozNe51701623 = -630538457;    double ocEdKmozNe56018411 = -491263852;    double ocEdKmozNe8400117 = -40235866;    double ocEdKmozNe24638056 = -882010994;    double ocEdKmozNe15969882 = -506543668;    double ocEdKmozNe1941316 = 68757414;    double ocEdKmozNe13144804 = -449185113;    double ocEdKmozNe77760874 = -991917842;    double ocEdKmozNe28475091 = -520172954;    double ocEdKmozNe27387882 = -343901294;    double ocEdKmozNe20521760 = -860135679;    double ocEdKmozNe70039537 = -751102845;    double ocEdKmozNe23498629 = -245962690;    double ocEdKmozNe40788228 = -924531784;    double ocEdKmozNe17367886 = -656558365;    double ocEdKmozNe59634029 = -332748851;    double ocEdKmozNe21953280 = -780206233;    double ocEdKmozNe65499129 = -163744695;    double ocEdKmozNe80707398 = -401516779;    double ocEdKmozNe70382417 = -386465678;    double ocEdKmozNe93602701 = -461439369;    double ocEdKmozNe3598202 = -348034108;    double ocEdKmozNe67054918 = 5377105;    double ocEdKmozNe20429580 = -230645056;    double ocEdKmozNe21187902 = -210765729;    double ocEdKmozNe16493263 = -76723845;    double ocEdKmozNe54923244 = -276486462;    double ocEdKmozNe26983153 = -358360813;    double ocEdKmozNe12198088 = -618801698;    double ocEdKmozNe6682916 = -745768453;    double ocEdKmozNe16931394 = -180466708;    double ocEdKmozNe3234152 = -21319679;    double ocEdKmozNe79028457 = -163180196;    double ocEdKmozNe21508759 = -607284495;    double ocEdKmozNe59475145 = -306978056;    double ocEdKmozNe67291404 = -757934977;    double ocEdKmozNe81835185 = 90183501;    double ocEdKmozNe79814738 = -390004624;    double ocEdKmozNe53322456 = -508520988;    double ocEdKmozNe46535539 = -227526712;    double ocEdKmozNe66716054 = -949327843;    double ocEdKmozNe42331230 = -256479098;    double ocEdKmozNe68209719 = -30671057;    double ocEdKmozNe718440 = -439587244;    double ocEdKmozNe1007890 = 85224641;    double ocEdKmozNe24598493 = -387290132;    double ocEdKmozNe48238611 = -721526180;    double ocEdKmozNe68564367 = -235457797;    double ocEdKmozNe60802755 = -751137426;    double ocEdKmozNe22658511 = -572559006;    double ocEdKmozNe39298307 = -333695325;    double ocEdKmozNe62250753 = -991802422;    double ocEdKmozNe34906601 = 12109766;    double ocEdKmozNe47287003 = -620652858;    double ocEdKmozNe10916808 = -617637542;    double ocEdKmozNe48103421 = -182504349;    double ocEdKmozNe88963493 = -396640957;    double ocEdKmozNe87970537 = -809590810;    double ocEdKmozNe3450155 = -571245265;    double ocEdKmozNe99476618 = -482801215;     ocEdKmozNe49869332 = ocEdKmozNe26406075;     ocEdKmozNe26406075 = ocEdKmozNe34791467;     ocEdKmozNe34791467 = ocEdKmozNe29184252;     ocEdKmozNe29184252 = ocEdKmozNe50243274;     ocEdKmozNe50243274 = ocEdKmozNe13694806;     ocEdKmozNe13694806 = ocEdKmozNe283013;     ocEdKmozNe283013 = ocEdKmozNe95161239;     ocEdKmozNe95161239 = ocEdKmozNe41959229;     ocEdKmozNe41959229 = ocEdKmozNe15825932;     ocEdKmozNe15825932 = ocEdKmozNe88230502;     ocEdKmozNe88230502 = ocEdKmozNe64275839;     ocEdKmozNe64275839 = ocEdKmozNe5153794;     ocEdKmozNe5153794 = ocEdKmozNe94490628;     ocEdKmozNe94490628 = ocEdKmozNe67934502;     ocEdKmozNe67934502 = ocEdKmozNe44681276;     ocEdKmozNe44681276 = ocEdKmozNe18848150;     ocEdKmozNe18848150 = ocEdKmozNe96697877;     ocEdKmozNe96697877 = ocEdKmozNe26028268;     ocEdKmozNe26028268 = ocEdKmozNe11176768;     ocEdKmozNe11176768 = ocEdKmozNe23309816;     ocEdKmozNe23309816 = ocEdKmozNe90235302;     ocEdKmozNe90235302 = ocEdKmozNe4452795;     ocEdKmozNe4452795 = ocEdKmozNe69292338;     ocEdKmozNe69292338 = ocEdKmozNe48476854;     ocEdKmozNe48476854 = ocEdKmozNe79860857;     ocEdKmozNe79860857 = ocEdKmozNe20092105;     ocEdKmozNe20092105 = ocEdKmozNe96684810;     ocEdKmozNe96684810 = ocEdKmozNe28106321;     ocEdKmozNe28106321 = ocEdKmozNe21529649;     ocEdKmozNe21529649 = ocEdKmozNe94638030;     ocEdKmozNe94638030 = ocEdKmozNe71737239;     ocEdKmozNe71737239 = ocEdKmozNe9352596;     ocEdKmozNe9352596 = ocEdKmozNe78170640;     ocEdKmozNe78170640 = ocEdKmozNe82292540;     ocEdKmozNe82292540 = ocEdKmozNe61251587;     ocEdKmozNe61251587 = ocEdKmozNe27749882;     ocEdKmozNe27749882 = ocEdKmozNe15613999;     ocEdKmozNe15613999 = ocEdKmozNe17669421;     ocEdKmozNe17669421 = ocEdKmozNe4519509;     ocEdKmozNe4519509 = ocEdKmozNe51701623;     ocEdKmozNe51701623 = ocEdKmozNe56018411;     ocEdKmozNe56018411 = ocEdKmozNe8400117;     ocEdKmozNe8400117 = ocEdKmozNe24638056;     ocEdKmozNe24638056 = ocEdKmozNe15969882;     ocEdKmozNe15969882 = ocEdKmozNe1941316;     ocEdKmozNe1941316 = ocEdKmozNe13144804;     ocEdKmozNe13144804 = ocEdKmozNe77760874;     ocEdKmozNe77760874 = ocEdKmozNe28475091;     ocEdKmozNe28475091 = ocEdKmozNe27387882;     ocEdKmozNe27387882 = ocEdKmozNe20521760;     ocEdKmozNe20521760 = ocEdKmozNe70039537;     ocEdKmozNe70039537 = ocEdKmozNe23498629;     ocEdKmozNe23498629 = ocEdKmozNe40788228;     ocEdKmozNe40788228 = ocEdKmozNe17367886;     ocEdKmozNe17367886 = ocEdKmozNe59634029;     ocEdKmozNe59634029 = ocEdKmozNe21953280;     ocEdKmozNe21953280 = ocEdKmozNe65499129;     ocEdKmozNe65499129 = ocEdKmozNe80707398;     ocEdKmozNe80707398 = ocEdKmozNe70382417;     ocEdKmozNe70382417 = ocEdKmozNe93602701;     ocEdKmozNe93602701 = ocEdKmozNe3598202;     ocEdKmozNe3598202 = ocEdKmozNe67054918;     ocEdKmozNe67054918 = ocEdKmozNe20429580;     ocEdKmozNe20429580 = ocEdKmozNe21187902;     ocEdKmozNe21187902 = ocEdKmozNe16493263;     ocEdKmozNe16493263 = ocEdKmozNe54923244;     ocEdKmozNe54923244 = ocEdKmozNe26983153;     ocEdKmozNe26983153 = ocEdKmozNe12198088;     ocEdKmozNe12198088 = ocEdKmozNe6682916;     ocEdKmozNe6682916 = ocEdKmozNe16931394;     ocEdKmozNe16931394 = ocEdKmozNe3234152;     ocEdKmozNe3234152 = ocEdKmozNe79028457;     ocEdKmozNe79028457 = ocEdKmozNe21508759;     ocEdKmozNe21508759 = ocEdKmozNe59475145;     ocEdKmozNe59475145 = ocEdKmozNe67291404;     ocEdKmozNe67291404 = ocEdKmozNe81835185;     ocEdKmozNe81835185 = ocEdKmozNe79814738;     ocEdKmozNe79814738 = ocEdKmozNe53322456;     ocEdKmozNe53322456 = ocEdKmozNe46535539;     ocEdKmozNe46535539 = ocEdKmozNe66716054;     ocEdKmozNe66716054 = ocEdKmozNe42331230;     ocEdKmozNe42331230 = ocEdKmozNe68209719;     ocEdKmozNe68209719 = ocEdKmozNe718440;     ocEdKmozNe718440 = ocEdKmozNe1007890;     ocEdKmozNe1007890 = ocEdKmozNe24598493;     ocEdKmozNe24598493 = ocEdKmozNe48238611;     ocEdKmozNe48238611 = ocEdKmozNe68564367;     ocEdKmozNe68564367 = ocEdKmozNe60802755;     ocEdKmozNe60802755 = ocEdKmozNe22658511;     ocEdKmozNe22658511 = ocEdKmozNe39298307;     ocEdKmozNe39298307 = ocEdKmozNe62250753;     ocEdKmozNe62250753 = ocEdKmozNe34906601;     ocEdKmozNe34906601 = ocEdKmozNe47287003;     ocEdKmozNe47287003 = ocEdKmozNe10916808;     ocEdKmozNe10916808 = ocEdKmozNe48103421;     ocEdKmozNe48103421 = ocEdKmozNe88963493;     ocEdKmozNe88963493 = ocEdKmozNe87970537;     ocEdKmozNe87970537 = ocEdKmozNe3450155;     ocEdKmozNe3450155 = ocEdKmozNe99476618;     ocEdKmozNe99476618 = ocEdKmozNe49869332;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void mdpimUspQx16359625() {     double gNVTrulPgq91451878 = -88455862;    double gNVTrulPgq44479116 = -699778112;    double gNVTrulPgq86906915 = -138180733;    double gNVTrulPgq43402527 = -951644948;    double gNVTrulPgq66583930 = 57127972;    double gNVTrulPgq6529448 = -537247627;    double gNVTrulPgq2882049 = -278032363;    double gNVTrulPgq37838641 = -105042168;    double gNVTrulPgq25379166 = -648274094;    double gNVTrulPgq75318789 = -806014310;    double gNVTrulPgq66201922 = -964185957;    double gNVTrulPgq82375352 = -9524654;    double gNVTrulPgq97744643 = -736301722;    double gNVTrulPgq76930948 = -787558480;    double gNVTrulPgq76699336 = 9155661;    double gNVTrulPgq95163423 = -812029323;    double gNVTrulPgq12667330 = -834631787;    double gNVTrulPgq70510689 = -712177821;    double gNVTrulPgq67980169 = -890711656;    double gNVTrulPgq13490389 = -108956046;    double gNVTrulPgq45280448 = -51494599;    double gNVTrulPgq1881585 = -634626491;    double gNVTrulPgq73690569 = -297207447;    double gNVTrulPgq3427549 = -867273725;    double gNVTrulPgq71751766 = -229256676;    double gNVTrulPgq98706627 = -57539158;    double gNVTrulPgq8750875 = -754543570;    double gNVTrulPgq15116836 = -277578151;    double gNVTrulPgq28228344 = 66104271;    double gNVTrulPgq19588827 = 48542299;    double gNVTrulPgq72051132 = -216601167;    double gNVTrulPgq22447023 = -158085338;    double gNVTrulPgq45829131 = 1745287;    double gNVTrulPgq2466794 = -347249636;    double gNVTrulPgq27217608 = -235827288;    double gNVTrulPgq38710154 = -462727224;    double gNVTrulPgq46482265 = -974225648;    double gNVTrulPgq31001935 = -248305924;    double gNVTrulPgq86356638 = -39236893;    double gNVTrulPgq84420085 = -408346993;    double gNVTrulPgq2966787 = -377067367;    double gNVTrulPgq91836334 = -162159338;    double gNVTrulPgq15567114 = -215090981;    double gNVTrulPgq92945236 = -848721898;    double gNVTrulPgq43920753 = -621693582;    double gNVTrulPgq19413871 = -143337664;    double gNVTrulPgq22570749 = -570666389;    double gNVTrulPgq28060546 = -559578612;    double gNVTrulPgq42385097 = -705882961;    double gNVTrulPgq44783701 = -234914031;    double gNVTrulPgq23733792 = -998150900;    double gNVTrulPgq49787472 = -383335764;    double gNVTrulPgq64919886 = 98256177;    double gNVTrulPgq42498684 = -904590578;    double gNVTrulPgq71079176 = -846681015;    double gNVTrulPgq89570293 = -453829371;    double gNVTrulPgq70788546 = -302570666;    double gNVTrulPgq83479366 = -270907008;    double gNVTrulPgq71650761 = -622388272;    double gNVTrulPgq67877302 = -885332871;    double gNVTrulPgq97778572 = -782704057;    double gNVTrulPgq87765213 = 99545787;    double gNVTrulPgq9610297 = -71146440;    double gNVTrulPgq5790339 = -596816394;    double gNVTrulPgq3267657 = -489413143;    double gNVTrulPgq43754900 = -706100620;    double gNVTrulPgq36546221 = 88730059;    double gNVTrulPgq95277849 = -289052086;    double gNVTrulPgq49713340 = -451731192;    double gNVTrulPgq37989183 = -528117115;    double gNVTrulPgq48681158 = -837803676;    double gNVTrulPgq81665394 = -486325863;    double gNVTrulPgq84154050 = -572940929;    double gNVTrulPgq83560083 = -382364664;    double gNVTrulPgq10523602 = -731888680;    double gNVTrulPgq53444114 = -889335261;    double gNVTrulPgq86314471 = -319535510;    double gNVTrulPgq80745333 = -448485549;    double gNVTrulPgq59506795 = -145580144;    double gNVTrulPgq52337896 = 14080987;    double gNVTrulPgq76135878 = -486872769;    double gNVTrulPgq80690329 = -94964959;    double gNVTrulPgq72731739 = -571695190;    double gNVTrulPgq83444643 = -698981698;    double gNVTrulPgq95855034 = 46693199;    double gNVTrulPgq22263661 = -833265404;    double gNVTrulPgq57527136 = -156341515;    double gNVTrulPgq3330448 = -93664136;    double gNVTrulPgq31387618 = -500568621;    double gNVTrulPgq37647315 = -781997917;    double gNVTrulPgq67921607 = -60156559;    double gNVTrulPgq63002899 = -603318640;    double gNVTrulPgq59351173 = -625917653;    double gNVTrulPgq18479337 = -153904022;    double gNVTrulPgq86641513 = -625642936;    double gNVTrulPgq15201574 = -376613154;    double gNVTrulPgq82226038 = 8987101;    double gNVTrulPgq9776775 = -618274588;    double gNVTrulPgq89677579 = -259308756;    double gNVTrulPgq165854 = -88455862;     gNVTrulPgq91451878 = gNVTrulPgq44479116;     gNVTrulPgq44479116 = gNVTrulPgq86906915;     gNVTrulPgq86906915 = gNVTrulPgq43402527;     gNVTrulPgq43402527 = gNVTrulPgq66583930;     gNVTrulPgq66583930 = gNVTrulPgq6529448;     gNVTrulPgq6529448 = gNVTrulPgq2882049;     gNVTrulPgq2882049 = gNVTrulPgq37838641;     gNVTrulPgq37838641 = gNVTrulPgq25379166;     gNVTrulPgq25379166 = gNVTrulPgq75318789;     gNVTrulPgq75318789 = gNVTrulPgq66201922;     gNVTrulPgq66201922 = gNVTrulPgq82375352;     gNVTrulPgq82375352 = gNVTrulPgq97744643;     gNVTrulPgq97744643 = gNVTrulPgq76930948;     gNVTrulPgq76930948 = gNVTrulPgq76699336;     gNVTrulPgq76699336 = gNVTrulPgq95163423;     gNVTrulPgq95163423 = gNVTrulPgq12667330;     gNVTrulPgq12667330 = gNVTrulPgq70510689;     gNVTrulPgq70510689 = gNVTrulPgq67980169;     gNVTrulPgq67980169 = gNVTrulPgq13490389;     gNVTrulPgq13490389 = gNVTrulPgq45280448;     gNVTrulPgq45280448 = gNVTrulPgq1881585;     gNVTrulPgq1881585 = gNVTrulPgq73690569;     gNVTrulPgq73690569 = gNVTrulPgq3427549;     gNVTrulPgq3427549 = gNVTrulPgq71751766;     gNVTrulPgq71751766 = gNVTrulPgq98706627;     gNVTrulPgq98706627 = gNVTrulPgq8750875;     gNVTrulPgq8750875 = gNVTrulPgq15116836;     gNVTrulPgq15116836 = gNVTrulPgq28228344;     gNVTrulPgq28228344 = gNVTrulPgq19588827;     gNVTrulPgq19588827 = gNVTrulPgq72051132;     gNVTrulPgq72051132 = gNVTrulPgq22447023;     gNVTrulPgq22447023 = gNVTrulPgq45829131;     gNVTrulPgq45829131 = gNVTrulPgq2466794;     gNVTrulPgq2466794 = gNVTrulPgq27217608;     gNVTrulPgq27217608 = gNVTrulPgq38710154;     gNVTrulPgq38710154 = gNVTrulPgq46482265;     gNVTrulPgq46482265 = gNVTrulPgq31001935;     gNVTrulPgq31001935 = gNVTrulPgq86356638;     gNVTrulPgq86356638 = gNVTrulPgq84420085;     gNVTrulPgq84420085 = gNVTrulPgq2966787;     gNVTrulPgq2966787 = gNVTrulPgq91836334;     gNVTrulPgq91836334 = gNVTrulPgq15567114;     gNVTrulPgq15567114 = gNVTrulPgq92945236;     gNVTrulPgq92945236 = gNVTrulPgq43920753;     gNVTrulPgq43920753 = gNVTrulPgq19413871;     gNVTrulPgq19413871 = gNVTrulPgq22570749;     gNVTrulPgq22570749 = gNVTrulPgq28060546;     gNVTrulPgq28060546 = gNVTrulPgq42385097;     gNVTrulPgq42385097 = gNVTrulPgq44783701;     gNVTrulPgq44783701 = gNVTrulPgq23733792;     gNVTrulPgq23733792 = gNVTrulPgq49787472;     gNVTrulPgq49787472 = gNVTrulPgq64919886;     gNVTrulPgq64919886 = gNVTrulPgq42498684;     gNVTrulPgq42498684 = gNVTrulPgq71079176;     gNVTrulPgq71079176 = gNVTrulPgq89570293;     gNVTrulPgq89570293 = gNVTrulPgq70788546;     gNVTrulPgq70788546 = gNVTrulPgq83479366;     gNVTrulPgq83479366 = gNVTrulPgq71650761;     gNVTrulPgq71650761 = gNVTrulPgq67877302;     gNVTrulPgq67877302 = gNVTrulPgq97778572;     gNVTrulPgq97778572 = gNVTrulPgq87765213;     gNVTrulPgq87765213 = gNVTrulPgq9610297;     gNVTrulPgq9610297 = gNVTrulPgq5790339;     gNVTrulPgq5790339 = gNVTrulPgq3267657;     gNVTrulPgq3267657 = gNVTrulPgq43754900;     gNVTrulPgq43754900 = gNVTrulPgq36546221;     gNVTrulPgq36546221 = gNVTrulPgq95277849;     gNVTrulPgq95277849 = gNVTrulPgq49713340;     gNVTrulPgq49713340 = gNVTrulPgq37989183;     gNVTrulPgq37989183 = gNVTrulPgq48681158;     gNVTrulPgq48681158 = gNVTrulPgq81665394;     gNVTrulPgq81665394 = gNVTrulPgq84154050;     gNVTrulPgq84154050 = gNVTrulPgq83560083;     gNVTrulPgq83560083 = gNVTrulPgq10523602;     gNVTrulPgq10523602 = gNVTrulPgq53444114;     gNVTrulPgq53444114 = gNVTrulPgq86314471;     gNVTrulPgq86314471 = gNVTrulPgq80745333;     gNVTrulPgq80745333 = gNVTrulPgq59506795;     gNVTrulPgq59506795 = gNVTrulPgq52337896;     gNVTrulPgq52337896 = gNVTrulPgq76135878;     gNVTrulPgq76135878 = gNVTrulPgq80690329;     gNVTrulPgq80690329 = gNVTrulPgq72731739;     gNVTrulPgq72731739 = gNVTrulPgq83444643;     gNVTrulPgq83444643 = gNVTrulPgq95855034;     gNVTrulPgq95855034 = gNVTrulPgq22263661;     gNVTrulPgq22263661 = gNVTrulPgq57527136;     gNVTrulPgq57527136 = gNVTrulPgq3330448;     gNVTrulPgq3330448 = gNVTrulPgq31387618;     gNVTrulPgq31387618 = gNVTrulPgq37647315;     gNVTrulPgq37647315 = gNVTrulPgq67921607;     gNVTrulPgq67921607 = gNVTrulPgq63002899;     gNVTrulPgq63002899 = gNVTrulPgq59351173;     gNVTrulPgq59351173 = gNVTrulPgq18479337;     gNVTrulPgq18479337 = gNVTrulPgq86641513;     gNVTrulPgq86641513 = gNVTrulPgq15201574;     gNVTrulPgq15201574 = gNVTrulPgq82226038;     gNVTrulPgq82226038 = gNVTrulPgq9776775;     gNVTrulPgq9776775 = gNVTrulPgq89677579;     gNVTrulPgq89677579 = gNVTrulPgq165854;     gNVTrulPgq165854 = gNVTrulPgq91451878;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void AgzVVavcWy53004599() {     double jbCgCGOCsW13838996 = -822859825;    double jbCgCGOCsW28826617 = -648321167;    double jbCgCGOCsW15676194 = -377834577;    double jbCgCGOCsW58409215 = -958052479;    double jbCgCGOCsW64758184 = -533929029;    double jbCgCGOCsW21412565 = -397856005;    double jbCgCGOCsW95037787 = -100019669;    double jbCgCGOCsW13472500 = -575638812;    double jbCgCGOCsW22542297 = -532470134;    double jbCgCGOCsW67082374 = -548755643;    double jbCgCGOCsW3743782 = -960810358;    double jbCgCGOCsW38278302 = -260269947;    double jbCgCGOCsW64752824 = -255019042;    double jbCgCGOCsW19545701 = -215267237;    double jbCgCGOCsW13434614 = -718322052;    double jbCgCGOCsW39419336 = -93696866;    double jbCgCGOCsW62490681 = -11911607;    double jbCgCGOCsW76487105 = -63920511;    double jbCgCGOCsW9261801 = 74186218;    double jbCgCGOCsW92006671 = -361590500;    double jbCgCGOCsW46163555 = -42981907;    double jbCgCGOCsW65696803 = -39392804;    double jbCgCGOCsW76983892 = -473288039;    double jbCgCGOCsW29927336 = -331266582;    double jbCgCGOCsW7292013 = -950815801;    double jbCgCGOCsW87009622 = -501433382;    double jbCgCGOCsW55840295 = -512130063;    double jbCgCGOCsW21028286 = -66032604;    double jbCgCGOCsW35120905 = -278152848;    double jbCgCGOCsW28746006 = -971753567;    double jbCgCGOCsW16341938 = -297917319;    double jbCgCGOCsW79988213 = -810156692;    double jbCgCGOCsW26867802 = -527598208;    double jbCgCGOCsW61855481 = -671376486;    double jbCgCGOCsW3446973 = -299583711;    double jbCgCGOCsW80403023 = -778122601;    double jbCgCGOCsW39921978 = -707173600;    double jbCgCGOCsW84628035 = -115931396;    double jbCgCGOCsW34664770 = -440282924;    double jbCgCGOCsW4605801 = -544571022;    double jbCgCGOCsW31724158 = -880245033;    double jbCgCGOCsW80344725 = 79931971;    double jbCgCGOCsW21117306 = -102621565;    double jbCgCGOCsW92389355 = -846085547;    double jbCgCGOCsW11904020 = -430837059;    double jbCgCGOCsW27514152 = -325566759;    double jbCgCGOCsW34868146 = -49076642;    double jbCgCGOCsW72659220 = -316113603;    double jbCgCGOCsW36845002 = -655599660;    double jbCgCGOCsW41867446 = -376934290;    double jbCgCGOCsW32603009 = -253227177;    double jbCgCGOCsW23638729 = -814155046;    double jbCgCGOCsW43234290 = -673655054;    double jbCgCGOCsW2785229 = -80271387;    double jbCgCGOCsW6841044 = -987385131;    double jbCgCGOCsW48142192 = -683467021;    double jbCgCGOCsW51842724 = -75033128;    double jbCgCGOCsW85748858 = 53432005;    double jbCgCGOCsW51117203 = 92763321;    double jbCgCGOCsW77748562 = 67504352;    double jbCgCGOCsW65572269 = -885725942;    double jbCgCGOCsW74009501 = 66012934;    double jbCgCGOCsW78351594 = -197485965;    double jbCgCGOCsW93796290 = -560716567;    double jbCgCGOCsW50740436 = -150838324;    double jbCgCGOCsW23755569 = -50653666;    double jbCgCGOCsW11410500 = -732671739;    double jbCgCGOCsW2897343 = -583642556;    double jbCgCGOCsW16098728 = -915683527;    double jbCgCGOCsW33031591 = -940199452;    double jbCgCGOCsW99497357 = -386523267;    double jbCgCGOCsW77862645 = -895980211;    double jbCgCGOCsW41822335 = -623637588;    double jbCgCGOCsW4656000 = -381242760;    double jbCgCGOCsW60282514 = -481345468;    double jbCgCGOCsW65818829 = -22913878;    double jbCgCGOCsW44579498 = -936771240;    double jbCgCGOCsW84594537 = -627202492;    double jbCgCGOCsW18023316 = -900429523;    double jbCgCGOCsW79777860 = -525249042;    double jbCgCGOCsW52141476 = -352356740;    double jbCgCGOCsW83181075 = -96016461;    double jbCgCGOCsW84183284 = -410432945;    double jbCgCGOCsW93253458 = -901218558;    double jbCgCGOCsW96142997 = -618526391;    double jbCgCGOCsW92703209 = -483762274;    double jbCgCGOCsW36753924 = -36501639;    double jbCgCGOCsW24082573 = -347326822;    double jbCgCGOCsW55014437 = -683991356;    double jbCgCGOCsW55304780 = -616116690;    double jbCgCGOCsW28560300 = -603089473;    double jbCgCGOCsW54173120 = -660605605;    double jbCgCGOCsW33510833 = -108694718;    double jbCgCGOCsW56916208 = -407787276;    double jbCgCGOCsW39033531 = -658845081;    double jbCgCGOCsW57714656 = -846257968;    double jbCgCGOCsW1993132 = -722582065;    double jbCgCGOCsW27321015 = -541904999;    double jbCgCGOCsW41648920 = -595247224;    double jbCgCGOCsW88148451 = -822859825;     jbCgCGOCsW13838996 = jbCgCGOCsW28826617;     jbCgCGOCsW28826617 = jbCgCGOCsW15676194;     jbCgCGOCsW15676194 = jbCgCGOCsW58409215;     jbCgCGOCsW58409215 = jbCgCGOCsW64758184;     jbCgCGOCsW64758184 = jbCgCGOCsW21412565;     jbCgCGOCsW21412565 = jbCgCGOCsW95037787;     jbCgCGOCsW95037787 = jbCgCGOCsW13472500;     jbCgCGOCsW13472500 = jbCgCGOCsW22542297;     jbCgCGOCsW22542297 = jbCgCGOCsW67082374;     jbCgCGOCsW67082374 = jbCgCGOCsW3743782;     jbCgCGOCsW3743782 = jbCgCGOCsW38278302;     jbCgCGOCsW38278302 = jbCgCGOCsW64752824;     jbCgCGOCsW64752824 = jbCgCGOCsW19545701;     jbCgCGOCsW19545701 = jbCgCGOCsW13434614;     jbCgCGOCsW13434614 = jbCgCGOCsW39419336;     jbCgCGOCsW39419336 = jbCgCGOCsW62490681;     jbCgCGOCsW62490681 = jbCgCGOCsW76487105;     jbCgCGOCsW76487105 = jbCgCGOCsW9261801;     jbCgCGOCsW9261801 = jbCgCGOCsW92006671;     jbCgCGOCsW92006671 = jbCgCGOCsW46163555;     jbCgCGOCsW46163555 = jbCgCGOCsW65696803;     jbCgCGOCsW65696803 = jbCgCGOCsW76983892;     jbCgCGOCsW76983892 = jbCgCGOCsW29927336;     jbCgCGOCsW29927336 = jbCgCGOCsW7292013;     jbCgCGOCsW7292013 = jbCgCGOCsW87009622;     jbCgCGOCsW87009622 = jbCgCGOCsW55840295;     jbCgCGOCsW55840295 = jbCgCGOCsW21028286;     jbCgCGOCsW21028286 = jbCgCGOCsW35120905;     jbCgCGOCsW35120905 = jbCgCGOCsW28746006;     jbCgCGOCsW28746006 = jbCgCGOCsW16341938;     jbCgCGOCsW16341938 = jbCgCGOCsW79988213;     jbCgCGOCsW79988213 = jbCgCGOCsW26867802;     jbCgCGOCsW26867802 = jbCgCGOCsW61855481;     jbCgCGOCsW61855481 = jbCgCGOCsW3446973;     jbCgCGOCsW3446973 = jbCgCGOCsW80403023;     jbCgCGOCsW80403023 = jbCgCGOCsW39921978;     jbCgCGOCsW39921978 = jbCgCGOCsW84628035;     jbCgCGOCsW84628035 = jbCgCGOCsW34664770;     jbCgCGOCsW34664770 = jbCgCGOCsW4605801;     jbCgCGOCsW4605801 = jbCgCGOCsW31724158;     jbCgCGOCsW31724158 = jbCgCGOCsW80344725;     jbCgCGOCsW80344725 = jbCgCGOCsW21117306;     jbCgCGOCsW21117306 = jbCgCGOCsW92389355;     jbCgCGOCsW92389355 = jbCgCGOCsW11904020;     jbCgCGOCsW11904020 = jbCgCGOCsW27514152;     jbCgCGOCsW27514152 = jbCgCGOCsW34868146;     jbCgCGOCsW34868146 = jbCgCGOCsW72659220;     jbCgCGOCsW72659220 = jbCgCGOCsW36845002;     jbCgCGOCsW36845002 = jbCgCGOCsW41867446;     jbCgCGOCsW41867446 = jbCgCGOCsW32603009;     jbCgCGOCsW32603009 = jbCgCGOCsW23638729;     jbCgCGOCsW23638729 = jbCgCGOCsW43234290;     jbCgCGOCsW43234290 = jbCgCGOCsW2785229;     jbCgCGOCsW2785229 = jbCgCGOCsW6841044;     jbCgCGOCsW6841044 = jbCgCGOCsW48142192;     jbCgCGOCsW48142192 = jbCgCGOCsW51842724;     jbCgCGOCsW51842724 = jbCgCGOCsW85748858;     jbCgCGOCsW85748858 = jbCgCGOCsW51117203;     jbCgCGOCsW51117203 = jbCgCGOCsW77748562;     jbCgCGOCsW77748562 = jbCgCGOCsW65572269;     jbCgCGOCsW65572269 = jbCgCGOCsW74009501;     jbCgCGOCsW74009501 = jbCgCGOCsW78351594;     jbCgCGOCsW78351594 = jbCgCGOCsW93796290;     jbCgCGOCsW93796290 = jbCgCGOCsW50740436;     jbCgCGOCsW50740436 = jbCgCGOCsW23755569;     jbCgCGOCsW23755569 = jbCgCGOCsW11410500;     jbCgCGOCsW11410500 = jbCgCGOCsW2897343;     jbCgCGOCsW2897343 = jbCgCGOCsW16098728;     jbCgCGOCsW16098728 = jbCgCGOCsW33031591;     jbCgCGOCsW33031591 = jbCgCGOCsW99497357;     jbCgCGOCsW99497357 = jbCgCGOCsW77862645;     jbCgCGOCsW77862645 = jbCgCGOCsW41822335;     jbCgCGOCsW41822335 = jbCgCGOCsW4656000;     jbCgCGOCsW4656000 = jbCgCGOCsW60282514;     jbCgCGOCsW60282514 = jbCgCGOCsW65818829;     jbCgCGOCsW65818829 = jbCgCGOCsW44579498;     jbCgCGOCsW44579498 = jbCgCGOCsW84594537;     jbCgCGOCsW84594537 = jbCgCGOCsW18023316;     jbCgCGOCsW18023316 = jbCgCGOCsW79777860;     jbCgCGOCsW79777860 = jbCgCGOCsW52141476;     jbCgCGOCsW52141476 = jbCgCGOCsW83181075;     jbCgCGOCsW83181075 = jbCgCGOCsW84183284;     jbCgCGOCsW84183284 = jbCgCGOCsW93253458;     jbCgCGOCsW93253458 = jbCgCGOCsW96142997;     jbCgCGOCsW96142997 = jbCgCGOCsW92703209;     jbCgCGOCsW92703209 = jbCgCGOCsW36753924;     jbCgCGOCsW36753924 = jbCgCGOCsW24082573;     jbCgCGOCsW24082573 = jbCgCGOCsW55014437;     jbCgCGOCsW55014437 = jbCgCGOCsW55304780;     jbCgCGOCsW55304780 = jbCgCGOCsW28560300;     jbCgCGOCsW28560300 = jbCgCGOCsW54173120;     jbCgCGOCsW54173120 = jbCgCGOCsW33510833;     jbCgCGOCsW33510833 = jbCgCGOCsW56916208;     jbCgCGOCsW56916208 = jbCgCGOCsW39033531;     jbCgCGOCsW39033531 = jbCgCGOCsW57714656;     jbCgCGOCsW57714656 = jbCgCGOCsW1993132;     jbCgCGOCsW1993132 = jbCgCGOCsW27321015;     jbCgCGOCsW27321015 = jbCgCGOCsW41648920;     jbCgCGOCsW41648920 = jbCgCGOCsW88148451;     jbCgCGOCsW88148451 = jbCgCGOCsW13838996;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ZNJFDVpSOp71878335() {     double XPUpPOulhw87961563 = -573518621;    double XPUpPOulhw28848100 = -673763977;    double XPUpPOulhw93245832 = -414847805;    double XPUpPOulhw48491306 = -780729153;    double XPUpPOulhw39656371 = -832636685;    double XPUpPOulhw61179036 = -417491609;    double XPUpPOulhw60970369 = -845218572;    double XPUpPOulhw7897836 = -70015011;    double XPUpPOulhw71003504 = -207514883;    double XPUpPOulhw27643083 = -833142958;    double XPUpPOulhw36578340 = -919157230;    double XPUpPOulhw4537629 = -445996741;    double XPUpPOulhw18941799 = -482916623;    double XPUpPOulhw20928171 = -369656540;    double XPUpPOulhw4185149 = -923527475;    double XPUpPOulhw95402520 = -187048364;    double XPUpPOulhw68284557 = -657286117;    double XPUpPOulhw68146443 = -978239697;    double XPUpPOulhw10117281 = -588830090;    double XPUpPOulhw90252529 = -324493102;    double XPUpPOulhw92794015 = -117277384;    double XPUpPOulhw31931475 = -717640125;    double XPUpPOulhw81626730 = -257606078;    double XPUpPOulhw49077373 = -766851390;    double XPUpPOulhw14248118 = -518029362;    double XPUpPOulhw33018031 = -190937385;    double XPUpPOulhw41758351 = -732125274;    double XPUpPOulhw25068961 = -237817744;    double XPUpPOulhw16763539 = -672308869;    double XPUpPOulhw7888270 = -253950230;    double XPUpPOulhw97851551 = -712115938;    double XPUpPOulhw50559134 = -686002239;    double XPUpPOulhw5999782 = -539323589;    double XPUpPOulhw15267881 = -656100502;    double XPUpPOulhw77881465 = -580149776;    double XPUpPOulhw3795503 = -229686806;    double XPUpPOulhw83009916 = 15523705;    double XPUpPOulhw39087749 = -67069233;    double XPUpPOulhw52747744 = -186646351;    double XPUpPOulhw49873931 = -199410718;    double XPUpPOulhw29165616 = -402581487;    double XPUpPOulhw28878517 = -766496342;    double XPUpPOulhw83250729 = -990928680;    double XPUpPOulhw84769293 = -768837874;    double XPUpPOulhw51916494 = -840477620;    double XPUpPOulhw37308881 = -931687795;    double XPUpPOulhw33331738 = 10172652;    double XPUpPOulhw96242359 = -477053289;    double XPUpPOulhw20323359 = -569269087;    double XPUpPOulhw27607451 = -377965929;    double XPUpPOulhw82152117 = -316807610;    double XPUpPOulhw29469739 = -606573888;    double XPUpPOulhw44787439 = -89679472;    double XPUpPOulhw33131015 = 29248492;    double XPUpPOulhw79084320 = -57852447;    double XPUpPOulhw56030088 = -855878496;    double XPUpPOulhw47221369 = -316157899;    double XPUpPOulhw44168459 = -647996415;    double XPUpPOulhw34243188 = -162699792;    double XPUpPOulhw6638341 = -541699301;    double XPUpPOulhw19420686 = -685366336;    double XPUpPOulhw35901409 = -507400828;    double XPUpPOulhw91134297 = -397706142;    double XPUpPOulhw63115235 = -953564654;    double XPUpPOulhw29791531 = -21027021;    double XPUpPOulhw86019206 = -133154992;    double XPUpPOulhw98537846 = -906673152;    double XPUpPOulhw3673918 = -826816121;    double XPUpPOulhw43046706 = -789506765;    double XPUpPOulhw389646 = -593840670;    double XPUpPOulhw12392605 = -102572069;    double XPUpPOulhw29196809 = -490216884;    double XPUpPOulhw15398700 = -691593346;    double XPUpPOulhw60243349 = -289419372;    double XPUpPOulhw61086913 = -921911616;    double XPUpPOulhw63915498 = -350781042;    double XPUpPOulhw48680746 = -726711445;    double XPUpPOulhw96857436 = -488768205;    double XPUpPOulhw97160879 = -926373771;    double XPUpPOulhw76939236 = -586341567;    double XPUpPOulhw99686292 = -101110037;    double XPUpPOulhw45515991 = -155071985;    double XPUpPOulhw4745602 = -668548657;    double XPUpPOulhw89156087 = -194342940;    double XPUpPOulhw25736152 = -937142621;    double XPUpPOulhw68381813 = -5542050;    double XPUpPOulhw5771696 = -496322767;    double XPUpPOulhw72868767 = -468572082;    double XPUpPOulhw36183561 = -498248056;    double XPUpPOulhw21851378 = -724271281;    double XPUpPOulhw56574133 = -913528907;    double XPUpPOulhw38841457 = -336479880;    double XPUpPOulhw4844561 = -904369441;    double XPUpPOulhw46109404 = -644947051;    double XPUpPOulhw30453246 = -514044383;    double XPUpPOulhw93264206 = -895180659;    double XPUpPOulhw37744220 = -268790201;    double XPUpPOulhw20135495 = 62635973;    double XPUpPOulhw54977763 = -647810853;    double XPUpPOulhw65897288 = -573518621;     XPUpPOulhw87961563 = XPUpPOulhw28848100;     XPUpPOulhw28848100 = XPUpPOulhw93245832;     XPUpPOulhw93245832 = XPUpPOulhw48491306;     XPUpPOulhw48491306 = XPUpPOulhw39656371;     XPUpPOulhw39656371 = XPUpPOulhw61179036;     XPUpPOulhw61179036 = XPUpPOulhw60970369;     XPUpPOulhw60970369 = XPUpPOulhw7897836;     XPUpPOulhw7897836 = XPUpPOulhw71003504;     XPUpPOulhw71003504 = XPUpPOulhw27643083;     XPUpPOulhw27643083 = XPUpPOulhw36578340;     XPUpPOulhw36578340 = XPUpPOulhw4537629;     XPUpPOulhw4537629 = XPUpPOulhw18941799;     XPUpPOulhw18941799 = XPUpPOulhw20928171;     XPUpPOulhw20928171 = XPUpPOulhw4185149;     XPUpPOulhw4185149 = XPUpPOulhw95402520;     XPUpPOulhw95402520 = XPUpPOulhw68284557;     XPUpPOulhw68284557 = XPUpPOulhw68146443;     XPUpPOulhw68146443 = XPUpPOulhw10117281;     XPUpPOulhw10117281 = XPUpPOulhw90252529;     XPUpPOulhw90252529 = XPUpPOulhw92794015;     XPUpPOulhw92794015 = XPUpPOulhw31931475;     XPUpPOulhw31931475 = XPUpPOulhw81626730;     XPUpPOulhw81626730 = XPUpPOulhw49077373;     XPUpPOulhw49077373 = XPUpPOulhw14248118;     XPUpPOulhw14248118 = XPUpPOulhw33018031;     XPUpPOulhw33018031 = XPUpPOulhw41758351;     XPUpPOulhw41758351 = XPUpPOulhw25068961;     XPUpPOulhw25068961 = XPUpPOulhw16763539;     XPUpPOulhw16763539 = XPUpPOulhw7888270;     XPUpPOulhw7888270 = XPUpPOulhw97851551;     XPUpPOulhw97851551 = XPUpPOulhw50559134;     XPUpPOulhw50559134 = XPUpPOulhw5999782;     XPUpPOulhw5999782 = XPUpPOulhw15267881;     XPUpPOulhw15267881 = XPUpPOulhw77881465;     XPUpPOulhw77881465 = XPUpPOulhw3795503;     XPUpPOulhw3795503 = XPUpPOulhw83009916;     XPUpPOulhw83009916 = XPUpPOulhw39087749;     XPUpPOulhw39087749 = XPUpPOulhw52747744;     XPUpPOulhw52747744 = XPUpPOulhw49873931;     XPUpPOulhw49873931 = XPUpPOulhw29165616;     XPUpPOulhw29165616 = XPUpPOulhw28878517;     XPUpPOulhw28878517 = XPUpPOulhw83250729;     XPUpPOulhw83250729 = XPUpPOulhw84769293;     XPUpPOulhw84769293 = XPUpPOulhw51916494;     XPUpPOulhw51916494 = XPUpPOulhw37308881;     XPUpPOulhw37308881 = XPUpPOulhw33331738;     XPUpPOulhw33331738 = XPUpPOulhw96242359;     XPUpPOulhw96242359 = XPUpPOulhw20323359;     XPUpPOulhw20323359 = XPUpPOulhw27607451;     XPUpPOulhw27607451 = XPUpPOulhw82152117;     XPUpPOulhw82152117 = XPUpPOulhw29469739;     XPUpPOulhw29469739 = XPUpPOulhw44787439;     XPUpPOulhw44787439 = XPUpPOulhw33131015;     XPUpPOulhw33131015 = XPUpPOulhw79084320;     XPUpPOulhw79084320 = XPUpPOulhw56030088;     XPUpPOulhw56030088 = XPUpPOulhw47221369;     XPUpPOulhw47221369 = XPUpPOulhw44168459;     XPUpPOulhw44168459 = XPUpPOulhw34243188;     XPUpPOulhw34243188 = XPUpPOulhw6638341;     XPUpPOulhw6638341 = XPUpPOulhw19420686;     XPUpPOulhw19420686 = XPUpPOulhw35901409;     XPUpPOulhw35901409 = XPUpPOulhw91134297;     XPUpPOulhw91134297 = XPUpPOulhw63115235;     XPUpPOulhw63115235 = XPUpPOulhw29791531;     XPUpPOulhw29791531 = XPUpPOulhw86019206;     XPUpPOulhw86019206 = XPUpPOulhw98537846;     XPUpPOulhw98537846 = XPUpPOulhw3673918;     XPUpPOulhw3673918 = XPUpPOulhw43046706;     XPUpPOulhw43046706 = XPUpPOulhw389646;     XPUpPOulhw389646 = XPUpPOulhw12392605;     XPUpPOulhw12392605 = XPUpPOulhw29196809;     XPUpPOulhw29196809 = XPUpPOulhw15398700;     XPUpPOulhw15398700 = XPUpPOulhw60243349;     XPUpPOulhw60243349 = XPUpPOulhw61086913;     XPUpPOulhw61086913 = XPUpPOulhw63915498;     XPUpPOulhw63915498 = XPUpPOulhw48680746;     XPUpPOulhw48680746 = XPUpPOulhw96857436;     XPUpPOulhw96857436 = XPUpPOulhw97160879;     XPUpPOulhw97160879 = XPUpPOulhw76939236;     XPUpPOulhw76939236 = XPUpPOulhw99686292;     XPUpPOulhw99686292 = XPUpPOulhw45515991;     XPUpPOulhw45515991 = XPUpPOulhw4745602;     XPUpPOulhw4745602 = XPUpPOulhw89156087;     XPUpPOulhw89156087 = XPUpPOulhw25736152;     XPUpPOulhw25736152 = XPUpPOulhw68381813;     XPUpPOulhw68381813 = XPUpPOulhw5771696;     XPUpPOulhw5771696 = XPUpPOulhw72868767;     XPUpPOulhw72868767 = XPUpPOulhw36183561;     XPUpPOulhw36183561 = XPUpPOulhw21851378;     XPUpPOulhw21851378 = XPUpPOulhw56574133;     XPUpPOulhw56574133 = XPUpPOulhw38841457;     XPUpPOulhw38841457 = XPUpPOulhw4844561;     XPUpPOulhw4844561 = XPUpPOulhw46109404;     XPUpPOulhw46109404 = XPUpPOulhw30453246;     XPUpPOulhw30453246 = XPUpPOulhw93264206;     XPUpPOulhw93264206 = XPUpPOulhw37744220;     XPUpPOulhw37744220 = XPUpPOulhw20135495;     XPUpPOulhw20135495 = XPUpPOulhw54977763;     XPUpPOulhw54977763 = XPUpPOulhw65897288;     XPUpPOulhw65897288 = XPUpPOulhw87961563;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void wkjmTyftpt22485537() {     int PpGpTXNTtE45810885 = -187937413;    int PpGpTXNTtE57181520 = -481561075;    int PpGpTXNTtE8744982 = -891604417;    int PpGpTXNTtE43181418 = -148017341;    int PpGpTXNTtE89695843 = -195114871;    int PpGpTXNTtE94882308 = -690731477;    int PpGpTXNTtE79509846 = -109663379;    int PpGpTXNTtE11056231 = -332757137;    int PpGpTXNTtE28314159 = -173219294;    int PpGpTXNTtE35989623 = -972167853;    int PpGpTXNTtE2141633 = -738053324;    int PpGpTXNTtE53862887 = -693123624;    int PpGpTXNTtE8258168 = 7182790;    int PpGpTXNTtE39761677 = -701152181;    int PpGpTXNTtE76528887 = 26926223;    int PpGpTXNTtE35917460 = -588129688;    int PpGpTXNTtE46017465 = -451733204;    int PpGpTXNTtE12382785 = -754874645;    int PpGpTXNTtE91735106 = -731504503;    int PpGpTXNTtE26569150 = -697676396;    int PpGpTXNTtE66929273 = 89193806;    int PpGpTXNTtE10020086 = -504046791;    int PpGpTXNTtE37006235 = -391839933;    int PpGpTXNTtE47545051 = -801208590;    int PpGpTXNTtE93584971 = -500226758;    int PpGpTXNTtE73732158 = -369305451;    int PpGpTXNTtE64157554 = -145596051;    int PpGpTXNTtE54007073 = -991560878;    int PpGpTXNTtE63985091 = -717625633;    int PpGpTXNTtE34533925 = -371037580;    int PpGpTXNTtE44019249 = -51865959;    int PpGpTXNTtE53561415 = -915134127;    int PpGpTXNTtE56530251 = -565290953;    int PpGpTXNTtE4263577 = -556580299;    int PpGpTXNTtE78740265 = -465349487;    int PpGpTXNTtE75635120 = -169764615;    int PpGpTXNTtE69890761 = -82293598;    int PpGpTXNTtE8970414 = 80281054;    int PpGpTXNTtE13789639 = -432227951;    int PpGpTXNTtE48394732 = -546181450;    int PpGpTXNTtE97446760 = -80986118;    int PpGpTXNTtE13903205 = -22054283;    int PpGpTXNTtE98042619 = -152074923;    int PpGpTXNTtE44728802 = -492051711;    int PpGpTXNTtE77907193 = -789502558;    int PpGpTXNTtE71156507 = -696818187;    int PpGpTXNTtE51125403 = -811583651;    int PpGpTXNTtE70875555 = -645734195;    int PpGpTXNTtE78346735 = -950840735;    int PpGpTXNTtE39198075 = -117500561;    int PpGpTXNTtE65162372 = -756882941;    int PpGpTXNTtE79532839 = -509972642;    int PpGpTXNTtE3998817 = -121609252;    int PpGpTXNTtE4284272 = -721980890;    int PpGpTXNTtE55556264 = -666597069;    int PpGpTXNTtE35790800 = -683890623;    int PpGpTXNTtE20175286 = 10278857;    int PpGpTXNTtE61199930 = 9604172;    int PpGpTXNTtE49596447 = -647790584;    int PpGpTXNTtE15963685 = -825809420;    int PpGpTXNTtE30724755 = -445135426;    int PpGpTXNTtE25502774 = -118102501;    int PpGpTXNTtE47071140 = -615131504;    int PpGpTXNTtE93780233 = -802181714;    int PpGpTXNTtE91970373 = -820301895;    int PpGpTXNTtE48580217 = -822919198;    int PpGpTXNTtE97332635 = -27832672;    int PpGpTXNTtE3994592 = -436236911;    int PpGpTXNTtE61021412 = -135802695;    int PpGpTXNTtE893767 = -803309163;    int PpGpTXNTtE66026699 = -405836091;    int PpGpTXNTtE37047052 = -432014258;    int PpGpTXNTtE98593146 = -222646695;    int PpGpTXNTtE43340375 = -85323053;    int PpGpTXNTtE29122389 = -516690279;    int PpGpTXNTtE53026069 = -888751912;    int PpGpTXNTtE11977466 = -251971868;    int PpGpTXNTtE92277432 = -899788223;    int PpGpTXNTtE69637858 = 88293967;    int PpGpTXNTtE22428464 = -803408571;    int PpGpTXNTtE22606756 = -557721801;    int PpGpTXNTtE93281998 = -499861856;    int PpGpTXNTtE75660337 = 59279857;    int PpGpTXNTtE24787017 = -500125073;    int PpGpTXNTtE69371552 = -614154640;    int PpGpTXNTtE64486409 = -541893318;    int PpGpTXNTtE49562598 = -693524875;    int PpGpTXNTtE52245980 = -843310063;    int PpGpTXNTtE48707312 = -889983231;    int PpGpTXNTtE42949465 = -781458865;    int PpGpTXNTtE55459835 = -80043473;    int PpGpTXNTtE8690831 = 8102229;    int PpGpTXNTtE59373966 = -271928363;    int PpGpTXNTtE97825953 = -606418531;    int PpGpTXNTtE17669978 = -1046025;    int PpGpTXNTtE71943987 = -962883617;    int PpGpTXNTtE66832065 = -406922779;    int PpGpTXNTtE4262386 = -349893209;    int PpGpTXNTtE52758429 = -671749817;    int PpGpTXNTtE29326976 = -187937413;     PpGpTXNTtE45810885 = PpGpTXNTtE57181520;     PpGpTXNTtE57181520 = PpGpTXNTtE8744982;     PpGpTXNTtE8744982 = PpGpTXNTtE43181418;     PpGpTXNTtE43181418 = PpGpTXNTtE89695843;     PpGpTXNTtE89695843 = PpGpTXNTtE94882308;     PpGpTXNTtE94882308 = PpGpTXNTtE79509846;     PpGpTXNTtE79509846 = PpGpTXNTtE11056231;     PpGpTXNTtE11056231 = PpGpTXNTtE28314159;     PpGpTXNTtE28314159 = PpGpTXNTtE35989623;     PpGpTXNTtE35989623 = PpGpTXNTtE2141633;     PpGpTXNTtE2141633 = PpGpTXNTtE53862887;     PpGpTXNTtE53862887 = PpGpTXNTtE8258168;     PpGpTXNTtE8258168 = PpGpTXNTtE39761677;     PpGpTXNTtE39761677 = PpGpTXNTtE76528887;     PpGpTXNTtE76528887 = PpGpTXNTtE35917460;     PpGpTXNTtE35917460 = PpGpTXNTtE46017465;     PpGpTXNTtE46017465 = PpGpTXNTtE12382785;     PpGpTXNTtE12382785 = PpGpTXNTtE91735106;     PpGpTXNTtE91735106 = PpGpTXNTtE26569150;     PpGpTXNTtE26569150 = PpGpTXNTtE66929273;     PpGpTXNTtE66929273 = PpGpTXNTtE10020086;     PpGpTXNTtE10020086 = PpGpTXNTtE37006235;     PpGpTXNTtE37006235 = PpGpTXNTtE47545051;     PpGpTXNTtE47545051 = PpGpTXNTtE93584971;     PpGpTXNTtE93584971 = PpGpTXNTtE73732158;     PpGpTXNTtE73732158 = PpGpTXNTtE64157554;     PpGpTXNTtE64157554 = PpGpTXNTtE54007073;     PpGpTXNTtE54007073 = PpGpTXNTtE63985091;     PpGpTXNTtE63985091 = PpGpTXNTtE34533925;     PpGpTXNTtE34533925 = PpGpTXNTtE44019249;     PpGpTXNTtE44019249 = PpGpTXNTtE53561415;     PpGpTXNTtE53561415 = PpGpTXNTtE56530251;     PpGpTXNTtE56530251 = PpGpTXNTtE4263577;     PpGpTXNTtE4263577 = PpGpTXNTtE78740265;     PpGpTXNTtE78740265 = PpGpTXNTtE75635120;     PpGpTXNTtE75635120 = PpGpTXNTtE69890761;     PpGpTXNTtE69890761 = PpGpTXNTtE8970414;     PpGpTXNTtE8970414 = PpGpTXNTtE13789639;     PpGpTXNTtE13789639 = PpGpTXNTtE48394732;     PpGpTXNTtE48394732 = PpGpTXNTtE97446760;     PpGpTXNTtE97446760 = PpGpTXNTtE13903205;     PpGpTXNTtE13903205 = PpGpTXNTtE98042619;     PpGpTXNTtE98042619 = PpGpTXNTtE44728802;     PpGpTXNTtE44728802 = PpGpTXNTtE77907193;     PpGpTXNTtE77907193 = PpGpTXNTtE71156507;     PpGpTXNTtE71156507 = PpGpTXNTtE51125403;     PpGpTXNTtE51125403 = PpGpTXNTtE70875555;     PpGpTXNTtE70875555 = PpGpTXNTtE78346735;     PpGpTXNTtE78346735 = PpGpTXNTtE39198075;     PpGpTXNTtE39198075 = PpGpTXNTtE65162372;     PpGpTXNTtE65162372 = PpGpTXNTtE79532839;     PpGpTXNTtE79532839 = PpGpTXNTtE3998817;     PpGpTXNTtE3998817 = PpGpTXNTtE4284272;     PpGpTXNTtE4284272 = PpGpTXNTtE55556264;     PpGpTXNTtE55556264 = PpGpTXNTtE35790800;     PpGpTXNTtE35790800 = PpGpTXNTtE20175286;     PpGpTXNTtE20175286 = PpGpTXNTtE61199930;     PpGpTXNTtE61199930 = PpGpTXNTtE49596447;     PpGpTXNTtE49596447 = PpGpTXNTtE15963685;     PpGpTXNTtE15963685 = PpGpTXNTtE30724755;     PpGpTXNTtE30724755 = PpGpTXNTtE25502774;     PpGpTXNTtE25502774 = PpGpTXNTtE47071140;     PpGpTXNTtE47071140 = PpGpTXNTtE93780233;     PpGpTXNTtE93780233 = PpGpTXNTtE91970373;     PpGpTXNTtE91970373 = PpGpTXNTtE48580217;     PpGpTXNTtE48580217 = PpGpTXNTtE97332635;     PpGpTXNTtE97332635 = PpGpTXNTtE3994592;     PpGpTXNTtE3994592 = PpGpTXNTtE61021412;     PpGpTXNTtE61021412 = PpGpTXNTtE893767;     PpGpTXNTtE893767 = PpGpTXNTtE66026699;     PpGpTXNTtE66026699 = PpGpTXNTtE37047052;     PpGpTXNTtE37047052 = PpGpTXNTtE98593146;     PpGpTXNTtE98593146 = PpGpTXNTtE43340375;     PpGpTXNTtE43340375 = PpGpTXNTtE29122389;     PpGpTXNTtE29122389 = PpGpTXNTtE53026069;     PpGpTXNTtE53026069 = PpGpTXNTtE11977466;     PpGpTXNTtE11977466 = PpGpTXNTtE92277432;     PpGpTXNTtE92277432 = PpGpTXNTtE69637858;     PpGpTXNTtE69637858 = PpGpTXNTtE22428464;     PpGpTXNTtE22428464 = PpGpTXNTtE22606756;     PpGpTXNTtE22606756 = PpGpTXNTtE93281998;     PpGpTXNTtE93281998 = PpGpTXNTtE75660337;     PpGpTXNTtE75660337 = PpGpTXNTtE24787017;     PpGpTXNTtE24787017 = PpGpTXNTtE69371552;     PpGpTXNTtE69371552 = PpGpTXNTtE64486409;     PpGpTXNTtE64486409 = PpGpTXNTtE49562598;     PpGpTXNTtE49562598 = PpGpTXNTtE52245980;     PpGpTXNTtE52245980 = PpGpTXNTtE48707312;     PpGpTXNTtE48707312 = PpGpTXNTtE42949465;     PpGpTXNTtE42949465 = PpGpTXNTtE55459835;     PpGpTXNTtE55459835 = PpGpTXNTtE8690831;     PpGpTXNTtE8690831 = PpGpTXNTtE59373966;     PpGpTXNTtE59373966 = PpGpTXNTtE97825953;     PpGpTXNTtE97825953 = PpGpTXNTtE17669978;     PpGpTXNTtE17669978 = PpGpTXNTtE71943987;     PpGpTXNTtE71943987 = PpGpTXNTtE66832065;     PpGpTXNTtE66832065 = PpGpTXNTtE4262386;     PpGpTXNTtE4262386 = PpGpTXNTtE52758429;     PpGpTXNTtE52758429 = PpGpTXNTtE29326976;     PpGpTXNTtE29326976 = PpGpTXNTtE45810885;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void fcpicKljhM98167459() {     int AoccsCwdRv87393431 = -893592060;    int AoccsCwdRv75254561 = -29117337;    int AoccsCwdRv60860430 = -750975800;    int AoccsCwdRv57399693 = -339376213;    int AoccsCwdRv6036499 = -353008266;    int AoccsCwdRv87716950 = -418142795;    int AoccsCwdRv82108883 = -388817623;    int AoccsCwdRv53733632 = -559687873;    int AoccsCwdRv11734095 = -715937297;    int AoccsCwdRv95482480 = -229023458;    int AoccsCwdRv80113052 = -458026568;    int AoccsCwdRv71962401 = -166172235;    int AoccsCwdRv849018 = -963062329;    int AoccsCwdRv22201997 = -864601107;    int AoccsCwdRv85293721 = -104248107;    int AoccsCwdRv86399607 = -964145188;    int AoccsCwdRv39836645 = -675638300;    int AoccsCwdRv86195596 = -96753735;    int AoccsCwdRv33687008 = -835854755;    int AoccsCwdRv28882770 = -869115930;    int AoccsCwdRv88899905 = -813101964;    int AoccsCwdRv21666368 = 11379082;    int AoccsCwdRv6244010 = -417031762;    int AoccsCwdRv81680262 = -553417660;    int AoccsCwdRv16859883 = -470714136;    int AoccsCwdRv92577928 = -28331653;    int AoccsCwdRv52816325 = -651742682;    int AoccsCwdRv72439098 = -618295017;    int AoccsCwdRv64107114 = -868032825;    int AoccsCwdRv32593103 = -547584245;    int AoccsCwdRv21432352 = -130074150;    int AoccsCwdRv4271198 = -5730595;    int AoccsCwdRv93006787 = -403556085;    int AoccsCwdRv28559730 = -496134146;    int AoccsCwdRv23665333 = -795868918;    int AoccsCwdRv53093688 = -518590282;    int AoccsCwdRv88623144 = -900972129;    int AoccsCwdRv24358350 = -778617858;    int AoccsCwdRv82476857 = -464346308;    int AoccsCwdRv28295309 = -875451533;    int AoccsCwdRv48711925 = -927515028;    int AoccsCwdRv49721127 = -792949770;    int AoccsCwdRv5209617 = -326930039;    int AoccsCwdRv13035983 = -458762616;    int AoccsCwdRv5858065 = -904652473;    int AoccsCwdRv88629062 = -908913265;    int AoccsCwdRv60551348 = -933064927;    int AoccsCwdRv21175228 = -213394965;    int AoccsCwdRv92256741 = -36550742;    int AoccsCwdRv56593893 = -8513298;    int AoccsCwdRv68374405 = -894898162;    int AoccsCwdRv59280774 = -142205561;    int AoccsCwdRv45420074 = -877390385;    int AoccsCwdRv5994728 = -702039684;    int AoccsCwdRv9267555 = -856719719;    int AoccsCwdRv65727063 = -804971143;    int AoccsCwdRv69010551 = -612085576;    int AoccsCwdRv79180167 = -97558141;    int AoccsCwdRv40539811 = -868662077;    int AoccsCwdRv13458571 = -224676614;    int AoccsCwdRv34900626 = -766400114;    int AoccsCwdRv9669785 = -770522606;    int AoccsCwdRv89626517 = -691655048;    int AoccsCwdRv79140992 = -68353053;    int AoccsCwdRv74050129 = 1050692;    int AoccsCwdRv75841854 = -352295973;    int AoccsCwdRv78955613 = -762616151;    int AoccsCwdRv72289288 = -366928184;    int AoccsCwdRv98536663 = 31267811;    int AoccsCwdRv32200033 = -585657825;    int AoccsCwdRv97776462 = 36826941;    int AoccsCwdRv15478296 = -897020442;    int AoccsCwdRv3718740 = -632407427;    int AoccsCwdRv5391700 = -960403223;    int AoccsCwdRv80170845 = -941600903;    int AoccsCwdRv39178778 = 79847805;    int AoccsCwdRv16456752 = -661690880;    int AoccsCwdRv93208027 = -958269147;    int AoccsCwdRv75822197 = -648765188;    int AoccsCwdRv28230820 = -561800872;    int AoccsCwdRv32026580 = -95266727;    int AoccsCwdRv31641098 = -338347717;    int AoccsCwdRv80182357 = -481744276;    int AoccsCwdRv7513221 = -759519527;    int AoccsCwdRv64218697 = -652686083;    int AoccsCwdRv62151577 = -987868590;    int AoccsCwdRv58851123 = -128340211;    int AoccsCwdRv87012060 = -701516401;    int AoccsCwdRv19292176 = -639414427;    int AoccsCwdRv57938269 = -990897776;    int AoccsCwdRv84083136 = -906504707;    int AoccsCwdRv9442977 = -703413989;    int AoccsCwdRv83818539 = -909955782;    int AoccsCwdRv69018286 = -139669695;    int AoccsCwdRv93394683 = -9051420;    int AoccsCwdRv39042140 = -56992422;    int AoccsCwdRv60094610 = -1294722;    int AoccsCwdRv26068624 = -158576986;    int AoccsCwdRv38985853 = -359813308;    int AoccsCwdRv30016211 = -893592060;     AoccsCwdRv87393431 = AoccsCwdRv75254561;     AoccsCwdRv75254561 = AoccsCwdRv60860430;     AoccsCwdRv60860430 = AoccsCwdRv57399693;     AoccsCwdRv57399693 = AoccsCwdRv6036499;     AoccsCwdRv6036499 = AoccsCwdRv87716950;     AoccsCwdRv87716950 = AoccsCwdRv82108883;     AoccsCwdRv82108883 = AoccsCwdRv53733632;     AoccsCwdRv53733632 = AoccsCwdRv11734095;     AoccsCwdRv11734095 = AoccsCwdRv95482480;     AoccsCwdRv95482480 = AoccsCwdRv80113052;     AoccsCwdRv80113052 = AoccsCwdRv71962401;     AoccsCwdRv71962401 = AoccsCwdRv849018;     AoccsCwdRv849018 = AoccsCwdRv22201997;     AoccsCwdRv22201997 = AoccsCwdRv85293721;     AoccsCwdRv85293721 = AoccsCwdRv86399607;     AoccsCwdRv86399607 = AoccsCwdRv39836645;     AoccsCwdRv39836645 = AoccsCwdRv86195596;     AoccsCwdRv86195596 = AoccsCwdRv33687008;     AoccsCwdRv33687008 = AoccsCwdRv28882770;     AoccsCwdRv28882770 = AoccsCwdRv88899905;     AoccsCwdRv88899905 = AoccsCwdRv21666368;     AoccsCwdRv21666368 = AoccsCwdRv6244010;     AoccsCwdRv6244010 = AoccsCwdRv81680262;     AoccsCwdRv81680262 = AoccsCwdRv16859883;     AoccsCwdRv16859883 = AoccsCwdRv92577928;     AoccsCwdRv92577928 = AoccsCwdRv52816325;     AoccsCwdRv52816325 = AoccsCwdRv72439098;     AoccsCwdRv72439098 = AoccsCwdRv64107114;     AoccsCwdRv64107114 = AoccsCwdRv32593103;     AoccsCwdRv32593103 = AoccsCwdRv21432352;     AoccsCwdRv21432352 = AoccsCwdRv4271198;     AoccsCwdRv4271198 = AoccsCwdRv93006787;     AoccsCwdRv93006787 = AoccsCwdRv28559730;     AoccsCwdRv28559730 = AoccsCwdRv23665333;     AoccsCwdRv23665333 = AoccsCwdRv53093688;     AoccsCwdRv53093688 = AoccsCwdRv88623144;     AoccsCwdRv88623144 = AoccsCwdRv24358350;     AoccsCwdRv24358350 = AoccsCwdRv82476857;     AoccsCwdRv82476857 = AoccsCwdRv28295309;     AoccsCwdRv28295309 = AoccsCwdRv48711925;     AoccsCwdRv48711925 = AoccsCwdRv49721127;     AoccsCwdRv49721127 = AoccsCwdRv5209617;     AoccsCwdRv5209617 = AoccsCwdRv13035983;     AoccsCwdRv13035983 = AoccsCwdRv5858065;     AoccsCwdRv5858065 = AoccsCwdRv88629062;     AoccsCwdRv88629062 = AoccsCwdRv60551348;     AoccsCwdRv60551348 = AoccsCwdRv21175228;     AoccsCwdRv21175228 = AoccsCwdRv92256741;     AoccsCwdRv92256741 = AoccsCwdRv56593893;     AoccsCwdRv56593893 = AoccsCwdRv68374405;     AoccsCwdRv68374405 = AoccsCwdRv59280774;     AoccsCwdRv59280774 = AoccsCwdRv45420074;     AoccsCwdRv45420074 = AoccsCwdRv5994728;     AoccsCwdRv5994728 = AoccsCwdRv9267555;     AoccsCwdRv9267555 = AoccsCwdRv65727063;     AoccsCwdRv65727063 = AoccsCwdRv69010551;     AoccsCwdRv69010551 = AoccsCwdRv79180167;     AoccsCwdRv79180167 = AoccsCwdRv40539811;     AoccsCwdRv40539811 = AoccsCwdRv13458571;     AoccsCwdRv13458571 = AoccsCwdRv34900626;     AoccsCwdRv34900626 = AoccsCwdRv9669785;     AoccsCwdRv9669785 = AoccsCwdRv89626517;     AoccsCwdRv89626517 = AoccsCwdRv79140992;     AoccsCwdRv79140992 = AoccsCwdRv74050129;     AoccsCwdRv74050129 = AoccsCwdRv75841854;     AoccsCwdRv75841854 = AoccsCwdRv78955613;     AoccsCwdRv78955613 = AoccsCwdRv72289288;     AoccsCwdRv72289288 = AoccsCwdRv98536663;     AoccsCwdRv98536663 = AoccsCwdRv32200033;     AoccsCwdRv32200033 = AoccsCwdRv97776462;     AoccsCwdRv97776462 = AoccsCwdRv15478296;     AoccsCwdRv15478296 = AoccsCwdRv3718740;     AoccsCwdRv3718740 = AoccsCwdRv5391700;     AoccsCwdRv5391700 = AoccsCwdRv80170845;     AoccsCwdRv80170845 = AoccsCwdRv39178778;     AoccsCwdRv39178778 = AoccsCwdRv16456752;     AoccsCwdRv16456752 = AoccsCwdRv93208027;     AoccsCwdRv93208027 = AoccsCwdRv75822197;     AoccsCwdRv75822197 = AoccsCwdRv28230820;     AoccsCwdRv28230820 = AoccsCwdRv32026580;     AoccsCwdRv32026580 = AoccsCwdRv31641098;     AoccsCwdRv31641098 = AoccsCwdRv80182357;     AoccsCwdRv80182357 = AoccsCwdRv7513221;     AoccsCwdRv7513221 = AoccsCwdRv64218697;     AoccsCwdRv64218697 = AoccsCwdRv62151577;     AoccsCwdRv62151577 = AoccsCwdRv58851123;     AoccsCwdRv58851123 = AoccsCwdRv87012060;     AoccsCwdRv87012060 = AoccsCwdRv19292176;     AoccsCwdRv19292176 = AoccsCwdRv57938269;     AoccsCwdRv57938269 = AoccsCwdRv84083136;     AoccsCwdRv84083136 = AoccsCwdRv9442977;     AoccsCwdRv9442977 = AoccsCwdRv83818539;     AoccsCwdRv83818539 = AoccsCwdRv69018286;     AoccsCwdRv69018286 = AoccsCwdRv93394683;     AoccsCwdRv93394683 = AoccsCwdRv39042140;     AoccsCwdRv39042140 = AoccsCwdRv60094610;     AoccsCwdRv60094610 = AoccsCwdRv26068624;     AoccsCwdRv26068624 = AoccsCwdRv38985853;     AoccsCwdRv38985853 = AoccsCwdRv30016211;     AoccsCwdRv30016211 = AoccsCwdRv87393431;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void pVeKcLDzHt26091914() {     int hJkRlLeDnq58317839 = -853621718;    int hJkRlLeDnq63226402 = -847625425;    int hJkRlLeDnq34320171 = -125181336;    int hJkRlLeDnq16766543 = -161137525;    int hJkRlLeDnq9766935 = -95850635;    int hJkRlLeDnq25357263 = -143405774;    int hJkRlLeDnq34876360 = -373732624;    int hJkRlLeDnq8782703 = -143978837;    int hJkRlLeDnq32029141 = -878954041;    int hJkRlLeDnq28648391 = 78409417;    int hJkRlLeDnq36155916 = -102569954;    int hJkRlLeDnq58807021 = -158935415;    int hJkRlLeDnq45465394 = -945428865;    int hJkRlLeDnq74639502 = -472174874;    int hJkRlLeDnq56510645 = -48385285;    int hJkRlLeDnq78917661 = 97027249;    int hJkRlLeDnq95655757 = -809972835;    int hJkRlLeDnq62715447 = -946538250;    int hJkRlLeDnq14359399 = -850999331;    int hJkRlLeDnq44483444 = -10213611;    int hJkRlLeDnq35404207 = -417184968;    int hJkRlLeDnq50213151 = -751901623;    int hJkRlLeDnq10416373 = -333338288;    int hJkRlLeDnq25616044 = -594146346;    int hJkRlLeDnq4453096 = -91990680;    int hJkRlLeDnq97400194 = -597279338;    int hJkRlLeDnq3435892 = 36488750;    int hJkRlLeDnq18492424 = -348872378;    int hJkRlLeDnq44765096 = -270152115;    int hJkRlLeDnq67570054 = -941167212;    int hJkRlLeDnq25186136 = -846941890;    int hJkRlLeDnq95193377 = -259851663;    int hJkRlLeDnq31990386 = -496803824;    int hJkRlLeDnq87773745 = -748840040;    int hJkRlLeDnq72924202 = -438755495;    int hJkRlLeDnq13387186 = -867955148;    int hJkRlLeDnq75505409 = -530710832;    int hJkRlLeDnq56871477 = -748666341;    int hJkRlLeDnq7944384 = -153417444;    int hJkRlLeDnq84965480 = -196544939;    int hJkRlLeDnq27759473 = -377968958;    int hJkRlLeDnq42753720 = -888248269;    int hJkRlLeDnq23693013 = 25838644;    int hJkRlLeDnq34066761 = 89537008;    int hJkRlLeDnq21872930 = -84415394;    int hJkRlLeDnq40123751 = -74715859;    int hJkRlLeDnq71543883 = -319757026;    int hJkRlLeDnq81244270 = 62313204;    int hJkRlLeDnq19383684 = -900260641;    int hJkRlLeDnq85607649 = -303542044;    int hJkRlLeDnq16656483 = 35103730;    int hJkRlLeDnq11704462 = -187364506;    int hJkRlLeDnq7214024 = -497427485;    int hJkRlLeDnq27728150 = -553136832;    int hJkRlLeDnq90687706 = -692800733;    int hJkRlLeDnq8104688 = -1720096;    int hJkRlLeDnq52810029 = -414287138;    int hJkRlLeDnq8704127 = -531034991;    int hJkRlLeDnq12313447 = 30853154;    int hJkRlLeDnq12366741 = -498571298;    int hJkRlLeDnq21921371 = -79894524;    int hJkRlLeDnq16383937 = 75139753;    int hJkRlLeDnq64017606 = -873826722;    int hJkRlLeDnq64459087 = -937786830;    int hJkRlLeDnq3462256 = -74648694;    int hJkRlLeDnq40962539 = -842718292;    int hJkRlLeDnq26816635 = -662131592;    int hJkRlLeDnq57691649 = -96588825;    int hJkRlLeDnq1715301 = 66580621;    int hJkRlLeDnq43123459 = -180430138;    int hJkRlLeDnq3412253 = -372261920;    int hJkRlLeDnq38784280 = 38693505;    int hJkRlLeDnq54771063 = -693120806;    int hJkRlLeDnq29393918 = -554454393;    int hJkRlLeDnq16723972 = -632244654;    int hJkRlLeDnq92650487 = -528936700;    int hJkRlLeDnq26520139 = -677740267;    int hJkRlLeDnq76349612 = -322875297;    int hJkRlLeDnq3743115 = -409730953;    int hJkRlLeDnq64329344 = 82725179;    int hJkRlLeDnq25856312 = -177522313;    int hJkRlLeDnq22191621 = 74175545;    int hJkRlLeDnq99108739 = -448611737;    int hJkRlLeDnq59157447 = -966610072;    int hJkRlLeDnq50913572 = -876270943;    int hJkRlLeDnq13481675 = -559577385;    int hJkRlLeDnq87979354 = -762424178;    int hJkRlLeDnq4262237 = -943666992;    int hJkRlLeDnq97086038 = 43960693;    int hJkRlLeDnq64819514 = -337035399;    int hJkRlLeDnq60577157 = -353668011;    int hJkRlLeDnq66801283 = -999675841;    int hJkRlLeDnq44558030 = -679519496;    int hJkRlLeDnq95577643 = -654846147;    int hJkRlLeDnq63044110 = -16650415;    int hJkRlLeDnq11375536 = -353108711;    int hJkRlLeDnq78736113 = 85578452;    int hJkRlLeDnq59233926 = -36374527;    int hJkRlLeDnq30604505 = -835814299;    int hJkRlLeDnq80910391 = -853621718;     hJkRlLeDnq58317839 = hJkRlLeDnq63226402;     hJkRlLeDnq63226402 = hJkRlLeDnq34320171;     hJkRlLeDnq34320171 = hJkRlLeDnq16766543;     hJkRlLeDnq16766543 = hJkRlLeDnq9766935;     hJkRlLeDnq9766935 = hJkRlLeDnq25357263;     hJkRlLeDnq25357263 = hJkRlLeDnq34876360;     hJkRlLeDnq34876360 = hJkRlLeDnq8782703;     hJkRlLeDnq8782703 = hJkRlLeDnq32029141;     hJkRlLeDnq32029141 = hJkRlLeDnq28648391;     hJkRlLeDnq28648391 = hJkRlLeDnq36155916;     hJkRlLeDnq36155916 = hJkRlLeDnq58807021;     hJkRlLeDnq58807021 = hJkRlLeDnq45465394;     hJkRlLeDnq45465394 = hJkRlLeDnq74639502;     hJkRlLeDnq74639502 = hJkRlLeDnq56510645;     hJkRlLeDnq56510645 = hJkRlLeDnq78917661;     hJkRlLeDnq78917661 = hJkRlLeDnq95655757;     hJkRlLeDnq95655757 = hJkRlLeDnq62715447;     hJkRlLeDnq62715447 = hJkRlLeDnq14359399;     hJkRlLeDnq14359399 = hJkRlLeDnq44483444;     hJkRlLeDnq44483444 = hJkRlLeDnq35404207;     hJkRlLeDnq35404207 = hJkRlLeDnq50213151;     hJkRlLeDnq50213151 = hJkRlLeDnq10416373;     hJkRlLeDnq10416373 = hJkRlLeDnq25616044;     hJkRlLeDnq25616044 = hJkRlLeDnq4453096;     hJkRlLeDnq4453096 = hJkRlLeDnq97400194;     hJkRlLeDnq97400194 = hJkRlLeDnq3435892;     hJkRlLeDnq3435892 = hJkRlLeDnq18492424;     hJkRlLeDnq18492424 = hJkRlLeDnq44765096;     hJkRlLeDnq44765096 = hJkRlLeDnq67570054;     hJkRlLeDnq67570054 = hJkRlLeDnq25186136;     hJkRlLeDnq25186136 = hJkRlLeDnq95193377;     hJkRlLeDnq95193377 = hJkRlLeDnq31990386;     hJkRlLeDnq31990386 = hJkRlLeDnq87773745;     hJkRlLeDnq87773745 = hJkRlLeDnq72924202;     hJkRlLeDnq72924202 = hJkRlLeDnq13387186;     hJkRlLeDnq13387186 = hJkRlLeDnq75505409;     hJkRlLeDnq75505409 = hJkRlLeDnq56871477;     hJkRlLeDnq56871477 = hJkRlLeDnq7944384;     hJkRlLeDnq7944384 = hJkRlLeDnq84965480;     hJkRlLeDnq84965480 = hJkRlLeDnq27759473;     hJkRlLeDnq27759473 = hJkRlLeDnq42753720;     hJkRlLeDnq42753720 = hJkRlLeDnq23693013;     hJkRlLeDnq23693013 = hJkRlLeDnq34066761;     hJkRlLeDnq34066761 = hJkRlLeDnq21872930;     hJkRlLeDnq21872930 = hJkRlLeDnq40123751;     hJkRlLeDnq40123751 = hJkRlLeDnq71543883;     hJkRlLeDnq71543883 = hJkRlLeDnq81244270;     hJkRlLeDnq81244270 = hJkRlLeDnq19383684;     hJkRlLeDnq19383684 = hJkRlLeDnq85607649;     hJkRlLeDnq85607649 = hJkRlLeDnq16656483;     hJkRlLeDnq16656483 = hJkRlLeDnq11704462;     hJkRlLeDnq11704462 = hJkRlLeDnq7214024;     hJkRlLeDnq7214024 = hJkRlLeDnq27728150;     hJkRlLeDnq27728150 = hJkRlLeDnq90687706;     hJkRlLeDnq90687706 = hJkRlLeDnq8104688;     hJkRlLeDnq8104688 = hJkRlLeDnq52810029;     hJkRlLeDnq52810029 = hJkRlLeDnq8704127;     hJkRlLeDnq8704127 = hJkRlLeDnq12313447;     hJkRlLeDnq12313447 = hJkRlLeDnq12366741;     hJkRlLeDnq12366741 = hJkRlLeDnq21921371;     hJkRlLeDnq21921371 = hJkRlLeDnq16383937;     hJkRlLeDnq16383937 = hJkRlLeDnq64017606;     hJkRlLeDnq64017606 = hJkRlLeDnq64459087;     hJkRlLeDnq64459087 = hJkRlLeDnq3462256;     hJkRlLeDnq3462256 = hJkRlLeDnq40962539;     hJkRlLeDnq40962539 = hJkRlLeDnq26816635;     hJkRlLeDnq26816635 = hJkRlLeDnq57691649;     hJkRlLeDnq57691649 = hJkRlLeDnq1715301;     hJkRlLeDnq1715301 = hJkRlLeDnq43123459;     hJkRlLeDnq43123459 = hJkRlLeDnq3412253;     hJkRlLeDnq3412253 = hJkRlLeDnq38784280;     hJkRlLeDnq38784280 = hJkRlLeDnq54771063;     hJkRlLeDnq54771063 = hJkRlLeDnq29393918;     hJkRlLeDnq29393918 = hJkRlLeDnq16723972;     hJkRlLeDnq16723972 = hJkRlLeDnq92650487;     hJkRlLeDnq92650487 = hJkRlLeDnq26520139;     hJkRlLeDnq26520139 = hJkRlLeDnq76349612;     hJkRlLeDnq76349612 = hJkRlLeDnq3743115;     hJkRlLeDnq3743115 = hJkRlLeDnq64329344;     hJkRlLeDnq64329344 = hJkRlLeDnq25856312;     hJkRlLeDnq25856312 = hJkRlLeDnq22191621;     hJkRlLeDnq22191621 = hJkRlLeDnq99108739;     hJkRlLeDnq99108739 = hJkRlLeDnq59157447;     hJkRlLeDnq59157447 = hJkRlLeDnq50913572;     hJkRlLeDnq50913572 = hJkRlLeDnq13481675;     hJkRlLeDnq13481675 = hJkRlLeDnq87979354;     hJkRlLeDnq87979354 = hJkRlLeDnq4262237;     hJkRlLeDnq4262237 = hJkRlLeDnq97086038;     hJkRlLeDnq97086038 = hJkRlLeDnq64819514;     hJkRlLeDnq64819514 = hJkRlLeDnq60577157;     hJkRlLeDnq60577157 = hJkRlLeDnq66801283;     hJkRlLeDnq66801283 = hJkRlLeDnq44558030;     hJkRlLeDnq44558030 = hJkRlLeDnq95577643;     hJkRlLeDnq95577643 = hJkRlLeDnq63044110;     hJkRlLeDnq63044110 = hJkRlLeDnq11375536;     hJkRlLeDnq11375536 = hJkRlLeDnq78736113;     hJkRlLeDnq78736113 = hJkRlLeDnq59233926;     hJkRlLeDnq59233926 = hJkRlLeDnq30604505;     hJkRlLeDnq30604505 = hJkRlLeDnq80910391;     hJkRlLeDnq80910391 = hJkRlLeDnq58317839;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void aflxJevWxY62736888() {     int SsPlfIyrRZ80704957 = -488025681;    int SsPlfIyrRZ47573902 = -796168480;    int SsPlfIyrRZ63089450 = -364835180;    int SsPlfIyrRZ31773231 = -167545057;    int SsPlfIyrRZ7941190 = -686907636;    int SsPlfIyrRZ40240380 = -4014152;    int SsPlfIyrRZ27032099 = -195719931;    int SsPlfIyrRZ84416561 = -614575481;    int SsPlfIyrRZ29192273 = -763150080;    int SsPlfIyrRZ20411976 = -764331916;    int SsPlfIyrRZ73697776 = -99194355;    int SsPlfIyrRZ14709970 = -409680709;    int SsPlfIyrRZ12473575 = -464146184;    int SsPlfIyrRZ17254255 = -999883631;    int SsPlfIyrRZ93245922 = -775862998;    int SsPlfIyrRZ23173575 = -284640294;    int SsPlfIyrRZ45479109 = 12747345;    int SsPlfIyrRZ68691863 = -298280941;    int SsPlfIyrRZ55641029 = -986101456;    int SsPlfIyrRZ22999727 = -262848064;    int SsPlfIyrRZ36287314 = -408672277;    int SsPlfIyrRZ14028370 = -156667936;    int SsPlfIyrRZ13709696 = -509418880;    int SsPlfIyrRZ52115831 = -58139203;    int SsPlfIyrRZ39993343 = -813549804;    int SsPlfIyrRZ85703189 = 58826438;    int SsPlfIyrRZ50525312 = -821097743;    int SsPlfIyrRZ24403874 = -137326831;    int SsPlfIyrRZ51657657 = -614409235;    int SsPlfIyrRZ76727233 = -861463079;    int SsPlfIyrRZ69476941 = -928258042;    int SsPlfIyrRZ52734568 = -911923017;    int SsPlfIyrRZ13029057 = 73852682;    int SsPlfIyrRZ47162433 = 27033110;    int SsPlfIyrRZ49153567 = -502511917;    int SsPlfIyrRZ55080055 = -83350524;    int SsPlfIyrRZ68945122 = -263658783;    int SsPlfIyrRZ10497578 = -616291813;    int SsPlfIyrRZ56252515 = -554463476;    int SsPlfIyrRZ5151196 = -332768968;    int SsPlfIyrRZ56516843 = -881146624;    int SsPlfIyrRZ31262111 = -646156960;    int SsPlfIyrRZ29243205 = -961691940;    int SsPlfIyrRZ33510880 = 92173359;    int SsPlfIyrRZ89856196 = -993558871;    int SsPlfIyrRZ48224033 = -256944954;    int SsPlfIyrRZ83841280 = -898167279;    int SsPlfIyrRZ25842945 = -794221786;    int SsPlfIyrRZ13843589 = -849977339;    int SsPlfIyrRZ82691394 = -445562303;    int SsPlfIyrRZ25525699 = -319972547;    int SsPlfIyrRZ85555718 = -618183788;    int SsPlfIyrRZ85528426 = -169338715;    int SsPlfIyrRZ88014694 = -828817641;    int SsPlfIyrRZ26449574 = -833504849;    int SsPlfIyrRZ66676587 = -231357746;    int SsPlfIyrRZ33864206 = -186749600;    int SsPlfIyrRZ10973619 = -206695978;    int SsPlfIyrRZ91779888 = -353995253;    int SsPlfIyrRZ22238000 = -645734075;    int SsPlfIyrRZ89715067 = -182916409;    int SsPlfIyrRZ2628226 = 41606900;    int SsPlfIyrRZ32758905 = 99833753;    int SsPlfIyrRZ52465039 = -901687002;    int SsPlfIyrRZ50935035 = -836073875;    int SsPlfIyrRZ20963208 = -187271339;    int SsPlfIyrRZ1680914 = -383533391;    int SsPlfIyrRZ65311142 = -391179295;    int SsPlfIyrRZ68100688 = -397371714;    int SsPlfIyrRZ38165867 = -592512474;    int SsPlfIyrRZ54228452 = 79018489;    int SsPlfIyrRZ34981531 = -370960843;    int SsPlfIyrRZ12439349 = -743817465;    int SsPlfIyrRZ50489834 = -553332489;    int SsPlfIyrRZ66482884 = -381701441;    int SsPlfIyrRZ5025203 = -762515317;    int SsPlfIyrRZ84785164 = -194975997;    int SsPlfIyrRZ80198816 = -501592240;    int SsPlfIyrRZ62259635 = -64580332;    int SsPlfIyrRZ91769309 = -456604851;    int SsPlfIyrRZ1861909 = -43006284;    int SsPlfIyrRZ24682367 = 73124043;    int SsPlfIyrRZ10560285 = -287349493;    int SsPlfIyrRZ68966262 = -68846932;    int SsPlfIyrRZ51201535 = -441490532;    int SsPlfIyrRZ83921222 = -210074255;    int SsPlfIyrRZ67206142 = -642584303;    int SsPlfIyrRZ25014362 = -97329678;    int SsPlfIyrRZ20712859 = -139462042;    int SsPlfIyrRZ82476979 = -171154172;    int SsPlfIyrRZ21215849 = -896600924;    int SsPlfIyrRZ57971503 = 43037194;    int SsPlfIyrRZ18717690 = -162296561;    int SsPlfIyrRZ34014515 = -908729402;    int SsPlfIyrRZ15436128 = -49852559;    int SsPlfIyrRZ53888618 = -822753525;    int SsPlfIyrRZ98503206 = -645990714;    int SsPlfIyrRZ76778166 = 39995061;    int SsPlfIyrRZ82575845 = -71752767;    int SsPlfIyrRZ68892988 = -488025681;     SsPlfIyrRZ80704957 = SsPlfIyrRZ47573902;     SsPlfIyrRZ47573902 = SsPlfIyrRZ63089450;     SsPlfIyrRZ63089450 = SsPlfIyrRZ31773231;     SsPlfIyrRZ31773231 = SsPlfIyrRZ7941190;     SsPlfIyrRZ7941190 = SsPlfIyrRZ40240380;     SsPlfIyrRZ40240380 = SsPlfIyrRZ27032099;     SsPlfIyrRZ27032099 = SsPlfIyrRZ84416561;     SsPlfIyrRZ84416561 = SsPlfIyrRZ29192273;     SsPlfIyrRZ29192273 = SsPlfIyrRZ20411976;     SsPlfIyrRZ20411976 = SsPlfIyrRZ73697776;     SsPlfIyrRZ73697776 = SsPlfIyrRZ14709970;     SsPlfIyrRZ14709970 = SsPlfIyrRZ12473575;     SsPlfIyrRZ12473575 = SsPlfIyrRZ17254255;     SsPlfIyrRZ17254255 = SsPlfIyrRZ93245922;     SsPlfIyrRZ93245922 = SsPlfIyrRZ23173575;     SsPlfIyrRZ23173575 = SsPlfIyrRZ45479109;     SsPlfIyrRZ45479109 = SsPlfIyrRZ68691863;     SsPlfIyrRZ68691863 = SsPlfIyrRZ55641029;     SsPlfIyrRZ55641029 = SsPlfIyrRZ22999727;     SsPlfIyrRZ22999727 = SsPlfIyrRZ36287314;     SsPlfIyrRZ36287314 = SsPlfIyrRZ14028370;     SsPlfIyrRZ14028370 = SsPlfIyrRZ13709696;     SsPlfIyrRZ13709696 = SsPlfIyrRZ52115831;     SsPlfIyrRZ52115831 = SsPlfIyrRZ39993343;     SsPlfIyrRZ39993343 = SsPlfIyrRZ85703189;     SsPlfIyrRZ85703189 = SsPlfIyrRZ50525312;     SsPlfIyrRZ50525312 = SsPlfIyrRZ24403874;     SsPlfIyrRZ24403874 = SsPlfIyrRZ51657657;     SsPlfIyrRZ51657657 = SsPlfIyrRZ76727233;     SsPlfIyrRZ76727233 = SsPlfIyrRZ69476941;     SsPlfIyrRZ69476941 = SsPlfIyrRZ52734568;     SsPlfIyrRZ52734568 = SsPlfIyrRZ13029057;     SsPlfIyrRZ13029057 = SsPlfIyrRZ47162433;     SsPlfIyrRZ47162433 = SsPlfIyrRZ49153567;     SsPlfIyrRZ49153567 = SsPlfIyrRZ55080055;     SsPlfIyrRZ55080055 = SsPlfIyrRZ68945122;     SsPlfIyrRZ68945122 = SsPlfIyrRZ10497578;     SsPlfIyrRZ10497578 = SsPlfIyrRZ56252515;     SsPlfIyrRZ56252515 = SsPlfIyrRZ5151196;     SsPlfIyrRZ5151196 = SsPlfIyrRZ56516843;     SsPlfIyrRZ56516843 = SsPlfIyrRZ31262111;     SsPlfIyrRZ31262111 = SsPlfIyrRZ29243205;     SsPlfIyrRZ29243205 = SsPlfIyrRZ33510880;     SsPlfIyrRZ33510880 = SsPlfIyrRZ89856196;     SsPlfIyrRZ89856196 = SsPlfIyrRZ48224033;     SsPlfIyrRZ48224033 = SsPlfIyrRZ83841280;     SsPlfIyrRZ83841280 = SsPlfIyrRZ25842945;     SsPlfIyrRZ25842945 = SsPlfIyrRZ13843589;     SsPlfIyrRZ13843589 = SsPlfIyrRZ82691394;     SsPlfIyrRZ82691394 = SsPlfIyrRZ25525699;     SsPlfIyrRZ25525699 = SsPlfIyrRZ85555718;     SsPlfIyrRZ85555718 = SsPlfIyrRZ85528426;     SsPlfIyrRZ85528426 = SsPlfIyrRZ88014694;     SsPlfIyrRZ88014694 = SsPlfIyrRZ26449574;     SsPlfIyrRZ26449574 = SsPlfIyrRZ66676587;     SsPlfIyrRZ66676587 = SsPlfIyrRZ33864206;     SsPlfIyrRZ33864206 = SsPlfIyrRZ10973619;     SsPlfIyrRZ10973619 = SsPlfIyrRZ91779888;     SsPlfIyrRZ91779888 = SsPlfIyrRZ22238000;     SsPlfIyrRZ22238000 = SsPlfIyrRZ89715067;     SsPlfIyrRZ89715067 = SsPlfIyrRZ2628226;     SsPlfIyrRZ2628226 = SsPlfIyrRZ32758905;     SsPlfIyrRZ32758905 = SsPlfIyrRZ52465039;     SsPlfIyrRZ52465039 = SsPlfIyrRZ50935035;     SsPlfIyrRZ50935035 = SsPlfIyrRZ20963208;     SsPlfIyrRZ20963208 = SsPlfIyrRZ1680914;     SsPlfIyrRZ1680914 = SsPlfIyrRZ65311142;     SsPlfIyrRZ65311142 = SsPlfIyrRZ68100688;     SsPlfIyrRZ68100688 = SsPlfIyrRZ38165867;     SsPlfIyrRZ38165867 = SsPlfIyrRZ54228452;     SsPlfIyrRZ54228452 = SsPlfIyrRZ34981531;     SsPlfIyrRZ34981531 = SsPlfIyrRZ12439349;     SsPlfIyrRZ12439349 = SsPlfIyrRZ50489834;     SsPlfIyrRZ50489834 = SsPlfIyrRZ66482884;     SsPlfIyrRZ66482884 = SsPlfIyrRZ5025203;     SsPlfIyrRZ5025203 = SsPlfIyrRZ84785164;     SsPlfIyrRZ84785164 = SsPlfIyrRZ80198816;     SsPlfIyrRZ80198816 = SsPlfIyrRZ62259635;     SsPlfIyrRZ62259635 = SsPlfIyrRZ91769309;     SsPlfIyrRZ91769309 = SsPlfIyrRZ1861909;     SsPlfIyrRZ1861909 = SsPlfIyrRZ24682367;     SsPlfIyrRZ24682367 = SsPlfIyrRZ10560285;     SsPlfIyrRZ10560285 = SsPlfIyrRZ68966262;     SsPlfIyrRZ68966262 = SsPlfIyrRZ51201535;     SsPlfIyrRZ51201535 = SsPlfIyrRZ83921222;     SsPlfIyrRZ83921222 = SsPlfIyrRZ67206142;     SsPlfIyrRZ67206142 = SsPlfIyrRZ25014362;     SsPlfIyrRZ25014362 = SsPlfIyrRZ20712859;     SsPlfIyrRZ20712859 = SsPlfIyrRZ82476979;     SsPlfIyrRZ82476979 = SsPlfIyrRZ21215849;     SsPlfIyrRZ21215849 = SsPlfIyrRZ57971503;     SsPlfIyrRZ57971503 = SsPlfIyrRZ18717690;     SsPlfIyrRZ18717690 = SsPlfIyrRZ34014515;     SsPlfIyrRZ34014515 = SsPlfIyrRZ15436128;     SsPlfIyrRZ15436128 = SsPlfIyrRZ53888618;     SsPlfIyrRZ53888618 = SsPlfIyrRZ98503206;     SsPlfIyrRZ98503206 = SsPlfIyrRZ76778166;     SsPlfIyrRZ76778166 = SsPlfIyrRZ82575845;     SsPlfIyrRZ82575845 = SsPlfIyrRZ68892988;     SsPlfIyrRZ68892988 = SsPlfIyrRZ80704957;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void mxPWoApjOj16942638() {     int ZVlNfpHTal23459675 = -900615495;    int ZVlNfpHTal23798151 = -844031514;    int ZVlNfpHTal5634947 = -114847482;    int ZVlNfpHTal41165400 = -143414507;    int ZVlNfpHTal60755829 = -271556776;    int ZVlNfpHTal58392216 = -116529274;    int ZVlNfpHTal98135990 = -888282472;    int ZVlNfpHTal89810698 = -26825646;    int ZVlNfpHTal92585753 = -994904655;    int ZVlNfpHTal19061720 = 43891151;    int ZVlNfpHTal75256152 = 99844646;    int ZVlNfpHTal99871876 = -286277542;    int ZVlNfpHTal262753 = -132473416;    int ZVlNfpHTal94352953 = -476092881;    int ZVlNfpHTal53255505 = -693451030;    int ZVlNfpHTal95456670 = -74839835;    int ZVlNfpHTal24931331 = -182893697;    int ZVlNfpHTal3986351 = -848446846;    int ZVlNfpHTal40415306 = -851903856;    int ZVlNfpHTal79617839 = -780160237;    int ZVlNfpHTal40359121 = -656751016;    int ZVlNfpHTal84106799 = -628209951;    int ZVlNfpHTal81255467 = -783055459;    int ZVlNfpHTal28766600 = -107816101;    int ZVlNfpHTal90963860 = -637356004;    int ZVlNfpHTal34383713 = -402049365;    int ZVlNfpHTal11404505 = -383670715;    int ZVlNfpHTal61782618 = -621143689;    int ZVlNfpHTal14364494 = -250886549;    int ZVlNfpHTal87408925 = -936971023;    int ZVlNfpHTal82630142 = 83013014;    int ZVlNfpHTal81643251 = 97844287;    int ZVlNfpHTal20516591 = -884568670;    int ZVlNfpHTal78562019 = -330640246;    int ZVlNfpHTal26299101 = 28925310;    int ZVlNfpHTal31415276 = -72424187;    int ZVlNfpHTal8982935 = -93447859;    int ZVlNfpHTal9551468 = -73804705;    int ZVlNfpHTal47958492 = 49911877;    int ZVlNfpHTal9650897 = -874621767;    int ZVlNfpHTal5120653 = -930809939;    int ZVlNfpHTal58674798 = -186681434;    int ZVlNfpHTal44739800 = -503977255;    int ZVlNfpHTal3596644 = -922127633;    int ZVlNfpHTal30764307 = -43436170;    int ZVlNfpHTal88390240 = -736123940;    int ZVlNfpHTal35879686 = -414266120;    int ZVlNfpHTal48522263 = -871057910;    int ZVlNfpHTal99711637 = 30901166;    int ZVlNfpHTal52695848 = -135865125;    int ZVlNfpHTal95695383 = 39333779;    int ZVlNfpHTal66183998 = -236038628;    int ZVlNfpHTal19234805 = -712903444;    int ZVlNfpHTal74960400 = -481024035;    int ZVlNfpHTal76583517 = -934583515;    int ZVlNfpHTal39352876 = -172405544;    int ZVlNfpHTal42542684 = 39023944;    int ZVlNfpHTal76868346 = 92968619;    int ZVlNfpHTal50201540 = -506058504;    int ZVlNfpHTal26372116 = -869507411;    int ZVlNfpHTal46987711 = -732858560;    int ZVlNfpHTal36353372 = -167138783;    int ZVlNfpHTal75446205 = -775939098;    int ZVlNfpHTal5176828 = 42066368;    int ZVlNfpHTal36431578 = 60878136;    int ZVlNfpHTal93612900 = -997999642;    int ZVlNfpHTal79355285 = -401708872;    int ZVlNfpHTal21700733 = -801833170;    int ZVlNfpHTal68053852 = -405018191;    int ZVlNfpHTal21840229 = -521026844;    int ZVlNfpHTal86473736 = -981391976;    int ZVlNfpHTal15379864 = -9088992;    int ZVlNfpHTal56027859 = -798358724;    int ZVlNfpHTal30764409 = -977282089;    int ZVlNfpHTal74497187 = -849350298;    int ZVlNfpHTal81684322 = -370069582;    int ZVlNfpHTal39366999 = -24232697;    int ZVlNfpHTal77658823 = -860927827;    int ZVlNfpHTal98002293 = 35620068;    int ZVlNfpHTal2573620 = -901232065;    int ZVlNfpHTal98504027 = -987783245;    int ZVlNfpHTal62882242 = -512612805;    int ZVlNfpHTal62070981 = -552044856;    int ZVlNfpHTal61668646 = -15021424;    int ZVlNfpHTal91713541 = -876304802;    int ZVlNfpHTal16446145 = -680948358;    int ZVlNfpHTal62408447 = -189252270;    int ZVlNfpHTal45556190 = -303544636;    int ZVlNfpHTal1978502 = -396056732;    int ZVlNfpHTal86946225 = -798669147;    int ZVlNfpHTal88872592 = -11448132;    int ZVlNfpHTal32114588 = -86416479;    int ZVlNfpHTal59349928 = -567746202;    int ZVlNfpHTal21586376 = -80580712;    int ZVlNfpHTal62663185 = -41763208;    int ZVlNfpHTal68767280 = -663671156;    int ZVlNfpHTal83228593 = -410742337;    int ZVlNfpHTal39562973 = -446043623;    int ZVlNfpHTal67165066 = -883005769;    int ZVlNfpHTal37151407 = -900615495;     ZVlNfpHTal23459675 = ZVlNfpHTal23798151;     ZVlNfpHTal23798151 = ZVlNfpHTal5634947;     ZVlNfpHTal5634947 = ZVlNfpHTal41165400;     ZVlNfpHTal41165400 = ZVlNfpHTal60755829;     ZVlNfpHTal60755829 = ZVlNfpHTal58392216;     ZVlNfpHTal58392216 = ZVlNfpHTal98135990;     ZVlNfpHTal98135990 = ZVlNfpHTal89810698;     ZVlNfpHTal89810698 = ZVlNfpHTal92585753;     ZVlNfpHTal92585753 = ZVlNfpHTal19061720;     ZVlNfpHTal19061720 = ZVlNfpHTal75256152;     ZVlNfpHTal75256152 = ZVlNfpHTal99871876;     ZVlNfpHTal99871876 = ZVlNfpHTal262753;     ZVlNfpHTal262753 = ZVlNfpHTal94352953;     ZVlNfpHTal94352953 = ZVlNfpHTal53255505;     ZVlNfpHTal53255505 = ZVlNfpHTal95456670;     ZVlNfpHTal95456670 = ZVlNfpHTal24931331;     ZVlNfpHTal24931331 = ZVlNfpHTal3986351;     ZVlNfpHTal3986351 = ZVlNfpHTal40415306;     ZVlNfpHTal40415306 = ZVlNfpHTal79617839;     ZVlNfpHTal79617839 = ZVlNfpHTal40359121;     ZVlNfpHTal40359121 = ZVlNfpHTal84106799;     ZVlNfpHTal84106799 = ZVlNfpHTal81255467;     ZVlNfpHTal81255467 = ZVlNfpHTal28766600;     ZVlNfpHTal28766600 = ZVlNfpHTal90963860;     ZVlNfpHTal90963860 = ZVlNfpHTal34383713;     ZVlNfpHTal34383713 = ZVlNfpHTal11404505;     ZVlNfpHTal11404505 = ZVlNfpHTal61782618;     ZVlNfpHTal61782618 = ZVlNfpHTal14364494;     ZVlNfpHTal14364494 = ZVlNfpHTal87408925;     ZVlNfpHTal87408925 = ZVlNfpHTal82630142;     ZVlNfpHTal82630142 = ZVlNfpHTal81643251;     ZVlNfpHTal81643251 = ZVlNfpHTal20516591;     ZVlNfpHTal20516591 = ZVlNfpHTal78562019;     ZVlNfpHTal78562019 = ZVlNfpHTal26299101;     ZVlNfpHTal26299101 = ZVlNfpHTal31415276;     ZVlNfpHTal31415276 = ZVlNfpHTal8982935;     ZVlNfpHTal8982935 = ZVlNfpHTal9551468;     ZVlNfpHTal9551468 = ZVlNfpHTal47958492;     ZVlNfpHTal47958492 = ZVlNfpHTal9650897;     ZVlNfpHTal9650897 = ZVlNfpHTal5120653;     ZVlNfpHTal5120653 = ZVlNfpHTal58674798;     ZVlNfpHTal58674798 = ZVlNfpHTal44739800;     ZVlNfpHTal44739800 = ZVlNfpHTal3596644;     ZVlNfpHTal3596644 = ZVlNfpHTal30764307;     ZVlNfpHTal30764307 = ZVlNfpHTal88390240;     ZVlNfpHTal88390240 = ZVlNfpHTal35879686;     ZVlNfpHTal35879686 = ZVlNfpHTal48522263;     ZVlNfpHTal48522263 = ZVlNfpHTal99711637;     ZVlNfpHTal99711637 = ZVlNfpHTal52695848;     ZVlNfpHTal52695848 = ZVlNfpHTal95695383;     ZVlNfpHTal95695383 = ZVlNfpHTal66183998;     ZVlNfpHTal66183998 = ZVlNfpHTal19234805;     ZVlNfpHTal19234805 = ZVlNfpHTal74960400;     ZVlNfpHTal74960400 = ZVlNfpHTal76583517;     ZVlNfpHTal76583517 = ZVlNfpHTal39352876;     ZVlNfpHTal39352876 = ZVlNfpHTal42542684;     ZVlNfpHTal42542684 = ZVlNfpHTal76868346;     ZVlNfpHTal76868346 = ZVlNfpHTal50201540;     ZVlNfpHTal50201540 = ZVlNfpHTal26372116;     ZVlNfpHTal26372116 = ZVlNfpHTal46987711;     ZVlNfpHTal46987711 = ZVlNfpHTal36353372;     ZVlNfpHTal36353372 = ZVlNfpHTal75446205;     ZVlNfpHTal75446205 = ZVlNfpHTal5176828;     ZVlNfpHTal5176828 = ZVlNfpHTal36431578;     ZVlNfpHTal36431578 = ZVlNfpHTal93612900;     ZVlNfpHTal93612900 = ZVlNfpHTal79355285;     ZVlNfpHTal79355285 = ZVlNfpHTal21700733;     ZVlNfpHTal21700733 = ZVlNfpHTal68053852;     ZVlNfpHTal68053852 = ZVlNfpHTal21840229;     ZVlNfpHTal21840229 = ZVlNfpHTal86473736;     ZVlNfpHTal86473736 = ZVlNfpHTal15379864;     ZVlNfpHTal15379864 = ZVlNfpHTal56027859;     ZVlNfpHTal56027859 = ZVlNfpHTal30764409;     ZVlNfpHTal30764409 = ZVlNfpHTal74497187;     ZVlNfpHTal74497187 = ZVlNfpHTal81684322;     ZVlNfpHTal81684322 = ZVlNfpHTal39366999;     ZVlNfpHTal39366999 = ZVlNfpHTal77658823;     ZVlNfpHTal77658823 = ZVlNfpHTal98002293;     ZVlNfpHTal98002293 = ZVlNfpHTal2573620;     ZVlNfpHTal2573620 = ZVlNfpHTal98504027;     ZVlNfpHTal98504027 = ZVlNfpHTal62882242;     ZVlNfpHTal62882242 = ZVlNfpHTal62070981;     ZVlNfpHTal62070981 = ZVlNfpHTal61668646;     ZVlNfpHTal61668646 = ZVlNfpHTal91713541;     ZVlNfpHTal91713541 = ZVlNfpHTal16446145;     ZVlNfpHTal16446145 = ZVlNfpHTal62408447;     ZVlNfpHTal62408447 = ZVlNfpHTal45556190;     ZVlNfpHTal45556190 = ZVlNfpHTal1978502;     ZVlNfpHTal1978502 = ZVlNfpHTal86946225;     ZVlNfpHTal86946225 = ZVlNfpHTal88872592;     ZVlNfpHTal88872592 = ZVlNfpHTal32114588;     ZVlNfpHTal32114588 = ZVlNfpHTal59349928;     ZVlNfpHTal59349928 = ZVlNfpHTal21586376;     ZVlNfpHTal21586376 = ZVlNfpHTal62663185;     ZVlNfpHTal62663185 = ZVlNfpHTal68767280;     ZVlNfpHTal68767280 = ZVlNfpHTal83228593;     ZVlNfpHTal83228593 = ZVlNfpHTal39562973;     ZVlNfpHTal39562973 = ZVlNfpHTal67165066;     ZVlNfpHTal67165066 = ZVlNfpHTal37151407;     ZVlNfpHTal37151407 = ZVlNfpHTal23459675;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void FfvBHmCMOD66132801() {     int vNnsHxQVGX65314963 = -948150670;    int vNnsHxQVGX61169515 = -238452565;    int vNnsHxQVGX51241217 = -6129941;    int vNnsHxQVGX74819237 = 33603698;    int vNnsHxQVGX59376599 = -388886193;    int vNnsHxQVGX98867407 = -967622421;    int vNnsHxQVGX35123608 = -53576008;    int vNnsHxQVGX30694791 = -591230257;    int vNnsHxQVGX50435681 = -507292073;    int vNnsHxQVGX88754027 = -804436228;    int vNnsHxQVGX67021275 = -329770055;    int vNnsHxQVGX59269439 = -536325540;    int vNnsHxQVGX57642592 = -75548012;    int vNnsHxQVGX45383746 = -446087363;    int vNnsHxQVGX50517243 = -619012535;    int vNnsHxQVGX5928233 = -919699311;    int vNnsHxQVGX80716796 = -631948198;    int vNnsHxQVGX34025518 = 49055745;    int vNnsHxQVGX81331815 = -264210742;    int vNnsHxQVGX38745425 = -650331146;    int vNnsHxQVGX53698300 = -154450650;    int vNnsHxQVGX62904101 = -544779478;    int vNnsHxQVGX52721797 = -156710670;    int vNnsHxQVGX72988056 = -308352950;    int vNnsHxQVGX37707596 = -553215238;    int vNnsHxQVGX27454169 = -531738807;    int vNnsHxQVGX42422056 = -906408140;    int vNnsHxQVGX18485743 = -573331422;    int vNnsHxQVGX63002011 = -609054814;    int vNnsHxQVGX81272959 = -948705584;    int vNnsHxQVGX56725033 = -963629230;    int vNnsHxQVGX78763753 = -18576086;    int vNnsHxQVGX13031365 = -869119932;    int vNnsHxQVGX96707213 = -959370303;    int vNnsHxQVGX42458802 = -97533919;    int vNnsHxQVGX9174083 = -691388172;    int vNnsHxQVGX70806097 = -353271886;    int vNnsHxQVGX4660043 = -18638993;    int vNnsHxQVGX63579948 = -815548980;    int vNnsHxQVGX51118348 = 92623107;    int vNnsHxQVGX75360080 = -843773900;    int vNnsHxQVGX59042323 = -183486351;    int vNnsHxQVGX21423234 = -339309636;    int vNnsHxQVGX86426302 = -268563942;    int vNnsHxQVGX78775984 = -129702610;    int vNnsHxQVGX50951650 = -355684456;    int vNnsHxQVGX30166964 = -906369695;    int vNnsHxQVGX93276767 = -810880215;    int vNnsHxQVGX35307133 = 67245229;    int vNnsHxQVGX90677935 = -38897729;    int vNnsHxQVGX79000169 = -722107429;    int vNnsHxQVGX56484115 = 55789231;    int vNnsHxQVGX67374354 = -60923635;    int vNnsHxQVGX8176975 = -751298480;    int vNnsHxQVGX12434502 = -849846265;    int vNnsHxQVGX2410863 = -303371192;    int vNnsHxQVGX8447719 = 18258104;    int vNnsHxQVGX78253161 = -697776991;    int vNnsHxQVGX37111641 = -413181064;    int vNnsHxQVGX31922430 = -857147386;    int vNnsHxQVGX56445351 = 38785719;    int vNnsHxQVGX16637865 = -480244587;    int vNnsHxQVGX67692779 = -982175443;    int vNnsHxQVGX69162722 = -558586489;    int vNnsHxQVGX32028995 = -840806998;    int vNnsHxQVGX88257522 = -211193970;    int vNnsHxQVGX46238074 = -667205609;    int vNnsHxQVGX60935378 = -116177710;    int vNnsHxQVGX2924945 = -248553445;    int vNnsHxQVGX41343161 = -927624364;    int vNnsHxQVGX35122135 = -466427426;    int vNnsHxQVGX76056753 = -513309206;    int vNnsHxQVGX70445570 = -135395275;    int vNnsHxQVGX30213468 = -256833849;    int vNnsHxQVGX63385344 = -806557247;    int vNnsHxQVGX94655977 = -970964299;    int vNnsHxQVGX41480867 = -105469842;    int vNnsHxQVGX66295495 = -888146728;    int vNnsHxQVGX94212071 = -78650340;    int vNnsHxQVGX86755946 = -97530782;    int vNnsHxQVGX97287205 = -625369112;    int vNnsHxQVGX49145289 = 4472075;    int vNnsHxQVGX83178609 = -540576651;    int vNnsHxQVGX72324075 = -470157085;    int vNnsHxQVGX2272790 = -126598155;    int vNnsHxQVGX240918 = -919418461;    int vNnsHxQVGX11389400 = -957652451;    int vNnsHxQVGX4854391 = -17821453;    int vNnsHxQVGX84272712 = -9524038;    int vNnsHxQVGX40047940 = -794162727;    int vNnsHxQVGX726365 = -609646276;    int vNnsHxQVGX92552935 = -655494895;    int vNnsHxQVGX67548402 = -605457929;    int vNnsHxQVGX31657518 = -958401594;    int vNnsHxQVGX94672996 = -946162612;    int vNnsHxQVGX58722216 = -263529314;    int vNnsHxQVGX91349543 = -201310909;    int vNnsHxQVGX52260511 = -780723147;    int vNnsHxQVGX54397307 = -427756945;    int vNnsHxQVGX90518462 = -948150670;     vNnsHxQVGX65314963 = vNnsHxQVGX61169515;     vNnsHxQVGX61169515 = vNnsHxQVGX51241217;     vNnsHxQVGX51241217 = vNnsHxQVGX74819237;     vNnsHxQVGX74819237 = vNnsHxQVGX59376599;     vNnsHxQVGX59376599 = vNnsHxQVGX98867407;     vNnsHxQVGX98867407 = vNnsHxQVGX35123608;     vNnsHxQVGX35123608 = vNnsHxQVGX30694791;     vNnsHxQVGX30694791 = vNnsHxQVGX50435681;     vNnsHxQVGX50435681 = vNnsHxQVGX88754027;     vNnsHxQVGX88754027 = vNnsHxQVGX67021275;     vNnsHxQVGX67021275 = vNnsHxQVGX59269439;     vNnsHxQVGX59269439 = vNnsHxQVGX57642592;     vNnsHxQVGX57642592 = vNnsHxQVGX45383746;     vNnsHxQVGX45383746 = vNnsHxQVGX50517243;     vNnsHxQVGX50517243 = vNnsHxQVGX5928233;     vNnsHxQVGX5928233 = vNnsHxQVGX80716796;     vNnsHxQVGX80716796 = vNnsHxQVGX34025518;     vNnsHxQVGX34025518 = vNnsHxQVGX81331815;     vNnsHxQVGX81331815 = vNnsHxQVGX38745425;     vNnsHxQVGX38745425 = vNnsHxQVGX53698300;     vNnsHxQVGX53698300 = vNnsHxQVGX62904101;     vNnsHxQVGX62904101 = vNnsHxQVGX52721797;     vNnsHxQVGX52721797 = vNnsHxQVGX72988056;     vNnsHxQVGX72988056 = vNnsHxQVGX37707596;     vNnsHxQVGX37707596 = vNnsHxQVGX27454169;     vNnsHxQVGX27454169 = vNnsHxQVGX42422056;     vNnsHxQVGX42422056 = vNnsHxQVGX18485743;     vNnsHxQVGX18485743 = vNnsHxQVGX63002011;     vNnsHxQVGX63002011 = vNnsHxQVGX81272959;     vNnsHxQVGX81272959 = vNnsHxQVGX56725033;     vNnsHxQVGX56725033 = vNnsHxQVGX78763753;     vNnsHxQVGX78763753 = vNnsHxQVGX13031365;     vNnsHxQVGX13031365 = vNnsHxQVGX96707213;     vNnsHxQVGX96707213 = vNnsHxQVGX42458802;     vNnsHxQVGX42458802 = vNnsHxQVGX9174083;     vNnsHxQVGX9174083 = vNnsHxQVGX70806097;     vNnsHxQVGX70806097 = vNnsHxQVGX4660043;     vNnsHxQVGX4660043 = vNnsHxQVGX63579948;     vNnsHxQVGX63579948 = vNnsHxQVGX51118348;     vNnsHxQVGX51118348 = vNnsHxQVGX75360080;     vNnsHxQVGX75360080 = vNnsHxQVGX59042323;     vNnsHxQVGX59042323 = vNnsHxQVGX21423234;     vNnsHxQVGX21423234 = vNnsHxQVGX86426302;     vNnsHxQVGX86426302 = vNnsHxQVGX78775984;     vNnsHxQVGX78775984 = vNnsHxQVGX50951650;     vNnsHxQVGX50951650 = vNnsHxQVGX30166964;     vNnsHxQVGX30166964 = vNnsHxQVGX93276767;     vNnsHxQVGX93276767 = vNnsHxQVGX35307133;     vNnsHxQVGX35307133 = vNnsHxQVGX90677935;     vNnsHxQVGX90677935 = vNnsHxQVGX79000169;     vNnsHxQVGX79000169 = vNnsHxQVGX56484115;     vNnsHxQVGX56484115 = vNnsHxQVGX67374354;     vNnsHxQVGX67374354 = vNnsHxQVGX8176975;     vNnsHxQVGX8176975 = vNnsHxQVGX12434502;     vNnsHxQVGX12434502 = vNnsHxQVGX2410863;     vNnsHxQVGX2410863 = vNnsHxQVGX8447719;     vNnsHxQVGX8447719 = vNnsHxQVGX78253161;     vNnsHxQVGX78253161 = vNnsHxQVGX37111641;     vNnsHxQVGX37111641 = vNnsHxQVGX31922430;     vNnsHxQVGX31922430 = vNnsHxQVGX56445351;     vNnsHxQVGX56445351 = vNnsHxQVGX16637865;     vNnsHxQVGX16637865 = vNnsHxQVGX67692779;     vNnsHxQVGX67692779 = vNnsHxQVGX69162722;     vNnsHxQVGX69162722 = vNnsHxQVGX32028995;     vNnsHxQVGX32028995 = vNnsHxQVGX88257522;     vNnsHxQVGX88257522 = vNnsHxQVGX46238074;     vNnsHxQVGX46238074 = vNnsHxQVGX60935378;     vNnsHxQVGX60935378 = vNnsHxQVGX2924945;     vNnsHxQVGX2924945 = vNnsHxQVGX41343161;     vNnsHxQVGX41343161 = vNnsHxQVGX35122135;     vNnsHxQVGX35122135 = vNnsHxQVGX76056753;     vNnsHxQVGX76056753 = vNnsHxQVGX70445570;     vNnsHxQVGX70445570 = vNnsHxQVGX30213468;     vNnsHxQVGX30213468 = vNnsHxQVGX63385344;     vNnsHxQVGX63385344 = vNnsHxQVGX94655977;     vNnsHxQVGX94655977 = vNnsHxQVGX41480867;     vNnsHxQVGX41480867 = vNnsHxQVGX66295495;     vNnsHxQVGX66295495 = vNnsHxQVGX94212071;     vNnsHxQVGX94212071 = vNnsHxQVGX86755946;     vNnsHxQVGX86755946 = vNnsHxQVGX97287205;     vNnsHxQVGX97287205 = vNnsHxQVGX49145289;     vNnsHxQVGX49145289 = vNnsHxQVGX83178609;     vNnsHxQVGX83178609 = vNnsHxQVGX72324075;     vNnsHxQVGX72324075 = vNnsHxQVGX2272790;     vNnsHxQVGX2272790 = vNnsHxQVGX240918;     vNnsHxQVGX240918 = vNnsHxQVGX11389400;     vNnsHxQVGX11389400 = vNnsHxQVGX4854391;     vNnsHxQVGX4854391 = vNnsHxQVGX84272712;     vNnsHxQVGX84272712 = vNnsHxQVGX40047940;     vNnsHxQVGX40047940 = vNnsHxQVGX726365;     vNnsHxQVGX726365 = vNnsHxQVGX92552935;     vNnsHxQVGX92552935 = vNnsHxQVGX67548402;     vNnsHxQVGX67548402 = vNnsHxQVGX31657518;     vNnsHxQVGX31657518 = vNnsHxQVGX94672996;     vNnsHxQVGX94672996 = vNnsHxQVGX58722216;     vNnsHxQVGX58722216 = vNnsHxQVGX91349543;     vNnsHxQVGX91349543 = vNnsHxQVGX52260511;     vNnsHxQVGX52260511 = vNnsHxQVGX54397307;     vNnsHxQVGX54397307 = vNnsHxQVGX90518462;     vNnsHxQVGX90518462 = vNnsHxQVGX65314963;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void XcHRFdzQEK41814724() {     int JebzNJLCJu6897510 = -553805317;    int JebzNJLCJu79242556 = -886008827;    int JebzNJLCJu3356666 = -965501323;    int JebzNJLCJu89037512 = -157755173;    int JebzNJLCJu75717255 = -546779588;    int JebzNJLCJu91702049 = -695033739;    int JebzNJLCJu37722644 = -332730252;    int JebzNJLCJu73372192 = -818160993;    int JebzNJLCJu33855618 = 49989925;    int JebzNJLCJu48246886 = -61291833;    int JebzNJLCJu44992695 = -49743299;    int JebzNJLCJu77368952 = -9374151;    int JebzNJLCJu50233442 = 54206869;    int JebzNJLCJu27824066 = -609536289;    int JebzNJLCJu59282077 = -750186864;    int JebzNJLCJu56410379 = -195714811;    int JebzNJLCJu74535975 = -855853293;    int JebzNJLCJu7838330 = -392823344;    int JebzNJLCJu23283718 = -368560994;    int JebzNJLCJu41059045 = -821770681;    int JebzNJLCJu75668932 = 43253579;    int JebzNJLCJu74550383 = -29353605;    int JebzNJLCJu21959572 = -181902499;    int JebzNJLCJu7123267 = -60562020;    int JebzNJLCJu60982508 = -523702616;    int JebzNJLCJu46299939 = -190765009;    int JebzNJLCJu31080827 = -312554771;    int JebzNJLCJu36917768 = -200065561;    int JebzNJLCJu63124034 = -759462006;    int JebzNJLCJu79332136 = -25252248;    int JebzNJLCJu34138135 = 58162579;    int JebzNJLCJu29473536 = -209172555;    int JebzNJLCJu49507901 = -707385063;    int JebzNJLCJu21003367 = -898924149;    int JebzNJLCJu87383869 = -428053350;    int JebzNJLCJu86632650 = 59786161;    int JebzNJLCJu89538480 = -71950417;    int JebzNJLCJu20047980 = -877537904;    int JebzNJLCJu32267167 = -847667337;    int JebzNJLCJu31018925 = -236646976;    int JebzNJLCJu26625245 = -590302810;    int JebzNJLCJu94860245 = -954381838;    int JebzNJLCJu28590230 = -514164752;    int JebzNJLCJu54733482 = -235274847;    int JebzNJLCJu6726856 = -244852525;    int JebzNJLCJu68424205 = -567779534;    int JebzNJLCJu39592909 = 72149029;    int JebzNJLCJu43576440 = -378540985;    int JebzNJLCJu49217139 = -118464778;    int JebzNJLCJu8073755 = 70089534;    int JebzNJLCJu82212201 = -860122651;    int JebzNJLCJu36232050 = -676443688;    int JebzNJLCJu8795612 = -816704769;    int JebzNJLCJu9887431 = -731357273;    int JebzNJLCJu66145792 = 60031085;    int JebzNJLCJu32347126 = -424451712;    int JebzNJLCJu57282985 = -604106329;    int JebzNJLCJu96233398 = -804939304;    int JebzNJLCJu28055004 = -634052558;    int JebzNJLCJu29417316 = -256014580;    int JebzNJLCJu60621223 = -282478969;    int JebzNJLCJu804876 = -32664692;    int JebzNJLCJu10248158 = 41301012;    int JebzNJLCJu54523481 = -924757828;    int JebzNJLCJu14108751 = -19454412;    int JebzNJLCJu15519159 = -840570745;    int JebzNJLCJu27861052 = -301989088;    int JebzNJLCJu29230075 = -46868983;    int JebzNJLCJu40440196 = -81482939;    int JebzNJLCJu72649427 = -709973026;    int JebzNJLCJu66871899 = -23764394;    int JebzNJLCJu54487996 = -978315390;    int JebzNJLCJu75571163 = -545156008;    int JebzNJLCJu92264792 = -31914018;    int JebzNJLCJu14433801 = -131467871;    int JebzNJLCJu80808686 = -2364583;    int JebzNJLCJu45960153 = -515188853;    int JebzNJLCJu67226089 = -946627652;    int JebzNJLCJu396411 = -815709496;    int JebzNJLCJu92558303 = -955923082;    int JebzNJLCJu6707031 = -162914038;    int JebzNJLCJu87504387 = -934013786;    int JebzNJLCJu87700629 = 18399216;    int JebzNJLCJu55050280 = -729551540;    int JebzNJLCJu97119935 = -165129598;    int JebzNJLCJu97906085 = -265393734;    int JebzNJLCJu20677925 = -392467786;    int JebzNJLCJu39620470 = -976027791;    int JebzNJLCJu54857575 = -858955234;    int JebzNJLCJu55036743 = 96398362;    int JebzNJLCJu29349665 = -336107510;    int JebzNJLCJu93305081 = -267011114;    int JebzNJLCJu91992975 = -143485347;    int JebzNJLCJu2849851 = -491652758;    int JebzNJLCJu70397702 = -954168007;    int JebzNJLCJu25820369 = -457638119;    int JebzNJLCJu84612088 = -895682851;    int JebzNJLCJu74066749 = -589406925;    int JebzNJLCJu40624732 = -115820436;    int JebzNJLCJu91207696 = -553805317;     JebzNJLCJu6897510 = JebzNJLCJu79242556;     JebzNJLCJu79242556 = JebzNJLCJu3356666;     JebzNJLCJu3356666 = JebzNJLCJu89037512;     JebzNJLCJu89037512 = JebzNJLCJu75717255;     JebzNJLCJu75717255 = JebzNJLCJu91702049;     JebzNJLCJu91702049 = JebzNJLCJu37722644;     JebzNJLCJu37722644 = JebzNJLCJu73372192;     JebzNJLCJu73372192 = JebzNJLCJu33855618;     JebzNJLCJu33855618 = JebzNJLCJu48246886;     JebzNJLCJu48246886 = JebzNJLCJu44992695;     JebzNJLCJu44992695 = JebzNJLCJu77368952;     JebzNJLCJu77368952 = JebzNJLCJu50233442;     JebzNJLCJu50233442 = JebzNJLCJu27824066;     JebzNJLCJu27824066 = JebzNJLCJu59282077;     JebzNJLCJu59282077 = JebzNJLCJu56410379;     JebzNJLCJu56410379 = JebzNJLCJu74535975;     JebzNJLCJu74535975 = JebzNJLCJu7838330;     JebzNJLCJu7838330 = JebzNJLCJu23283718;     JebzNJLCJu23283718 = JebzNJLCJu41059045;     JebzNJLCJu41059045 = JebzNJLCJu75668932;     JebzNJLCJu75668932 = JebzNJLCJu74550383;     JebzNJLCJu74550383 = JebzNJLCJu21959572;     JebzNJLCJu21959572 = JebzNJLCJu7123267;     JebzNJLCJu7123267 = JebzNJLCJu60982508;     JebzNJLCJu60982508 = JebzNJLCJu46299939;     JebzNJLCJu46299939 = JebzNJLCJu31080827;     JebzNJLCJu31080827 = JebzNJLCJu36917768;     JebzNJLCJu36917768 = JebzNJLCJu63124034;     JebzNJLCJu63124034 = JebzNJLCJu79332136;     JebzNJLCJu79332136 = JebzNJLCJu34138135;     JebzNJLCJu34138135 = JebzNJLCJu29473536;     JebzNJLCJu29473536 = JebzNJLCJu49507901;     JebzNJLCJu49507901 = JebzNJLCJu21003367;     JebzNJLCJu21003367 = JebzNJLCJu87383869;     JebzNJLCJu87383869 = JebzNJLCJu86632650;     JebzNJLCJu86632650 = JebzNJLCJu89538480;     JebzNJLCJu89538480 = JebzNJLCJu20047980;     JebzNJLCJu20047980 = JebzNJLCJu32267167;     JebzNJLCJu32267167 = JebzNJLCJu31018925;     JebzNJLCJu31018925 = JebzNJLCJu26625245;     JebzNJLCJu26625245 = JebzNJLCJu94860245;     JebzNJLCJu94860245 = JebzNJLCJu28590230;     JebzNJLCJu28590230 = JebzNJLCJu54733482;     JebzNJLCJu54733482 = JebzNJLCJu6726856;     JebzNJLCJu6726856 = JebzNJLCJu68424205;     JebzNJLCJu68424205 = JebzNJLCJu39592909;     JebzNJLCJu39592909 = JebzNJLCJu43576440;     JebzNJLCJu43576440 = JebzNJLCJu49217139;     JebzNJLCJu49217139 = JebzNJLCJu8073755;     JebzNJLCJu8073755 = JebzNJLCJu82212201;     JebzNJLCJu82212201 = JebzNJLCJu36232050;     JebzNJLCJu36232050 = JebzNJLCJu8795612;     JebzNJLCJu8795612 = JebzNJLCJu9887431;     JebzNJLCJu9887431 = JebzNJLCJu66145792;     JebzNJLCJu66145792 = JebzNJLCJu32347126;     JebzNJLCJu32347126 = JebzNJLCJu57282985;     JebzNJLCJu57282985 = JebzNJLCJu96233398;     JebzNJLCJu96233398 = JebzNJLCJu28055004;     JebzNJLCJu28055004 = JebzNJLCJu29417316;     JebzNJLCJu29417316 = JebzNJLCJu60621223;     JebzNJLCJu60621223 = JebzNJLCJu804876;     JebzNJLCJu804876 = JebzNJLCJu10248158;     JebzNJLCJu10248158 = JebzNJLCJu54523481;     JebzNJLCJu54523481 = JebzNJLCJu14108751;     JebzNJLCJu14108751 = JebzNJLCJu15519159;     JebzNJLCJu15519159 = JebzNJLCJu27861052;     JebzNJLCJu27861052 = JebzNJLCJu29230075;     JebzNJLCJu29230075 = JebzNJLCJu40440196;     JebzNJLCJu40440196 = JebzNJLCJu72649427;     JebzNJLCJu72649427 = JebzNJLCJu66871899;     JebzNJLCJu66871899 = JebzNJLCJu54487996;     JebzNJLCJu54487996 = JebzNJLCJu75571163;     JebzNJLCJu75571163 = JebzNJLCJu92264792;     JebzNJLCJu92264792 = JebzNJLCJu14433801;     JebzNJLCJu14433801 = JebzNJLCJu80808686;     JebzNJLCJu80808686 = JebzNJLCJu45960153;     JebzNJLCJu45960153 = JebzNJLCJu67226089;     JebzNJLCJu67226089 = JebzNJLCJu396411;     JebzNJLCJu396411 = JebzNJLCJu92558303;     JebzNJLCJu92558303 = JebzNJLCJu6707031;     JebzNJLCJu6707031 = JebzNJLCJu87504387;     JebzNJLCJu87504387 = JebzNJLCJu87700629;     JebzNJLCJu87700629 = JebzNJLCJu55050280;     JebzNJLCJu55050280 = JebzNJLCJu97119935;     JebzNJLCJu97119935 = JebzNJLCJu97906085;     JebzNJLCJu97906085 = JebzNJLCJu20677925;     JebzNJLCJu20677925 = JebzNJLCJu39620470;     JebzNJLCJu39620470 = JebzNJLCJu54857575;     JebzNJLCJu54857575 = JebzNJLCJu55036743;     JebzNJLCJu55036743 = JebzNJLCJu29349665;     JebzNJLCJu29349665 = JebzNJLCJu93305081;     JebzNJLCJu93305081 = JebzNJLCJu91992975;     JebzNJLCJu91992975 = JebzNJLCJu2849851;     JebzNJLCJu2849851 = JebzNJLCJu70397702;     JebzNJLCJu70397702 = JebzNJLCJu25820369;     JebzNJLCJu25820369 = JebzNJLCJu84612088;     JebzNJLCJu84612088 = JebzNJLCJu74066749;     JebzNJLCJu74066749 = JebzNJLCJu40624732;     JebzNJLCJu40624732 = JebzNJLCJu91207696;     JebzNJLCJu91207696 = JebzNJLCJu6897510;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ypEmOnGOGd51637742() {     int IGdRxvvgYE84218236 = -95093250;    int IGdRxvvgYE91313682 = -118386359;    int IGdRxvvgYE85036200 = -565322244;    int IGdRxvvgYE9834844 = 18652791;    int IGdRxvvgYE21783193 = -301352529;    int IGdRxvvgYE33594681 = 90958031;    int IGdRxvvgYE16820332 = -738213056;    int IGdRxvvgYE7173795 = -222622426;    int IGdRxvvgYE10482988 = -237082831;    int IGdRxvvgYE36202392 = -937499338;    int IGdRxvvgYE54618948 = -321893657;    int IGdRxvvgYE23042986 = -388064558;    int IGdRxvvgYE13995014 = -419221758;    int IGdRxvvgYE78151501 = -210741130;    int IGdRxvvgYE69566223 = -116460532;    int IGdRxvvgYE75858694 = -343590244;    int IGdRxvvgYE30304617 = -912267778;    int IGdRxvvgYE14637157 = -271677200;    int IGdRxvvgYE44322288 = -579449034;    int IGdRxvvgYE21950086 = -506478205;    int IGdRxvvgYE22425550 = -501254370;    int IGdRxvvgYE78472943 = -622567542;    int IGdRxvvgYE27072884 = -934232051;    int IGdRxvvgYE1487560 = -891002950;    int IGdRxvvgYE87301505 = -36853195;    int IGdRxvvgYE33494490 = -100825329;    int IGdRxvvgYE52297371 = -340776623;    int IGdRxvvgYE98945793 = -813058480;    int IGdRxvvgYE45751320 = 54345242;    int IGdRxvvgYE2639712 = -396062606;    int IGdRxvvgYE93403578 = -53366918;    int IGdRxvvgYE79693198 = -806742580;    int IGdRxvvgYE68788262 = -637588086;    int IGdRxvvgYE68614150 = -615666286;    int IGdRxvvgYE86993985 = -246298905;    int IGdRxvvgYE73124110 = -693977383;    int IGdRxvvgYE88832092 = -96817106;    int IGdRxvvgYE96454278 = -809765094;    int IGdRxvvgYE42965588 = -651323054;    int IGdRxvvgYE64885015 = -225232962;    int IGdRxvvgYE42460612 = -184521788;    int IGdRxvvgYE98895235 = -351939964;    int IGdRxvvgYE34373682 = -443547665;    int IGdRxvvgYE18462581 = -629079123;    int IGdRxvvgYE70736940 = -784370725;    int IGdRxvvgYE36518974 = -414219012;    int IGdRxvvgYE25527557 = -422660286;    int IGdRxvvgYE30673675 = -976128527;    int IGdRxvvgYE89046911 = -182093734;    int IGdRxvvgYE50540009 = -736945000;    int IGdRxvvgYE33028341 = -817285409;    int IGdRxvvgYE95470381 = -216122427;    int IGdRxvvgYE50107961 = -28716506;    int IGdRxvvgYE48845580 = -661220367;    int IGdRxvvgYE29212193 = -444822534;    int IGdRxvvgYE5745294 = -472525708;    int IGdRxvvgYE64240799 = -184154309;    int IGdRxvvgYE83548641 = -674319294;    int IGdRxvvgYE22533338 = -944494014;    int IGdRxvvgYE88288702 = -100527200;    int IGdRxvvgYE81297310 = -568265347;    int IGdRxvvgYE17874539 = -925154576;    int IGdRxvvgYE61422474 = -176967668;    int IGdRxvvgYE7843276 = -841020225;    int IGdRxvvgYE42798814 = -784132420;    int IGdRxvvgYE74925749 = -515151078;    int IGdRxvvgYE54254724 = -750476472;    int IGdRxvvgYE45380863 = -803555472;    int IGdRxvvgYE91157515 = -964442225;    int IGdRxvvgYE96442112 = -422483149;    int IGdRxvvgYE87026602 = -146773138;    int IGdRxvvgYE33850338 = -2502684;    int IGdRxvvgYE71671569 = -620354146;    int IGdRxvvgYE79437272 = -254216073;    int IGdRxvvgYE79489473 = -221956418;    int IGdRxvvgYE23530314 = -49314407;    int IGdRxvvgYE44099262 = -79019877;    int IGdRxvvgYE8610304 = -205152928;    int IGdRxvvgYE30750619 = -6632226;    int IGdRxvvgYE50782531 = -622634183;    int IGdRxvvgYE7966933 = -678165044;    int IGdRxvvgYE21623696 = -364648096;    int IGdRxvvgYE9898882 = -530964747;    int IGdRxvvgYE95211310 = -208709759;    int IGdRxvvgYE69611370 = -578777198;    int IGdRxvvgYE97933196 = -837244491;    int IGdRxvvgYE29585238 = -678026075;    int IGdRxvvgYE19942683 = -976367720;    int IGdRxvvgYE39401958 = -70843753;    int IGdRxvvgYE81248692 = -773773197;    int IGdRxvvgYE8883312 = -409823075;    int IGdRxvvgYE5283451 = -422497813;    int IGdRxvvgYE73920940 = -865271080;    int IGdRxvvgYE54676885 = -450795854;    int IGdRxvvgYE83587705 = -656967616;    int IGdRxvvgYE24586074 = -259367212;    int IGdRxvvgYE37472761 = -74972296;    int IGdRxvvgYE26530406 = -602527440;    int IGdRxvvgYE75663766 = -844946703;    int IGdRxvvgYE95811190 = -95093250;     IGdRxvvgYE84218236 = IGdRxvvgYE91313682;     IGdRxvvgYE91313682 = IGdRxvvgYE85036200;     IGdRxvvgYE85036200 = IGdRxvvgYE9834844;     IGdRxvvgYE9834844 = IGdRxvvgYE21783193;     IGdRxvvgYE21783193 = IGdRxvvgYE33594681;     IGdRxvvgYE33594681 = IGdRxvvgYE16820332;     IGdRxvvgYE16820332 = IGdRxvvgYE7173795;     IGdRxvvgYE7173795 = IGdRxvvgYE10482988;     IGdRxvvgYE10482988 = IGdRxvvgYE36202392;     IGdRxvvgYE36202392 = IGdRxvvgYE54618948;     IGdRxvvgYE54618948 = IGdRxvvgYE23042986;     IGdRxvvgYE23042986 = IGdRxvvgYE13995014;     IGdRxvvgYE13995014 = IGdRxvvgYE78151501;     IGdRxvvgYE78151501 = IGdRxvvgYE69566223;     IGdRxvvgYE69566223 = IGdRxvvgYE75858694;     IGdRxvvgYE75858694 = IGdRxvvgYE30304617;     IGdRxvvgYE30304617 = IGdRxvvgYE14637157;     IGdRxvvgYE14637157 = IGdRxvvgYE44322288;     IGdRxvvgYE44322288 = IGdRxvvgYE21950086;     IGdRxvvgYE21950086 = IGdRxvvgYE22425550;     IGdRxvvgYE22425550 = IGdRxvvgYE78472943;     IGdRxvvgYE78472943 = IGdRxvvgYE27072884;     IGdRxvvgYE27072884 = IGdRxvvgYE1487560;     IGdRxvvgYE1487560 = IGdRxvvgYE87301505;     IGdRxvvgYE87301505 = IGdRxvvgYE33494490;     IGdRxvvgYE33494490 = IGdRxvvgYE52297371;     IGdRxvvgYE52297371 = IGdRxvvgYE98945793;     IGdRxvvgYE98945793 = IGdRxvvgYE45751320;     IGdRxvvgYE45751320 = IGdRxvvgYE2639712;     IGdRxvvgYE2639712 = IGdRxvvgYE93403578;     IGdRxvvgYE93403578 = IGdRxvvgYE79693198;     IGdRxvvgYE79693198 = IGdRxvvgYE68788262;     IGdRxvvgYE68788262 = IGdRxvvgYE68614150;     IGdRxvvgYE68614150 = IGdRxvvgYE86993985;     IGdRxvvgYE86993985 = IGdRxvvgYE73124110;     IGdRxvvgYE73124110 = IGdRxvvgYE88832092;     IGdRxvvgYE88832092 = IGdRxvvgYE96454278;     IGdRxvvgYE96454278 = IGdRxvvgYE42965588;     IGdRxvvgYE42965588 = IGdRxvvgYE64885015;     IGdRxvvgYE64885015 = IGdRxvvgYE42460612;     IGdRxvvgYE42460612 = IGdRxvvgYE98895235;     IGdRxvvgYE98895235 = IGdRxvvgYE34373682;     IGdRxvvgYE34373682 = IGdRxvvgYE18462581;     IGdRxvvgYE18462581 = IGdRxvvgYE70736940;     IGdRxvvgYE70736940 = IGdRxvvgYE36518974;     IGdRxvvgYE36518974 = IGdRxvvgYE25527557;     IGdRxvvgYE25527557 = IGdRxvvgYE30673675;     IGdRxvvgYE30673675 = IGdRxvvgYE89046911;     IGdRxvvgYE89046911 = IGdRxvvgYE50540009;     IGdRxvvgYE50540009 = IGdRxvvgYE33028341;     IGdRxvvgYE33028341 = IGdRxvvgYE95470381;     IGdRxvvgYE95470381 = IGdRxvvgYE50107961;     IGdRxvvgYE50107961 = IGdRxvvgYE48845580;     IGdRxvvgYE48845580 = IGdRxvvgYE29212193;     IGdRxvvgYE29212193 = IGdRxvvgYE5745294;     IGdRxvvgYE5745294 = IGdRxvvgYE64240799;     IGdRxvvgYE64240799 = IGdRxvvgYE83548641;     IGdRxvvgYE83548641 = IGdRxvvgYE22533338;     IGdRxvvgYE22533338 = IGdRxvvgYE88288702;     IGdRxvvgYE88288702 = IGdRxvvgYE81297310;     IGdRxvvgYE81297310 = IGdRxvvgYE17874539;     IGdRxvvgYE17874539 = IGdRxvvgYE61422474;     IGdRxvvgYE61422474 = IGdRxvvgYE7843276;     IGdRxvvgYE7843276 = IGdRxvvgYE42798814;     IGdRxvvgYE42798814 = IGdRxvvgYE74925749;     IGdRxvvgYE74925749 = IGdRxvvgYE54254724;     IGdRxvvgYE54254724 = IGdRxvvgYE45380863;     IGdRxvvgYE45380863 = IGdRxvvgYE91157515;     IGdRxvvgYE91157515 = IGdRxvvgYE96442112;     IGdRxvvgYE96442112 = IGdRxvvgYE87026602;     IGdRxvvgYE87026602 = IGdRxvvgYE33850338;     IGdRxvvgYE33850338 = IGdRxvvgYE71671569;     IGdRxvvgYE71671569 = IGdRxvvgYE79437272;     IGdRxvvgYE79437272 = IGdRxvvgYE79489473;     IGdRxvvgYE79489473 = IGdRxvvgYE23530314;     IGdRxvvgYE23530314 = IGdRxvvgYE44099262;     IGdRxvvgYE44099262 = IGdRxvvgYE8610304;     IGdRxvvgYE8610304 = IGdRxvvgYE30750619;     IGdRxvvgYE30750619 = IGdRxvvgYE50782531;     IGdRxvvgYE50782531 = IGdRxvvgYE7966933;     IGdRxvvgYE7966933 = IGdRxvvgYE21623696;     IGdRxvvgYE21623696 = IGdRxvvgYE9898882;     IGdRxvvgYE9898882 = IGdRxvvgYE95211310;     IGdRxvvgYE95211310 = IGdRxvvgYE69611370;     IGdRxvvgYE69611370 = IGdRxvvgYE97933196;     IGdRxvvgYE97933196 = IGdRxvvgYE29585238;     IGdRxvvgYE29585238 = IGdRxvvgYE19942683;     IGdRxvvgYE19942683 = IGdRxvvgYE39401958;     IGdRxvvgYE39401958 = IGdRxvvgYE81248692;     IGdRxvvgYE81248692 = IGdRxvvgYE8883312;     IGdRxvvgYE8883312 = IGdRxvvgYE5283451;     IGdRxvvgYE5283451 = IGdRxvvgYE73920940;     IGdRxvvgYE73920940 = IGdRxvvgYE54676885;     IGdRxvvgYE54676885 = IGdRxvvgYE83587705;     IGdRxvvgYE83587705 = IGdRxvvgYE24586074;     IGdRxvvgYE24586074 = IGdRxvvgYE37472761;     IGdRxvvgYE37472761 = IGdRxvvgYE26530406;     IGdRxvvgYE26530406 = IGdRxvvgYE75663766;     IGdRxvvgYE75663766 = IGdRxvvgYE95811190;     IGdRxvvgYE95811190 = IGdRxvvgYE84218236;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void IzDMZDQPnJbO48915572() {     int TteeUxkovT42070794 = -323249971;    int TteeUxkovT50360945 = 95114104;    int TteeUxkovT49878744 = -513514549;    int TteeUxkovT11985026 = 11635018;    int TteeUxkovT67402613 = -529653054;    int TteeUxkovT49895237 = -332565430;    int TteeUxkovT51086141 = -700389629;    int TteeUxkovT75725163 = -633275894;    int TteeUxkovT26423560 = -895964207;    int TteeUxkovT46229175 = -708120798;    int TteeUxkovT10021937 = -161053715;    int TteeUxkovT65222406 = -767452260;    int TteeUxkovT87384925 = -468293108;    int TteeUxkovT20062897 = -369660244;    int TteeUxkovT19323908 = -284650408;    int TteeUxkovT29091361 = -28273742;    int TteeUxkovT80111144 = -796907580;    int TteeUxkovT97373231 = -399776337;    int TteeUxkovT65725979 = -413132314;    int TteeUxkovT22229825 = -573649273;    int TteeUxkovT56726096 = -439549993;    int TteeUxkovT67413421 = -703978266;    int TteeUxkovT64013190 = -288986985;    int TteeUxkovT78130183 = -984899889;    int TteeUxkovT2417014 = -355703665;    int TteeUxkovT15921579 = -325090432;    int TteeUxkovT89585783 = -703847544;    int TteeUxkovT10182144 = -162318120;    int TteeUxkovT86633648 = -217936365;    int TteeUxkovT41240432 = -675434269;    int TteeUxkovT22864936 = -299570323;    int TteeUxkovT90333550 = -839963588;    int TteeUxkovT76592520 = -12583343;    int TteeUxkovT57468427 = -27805217;    int TteeUxkovT46673766 = -1841653;    int TteeUxkovT23549634 = -44172319;    int TteeUxkovT19742253 = -694807719;    int TteeUxkovT31378103 = -664783468;    int TteeUxkovT86350683 = 9436054;    int TteeUxkovT77469369 = -217287851;    int TteeUxkovT16813924 = -368954470;    int TteeUxkovT91071092 = -610601863;    int TteeUxkovT69023892 = -425128781;    int TteeUxkovT98806139 = -573810739;    int TteeUxkovT54718613 = 53234037;    int TteeUxkovT50152616 = -823327069;    int TteeUxkovT29472326 = 96223723;    int TteeUxkovT17615081 = -290428755;    int TteeUxkovT87741093 = -231783451;    int TteeUxkovT52107921 = -682967188;    int TteeUxkovT9408912 = -368083236;    int TteeUxkovT38259854 = -478448308;    int TteeUxkovT21595165 = -664619282;    int TteeUxkovT14873701 = -596489824;    int TteeUxkovT92189476 = -75117517;    int TteeUxkovT74657373 = -619271706;    int TteeUxkovT86347754 = -615898911;    int TteeUxkovT71748560 = -528614660;    int TteeUxkovT9568012 = -632661317;    int TteeUxkovT51481034 = -104562623;    int TteeUxkovT60309454 = -628717887;    int TteeUxkovT40903998 = -438071510;    int TteeUxkovT89091515 = -315339529;    int TteeUxkovT85183127 = -120529938;    int TteeUxkovT23364239 = -308550476;    int TteeUxkovT19688387 = -321090128;    int TteeUxkovT88629886 = -654868918;    int TteeUxkovT29916498 = -340487891;    int TteeUxkovT73389130 = -267818592;    int TteeUxkovT95774273 = -140478089;    int TteeUxkovT9349108 = -333466024;    int TteeUxkovT48733042 = -32124113;    int TteeUxkovT11022548 = -309212392;    int TteeUxkovT88256609 = -95844464;    int TteeUxkovT5415902 = -104694804;    int TteeUxkovT65655003 = -828948130;    int TteeUxkovT98389528 = -178849486;    int TteeUxkovT65207051 = -715176247;    int TteeUxkovT23411571 = -938133927;    int TteeUxkovT52264398 = -532376596;    int TteeUxkovT86449253 = -321314155;    int TteeUxkovT71970703 = -313418789;    int TteeUxkovT22441050 = -930534669;    int TteeUxkovT34525728 = -534969177;    int TteeUxkovT31831520 = -207351034;    int TteeUxkovT84605082 = -821122016;    int TteeUxkovT68738386 = -75344307;    int TteeUxkovT61718819 = -416093519;    int TteeUxkovT65278951 = -952687701;    int TteeUxkovT72016393 = -382569948;    int TteeUxkovT37201879 = -428273409;    int TteeUxkovT47993692 = -66193060;    int TteeUxkovT21810091 = 67877849;    int TteeUxkovT34869649 = -886001323;    int TteeUxkovT17159916 = -588569964;    int TteeUxkovT75909926 = -930882960;    int TteeUxkovT1979578 = -195262335;    int TteeUxkovT83840764 = -204598843;    int TteeUxkovT75441900 = -165260264;    int TteeUxkovT35030227 = -323249971;     TteeUxkovT42070794 = TteeUxkovT50360945;     TteeUxkovT50360945 = TteeUxkovT49878744;     TteeUxkovT49878744 = TteeUxkovT11985026;     TteeUxkovT11985026 = TteeUxkovT67402613;     TteeUxkovT67402613 = TteeUxkovT49895237;     TteeUxkovT49895237 = TteeUxkovT51086141;     TteeUxkovT51086141 = TteeUxkovT75725163;     TteeUxkovT75725163 = TteeUxkovT26423560;     TteeUxkovT26423560 = TteeUxkovT46229175;     TteeUxkovT46229175 = TteeUxkovT10021937;     TteeUxkovT10021937 = TteeUxkovT65222406;     TteeUxkovT65222406 = TteeUxkovT87384925;     TteeUxkovT87384925 = TteeUxkovT20062897;     TteeUxkovT20062897 = TteeUxkovT19323908;     TteeUxkovT19323908 = TteeUxkovT29091361;     TteeUxkovT29091361 = TteeUxkovT80111144;     TteeUxkovT80111144 = TteeUxkovT97373231;     TteeUxkovT97373231 = TteeUxkovT65725979;     TteeUxkovT65725979 = TteeUxkovT22229825;     TteeUxkovT22229825 = TteeUxkovT56726096;     TteeUxkovT56726096 = TteeUxkovT67413421;     TteeUxkovT67413421 = TteeUxkovT64013190;     TteeUxkovT64013190 = TteeUxkovT78130183;     TteeUxkovT78130183 = TteeUxkovT2417014;     TteeUxkovT2417014 = TteeUxkovT15921579;     TteeUxkovT15921579 = TteeUxkovT89585783;     TteeUxkovT89585783 = TteeUxkovT10182144;     TteeUxkovT10182144 = TteeUxkovT86633648;     TteeUxkovT86633648 = TteeUxkovT41240432;     TteeUxkovT41240432 = TteeUxkovT22864936;     TteeUxkovT22864936 = TteeUxkovT90333550;     TteeUxkovT90333550 = TteeUxkovT76592520;     TteeUxkovT76592520 = TteeUxkovT57468427;     TteeUxkovT57468427 = TteeUxkovT46673766;     TteeUxkovT46673766 = TteeUxkovT23549634;     TteeUxkovT23549634 = TteeUxkovT19742253;     TteeUxkovT19742253 = TteeUxkovT31378103;     TteeUxkovT31378103 = TteeUxkovT86350683;     TteeUxkovT86350683 = TteeUxkovT77469369;     TteeUxkovT77469369 = TteeUxkovT16813924;     TteeUxkovT16813924 = TteeUxkovT91071092;     TteeUxkovT91071092 = TteeUxkovT69023892;     TteeUxkovT69023892 = TteeUxkovT98806139;     TteeUxkovT98806139 = TteeUxkovT54718613;     TteeUxkovT54718613 = TteeUxkovT50152616;     TteeUxkovT50152616 = TteeUxkovT29472326;     TteeUxkovT29472326 = TteeUxkovT17615081;     TteeUxkovT17615081 = TteeUxkovT87741093;     TteeUxkovT87741093 = TteeUxkovT52107921;     TteeUxkovT52107921 = TteeUxkovT9408912;     TteeUxkovT9408912 = TteeUxkovT38259854;     TteeUxkovT38259854 = TteeUxkovT21595165;     TteeUxkovT21595165 = TteeUxkovT14873701;     TteeUxkovT14873701 = TteeUxkovT92189476;     TteeUxkovT92189476 = TteeUxkovT74657373;     TteeUxkovT74657373 = TteeUxkovT86347754;     TteeUxkovT86347754 = TteeUxkovT71748560;     TteeUxkovT71748560 = TteeUxkovT9568012;     TteeUxkovT9568012 = TteeUxkovT51481034;     TteeUxkovT51481034 = TteeUxkovT60309454;     TteeUxkovT60309454 = TteeUxkovT40903998;     TteeUxkovT40903998 = TteeUxkovT89091515;     TteeUxkovT89091515 = TteeUxkovT85183127;     TteeUxkovT85183127 = TteeUxkovT23364239;     TteeUxkovT23364239 = TteeUxkovT19688387;     TteeUxkovT19688387 = TteeUxkovT88629886;     TteeUxkovT88629886 = TteeUxkovT29916498;     TteeUxkovT29916498 = TteeUxkovT73389130;     TteeUxkovT73389130 = TteeUxkovT95774273;     TteeUxkovT95774273 = TteeUxkovT9349108;     TteeUxkovT9349108 = TteeUxkovT48733042;     TteeUxkovT48733042 = TteeUxkovT11022548;     TteeUxkovT11022548 = TteeUxkovT88256609;     TteeUxkovT88256609 = TteeUxkovT5415902;     TteeUxkovT5415902 = TteeUxkovT65655003;     TteeUxkovT65655003 = TteeUxkovT98389528;     TteeUxkovT98389528 = TteeUxkovT65207051;     TteeUxkovT65207051 = TteeUxkovT23411571;     TteeUxkovT23411571 = TteeUxkovT52264398;     TteeUxkovT52264398 = TteeUxkovT86449253;     TteeUxkovT86449253 = TteeUxkovT71970703;     TteeUxkovT71970703 = TteeUxkovT22441050;     TteeUxkovT22441050 = TteeUxkovT34525728;     TteeUxkovT34525728 = TteeUxkovT31831520;     TteeUxkovT31831520 = TteeUxkovT84605082;     TteeUxkovT84605082 = TteeUxkovT68738386;     TteeUxkovT68738386 = TteeUxkovT61718819;     TteeUxkovT61718819 = TteeUxkovT65278951;     TteeUxkovT65278951 = TteeUxkovT72016393;     TteeUxkovT72016393 = TteeUxkovT37201879;     TteeUxkovT37201879 = TteeUxkovT47993692;     TteeUxkovT47993692 = TteeUxkovT21810091;     TteeUxkovT21810091 = TteeUxkovT34869649;     TteeUxkovT34869649 = TteeUxkovT17159916;     TteeUxkovT17159916 = TteeUxkovT75909926;     TteeUxkovT75909926 = TteeUxkovT1979578;     TteeUxkovT1979578 = TteeUxkovT83840764;     TteeUxkovT83840764 = TteeUxkovT75441900;     TteeUxkovT75441900 = TteeUxkovT35030227;     TteeUxkovT35030227 = TteeUxkovT42070794;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void UzDAlywfQK15546777() {     int wFsLnjmQZQ86851500 = -819533756;    int wFsLnjmQZQ80483629 = -859376880;    int wFsLnjmQZQ6104090 = 64306377;    int wFsLnjmQZQ56918542 = -180639215;    int wFsLnjmQZQ54911020 = -143411735;    int wFsLnjmQZQ44856039 = -354349375;    int wFsLnjmQZQ66850283 = -639827774;    int wFsLnjmQZQ57778830 = -770291865;    int wFsLnjmQZQ38009658 = -950710215;    int wFsLnjmQZQ33116831 = -556796593;    int wFsLnjmQZQ64785051 = -194830445;    int wFsLnjmQZQ62736627 = -433464484;    int wFsLnjmQZQ89548372 = -584069273;    int wFsLnjmQZQ51448181 = 20075293;    int wFsLnjmQZQ47622352 = -676892982;    int wFsLnjmQZQ43038639 = -458813177;    int wFsLnjmQZQ23905089 = -431852650;    int wFsLnjmQZQ86325531 = -906190097;    int wFsLnjmQZQ27860971 = -65354298;    int wFsLnjmQZQ7188629 = -466893729;    int wFsLnjmQZQ78822886 = -712058237;    int wFsLnjmQZQ16747592 = -103519009;    int wFsLnjmQZQ33721440 = -182190327;    int wFsLnjmQZQ87479649 = -31965081;    int wFsLnjmQZQ45054818 = -272128061;    int wFsLnjmQZQ75953491 = -204672951;    int wFsLnjmQZQ13543043 = 81779184;    int wFsLnjmQZQ86601518 = -230260038;    int wFsLnjmQZQ87740323 = -260380288;    int wFsLnjmQZQ83464920 = -840594629;    int wFsLnjmQZQ78033867 = -75109392;    int wFsLnjmQZQ20692075 = -652284535;    int wFsLnjmQZQ53217438 = -869326117;    int wFsLnjmQZQ75962964 = -799377185;    int wFsLnjmQZQ16774458 = -970040573;    int wFsLnjmQZQ64107183 = -595197326;    int wFsLnjmQZQ94680309 = -61050244;    int wFsLnjmQZQ68712625 = -404771733;    int wFsLnjmQZQ47653350 = -79974593;    int wFsLnjmQZQ45967906 = -880304223;    int wFsLnjmQZQ86472997 = -187365903;    int wFsLnjmQZQ82390214 = 67372837;    int wFsLnjmQZQ19840916 = -741059694;    int wFsLnjmQZQ38462480 = 88426406;    int wFsLnjmQZQ6667094 = -191793516;    int wFsLnjmQZQ25925212 = -275740589;    int wFsLnjmQZQ26369328 = -579316160;    int wFsLnjmQZQ31428849 = -294737381;    int wFsLnjmQZQ58002514 = -567452986;    int wFsLnjmQZQ26229990 = -279982820;    int wFsLnjmQZQ13887975 = -399680783;    int wFsLnjmQZQ71415111 = -957941124;    int wFsLnjmQZQ2775623 = -116387734;    int wFsLnjmQZQ25196521 = -615931590;    int wFsLnjmQZQ36723891 = -599626470;    int wFsLnjmQZQ70103908 = -616014747;    int wFsLnjmQZQ46762189 = -577186553;    int wFsLnjmQZQ18624440 = -903728543;    int wFsLnjmQZQ11863724 = -908511154;    int wFsLnjmQZQ78957528 = -938738785;    int wFsLnjmQZQ31312996 = -336128559;    int wFsLnjmQZQ80248764 = -309567736;    int wFsLnjmQZQ70038507 = -409911577;    int wFsLnjmQZQ54544737 = -10115587;    int wFsLnjmQZQ55082963 = -381687201;    int wFsLnjmQZQ44092976 = -542545910;    int wFsLnjmQZQ9519190 = -564138368;    int wFsLnjmQZQ13585408 = -784692088;    int wFsLnjmQZQ34673724 = -9884134;    int wFsLnjmQZQ83515169 = 18304343;    int wFsLnjmQZQ48358329 = -297762933;    int wFsLnjmQZQ55192463 = 72919082;    int wFsLnjmQZQ38672181 = -726215504;    int wFsLnjmQZQ81893065 = -185050075;    int wFsLnjmQZQ20715631 = -179527826;    int wFsLnjmQZQ96432671 = -679431074;    int wFsLnjmQZQ96906675 = -362459316;    int wFsLnjmQZQ95258960 = -170616734;    int wFsLnjmQZQ80812555 = -840171565;    int wFsLnjmQZQ19129607 = -996387472;    int wFsLnjmQZQ49584163 = -625356791;    int wFsLnjmQZQ82114194 = -623483436;    int wFsLnjmQZQ28599005 = -662807053;    int wFsLnjmQZQ61510334 = -980397469;    int wFsLnjmQZQ69576946 = -340913847;    int wFsLnjmQZQ6618757 = -117168269;    int wFsLnjmQZQ17916452 = -435896802;    int wFsLnjmQZQ28020918 = -153394527;    int wFsLnjmQZQ39239074 = -99750716;    int wFsLnjmQZQ46670549 = -254025827;    int wFsLnjmQZQ17344994 = 81989226;    int wFsLnjmQZQ76055870 = -157321702;    int wFsLnjmQZQ56848901 = -496260579;    int wFsLnjmQZQ68695821 = -141235809;    int wFsLnjmQZQ14654910 = -444175665;    int wFsLnjmQZQ6224234 = -877798168;    int wFsLnjmQZQ12351708 = -522715587;    int wFsLnjmQZQ65296179 = -630944108;    int wFsLnjmQZQ83379516 = -529886393;    int wFsLnjmQZQ62574118 = -819533756;     wFsLnjmQZQ86851500 = wFsLnjmQZQ80483629;     wFsLnjmQZQ80483629 = wFsLnjmQZQ6104090;     wFsLnjmQZQ6104090 = wFsLnjmQZQ56918542;     wFsLnjmQZQ56918542 = wFsLnjmQZQ54911020;     wFsLnjmQZQ54911020 = wFsLnjmQZQ44856039;     wFsLnjmQZQ44856039 = wFsLnjmQZQ66850283;     wFsLnjmQZQ66850283 = wFsLnjmQZQ57778830;     wFsLnjmQZQ57778830 = wFsLnjmQZQ38009658;     wFsLnjmQZQ38009658 = wFsLnjmQZQ33116831;     wFsLnjmQZQ33116831 = wFsLnjmQZQ64785051;     wFsLnjmQZQ64785051 = wFsLnjmQZQ62736627;     wFsLnjmQZQ62736627 = wFsLnjmQZQ89548372;     wFsLnjmQZQ89548372 = wFsLnjmQZQ51448181;     wFsLnjmQZQ51448181 = wFsLnjmQZQ47622352;     wFsLnjmQZQ47622352 = wFsLnjmQZQ43038639;     wFsLnjmQZQ43038639 = wFsLnjmQZQ23905089;     wFsLnjmQZQ23905089 = wFsLnjmQZQ86325531;     wFsLnjmQZQ86325531 = wFsLnjmQZQ27860971;     wFsLnjmQZQ27860971 = wFsLnjmQZQ7188629;     wFsLnjmQZQ7188629 = wFsLnjmQZQ78822886;     wFsLnjmQZQ78822886 = wFsLnjmQZQ16747592;     wFsLnjmQZQ16747592 = wFsLnjmQZQ33721440;     wFsLnjmQZQ33721440 = wFsLnjmQZQ87479649;     wFsLnjmQZQ87479649 = wFsLnjmQZQ45054818;     wFsLnjmQZQ45054818 = wFsLnjmQZQ75953491;     wFsLnjmQZQ75953491 = wFsLnjmQZQ13543043;     wFsLnjmQZQ13543043 = wFsLnjmQZQ86601518;     wFsLnjmQZQ86601518 = wFsLnjmQZQ87740323;     wFsLnjmQZQ87740323 = wFsLnjmQZQ83464920;     wFsLnjmQZQ83464920 = wFsLnjmQZQ78033867;     wFsLnjmQZQ78033867 = wFsLnjmQZQ20692075;     wFsLnjmQZQ20692075 = wFsLnjmQZQ53217438;     wFsLnjmQZQ53217438 = wFsLnjmQZQ75962964;     wFsLnjmQZQ75962964 = wFsLnjmQZQ16774458;     wFsLnjmQZQ16774458 = wFsLnjmQZQ64107183;     wFsLnjmQZQ64107183 = wFsLnjmQZQ94680309;     wFsLnjmQZQ94680309 = wFsLnjmQZQ68712625;     wFsLnjmQZQ68712625 = wFsLnjmQZQ47653350;     wFsLnjmQZQ47653350 = wFsLnjmQZQ45967906;     wFsLnjmQZQ45967906 = wFsLnjmQZQ86472997;     wFsLnjmQZQ86472997 = wFsLnjmQZQ82390214;     wFsLnjmQZQ82390214 = wFsLnjmQZQ19840916;     wFsLnjmQZQ19840916 = wFsLnjmQZQ38462480;     wFsLnjmQZQ38462480 = wFsLnjmQZQ6667094;     wFsLnjmQZQ6667094 = wFsLnjmQZQ25925212;     wFsLnjmQZQ25925212 = wFsLnjmQZQ26369328;     wFsLnjmQZQ26369328 = wFsLnjmQZQ31428849;     wFsLnjmQZQ31428849 = wFsLnjmQZQ58002514;     wFsLnjmQZQ58002514 = wFsLnjmQZQ26229990;     wFsLnjmQZQ26229990 = wFsLnjmQZQ13887975;     wFsLnjmQZQ13887975 = wFsLnjmQZQ71415111;     wFsLnjmQZQ71415111 = wFsLnjmQZQ2775623;     wFsLnjmQZQ2775623 = wFsLnjmQZQ25196521;     wFsLnjmQZQ25196521 = wFsLnjmQZQ36723891;     wFsLnjmQZQ36723891 = wFsLnjmQZQ70103908;     wFsLnjmQZQ70103908 = wFsLnjmQZQ46762189;     wFsLnjmQZQ46762189 = wFsLnjmQZQ18624440;     wFsLnjmQZQ18624440 = wFsLnjmQZQ11863724;     wFsLnjmQZQ11863724 = wFsLnjmQZQ78957528;     wFsLnjmQZQ78957528 = wFsLnjmQZQ31312996;     wFsLnjmQZQ31312996 = wFsLnjmQZQ80248764;     wFsLnjmQZQ80248764 = wFsLnjmQZQ70038507;     wFsLnjmQZQ70038507 = wFsLnjmQZQ54544737;     wFsLnjmQZQ54544737 = wFsLnjmQZQ55082963;     wFsLnjmQZQ55082963 = wFsLnjmQZQ44092976;     wFsLnjmQZQ44092976 = wFsLnjmQZQ9519190;     wFsLnjmQZQ9519190 = wFsLnjmQZQ13585408;     wFsLnjmQZQ13585408 = wFsLnjmQZQ34673724;     wFsLnjmQZQ34673724 = wFsLnjmQZQ83515169;     wFsLnjmQZQ83515169 = wFsLnjmQZQ48358329;     wFsLnjmQZQ48358329 = wFsLnjmQZQ55192463;     wFsLnjmQZQ55192463 = wFsLnjmQZQ38672181;     wFsLnjmQZQ38672181 = wFsLnjmQZQ81893065;     wFsLnjmQZQ81893065 = wFsLnjmQZQ20715631;     wFsLnjmQZQ20715631 = wFsLnjmQZQ96432671;     wFsLnjmQZQ96432671 = wFsLnjmQZQ96906675;     wFsLnjmQZQ96906675 = wFsLnjmQZQ95258960;     wFsLnjmQZQ95258960 = wFsLnjmQZQ80812555;     wFsLnjmQZQ80812555 = wFsLnjmQZQ19129607;     wFsLnjmQZQ19129607 = wFsLnjmQZQ49584163;     wFsLnjmQZQ49584163 = wFsLnjmQZQ82114194;     wFsLnjmQZQ82114194 = wFsLnjmQZQ28599005;     wFsLnjmQZQ28599005 = wFsLnjmQZQ61510334;     wFsLnjmQZQ61510334 = wFsLnjmQZQ69576946;     wFsLnjmQZQ69576946 = wFsLnjmQZQ6618757;     wFsLnjmQZQ6618757 = wFsLnjmQZQ17916452;     wFsLnjmQZQ17916452 = wFsLnjmQZQ28020918;     wFsLnjmQZQ28020918 = wFsLnjmQZQ39239074;     wFsLnjmQZQ39239074 = wFsLnjmQZQ46670549;     wFsLnjmQZQ46670549 = wFsLnjmQZQ17344994;     wFsLnjmQZQ17344994 = wFsLnjmQZQ76055870;     wFsLnjmQZQ76055870 = wFsLnjmQZQ56848901;     wFsLnjmQZQ56848901 = wFsLnjmQZQ68695821;     wFsLnjmQZQ68695821 = wFsLnjmQZQ14654910;     wFsLnjmQZQ14654910 = wFsLnjmQZQ6224234;     wFsLnjmQZQ6224234 = wFsLnjmQZQ12351708;     wFsLnjmQZQ12351708 = wFsLnjmQZQ65296179;     wFsLnjmQZQ65296179 = wFsLnjmQZQ83379516;     wFsLnjmQZQ83379516 = wFsLnjmQZQ62574118;     wFsLnjmQZQ62574118 = wFsLnjmQZQ86851500;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ztpAwHoPgw64406743() {     int IfsQmoRKaF83367656 = -332072374;    int IfsQmoRKaF26280297 = -790767619;    int IfsQmoRKaF11129794 = -255232082;    int IfsQmoRKaF76927460 = -189182590;    int IfsQmoRKaF19143359 = -564821070;    int IfsQmoRKaF64700195 = -535160545;    int IfsQmoRKaF56391268 = -402477516;    int IfsQmoRKaF58623975 = 68912609;    int IfsQmoRKaF893833 = -796304934;    int IfsQmoRKaF88801610 = -947118370;    int IfsQmoRKaF14840864 = -190329646;    int IfsQmoRKaF70607226 = -34458209;    int IfsQmoRKaF78892613 = -309025699;    int IfsQmoRKaF41601184 = -316869716;    int IfsQmoRKaF29936055 = -546863267;    int IfsQmoRKaF68713188 = -601036567;    int IfsQmoRKaF23669558 = -434892410;    int IfsQmoRKaF60960753 = -775180351;    int IfsQmoRKaF49569812 = -245490465;    int IfsQmoRKaF11877006 = -70406334;    int IfsQmoRKaF46667029 = 32625352;    int IfsQmoRKaF68501216 = -776540760;    int IfsQmoRKaF4779205 = -783631117;    int IfsQmoRKaF89479365 = -50622224;    int IfsQmoRKaF59108480 = -134206894;    int IfsQmoRKaF93690817 = -429865250;    int IfsQmoRKaF76328936 = -695002807;    int IfsQmoRKaF61150119 = -681532643;    int IfsQmoRKaF63597071 = -352723114;    int IfsQmoRKaF95674493 = -367655784;    int IfsQmoRKaF70421608 = -183530929;    int IfsQmoRKaF64080329 = -788379675;    int IfsQmoRKaF27935665 = -108450776;    int IfsQmoRKaF88481214 = -131546318;    int IfsQmoRKaF85080276 = 44950863;    int IfsQmoRKaF86364341 = -282391161;    int IfsQmoRKaF19266593 = -71647513;    int IfsQmoRKaF6880760 = -228272362;    int IfsQmoRKaF78730858 = -614702635;    int IfsQmoRKaF39548859 = 38063738;    int IfsQmoRKaF24816159 = -124936125;    int IfsQmoRKaF33734736 = -343172085;    int IfsQmoRKaF27241172 = -957767139;    int IfsQmoRKaF71054638 = -274725126;    int IfsQmoRKaF30644783 = 62681847;    int IfsQmoRKaF3392255 = -152046050;    int IfsQmoRKaF9432525 = -617196497;    int IfsQmoRKaF24227082 = -703450702;    int IfsQmoRKaF17282388 = -867075251;    int IfsQmoRKaF89008316 = -836009832;    int IfsQmoRKaF59046930 = -139782485;    int IfsQmoRKaF36550121 = -799033500;    int IfsQmoRKaF7194828 = -412269374;    int IfsQmoRKaF5578581 = -250172669;    int IfsQmoRKaF17739714 = -53898623;    int IfsQmoRKaF14866441 = -555531614;    int IfsQmoRKaF21501092 = 92863497;    int IfsQmoRKaF21650429 = -104609859;    int IfsQmoRKaF17818980 = 45024303;    int IfsQmoRKaF25452542 = -34955821;    int IfsQmoRKaF88371258 = -840157739;    int IfsQmoRKaF95241149 = -720944873;    int IfsQmoRKaF95026904 = -578364277;    int IfsQmoRKaF5219339 = -328649150;    int IfsQmoRKaF18380003 = -663587442;    int IfsQmoRKaF50760534 = -401949972;    int IfsQmoRKaF42671561 = -926007433;    int IfsQmoRKaF90411399 = -77479381;    int IfsQmoRKaF56520907 = -261820580;    int IfsQmoRKaF43571714 = -164472106;    int IfsQmoRKaF49446596 = -429389054;    int IfsQmoRKaF16788798 = -106620049;    int IfsQmoRKaF82229894 = -60477716;    int IfsQmoRKaF10020954 = -183554203;    int IfsQmoRKaF87060847 = -945470210;    int IfsQmoRKaF12932293 = -624202564;    int IfsQmoRKaF41260044 = -818773622;    int IfsQmoRKaF33724566 = -408905992;    int IfsQmoRKaF58834583 = -13304071;    int IfsQmoRKaF55716226 = -982160844;    int IfsQmoRKaF84258292 = -812668753;    int IfsQmoRKaF52101855 = -991552105;    int IfsQmoRKaF43867732 = -814457393;    int IfsQmoRKaF74588754 = -516713283;    int IfsQmoRKaF36627563 = -127873299;    int IfsQmoRKaF33871487 = -384497429;    int IfsQmoRKaF56885502 = -276110302;    int IfsQmoRKaF22357085 = -858278108;    int IfsQmoRKaF70741500 = 22352304;    int IfsQmoRKaF70213836 = -399517524;    int IfsQmoRKaF64863249 = -275254659;    int IfsQmoRKaF97616164 = -967037655;    int IfsQmoRKaF89061780 = -173296665;    int IfsQmoRKaF53278317 = -479746815;    int IfsQmoRKaF51177600 = -121778524;    int IfsQmoRKaF29575010 = -403991252;    int IfsQmoRKaF38707832 = -764807808;    int IfsQmoRKaF22021833 = -529117989;    int IfsQmoRKaF52674636 = -611137684;    int IfsQmoRKaF79884248 = -332072374;     IfsQmoRKaF83367656 = IfsQmoRKaF26280297;     IfsQmoRKaF26280297 = IfsQmoRKaF11129794;     IfsQmoRKaF11129794 = IfsQmoRKaF76927460;     IfsQmoRKaF76927460 = IfsQmoRKaF19143359;     IfsQmoRKaF19143359 = IfsQmoRKaF64700195;     IfsQmoRKaF64700195 = IfsQmoRKaF56391268;     IfsQmoRKaF56391268 = IfsQmoRKaF58623975;     IfsQmoRKaF58623975 = IfsQmoRKaF893833;     IfsQmoRKaF893833 = IfsQmoRKaF88801610;     IfsQmoRKaF88801610 = IfsQmoRKaF14840864;     IfsQmoRKaF14840864 = IfsQmoRKaF70607226;     IfsQmoRKaF70607226 = IfsQmoRKaF78892613;     IfsQmoRKaF78892613 = IfsQmoRKaF41601184;     IfsQmoRKaF41601184 = IfsQmoRKaF29936055;     IfsQmoRKaF29936055 = IfsQmoRKaF68713188;     IfsQmoRKaF68713188 = IfsQmoRKaF23669558;     IfsQmoRKaF23669558 = IfsQmoRKaF60960753;     IfsQmoRKaF60960753 = IfsQmoRKaF49569812;     IfsQmoRKaF49569812 = IfsQmoRKaF11877006;     IfsQmoRKaF11877006 = IfsQmoRKaF46667029;     IfsQmoRKaF46667029 = IfsQmoRKaF68501216;     IfsQmoRKaF68501216 = IfsQmoRKaF4779205;     IfsQmoRKaF4779205 = IfsQmoRKaF89479365;     IfsQmoRKaF89479365 = IfsQmoRKaF59108480;     IfsQmoRKaF59108480 = IfsQmoRKaF93690817;     IfsQmoRKaF93690817 = IfsQmoRKaF76328936;     IfsQmoRKaF76328936 = IfsQmoRKaF61150119;     IfsQmoRKaF61150119 = IfsQmoRKaF63597071;     IfsQmoRKaF63597071 = IfsQmoRKaF95674493;     IfsQmoRKaF95674493 = IfsQmoRKaF70421608;     IfsQmoRKaF70421608 = IfsQmoRKaF64080329;     IfsQmoRKaF64080329 = IfsQmoRKaF27935665;     IfsQmoRKaF27935665 = IfsQmoRKaF88481214;     IfsQmoRKaF88481214 = IfsQmoRKaF85080276;     IfsQmoRKaF85080276 = IfsQmoRKaF86364341;     IfsQmoRKaF86364341 = IfsQmoRKaF19266593;     IfsQmoRKaF19266593 = IfsQmoRKaF6880760;     IfsQmoRKaF6880760 = IfsQmoRKaF78730858;     IfsQmoRKaF78730858 = IfsQmoRKaF39548859;     IfsQmoRKaF39548859 = IfsQmoRKaF24816159;     IfsQmoRKaF24816159 = IfsQmoRKaF33734736;     IfsQmoRKaF33734736 = IfsQmoRKaF27241172;     IfsQmoRKaF27241172 = IfsQmoRKaF71054638;     IfsQmoRKaF71054638 = IfsQmoRKaF30644783;     IfsQmoRKaF30644783 = IfsQmoRKaF3392255;     IfsQmoRKaF3392255 = IfsQmoRKaF9432525;     IfsQmoRKaF9432525 = IfsQmoRKaF24227082;     IfsQmoRKaF24227082 = IfsQmoRKaF17282388;     IfsQmoRKaF17282388 = IfsQmoRKaF89008316;     IfsQmoRKaF89008316 = IfsQmoRKaF59046930;     IfsQmoRKaF59046930 = IfsQmoRKaF36550121;     IfsQmoRKaF36550121 = IfsQmoRKaF7194828;     IfsQmoRKaF7194828 = IfsQmoRKaF5578581;     IfsQmoRKaF5578581 = IfsQmoRKaF17739714;     IfsQmoRKaF17739714 = IfsQmoRKaF14866441;     IfsQmoRKaF14866441 = IfsQmoRKaF21501092;     IfsQmoRKaF21501092 = IfsQmoRKaF21650429;     IfsQmoRKaF21650429 = IfsQmoRKaF17818980;     IfsQmoRKaF17818980 = IfsQmoRKaF25452542;     IfsQmoRKaF25452542 = IfsQmoRKaF88371258;     IfsQmoRKaF88371258 = IfsQmoRKaF95241149;     IfsQmoRKaF95241149 = IfsQmoRKaF95026904;     IfsQmoRKaF95026904 = IfsQmoRKaF5219339;     IfsQmoRKaF5219339 = IfsQmoRKaF18380003;     IfsQmoRKaF18380003 = IfsQmoRKaF50760534;     IfsQmoRKaF50760534 = IfsQmoRKaF42671561;     IfsQmoRKaF42671561 = IfsQmoRKaF90411399;     IfsQmoRKaF90411399 = IfsQmoRKaF56520907;     IfsQmoRKaF56520907 = IfsQmoRKaF43571714;     IfsQmoRKaF43571714 = IfsQmoRKaF49446596;     IfsQmoRKaF49446596 = IfsQmoRKaF16788798;     IfsQmoRKaF16788798 = IfsQmoRKaF82229894;     IfsQmoRKaF82229894 = IfsQmoRKaF10020954;     IfsQmoRKaF10020954 = IfsQmoRKaF87060847;     IfsQmoRKaF87060847 = IfsQmoRKaF12932293;     IfsQmoRKaF12932293 = IfsQmoRKaF41260044;     IfsQmoRKaF41260044 = IfsQmoRKaF33724566;     IfsQmoRKaF33724566 = IfsQmoRKaF58834583;     IfsQmoRKaF58834583 = IfsQmoRKaF55716226;     IfsQmoRKaF55716226 = IfsQmoRKaF84258292;     IfsQmoRKaF84258292 = IfsQmoRKaF52101855;     IfsQmoRKaF52101855 = IfsQmoRKaF43867732;     IfsQmoRKaF43867732 = IfsQmoRKaF74588754;     IfsQmoRKaF74588754 = IfsQmoRKaF36627563;     IfsQmoRKaF36627563 = IfsQmoRKaF33871487;     IfsQmoRKaF33871487 = IfsQmoRKaF56885502;     IfsQmoRKaF56885502 = IfsQmoRKaF22357085;     IfsQmoRKaF22357085 = IfsQmoRKaF70741500;     IfsQmoRKaF70741500 = IfsQmoRKaF70213836;     IfsQmoRKaF70213836 = IfsQmoRKaF64863249;     IfsQmoRKaF64863249 = IfsQmoRKaF97616164;     IfsQmoRKaF97616164 = IfsQmoRKaF89061780;     IfsQmoRKaF89061780 = IfsQmoRKaF53278317;     IfsQmoRKaF53278317 = IfsQmoRKaF51177600;     IfsQmoRKaF51177600 = IfsQmoRKaF29575010;     IfsQmoRKaF29575010 = IfsQmoRKaF38707832;     IfsQmoRKaF38707832 = IfsQmoRKaF22021833;     IfsQmoRKaF22021833 = IfsQmoRKaF52674636;     IfsQmoRKaF52674636 = IfsQmoRKaF79884248;     IfsQmoRKaF79884248 = IfsQmoRKaF83367656;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void BuwRkMuNBJ92331196() {     int VemLJQFPIp54292065 = -292102032;    int VemLJQFPIp14252137 = -509275707;    int VemLJQFPIp84589535 = -729437619;    int VemLJQFPIp36294309 = -10943903;    int VemLJQFPIp22873795 = -307663440;    int VemLJQFPIp2340507 = -260423524;    int VemLJQFPIp9158745 = -387392517;    int VemLJQFPIp13673047 = -615378354;    int VemLJQFPIp21188879 = -959321678;    int VemLJQFPIp21967521 = -639685495;    int VemLJQFPIp70883728 = -934873033;    int VemLJQFPIp57451846 = -27221389;    int VemLJQFPIp23508990 = -291392234;    int VemLJQFPIp94038690 = 75556517;    int VemLJQFPIp1152979 = -491000445;    int VemLJQFPIp61231243 = -639864130;    int VemLJQFPIp79488670 = -569226945;    int VemLJQFPIp37480603 = -524964866;    int VemLJQFPIp30242202 = -260635041;    int VemLJQFPIp27477680 = -311504014;    int VemLJQFPIp93171330 = -671457652;    int VemLJQFPIp97047999 = -439821465;    int VemLJQFPIp8951568 = -699937643;    int VemLJQFPIp33415148 = -91350910;    int VemLJQFPIp46701693 = -855483437;    int VemLJQFPIp98513083 = -998812935;    int VemLJQFPIp26948503 = -6771375;    int VemLJQFPIp7203444 = -412110003;    int VemLJQFPIp44255053 = -854842404;    int VemLJQFPIp30651445 = -761238752;    int VemLJQFPIp74175392 = -900398668;    int VemLJQFPIp55002509 = 57499258;    int VemLJQFPIp66919264 = -201698515;    int VemLJQFPIp47695230 = -384252213;    int VemLJQFPIp34339146 = -697935713;    int VemLJQFPIp46657840 = -631756027;    int VemLJQFPIp6148858 = -801386215;    int VemLJQFPIp39393887 = -198320845;    int VemLJQFPIp4198385 = -303773772;    int VemLJQFPIp96219030 = -383029668;    int VemLJQFPIp3863707 = -675390055;    int VemLJQFPIp26767329 = -438470584;    int VemLJQFPIp45724569 = -604998457;    int VemLJQFPIp92085416 = -826425502;    int VemLJQFPIp46659648 = -217081074;    int VemLJQFPIp54886943 = -417848643;    int VemLJQFPIp20425060 = -3888596;    int VemLJQFPIp84296124 = -427742533;    int VemLJQFPIp44409330 = -630785150;    int VemLJQFPIp18022073 = -31038577;    int VemLJQFPIp7329008 = -309780593;    int VemLJQFPIp88973808 = -844192444;    int VemLJQFPIp68988776 = -32306474;    int VemLJQFPIp27312003 = -101269817;    int VemLJQFPIp99159866 = -989979637;    int VemLJQFPIp57244065 = -852280567;    int VemLJQFPIp5300570 = -809338065;    int VemLJQFPIp51174388 = -538086709;    int VemLJQFPIp89592615 = -155460466;    int VemLJQFPIp24360711 = -308850505;    int VemLJQFPIp75392003 = -153652149;    int VemLJQFPIp1955301 = -975282514;    int VemLJQFPIp69417993 = -760535951;    int VemLJQFPIp90537433 = -98082927;    int VemLJQFPIp47792129 = -739286828;    int VemLJQFPIp15881220 = -892372291;    int VemLJQFPIp90532582 = -825522874;    int VemLJQFPIp75813760 = -907140022;    int VemLJQFPIp59699544 = -226507770;    int VemLJQFPIp54495139 = -859244418;    int VemLJQFPIp55082385 = -838477916;    int VemLJQFPIp40094783 = -270906101;    int VemLJQFPIp33282219 = -121191095;    int VemLJQFPIp34023172 = -877605373;    int VemLJQFPIp23613974 = -636113960;    int VemLJQFPIp66404002 = -132987068;    int VemLJQFPIp51323431 = -834823009;    int VemLJQFPIp16866151 = -873512142;    int VemLJQFPIp86755500 = -874269836;    int VemLJQFPIp91814750 = -337634794;    int VemLJQFPIp78088024 = -894924339;    int VemLJQFPIp42652379 = -579028843;    int VemLJQFPIp62794114 = -781324854;    int VemLJQFPIp26232981 = -723803827;    int VemLJQFPIp23322437 = -351458159;    int VemLJQFPIp85201584 = 43793776;    int VemLJQFPIp86013733 = -910194269;    int VemLJQFPIp39607261 = -428699;    int VemLJQFPIp48535364 = -394272576;    int VemLJQFPIp77095081 = -845655147;    int VemLJQFPIp41357270 = -822417963;    int VemLJQFPIp54974470 = -163299506;    int VemLJQFPIp49801271 = 57139620;    int VemLJQFPIp79837673 = -994923267;    int VemLJQFPIp20827027 = -129377520;    int VemLJQFPIp1908406 = -700107541;    int VemLJQFPIp57349335 = -677934634;    int VemLJQFPIp55187135 = -406915530;    int VemLJQFPIp44293288 = 12861325;    int VemLJQFPIp30778429 = -292102032;     VemLJQFPIp54292065 = VemLJQFPIp14252137;     VemLJQFPIp14252137 = VemLJQFPIp84589535;     VemLJQFPIp84589535 = VemLJQFPIp36294309;     VemLJQFPIp36294309 = VemLJQFPIp22873795;     VemLJQFPIp22873795 = VemLJQFPIp2340507;     VemLJQFPIp2340507 = VemLJQFPIp9158745;     VemLJQFPIp9158745 = VemLJQFPIp13673047;     VemLJQFPIp13673047 = VemLJQFPIp21188879;     VemLJQFPIp21188879 = VemLJQFPIp21967521;     VemLJQFPIp21967521 = VemLJQFPIp70883728;     VemLJQFPIp70883728 = VemLJQFPIp57451846;     VemLJQFPIp57451846 = VemLJQFPIp23508990;     VemLJQFPIp23508990 = VemLJQFPIp94038690;     VemLJQFPIp94038690 = VemLJQFPIp1152979;     VemLJQFPIp1152979 = VemLJQFPIp61231243;     VemLJQFPIp61231243 = VemLJQFPIp79488670;     VemLJQFPIp79488670 = VemLJQFPIp37480603;     VemLJQFPIp37480603 = VemLJQFPIp30242202;     VemLJQFPIp30242202 = VemLJQFPIp27477680;     VemLJQFPIp27477680 = VemLJQFPIp93171330;     VemLJQFPIp93171330 = VemLJQFPIp97047999;     VemLJQFPIp97047999 = VemLJQFPIp8951568;     VemLJQFPIp8951568 = VemLJQFPIp33415148;     VemLJQFPIp33415148 = VemLJQFPIp46701693;     VemLJQFPIp46701693 = VemLJQFPIp98513083;     VemLJQFPIp98513083 = VemLJQFPIp26948503;     VemLJQFPIp26948503 = VemLJQFPIp7203444;     VemLJQFPIp7203444 = VemLJQFPIp44255053;     VemLJQFPIp44255053 = VemLJQFPIp30651445;     VemLJQFPIp30651445 = VemLJQFPIp74175392;     VemLJQFPIp74175392 = VemLJQFPIp55002509;     VemLJQFPIp55002509 = VemLJQFPIp66919264;     VemLJQFPIp66919264 = VemLJQFPIp47695230;     VemLJQFPIp47695230 = VemLJQFPIp34339146;     VemLJQFPIp34339146 = VemLJQFPIp46657840;     VemLJQFPIp46657840 = VemLJQFPIp6148858;     VemLJQFPIp6148858 = VemLJQFPIp39393887;     VemLJQFPIp39393887 = VemLJQFPIp4198385;     VemLJQFPIp4198385 = VemLJQFPIp96219030;     VemLJQFPIp96219030 = VemLJQFPIp3863707;     VemLJQFPIp3863707 = VemLJQFPIp26767329;     VemLJQFPIp26767329 = VemLJQFPIp45724569;     VemLJQFPIp45724569 = VemLJQFPIp92085416;     VemLJQFPIp92085416 = VemLJQFPIp46659648;     VemLJQFPIp46659648 = VemLJQFPIp54886943;     VemLJQFPIp54886943 = VemLJQFPIp20425060;     VemLJQFPIp20425060 = VemLJQFPIp84296124;     VemLJQFPIp84296124 = VemLJQFPIp44409330;     VemLJQFPIp44409330 = VemLJQFPIp18022073;     VemLJQFPIp18022073 = VemLJQFPIp7329008;     VemLJQFPIp7329008 = VemLJQFPIp88973808;     VemLJQFPIp88973808 = VemLJQFPIp68988776;     VemLJQFPIp68988776 = VemLJQFPIp27312003;     VemLJQFPIp27312003 = VemLJQFPIp99159866;     VemLJQFPIp99159866 = VemLJQFPIp57244065;     VemLJQFPIp57244065 = VemLJQFPIp5300570;     VemLJQFPIp5300570 = VemLJQFPIp51174388;     VemLJQFPIp51174388 = VemLJQFPIp89592615;     VemLJQFPIp89592615 = VemLJQFPIp24360711;     VemLJQFPIp24360711 = VemLJQFPIp75392003;     VemLJQFPIp75392003 = VemLJQFPIp1955301;     VemLJQFPIp1955301 = VemLJQFPIp69417993;     VemLJQFPIp69417993 = VemLJQFPIp90537433;     VemLJQFPIp90537433 = VemLJQFPIp47792129;     VemLJQFPIp47792129 = VemLJQFPIp15881220;     VemLJQFPIp15881220 = VemLJQFPIp90532582;     VemLJQFPIp90532582 = VemLJQFPIp75813760;     VemLJQFPIp75813760 = VemLJQFPIp59699544;     VemLJQFPIp59699544 = VemLJQFPIp54495139;     VemLJQFPIp54495139 = VemLJQFPIp55082385;     VemLJQFPIp55082385 = VemLJQFPIp40094783;     VemLJQFPIp40094783 = VemLJQFPIp33282219;     VemLJQFPIp33282219 = VemLJQFPIp34023172;     VemLJQFPIp34023172 = VemLJQFPIp23613974;     VemLJQFPIp23613974 = VemLJQFPIp66404002;     VemLJQFPIp66404002 = VemLJQFPIp51323431;     VemLJQFPIp51323431 = VemLJQFPIp16866151;     VemLJQFPIp16866151 = VemLJQFPIp86755500;     VemLJQFPIp86755500 = VemLJQFPIp91814750;     VemLJQFPIp91814750 = VemLJQFPIp78088024;     VemLJQFPIp78088024 = VemLJQFPIp42652379;     VemLJQFPIp42652379 = VemLJQFPIp62794114;     VemLJQFPIp62794114 = VemLJQFPIp26232981;     VemLJQFPIp26232981 = VemLJQFPIp23322437;     VemLJQFPIp23322437 = VemLJQFPIp85201584;     VemLJQFPIp85201584 = VemLJQFPIp86013733;     VemLJQFPIp86013733 = VemLJQFPIp39607261;     VemLJQFPIp39607261 = VemLJQFPIp48535364;     VemLJQFPIp48535364 = VemLJQFPIp77095081;     VemLJQFPIp77095081 = VemLJQFPIp41357270;     VemLJQFPIp41357270 = VemLJQFPIp54974470;     VemLJQFPIp54974470 = VemLJQFPIp49801271;     VemLJQFPIp49801271 = VemLJQFPIp79837673;     VemLJQFPIp79837673 = VemLJQFPIp20827027;     VemLJQFPIp20827027 = VemLJQFPIp1908406;     VemLJQFPIp1908406 = VemLJQFPIp57349335;     VemLJQFPIp57349335 = VemLJQFPIp55187135;     VemLJQFPIp55187135 = VemLJQFPIp44293288;     VemLJQFPIp44293288 = VemLJQFPIp30778429;     VemLJQFPIp30778429 = VemLJQFPIp54292065;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void HsglSKKuot28645974() {     int ldGqflxuMX31340051 = -491509437;    int ldGqflxuMX7024941 = -994788451;    int ldGqflxuMX72778248 = -297347462;    int ldGqflxuMX37656078 = -202913015;    int ldGqflxuMX86659617 = -102800359;    int ldGqflxuMX96592588 = -550749926;    int ldGqflxuMX53867851 = -806736029;    int ldGqflxuMX49267958 = -782365914;    int ldGqflxuMX23386256 = -76725018;    int ldGqflxuMX99723577 = 75578773;    int ldGqflxuMX66716277 = -497381934;    int ldGqflxuMX61827831 = -728912409;    int ldGqflxuMX22481572 = -691991384;    int ldGqflxuMX75775653 = -819102767;    int ldGqflxuMX22940220 = -62886937;    int ldGqflxuMX20690144 = -318895586;    int ldGqflxuMX73291025 = -400492024;    int ldGqflxuMX88053073 = -643200402;    int ldGqflxuMX52316164 = -63566448;    int ldGqflxuMX51554756 = -297480163;    int ldGqflxuMX48559401 = -420561737;    int ldGqflxuMX33819542 = -601040003;    int ldGqflxuMX11836326 = 96196186;    int ldGqflxuMX17693195 = -473464061;    int ldGqflxuMX49551867 = -423262160;    int ldGqflxuMX11482949 = -438210015;    int ldGqflxuMX5806266 = -18402434;    int ldGqflxuMX30960369 = -699649329;    int ldGqflxuMX78366844 = -933274083;    int ldGqflxuMX58154164 = -196861213;    int ldGqflxuMX36759048 = -43494111;    int ldGqflxuMX58811453 = -614246864;    int ldGqflxuMX30161388 = 14384592;    int ldGqflxuMX1456973 = -511818140;    int ldGqflxuMX62714629 = -720241471;    int ldGqflxuMX32849061 = -15381254;    int ldGqflxuMX62351690 = -285107409;    int ldGqflxuMX36079548 = 55387341;    int ldGqflxuMX67962568 = -374086989;    int ldGqflxuMX68518247 = -568130611;    int ldGqflxuMX724811 = -103173981;    int ldGqflxuMX66252717 = -610119280;    int ldGqflxuMX81991583 = -873904104;    int ldGqflxuMX41292037 = -740504373;    int ldGqflxuMX90608925 = -785482748;    int ldGqflxuMX77892858 = -856822683;    int ldGqflxuMX21498376 = -128075611;    int ldGqflxuMX76938527 = -653168540;    int ldGqflxuMX62553612 = -916468175;    int ldGqflxuMX39902058 = -826053244;    int ldGqflxuMX78052394 = -743517365;    int ldGqflxuMX37659957 = -307931961;    int ldGqflxuMX3582834 = -652079153;    int ldGqflxuMX34764035 = -840917259;    int ldGqflxuMX80086572 = -669693156;    int ldGqflxuMX97520509 = -890469435;    int ldGqflxuMX95188614 = -990984637;    int ldGqflxuMX55085053 = -823883402;    int ldGqflxuMX88104211 = -779650855;    int ldGqflxuMX75176669 = -664590344;    int ldGqflxuMX90786322 = -432347493;    int ldGqflxuMX22907482 = -7086700;    int ldGqflxuMX70901114 = -849091831;    int ldGqflxuMX65232092 = -879863806;    int ldGqflxuMX62964530 = -880927116;    int ldGqflxuMX7904825 = -883135071;    int ldGqflxuMX31666444 = -643297001;    int ldGqflxuMX21024599 = -80173245;    int ldGqflxuMX13061024 = 1138704;    int ldGqflxuMX90091159 = 52494316;    int ldGqflxuMX58338454 = 66211822;    int ldGqflxuMX37211478 = -355879366;    int ldGqflxuMX20090506 = -169113414;    int ldGqflxuMX83797917 = -495435837;    int ldGqflxuMX50829945 = -94306183;    int ldGqflxuMX82306684 = -810442458;    int ldGqflxuMX51827958 = -727135900;    int ldGqflxuMX70544288 = -163299441;    int ldGqflxuMX27084270 = -687981313;    int ldGqflxuMX71659008 = -566439478;    int ldGqflxuMX89984572 = -210134405;    int ldGqflxuMX28867739 = -365233895;    int ldGqflxuMX68406757 = -783181154;    int ldGqflxuMX38464787 = -7220840;    int ldGqflxuMX80101769 = -453343848;    int ldGqflxuMX99099090 = -735562151;    int ldGqflxuMX55228619 = -962167711;    int ldGqflxuMX95397352 = -144698150;    int ldGqflxuMX21370400 = -842124985;    int ldGqflxuMX65194120 = -829772036;    int ldGqflxuMX37660446 = -24396617;    int ldGqflxuMX7266637 = -461224007;    int ldGqflxuMX47975336 = -164961804;    int ldGqflxuMX92785898 = -709496645;    int ldGqflxuMX77731924 = -35783119;    int ldGqflxuMX77817328 = 3912719;    int ldGqflxuMX95351603 = -761027449;    int ldGqflxuMX16759491 = -994040299;    int ldGqflxuMX78327507 = -859577258;    int ldGqflxuMX82704100 = -491509437;     ldGqflxuMX31340051 = ldGqflxuMX7024941;     ldGqflxuMX7024941 = ldGqflxuMX72778248;     ldGqflxuMX72778248 = ldGqflxuMX37656078;     ldGqflxuMX37656078 = ldGqflxuMX86659617;     ldGqflxuMX86659617 = ldGqflxuMX96592588;     ldGqflxuMX96592588 = ldGqflxuMX53867851;     ldGqflxuMX53867851 = ldGqflxuMX49267958;     ldGqflxuMX49267958 = ldGqflxuMX23386256;     ldGqflxuMX23386256 = ldGqflxuMX99723577;     ldGqflxuMX99723577 = ldGqflxuMX66716277;     ldGqflxuMX66716277 = ldGqflxuMX61827831;     ldGqflxuMX61827831 = ldGqflxuMX22481572;     ldGqflxuMX22481572 = ldGqflxuMX75775653;     ldGqflxuMX75775653 = ldGqflxuMX22940220;     ldGqflxuMX22940220 = ldGqflxuMX20690144;     ldGqflxuMX20690144 = ldGqflxuMX73291025;     ldGqflxuMX73291025 = ldGqflxuMX88053073;     ldGqflxuMX88053073 = ldGqflxuMX52316164;     ldGqflxuMX52316164 = ldGqflxuMX51554756;     ldGqflxuMX51554756 = ldGqflxuMX48559401;     ldGqflxuMX48559401 = ldGqflxuMX33819542;     ldGqflxuMX33819542 = ldGqflxuMX11836326;     ldGqflxuMX11836326 = ldGqflxuMX17693195;     ldGqflxuMX17693195 = ldGqflxuMX49551867;     ldGqflxuMX49551867 = ldGqflxuMX11482949;     ldGqflxuMX11482949 = ldGqflxuMX5806266;     ldGqflxuMX5806266 = ldGqflxuMX30960369;     ldGqflxuMX30960369 = ldGqflxuMX78366844;     ldGqflxuMX78366844 = ldGqflxuMX58154164;     ldGqflxuMX58154164 = ldGqflxuMX36759048;     ldGqflxuMX36759048 = ldGqflxuMX58811453;     ldGqflxuMX58811453 = ldGqflxuMX30161388;     ldGqflxuMX30161388 = ldGqflxuMX1456973;     ldGqflxuMX1456973 = ldGqflxuMX62714629;     ldGqflxuMX62714629 = ldGqflxuMX32849061;     ldGqflxuMX32849061 = ldGqflxuMX62351690;     ldGqflxuMX62351690 = ldGqflxuMX36079548;     ldGqflxuMX36079548 = ldGqflxuMX67962568;     ldGqflxuMX67962568 = ldGqflxuMX68518247;     ldGqflxuMX68518247 = ldGqflxuMX724811;     ldGqflxuMX724811 = ldGqflxuMX66252717;     ldGqflxuMX66252717 = ldGqflxuMX81991583;     ldGqflxuMX81991583 = ldGqflxuMX41292037;     ldGqflxuMX41292037 = ldGqflxuMX90608925;     ldGqflxuMX90608925 = ldGqflxuMX77892858;     ldGqflxuMX77892858 = ldGqflxuMX21498376;     ldGqflxuMX21498376 = ldGqflxuMX76938527;     ldGqflxuMX76938527 = ldGqflxuMX62553612;     ldGqflxuMX62553612 = ldGqflxuMX39902058;     ldGqflxuMX39902058 = ldGqflxuMX78052394;     ldGqflxuMX78052394 = ldGqflxuMX37659957;     ldGqflxuMX37659957 = ldGqflxuMX3582834;     ldGqflxuMX3582834 = ldGqflxuMX34764035;     ldGqflxuMX34764035 = ldGqflxuMX80086572;     ldGqflxuMX80086572 = ldGqflxuMX97520509;     ldGqflxuMX97520509 = ldGqflxuMX95188614;     ldGqflxuMX95188614 = ldGqflxuMX55085053;     ldGqflxuMX55085053 = ldGqflxuMX88104211;     ldGqflxuMX88104211 = ldGqflxuMX75176669;     ldGqflxuMX75176669 = ldGqflxuMX90786322;     ldGqflxuMX90786322 = ldGqflxuMX22907482;     ldGqflxuMX22907482 = ldGqflxuMX70901114;     ldGqflxuMX70901114 = ldGqflxuMX65232092;     ldGqflxuMX65232092 = ldGqflxuMX62964530;     ldGqflxuMX62964530 = ldGqflxuMX7904825;     ldGqflxuMX7904825 = ldGqflxuMX31666444;     ldGqflxuMX31666444 = ldGqflxuMX21024599;     ldGqflxuMX21024599 = ldGqflxuMX13061024;     ldGqflxuMX13061024 = ldGqflxuMX90091159;     ldGqflxuMX90091159 = ldGqflxuMX58338454;     ldGqflxuMX58338454 = ldGqflxuMX37211478;     ldGqflxuMX37211478 = ldGqflxuMX20090506;     ldGqflxuMX20090506 = ldGqflxuMX83797917;     ldGqflxuMX83797917 = ldGqflxuMX50829945;     ldGqflxuMX50829945 = ldGqflxuMX82306684;     ldGqflxuMX82306684 = ldGqflxuMX51827958;     ldGqflxuMX51827958 = ldGqflxuMX70544288;     ldGqflxuMX70544288 = ldGqflxuMX27084270;     ldGqflxuMX27084270 = ldGqflxuMX71659008;     ldGqflxuMX71659008 = ldGqflxuMX89984572;     ldGqflxuMX89984572 = ldGqflxuMX28867739;     ldGqflxuMX28867739 = ldGqflxuMX68406757;     ldGqflxuMX68406757 = ldGqflxuMX38464787;     ldGqflxuMX38464787 = ldGqflxuMX80101769;     ldGqflxuMX80101769 = ldGqflxuMX99099090;     ldGqflxuMX99099090 = ldGqflxuMX55228619;     ldGqflxuMX55228619 = ldGqflxuMX95397352;     ldGqflxuMX95397352 = ldGqflxuMX21370400;     ldGqflxuMX21370400 = ldGqflxuMX65194120;     ldGqflxuMX65194120 = ldGqflxuMX37660446;     ldGqflxuMX37660446 = ldGqflxuMX7266637;     ldGqflxuMX7266637 = ldGqflxuMX47975336;     ldGqflxuMX47975336 = ldGqflxuMX92785898;     ldGqflxuMX92785898 = ldGqflxuMX77731924;     ldGqflxuMX77731924 = ldGqflxuMX77817328;     ldGqflxuMX77817328 = ldGqflxuMX95351603;     ldGqflxuMX95351603 = ldGqflxuMX16759491;     ldGqflxuMX16759491 = ldGqflxuMX78327507;     ldGqflxuMX78327507 = ldGqflxuMX82704100;     ldGqflxuMX82704100 = ldGqflxuMX31340051;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void VmbFnswveY56570428() {     int gISGvmMucD2264460 = -451539096;    int gISGvmMucD94996780 = -713296539;    int gISGvmMucD46237990 = -771552999;    int gISGvmMucD97022927 = -24674328;    int gISGvmMucD90390053 = -945642728;    int gISGvmMucD34232900 = -276012905;    int gISGvmMucD6635328 = -791651030;    int gISGvmMucD4317030 = -366656878;    int gISGvmMucD43681302 = -239741762;    int gISGvmMucD32889488 = -716988352;    int gISGvmMucD22759142 = -141925320;    int gISGvmMucD48672451 = -721675589;    int gISGvmMucD67097948 = -674357919;    int gISGvmMucD28213159 = -426676534;    int gISGvmMucD94157143 = -7024116;    int gISGvmMucD13208199 = -357723150;    int gISGvmMucD29110138 = -534826559;    int gISGvmMucD64572924 = -392984918;    int gISGvmMucD32988554 = -78711024;    int gISGvmMucD67155430 = -538577844;    int gISGvmMucD95063703 = -24644741;    int gISGvmMucD62366325 = -264320708;    int gISGvmMucD16008689 = -920110340;    int gISGvmMucD61628977 = -514192747;    int gISGvmMucD37145079 = -44538704;    int gISGvmMucD16305215 = 92842300;    int gISGvmMucD56425832 = -430171003;    int gISGvmMucD77013694 = -430226690;    int gISGvmMucD59024826 = -335393373;    int gISGvmMucD93131115 = -590444180;    int gISGvmMucD40512832 = -760361851;    int gISGvmMucD49733632 = -868367931;    int gISGvmMucD69144986 = -78863147;    int gISGvmMucD60670989 = -764524034;    int gISGvmMucD11973499 = -363128047;    int gISGvmMucD93142559 = -364746119;    int gISGvmMucD49233955 = 85153889;    int gISGvmMucD68592675 = 85338858;    int gISGvmMucD93430094 = -63158125;    int gISGvmMucD25188419 = -989224017;    int gISGvmMucD79772358 = -653627911;    int gISGvmMucD59285310 = -705417779;    int gISGvmMucD474981 = -521135422;    int gISGvmMucD62322815 = -192204750;    int gISGvmMucD6623791 = 34754331;    int gISGvmMucD29387547 = -22625276;    int gISGvmMucD32490911 = -614767710;    int gISGvmMucD37007570 = -377460370;    int gISGvmMucD89680555 = -680178075;    int gISGvmMucD68915813 = -21081989;    int gISGvmMucD26334472 = -913515472;    int gISGvmMucD90083644 = -353090906;    int gISGvmMucD65376783 = -272116252;    int gISGvmMucD56497457 = -692014407;    int gISGvmMucD61506725 = -505774170;    int gISGvmMucD39898134 = -87218388;    int gISGvmMucD78988092 = -793186199;    int gISGvmMucD84609012 = -157360252;    int gISGvmMucD59877848 = -980135624;    int gISGvmMucD74084839 = -938485028;    int gISGvmMucD77807067 = -845841903;    int gISGvmMucD29621634 = -261424341;    int gISGvmMucD45292203 = 68736495;    int gISGvmMucD50550187 = -649297582;    int gISGvmMucD92376656 = -956626501;    int gISGvmMucD73025509 = -273557390;    int gISGvmMucD79527464 = -542812443;    int gISGvmMucD6426960 = -909833885;    int gISGvmMucD16239661 = 36451513;    int gISGvmMucD1014585 = -642277997;    int gISGvmMucD63974243 = -342877039;    int gISGvmMucD60517463 = -520165418;    int gISGvmMucD71142829 = -229826793;    int gISGvmMucD7800136 = -89487008;    int gISGvmMucD87383071 = -884949933;    int gISGvmMucD35778393 = -319226962;    int gISGvmMucD61891345 = -743185287;    int gISGvmMucD53685873 = -627905591;    int gISGvmMucD55005187 = -448947078;    int gISGvmMucD7757533 = 78086572;    int gISGvmMucD83814304 = -292389991;    int gISGvmMucD19418263 = 47289367;    int gISGvmMucD87333139 = -750048616;    int gISGvmMucD90109013 = -214311385;    int gISGvmMucD66796643 = -676928708;    int gISGvmMucD50429187 = -307270946;    int gISGvmMucD84356849 = -496251679;    int gISGvmMucD12647529 = -386848741;    int gISGvmMucD99164263 = -158749865;    int gISGvmMucD72075364 = -175909660;    int gISGvmMucD14154467 = -571559921;    int gISGvmMucD64624943 = -757485859;    int gISGvmMucD8714827 = 65474481;    int gISGvmMucD19345256 = -124673098;    int gISGvmMucD47381351 = -43382114;    int gISGvmMucD50150724 = -292203570;    int gISGvmMucD13993107 = -674154275;    int gISGvmMucD49924793 = -871837840;    int gISGvmMucD69946159 = -235578249;    int gISGvmMucD33598281 = -451539096;     gISGvmMucD2264460 = gISGvmMucD94996780;     gISGvmMucD94996780 = gISGvmMucD46237990;     gISGvmMucD46237990 = gISGvmMucD97022927;     gISGvmMucD97022927 = gISGvmMucD90390053;     gISGvmMucD90390053 = gISGvmMucD34232900;     gISGvmMucD34232900 = gISGvmMucD6635328;     gISGvmMucD6635328 = gISGvmMucD4317030;     gISGvmMucD4317030 = gISGvmMucD43681302;     gISGvmMucD43681302 = gISGvmMucD32889488;     gISGvmMucD32889488 = gISGvmMucD22759142;     gISGvmMucD22759142 = gISGvmMucD48672451;     gISGvmMucD48672451 = gISGvmMucD67097948;     gISGvmMucD67097948 = gISGvmMucD28213159;     gISGvmMucD28213159 = gISGvmMucD94157143;     gISGvmMucD94157143 = gISGvmMucD13208199;     gISGvmMucD13208199 = gISGvmMucD29110138;     gISGvmMucD29110138 = gISGvmMucD64572924;     gISGvmMucD64572924 = gISGvmMucD32988554;     gISGvmMucD32988554 = gISGvmMucD67155430;     gISGvmMucD67155430 = gISGvmMucD95063703;     gISGvmMucD95063703 = gISGvmMucD62366325;     gISGvmMucD62366325 = gISGvmMucD16008689;     gISGvmMucD16008689 = gISGvmMucD61628977;     gISGvmMucD61628977 = gISGvmMucD37145079;     gISGvmMucD37145079 = gISGvmMucD16305215;     gISGvmMucD16305215 = gISGvmMucD56425832;     gISGvmMucD56425832 = gISGvmMucD77013694;     gISGvmMucD77013694 = gISGvmMucD59024826;     gISGvmMucD59024826 = gISGvmMucD93131115;     gISGvmMucD93131115 = gISGvmMucD40512832;     gISGvmMucD40512832 = gISGvmMucD49733632;     gISGvmMucD49733632 = gISGvmMucD69144986;     gISGvmMucD69144986 = gISGvmMucD60670989;     gISGvmMucD60670989 = gISGvmMucD11973499;     gISGvmMucD11973499 = gISGvmMucD93142559;     gISGvmMucD93142559 = gISGvmMucD49233955;     gISGvmMucD49233955 = gISGvmMucD68592675;     gISGvmMucD68592675 = gISGvmMucD93430094;     gISGvmMucD93430094 = gISGvmMucD25188419;     gISGvmMucD25188419 = gISGvmMucD79772358;     gISGvmMucD79772358 = gISGvmMucD59285310;     gISGvmMucD59285310 = gISGvmMucD474981;     gISGvmMucD474981 = gISGvmMucD62322815;     gISGvmMucD62322815 = gISGvmMucD6623791;     gISGvmMucD6623791 = gISGvmMucD29387547;     gISGvmMucD29387547 = gISGvmMucD32490911;     gISGvmMucD32490911 = gISGvmMucD37007570;     gISGvmMucD37007570 = gISGvmMucD89680555;     gISGvmMucD89680555 = gISGvmMucD68915813;     gISGvmMucD68915813 = gISGvmMucD26334472;     gISGvmMucD26334472 = gISGvmMucD90083644;     gISGvmMucD90083644 = gISGvmMucD65376783;     gISGvmMucD65376783 = gISGvmMucD56497457;     gISGvmMucD56497457 = gISGvmMucD61506725;     gISGvmMucD61506725 = gISGvmMucD39898134;     gISGvmMucD39898134 = gISGvmMucD78988092;     gISGvmMucD78988092 = gISGvmMucD84609012;     gISGvmMucD84609012 = gISGvmMucD59877848;     gISGvmMucD59877848 = gISGvmMucD74084839;     gISGvmMucD74084839 = gISGvmMucD77807067;     gISGvmMucD77807067 = gISGvmMucD29621634;     gISGvmMucD29621634 = gISGvmMucD45292203;     gISGvmMucD45292203 = gISGvmMucD50550187;     gISGvmMucD50550187 = gISGvmMucD92376656;     gISGvmMucD92376656 = gISGvmMucD73025509;     gISGvmMucD73025509 = gISGvmMucD79527464;     gISGvmMucD79527464 = gISGvmMucD6426960;     gISGvmMucD6426960 = gISGvmMucD16239661;     gISGvmMucD16239661 = gISGvmMucD1014585;     gISGvmMucD1014585 = gISGvmMucD63974243;     gISGvmMucD63974243 = gISGvmMucD60517463;     gISGvmMucD60517463 = gISGvmMucD71142829;     gISGvmMucD71142829 = gISGvmMucD7800136;     gISGvmMucD7800136 = gISGvmMucD87383071;     gISGvmMucD87383071 = gISGvmMucD35778393;     gISGvmMucD35778393 = gISGvmMucD61891345;     gISGvmMucD61891345 = gISGvmMucD53685873;     gISGvmMucD53685873 = gISGvmMucD55005187;     gISGvmMucD55005187 = gISGvmMucD7757533;     gISGvmMucD7757533 = gISGvmMucD83814304;     gISGvmMucD83814304 = gISGvmMucD19418263;     gISGvmMucD19418263 = gISGvmMucD87333139;     gISGvmMucD87333139 = gISGvmMucD90109013;     gISGvmMucD90109013 = gISGvmMucD66796643;     gISGvmMucD66796643 = gISGvmMucD50429187;     gISGvmMucD50429187 = gISGvmMucD84356849;     gISGvmMucD84356849 = gISGvmMucD12647529;     gISGvmMucD12647529 = gISGvmMucD99164263;     gISGvmMucD99164263 = gISGvmMucD72075364;     gISGvmMucD72075364 = gISGvmMucD14154467;     gISGvmMucD14154467 = gISGvmMucD64624943;     gISGvmMucD64624943 = gISGvmMucD8714827;     gISGvmMucD8714827 = gISGvmMucD19345256;     gISGvmMucD19345256 = gISGvmMucD47381351;     gISGvmMucD47381351 = gISGvmMucD50150724;     gISGvmMucD50150724 = gISGvmMucD13993107;     gISGvmMucD13993107 = gISGvmMucD49924793;     gISGvmMucD49924793 = gISGvmMucD69946159;     gISGvmMucD69946159 = gISGvmMucD33598281;     gISGvmMucD33598281 = gISGvmMucD2264460;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void cWkKuLZHzk32252351() {     int HRnUbPUSfZ43847006 = -57193743;    int HRnUbPUSfZ13069822 = -260852801;    int HRnUbPUSfZ98353438 = -630924381;    int HRnUbPUSfZ11241202 = -216033199;    int HRnUbPUSfZ6730710 = -3536123;    int HRnUbPUSfZ27067542 = -3424224;    int HRnUbPUSfZ9234365 = 29194725;    int HRnUbPUSfZ46994431 = -593587614;    int HRnUbPUSfZ27101239 = -782459764;    int HRnUbPUSfZ92382346 = 26156044;    int HRnUbPUSfZ730562 = -961898564;    int HRnUbPUSfZ66771964 = -194724200;    int HRnUbPUSfZ59688798 = -544603038;    int HRnUbPUSfZ10653479 = -590125459;    int HRnUbPUSfZ2921978 = -138198445;    int HRnUbPUSfZ63690346 = -733738649;    int HRnUbPUSfZ22929318 = -758731655;    int HRnUbPUSfZ38385735 = -834864007;    int HRnUbPUSfZ74940456 = -183061275;    int HRnUbPUSfZ69469050 = -710017378;    int HRnUbPUSfZ17034335 = -926940512;    int HRnUbPUSfZ74012607 = -848894835;    int HRnUbPUSfZ85246463 = -945302169;    int HRnUbPUSfZ95764187 = -266401816;    int HRnUbPUSfZ60419991 = -15026082;    int HRnUbPUSfZ35150985 = -666183902;    int HRnUbPUSfZ45084603 = -936317634;    int HRnUbPUSfZ95445719 = -56960829;    int HRnUbPUSfZ59146850 = -485800566;    int HRnUbPUSfZ91190293 = -766990844;    int HRnUbPUSfZ17925935 = -838570042;    int HRnUbPUSfZ443416 = 41035601;    int HRnUbPUSfZ5621523 = 82871721;    int HRnUbPUSfZ84967142 = -704077880;    int HRnUbPUSfZ56898566 = -693647479;    int HRnUbPUSfZ70601126 = -713571787;    int HRnUbPUSfZ67966339 = -733524643;    int HRnUbPUSfZ83980611 = -773560054;    int HRnUbPUSfZ62117313 = -95276482;    int HRnUbPUSfZ5088996 = -218494099;    int HRnUbPUSfZ31037523 = -400156821;    int HRnUbPUSfZ95103232 = -376313266;    int HRnUbPUSfZ7641977 = -695990537;    int HRnUbPUSfZ30629996 = -158915655;    int HRnUbPUSfZ34574662 = -80395584;    int HRnUbPUSfZ46860102 = -234720354;    int HRnUbPUSfZ41916857 = -736248986;    int HRnUbPUSfZ87307241 = 54878860;    int HRnUbPUSfZ3590561 = -865888082;    int HRnUbPUSfZ86311632 = 87905273;    int HRnUbPUSfZ29546504 = 48469306;    int HRnUbPUSfZ69831579 = 14676176;    int HRnUbPUSfZ6798041 = 72102614;    int HRnUbPUSfZ58207913 = -672073201;    int HRnUbPUSfZ15218016 = -695896820;    int HRnUbPUSfZ69834398 = -208298908;    int HRnUbPUSfZ27823359 = -315550632;    int HRnUbPUSfZ2589251 = -264522566;    int HRnUbPUSfZ50821211 = -101007117;    int HRnUbPUSfZ71579724 = -337352222;    int HRnUbPUSfZ81982939 = -67106591;    int HRnUbPUSfZ13788645 = -913844446;    int HRnUbPUSfZ87847580 = -7787049;    int HRnUbPUSfZ35910946 = 84531079;    int HRnUbPUSfZ74456411 = -135273915;    int HRnUbPUSfZ287147 = -902934165;    int HRnUbPUSfZ61150442 = -177595922;    int HRnUbPUSfZ74721656 = -840525158;    int HRnUbPUSfZ53754912 = -896477981;    int HRnUbPUSfZ32320852 = -424626659;    int HRnUbPUSfZ95724006 = 99785993;    int HRnUbPUSfZ38948706 = -985171602;    int HRnUbPUSfZ76268422 = -639587525;    int HRnUbPUSfZ69851460 = -964567177;    int HRnUbPUSfZ38431528 = -209860557;    int HRnUbPUSfZ21931103 = -450627246;    int HRnUbPUSfZ66370631 = -52904298;    int HRnUbPUSfZ54616468 = -686386515;    int HRnUbPUSfZ61189526 = -86006233;    int HRnUbPUSfZ13559889 = -780305728;    int HRnUbPUSfZ93234128 = -929934917;    int HRnUbPUSfZ57777361 = -891196494;    int HRnUbPUSfZ91855159 = -191072748;    int HRnUbPUSfZ72835218 = -473705839;    int HRnUbPUSfZ61643789 = -715460151;    int HRnUbPUSfZ48094355 = -753246218;    int HRnUbPUSfZ93645374 = 68932986;    int HRnUbPUSfZ47413609 = -245055079;    int HRnUbPUSfZ69749126 = 91818939;    int HRnUbPUSfZ87064168 = -385348571;    int HRnUbPUSfZ42777768 = -298021155;    int HRnUbPUSfZ65377089 = -369002078;    int HRnUbPUSfZ33159400 = -572552937;    int HRnUbPUSfZ90537588 = -757924261;    int HRnUbPUSfZ23106057 = -51387509;    int HRnUbPUSfZ17248878 = -486312375;    int HRnUbPUSfZ7255652 = -268526217;    int HRnUbPUSfZ71731031 = -680521617;    int HRnUbPUSfZ56173584 = 76358260;    int HRnUbPUSfZ34287516 = -57193743;     HRnUbPUSfZ43847006 = HRnUbPUSfZ13069822;     HRnUbPUSfZ13069822 = HRnUbPUSfZ98353438;     HRnUbPUSfZ98353438 = HRnUbPUSfZ11241202;     HRnUbPUSfZ11241202 = HRnUbPUSfZ6730710;     HRnUbPUSfZ6730710 = HRnUbPUSfZ27067542;     HRnUbPUSfZ27067542 = HRnUbPUSfZ9234365;     HRnUbPUSfZ9234365 = HRnUbPUSfZ46994431;     HRnUbPUSfZ46994431 = HRnUbPUSfZ27101239;     HRnUbPUSfZ27101239 = HRnUbPUSfZ92382346;     HRnUbPUSfZ92382346 = HRnUbPUSfZ730562;     HRnUbPUSfZ730562 = HRnUbPUSfZ66771964;     HRnUbPUSfZ66771964 = HRnUbPUSfZ59688798;     HRnUbPUSfZ59688798 = HRnUbPUSfZ10653479;     HRnUbPUSfZ10653479 = HRnUbPUSfZ2921978;     HRnUbPUSfZ2921978 = HRnUbPUSfZ63690346;     HRnUbPUSfZ63690346 = HRnUbPUSfZ22929318;     HRnUbPUSfZ22929318 = HRnUbPUSfZ38385735;     HRnUbPUSfZ38385735 = HRnUbPUSfZ74940456;     HRnUbPUSfZ74940456 = HRnUbPUSfZ69469050;     HRnUbPUSfZ69469050 = HRnUbPUSfZ17034335;     HRnUbPUSfZ17034335 = HRnUbPUSfZ74012607;     HRnUbPUSfZ74012607 = HRnUbPUSfZ85246463;     HRnUbPUSfZ85246463 = HRnUbPUSfZ95764187;     HRnUbPUSfZ95764187 = HRnUbPUSfZ60419991;     HRnUbPUSfZ60419991 = HRnUbPUSfZ35150985;     HRnUbPUSfZ35150985 = HRnUbPUSfZ45084603;     HRnUbPUSfZ45084603 = HRnUbPUSfZ95445719;     HRnUbPUSfZ95445719 = HRnUbPUSfZ59146850;     HRnUbPUSfZ59146850 = HRnUbPUSfZ91190293;     HRnUbPUSfZ91190293 = HRnUbPUSfZ17925935;     HRnUbPUSfZ17925935 = HRnUbPUSfZ443416;     HRnUbPUSfZ443416 = HRnUbPUSfZ5621523;     HRnUbPUSfZ5621523 = HRnUbPUSfZ84967142;     HRnUbPUSfZ84967142 = HRnUbPUSfZ56898566;     HRnUbPUSfZ56898566 = HRnUbPUSfZ70601126;     HRnUbPUSfZ70601126 = HRnUbPUSfZ67966339;     HRnUbPUSfZ67966339 = HRnUbPUSfZ83980611;     HRnUbPUSfZ83980611 = HRnUbPUSfZ62117313;     HRnUbPUSfZ62117313 = HRnUbPUSfZ5088996;     HRnUbPUSfZ5088996 = HRnUbPUSfZ31037523;     HRnUbPUSfZ31037523 = HRnUbPUSfZ95103232;     HRnUbPUSfZ95103232 = HRnUbPUSfZ7641977;     HRnUbPUSfZ7641977 = HRnUbPUSfZ30629996;     HRnUbPUSfZ30629996 = HRnUbPUSfZ34574662;     HRnUbPUSfZ34574662 = HRnUbPUSfZ46860102;     HRnUbPUSfZ46860102 = HRnUbPUSfZ41916857;     HRnUbPUSfZ41916857 = HRnUbPUSfZ87307241;     HRnUbPUSfZ87307241 = HRnUbPUSfZ3590561;     HRnUbPUSfZ3590561 = HRnUbPUSfZ86311632;     HRnUbPUSfZ86311632 = HRnUbPUSfZ29546504;     HRnUbPUSfZ29546504 = HRnUbPUSfZ69831579;     HRnUbPUSfZ69831579 = HRnUbPUSfZ6798041;     HRnUbPUSfZ6798041 = HRnUbPUSfZ58207913;     HRnUbPUSfZ58207913 = HRnUbPUSfZ15218016;     HRnUbPUSfZ15218016 = HRnUbPUSfZ69834398;     HRnUbPUSfZ69834398 = HRnUbPUSfZ27823359;     HRnUbPUSfZ27823359 = HRnUbPUSfZ2589251;     HRnUbPUSfZ2589251 = HRnUbPUSfZ50821211;     HRnUbPUSfZ50821211 = HRnUbPUSfZ71579724;     HRnUbPUSfZ71579724 = HRnUbPUSfZ81982939;     HRnUbPUSfZ81982939 = HRnUbPUSfZ13788645;     HRnUbPUSfZ13788645 = HRnUbPUSfZ87847580;     HRnUbPUSfZ87847580 = HRnUbPUSfZ35910946;     HRnUbPUSfZ35910946 = HRnUbPUSfZ74456411;     HRnUbPUSfZ74456411 = HRnUbPUSfZ287147;     HRnUbPUSfZ287147 = HRnUbPUSfZ61150442;     HRnUbPUSfZ61150442 = HRnUbPUSfZ74721656;     HRnUbPUSfZ74721656 = HRnUbPUSfZ53754912;     HRnUbPUSfZ53754912 = HRnUbPUSfZ32320852;     HRnUbPUSfZ32320852 = HRnUbPUSfZ95724006;     HRnUbPUSfZ95724006 = HRnUbPUSfZ38948706;     HRnUbPUSfZ38948706 = HRnUbPUSfZ76268422;     HRnUbPUSfZ76268422 = HRnUbPUSfZ69851460;     HRnUbPUSfZ69851460 = HRnUbPUSfZ38431528;     HRnUbPUSfZ38431528 = HRnUbPUSfZ21931103;     HRnUbPUSfZ21931103 = HRnUbPUSfZ66370631;     HRnUbPUSfZ66370631 = HRnUbPUSfZ54616468;     HRnUbPUSfZ54616468 = HRnUbPUSfZ61189526;     HRnUbPUSfZ61189526 = HRnUbPUSfZ13559889;     HRnUbPUSfZ13559889 = HRnUbPUSfZ93234128;     HRnUbPUSfZ93234128 = HRnUbPUSfZ57777361;     HRnUbPUSfZ57777361 = HRnUbPUSfZ91855159;     HRnUbPUSfZ91855159 = HRnUbPUSfZ72835218;     HRnUbPUSfZ72835218 = HRnUbPUSfZ61643789;     HRnUbPUSfZ61643789 = HRnUbPUSfZ48094355;     HRnUbPUSfZ48094355 = HRnUbPUSfZ93645374;     HRnUbPUSfZ93645374 = HRnUbPUSfZ47413609;     HRnUbPUSfZ47413609 = HRnUbPUSfZ69749126;     HRnUbPUSfZ69749126 = HRnUbPUSfZ87064168;     HRnUbPUSfZ87064168 = HRnUbPUSfZ42777768;     HRnUbPUSfZ42777768 = HRnUbPUSfZ65377089;     HRnUbPUSfZ65377089 = HRnUbPUSfZ33159400;     HRnUbPUSfZ33159400 = HRnUbPUSfZ90537588;     HRnUbPUSfZ90537588 = HRnUbPUSfZ23106057;     HRnUbPUSfZ23106057 = HRnUbPUSfZ17248878;     HRnUbPUSfZ17248878 = HRnUbPUSfZ7255652;     HRnUbPUSfZ7255652 = HRnUbPUSfZ71731031;     HRnUbPUSfZ71731031 = HRnUbPUSfZ56173584;     HRnUbPUSfZ56173584 = HRnUbPUSfZ34287516;     HRnUbPUSfZ34287516 = HRnUbPUSfZ43847006;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void amdiCWgTgO60176805() {     int OfvJzNKkfP14771414 = -17223401;    int OfvJzNKkfP1041663 = 20639111;    int OfvJzNKkfP71813179 = -5129918;    int OfvJzNKkfP70608051 = -37794511;    int OfvJzNKkfP10461146 = -846378493;    int OfvJzNKkfP64707854 = -828687203;    int OfvJzNKkfP62001841 = 44279724;    int OfvJzNKkfP2043502 = -177878578;    int OfvJzNKkfP47396285 = -945476508;    int OfvJzNKkfP25548257 = -766411081;    int OfvJzNKkfP56773426 = -606441950;    int OfvJzNKkfP53616584 = -187487380;    int OfvJzNKkfP4305176 = -526969574;    int OfvJzNKkfP63090985 = -197699226;    int OfvJzNKkfP74138901 = -82335623;    int OfvJzNKkfP56208400 = -772566213;    int OfvJzNKkfP78748429 = -893066191;    int OfvJzNKkfP14905586 = -584648522;    int OfvJzNKkfP55612846 = -198205852;    int OfvJzNKkfP85069724 = -951115058;    int OfvJzNKkfP63538637 = -531023516;    int OfvJzNKkfP2559392 = -512175540;    int OfvJzNKkfP89418826 = -861608696;    int OfvJzNKkfP39699970 = -307130502;    int OfvJzNKkfP48013204 = -736302626;    int OfvJzNKkfP39973252 = -135131587;    int OfvJzNKkfP95704169 = -248086202;    int OfvJzNKkfP41499045 = -887538190;    int OfvJzNKkfP39804832 = -987919856;    int OfvJzNKkfP26167245 = -60573812;    int OfvJzNKkfP21679719 = -455437781;    int OfvJzNKkfP91365594 = -213085466;    int OfvJzNKkfP44605121 = -10376018;    int OfvJzNKkfP44181158 = -956783775;    int OfvJzNKkfP6157436 = -336534055;    int OfvJzNKkfP30894625 = 37063348;    int OfvJzNKkfP54848604 = -363263345;    int OfvJzNKkfP16493739 = -743608537;    int OfvJzNKkfP87584839 = -884347619;    int OfvJzNKkfP61759167 = -639587505;    int OfvJzNKkfP10085071 = -950610751;    int OfvJzNKkfP88135825 = -471611766;    int OfvJzNKkfP26125373 = -343221855;    int OfvJzNKkfP51660774 = -710616031;    int OfvJzNKkfP50589527 = -360158505;    int OfvJzNKkfP98354790 = -500522948;    int OfvJzNKkfP52909391 = -122941085;    int OfvJzNKkfP47376284 = -769412970;    int OfvJzNKkfP30717504 = -629597981;    int OfvJzNKkfP15325388 = -207123472;    int OfvJzNKkfP77828582 = -121528801;    int OfvJzNKkfP22255267 = -30482769;    int OfvJzNKkfP68591989 = -647934486;    int OfvJzNKkfP79941335 = -523170349;    int OfvJzNKkfP96638168 = -531977834;    int OfvJzNKkfP12212023 = -505047862;    int OfvJzNKkfP11622837 = -117752194;    int OfvJzNKkfP32113210 = -697999416;    int OfvJzNKkfP22594847 = -301491886;    int OfvJzNKkfP70487894 = -611246906;    int OfvJzNKkfP69003684 = -480601001;    int OfvJzNKkfP20502797 = -68182087;    int OfvJzNKkfP62238670 = -189958723;    int OfvJzNKkfP21229040 = -784902697;    int OfvJzNKkfP3868538 = -210973300;    int OfvJzNKkfP65407831 = -293356484;    int OfvJzNKkfP9011464 = -77111363;    int OfvJzNKkfP60124018 = -570185799;    int OfvJzNKkfP56933549 = -861165172;    int OfvJzNKkfP43244277 = -19398972;    int OfvJzNKkfP1359796 = -309302868;    int OfvJzNKkfP62254691 = -49457654;    int OfvJzNKkfP27320746 = -700300904;    int OfvJzNKkfP93853678 = -558618347;    int OfvJzNKkfP74984654 = 99495692;    int OfvJzNKkfP75402811 = 40588249;    int OfvJzNKkfP76434018 = -68953685;    int OfvJzNKkfP37758053 = -50992665;    int OfvJzNKkfP89110443 = -946971998;    int OfvJzNKkfP49658413 = -135779678;    int OfvJzNKkfP87063860 = 87809497;    int OfvJzNKkfP48327885 = -478673232;    int OfvJzNKkfP10781542 = -157940210;    int OfvJzNKkfP24479445 = -680796384;    int OfvJzNKkfP48338663 = -939045011;    int OfvJzNKkfP99424452 = -324955013;    int OfvJzNKkfP22773605 = -565150981;    int OfvJzNKkfP64663785 = -487205669;    int OfvJzNKkfP47542990 = -324805941;    int OfvJzNKkfP93945413 = -831486194;    int OfvJzNKkfP19271789 = -845184459;    int OfvJzNKkfP22735395 = -665263929;    int OfvJzNKkfP93898891 = -342116651;    int OfvJzNKkfP17096946 = -173100714;    int OfvJzNKkfP92755483 = -58986505;    int OfvJzNKkfP89582273 = -782428665;    int OfvJzNKkfP25897156 = -181653043;    int OfvJzNKkfP4896334 = -558319158;    int OfvJzNKkfP47792236 = -399642731;    int OfvJzNKkfP85181695 = -17223401;     OfvJzNKkfP14771414 = OfvJzNKkfP1041663;     OfvJzNKkfP1041663 = OfvJzNKkfP71813179;     OfvJzNKkfP71813179 = OfvJzNKkfP70608051;     OfvJzNKkfP70608051 = OfvJzNKkfP10461146;     OfvJzNKkfP10461146 = OfvJzNKkfP64707854;     OfvJzNKkfP64707854 = OfvJzNKkfP62001841;     OfvJzNKkfP62001841 = OfvJzNKkfP2043502;     OfvJzNKkfP2043502 = OfvJzNKkfP47396285;     OfvJzNKkfP47396285 = OfvJzNKkfP25548257;     OfvJzNKkfP25548257 = OfvJzNKkfP56773426;     OfvJzNKkfP56773426 = OfvJzNKkfP53616584;     OfvJzNKkfP53616584 = OfvJzNKkfP4305176;     OfvJzNKkfP4305176 = OfvJzNKkfP63090985;     OfvJzNKkfP63090985 = OfvJzNKkfP74138901;     OfvJzNKkfP74138901 = OfvJzNKkfP56208400;     OfvJzNKkfP56208400 = OfvJzNKkfP78748429;     OfvJzNKkfP78748429 = OfvJzNKkfP14905586;     OfvJzNKkfP14905586 = OfvJzNKkfP55612846;     OfvJzNKkfP55612846 = OfvJzNKkfP85069724;     OfvJzNKkfP85069724 = OfvJzNKkfP63538637;     OfvJzNKkfP63538637 = OfvJzNKkfP2559392;     OfvJzNKkfP2559392 = OfvJzNKkfP89418826;     OfvJzNKkfP89418826 = OfvJzNKkfP39699970;     OfvJzNKkfP39699970 = OfvJzNKkfP48013204;     OfvJzNKkfP48013204 = OfvJzNKkfP39973252;     OfvJzNKkfP39973252 = OfvJzNKkfP95704169;     OfvJzNKkfP95704169 = OfvJzNKkfP41499045;     OfvJzNKkfP41499045 = OfvJzNKkfP39804832;     OfvJzNKkfP39804832 = OfvJzNKkfP26167245;     OfvJzNKkfP26167245 = OfvJzNKkfP21679719;     OfvJzNKkfP21679719 = OfvJzNKkfP91365594;     OfvJzNKkfP91365594 = OfvJzNKkfP44605121;     OfvJzNKkfP44605121 = OfvJzNKkfP44181158;     OfvJzNKkfP44181158 = OfvJzNKkfP6157436;     OfvJzNKkfP6157436 = OfvJzNKkfP30894625;     OfvJzNKkfP30894625 = OfvJzNKkfP54848604;     OfvJzNKkfP54848604 = OfvJzNKkfP16493739;     OfvJzNKkfP16493739 = OfvJzNKkfP87584839;     OfvJzNKkfP87584839 = OfvJzNKkfP61759167;     OfvJzNKkfP61759167 = OfvJzNKkfP10085071;     OfvJzNKkfP10085071 = OfvJzNKkfP88135825;     OfvJzNKkfP88135825 = OfvJzNKkfP26125373;     OfvJzNKkfP26125373 = OfvJzNKkfP51660774;     OfvJzNKkfP51660774 = OfvJzNKkfP50589527;     OfvJzNKkfP50589527 = OfvJzNKkfP98354790;     OfvJzNKkfP98354790 = OfvJzNKkfP52909391;     OfvJzNKkfP52909391 = OfvJzNKkfP47376284;     OfvJzNKkfP47376284 = OfvJzNKkfP30717504;     OfvJzNKkfP30717504 = OfvJzNKkfP15325388;     OfvJzNKkfP15325388 = OfvJzNKkfP77828582;     OfvJzNKkfP77828582 = OfvJzNKkfP22255267;     OfvJzNKkfP22255267 = OfvJzNKkfP68591989;     OfvJzNKkfP68591989 = OfvJzNKkfP79941335;     OfvJzNKkfP79941335 = OfvJzNKkfP96638168;     OfvJzNKkfP96638168 = OfvJzNKkfP12212023;     OfvJzNKkfP12212023 = OfvJzNKkfP11622837;     OfvJzNKkfP11622837 = OfvJzNKkfP32113210;     OfvJzNKkfP32113210 = OfvJzNKkfP22594847;     OfvJzNKkfP22594847 = OfvJzNKkfP70487894;     OfvJzNKkfP70487894 = OfvJzNKkfP69003684;     OfvJzNKkfP69003684 = OfvJzNKkfP20502797;     OfvJzNKkfP20502797 = OfvJzNKkfP62238670;     OfvJzNKkfP62238670 = OfvJzNKkfP21229040;     OfvJzNKkfP21229040 = OfvJzNKkfP3868538;     OfvJzNKkfP3868538 = OfvJzNKkfP65407831;     OfvJzNKkfP65407831 = OfvJzNKkfP9011464;     OfvJzNKkfP9011464 = OfvJzNKkfP60124018;     OfvJzNKkfP60124018 = OfvJzNKkfP56933549;     OfvJzNKkfP56933549 = OfvJzNKkfP43244277;     OfvJzNKkfP43244277 = OfvJzNKkfP1359796;     OfvJzNKkfP1359796 = OfvJzNKkfP62254691;     OfvJzNKkfP62254691 = OfvJzNKkfP27320746;     OfvJzNKkfP27320746 = OfvJzNKkfP93853678;     OfvJzNKkfP93853678 = OfvJzNKkfP74984654;     OfvJzNKkfP74984654 = OfvJzNKkfP75402811;     OfvJzNKkfP75402811 = OfvJzNKkfP76434018;     OfvJzNKkfP76434018 = OfvJzNKkfP37758053;     OfvJzNKkfP37758053 = OfvJzNKkfP89110443;     OfvJzNKkfP89110443 = OfvJzNKkfP49658413;     OfvJzNKkfP49658413 = OfvJzNKkfP87063860;     OfvJzNKkfP87063860 = OfvJzNKkfP48327885;     OfvJzNKkfP48327885 = OfvJzNKkfP10781542;     OfvJzNKkfP10781542 = OfvJzNKkfP24479445;     OfvJzNKkfP24479445 = OfvJzNKkfP48338663;     OfvJzNKkfP48338663 = OfvJzNKkfP99424452;     OfvJzNKkfP99424452 = OfvJzNKkfP22773605;     OfvJzNKkfP22773605 = OfvJzNKkfP64663785;     OfvJzNKkfP64663785 = OfvJzNKkfP47542990;     OfvJzNKkfP47542990 = OfvJzNKkfP93945413;     OfvJzNKkfP93945413 = OfvJzNKkfP19271789;     OfvJzNKkfP19271789 = OfvJzNKkfP22735395;     OfvJzNKkfP22735395 = OfvJzNKkfP93898891;     OfvJzNKkfP93898891 = OfvJzNKkfP17096946;     OfvJzNKkfP17096946 = OfvJzNKkfP92755483;     OfvJzNKkfP92755483 = OfvJzNKkfP89582273;     OfvJzNKkfP89582273 = OfvJzNKkfP25897156;     OfvJzNKkfP25897156 = OfvJzNKkfP4896334;     OfvJzNKkfP4896334 = OfvJzNKkfP47792236;     OfvJzNKkfP47792236 = OfvJzNKkfP85181695;     OfvJzNKkfP85181695 = OfvJzNKkfP14771414;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void WtGUfVRBOr48403916() {     int ggnsKeZkJD75822130 = -36009260;    int ggnsKeZkJD72138567 = -72795147;    int ggnsKeZkJD40765620 = -616129915;    int ggnsKeZkJD3473475 = -45727646;    int ggnsKeZkJD27248318 = -530544304;    int ggnsKeZkJD83134570 = -446583290;    int ggnsKeZkJD9432756 = -678180750;    int ggnsKeZkJD9971137 = -498617280;    int ggnsKeZkJD91503018 = -16385890;    int ggnsKeZkJD62969837 = -28852732;    int ggnsKeZkJD88968109 = -759405494;    int ggnsKeZkJD75210711 = -759838696;    int ggnsKeZkJD87267684 = -821571970;    int ggnsKeZkJD53947345 = -903433878;    int ggnsKeZkJD43430197 = -511593744;    int ggnsKeZkJD72906196 = -511773646;    int ggnsKeZkJD78529722 = -188745968;    int ggnsKeZkJD12781149 = -777282330;    int ggnsKeZkJD97199626 = -679760864;    int ggnsKeZkJD67994646 = -740091048;    int ggnsKeZkJD97965340 = -939531612;    int ggnsKeZkJD29187757 = -508552880;    int ggnsKeZkJD26829607 = -84375143;    int ggnsKeZkJD91556849 = -795883563;    int ggnsKeZkJD82491604 = 98909887;    int ggnsKeZkJD63586483 = -579953008;    int ggnsKeZkJD68291071 = -419383765;    int ggnsKeZkJD10722745 = -678005608;    int ggnsKeZkJD81671812 = -52238193;    int ggnsKeZkJD8933277 = -328559170;    int ggnsKeZkJD28896906 = -398972065;    int ggnsKeZkJD81654688 = -968030953;    int ggnsKeZkJD92557760 = -403848916;    int ggnsKeZkJD27233819 = -100940827;    int ggnsKeZkJD91012839 = -729756293;    int ggnsKeZkJD44419129 = -615330928;    int ggnsKeZkJD41964438 = -608817952;    int ggnsKeZkJD73364149 = -579716264;    int ggnsKeZkJD23585383 = -280880801;    int ggnsKeZkJD62941481 = -965388684;    int ggnsKeZkJD2832292 = -106925956;    int ggnsKeZkJD35812881 = -381403478;    int ggnsKeZkJD4425611 = -465878768;    int ggnsKeZkJD3353493 = -26399597;    int ggnsKeZkJD58568809 = -752431382;    int ggnsKeZkJD70288473 = -149949447;    int ggnsKeZkJD44325217 = -158115683;    int ggnsKeZkJD97831786 = -520361054;    int ggnsKeZkJD85763100 = -829247226;    int ggnsKeZkJD73619549 = -959148554;    int ggnsKeZkJD55476183 = -665908954;    int ggnsKeZkJD18452061 = -40068547;    int ggnsKeZkJD79838393 = 20175420;    int ggnsKeZkJD54581820 = -497822779;    int ggnsKeZkJD50438575 = -496659120;    int ggnsKeZkJD46634374 = -527456380;    int ggnsKeZkJD45308960 = -988420005;    int ggnsKeZkJD49208770 = -820246352;    int ggnsKeZkJD20981870 = -44637533;    int ggnsKeZkJD63661835 = -950591297;    int ggnsKeZkJD14843499 = 72800475;    int ggnsKeZkJD98710011 = 99824858;    int ggnsKeZkJD28299324 = -346379087;    int ggnsKeZkJD82569742 = -687826720;    int ggnsKeZkJD34072932 = -629880667;    int ggnsKeZkJD7313421 = -791374542;    int ggnsKeZkJD82652951 = -255989780;    int ggnsKeZkJD60033866 = -620631143;    int ggnsKeZkJD62934506 = -73677586;    int ggnsKeZkJD99011067 = -896262817;    int ggnsKeZkJD30941758 = -902955695;    int ggnsKeZkJD5165574 = -609029704;    int ggnsKeZkJD89195765 = -396401529;    int ggnsKeZkJD34258146 = -714372180;    int ggnsKeZkJD65162355 = -533165092;    int ggnsKeZkJD62152460 = -458128134;    int ggnsKeZkJD24762146 = 57325888;    int ggnsKeZkJD23476115 = 42024453;    int ggnsKeZkJD32988040 = 56547818;    int ggnsKeZkJD12203132 = -751140667;    int ggnsKeZkJD19261266 = -321837325;    int ggnsKeZkJD70459285 = -899022711;    int ggnsKeZkJD24959645 = -848758383;    int ggnsKeZkJD8052264 = -93089640;    int ggnsKeZkJD53457093 = -662650217;    int ggnsKeZkJD10444845 = -258903518;    int ggnsKeZkJD1816295 = -888206374;    int ggnsKeZkJD37975940 = -906026138;    int ggnsKeZkJD76795243 = -604281708;    int ggnsKeZkJD44378466 = -102299913;    int ggnsKeZkJD99110168 = -626910924;    int ggnsKeZkJD92755668 = -788571600;    int ggnsKeZkJD52382279 = -435078732;    int ggnsKeZkJD59923548 = -330289505;    int ggnsKeZkJD48097982 = -938189160;    int ggnsKeZkJD4122280 = -106750815;    int ggnsKeZkJD7513557 = 64975608;    int ggnsKeZkJD21855869 = -778052049;    int ggnsKeZkJD69280561 = -396518930;    int ggnsKeZkJD51255388 = -36009260;     ggnsKeZkJD75822130 = ggnsKeZkJD72138567;     ggnsKeZkJD72138567 = ggnsKeZkJD40765620;     ggnsKeZkJD40765620 = ggnsKeZkJD3473475;     ggnsKeZkJD3473475 = ggnsKeZkJD27248318;     ggnsKeZkJD27248318 = ggnsKeZkJD83134570;     ggnsKeZkJD83134570 = ggnsKeZkJD9432756;     ggnsKeZkJD9432756 = ggnsKeZkJD9971137;     ggnsKeZkJD9971137 = ggnsKeZkJD91503018;     ggnsKeZkJD91503018 = ggnsKeZkJD62969837;     ggnsKeZkJD62969837 = ggnsKeZkJD88968109;     ggnsKeZkJD88968109 = ggnsKeZkJD75210711;     ggnsKeZkJD75210711 = ggnsKeZkJD87267684;     ggnsKeZkJD87267684 = ggnsKeZkJD53947345;     ggnsKeZkJD53947345 = ggnsKeZkJD43430197;     ggnsKeZkJD43430197 = ggnsKeZkJD72906196;     ggnsKeZkJD72906196 = ggnsKeZkJD78529722;     ggnsKeZkJD78529722 = ggnsKeZkJD12781149;     ggnsKeZkJD12781149 = ggnsKeZkJD97199626;     ggnsKeZkJD97199626 = ggnsKeZkJD67994646;     ggnsKeZkJD67994646 = ggnsKeZkJD97965340;     ggnsKeZkJD97965340 = ggnsKeZkJD29187757;     ggnsKeZkJD29187757 = ggnsKeZkJD26829607;     ggnsKeZkJD26829607 = ggnsKeZkJD91556849;     ggnsKeZkJD91556849 = ggnsKeZkJD82491604;     ggnsKeZkJD82491604 = ggnsKeZkJD63586483;     ggnsKeZkJD63586483 = ggnsKeZkJD68291071;     ggnsKeZkJD68291071 = ggnsKeZkJD10722745;     ggnsKeZkJD10722745 = ggnsKeZkJD81671812;     ggnsKeZkJD81671812 = ggnsKeZkJD8933277;     ggnsKeZkJD8933277 = ggnsKeZkJD28896906;     ggnsKeZkJD28896906 = ggnsKeZkJD81654688;     ggnsKeZkJD81654688 = ggnsKeZkJD92557760;     ggnsKeZkJD92557760 = ggnsKeZkJD27233819;     ggnsKeZkJD27233819 = ggnsKeZkJD91012839;     ggnsKeZkJD91012839 = ggnsKeZkJD44419129;     ggnsKeZkJD44419129 = ggnsKeZkJD41964438;     ggnsKeZkJD41964438 = ggnsKeZkJD73364149;     ggnsKeZkJD73364149 = ggnsKeZkJD23585383;     ggnsKeZkJD23585383 = ggnsKeZkJD62941481;     ggnsKeZkJD62941481 = ggnsKeZkJD2832292;     ggnsKeZkJD2832292 = ggnsKeZkJD35812881;     ggnsKeZkJD35812881 = ggnsKeZkJD4425611;     ggnsKeZkJD4425611 = ggnsKeZkJD3353493;     ggnsKeZkJD3353493 = ggnsKeZkJD58568809;     ggnsKeZkJD58568809 = ggnsKeZkJD70288473;     ggnsKeZkJD70288473 = ggnsKeZkJD44325217;     ggnsKeZkJD44325217 = ggnsKeZkJD97831786;     ggnsKeZkJD97831786 = ggnsKeZkJD85763100;     ggnsKeZkJD85763100 = ggnsKeZkJD73619549;     ggnsKeZkJD73619549 = ggnsKeZkJD55476183;     ggnsKeZkJD55476183 = ggnsKeZkJD18452061;     ggnsKeZkJD18452061 = ggnsKeZkJD79838393;     ggnsKeZkJD79838393 = ggnsKeZkJD54581820;     ggnsKeZkJD54581820 = ggnsKeZkJD50438575;     ggnsKeZkJD50438575 = ggnsKeZkJD46634374;     ggnsKeZkJD46634374 = ggnsKeZkJD45308960;     ggnsKeZkJD45308960 = ggnsKeZkJD49208770;     ggnsKeZkJD49208770 = ggnsKeZkJD20981870;     ggnsKeZkJD20981870 = ggnsKeZkJD63661835;     ggnsKeZkJD63661835 = ggnsKeZkJD14843499;     ggnsKeZkJD14843499 = ggnsKeZkJD98710011;     ggnsKeZkJD98710011 = ggnsKeZkJD28299324;     ggnsKeZkJD28299324 = ggnsKeZkJD82569742;     ggnsKeZkJD82569742 = ggnsKeZkJD34072932;     ggnsKeZkJD34072932 = ggnsKeZkJD7313421;     ggnsKeZkJD7313421 = ggnsKeZkJD82652951;     ggnsKeZkJD82652951 = ggnsKeZkJD60033866;     ggnsKeZkJD60033866 = ggnsKeZkJD62934506;     ggnsKeZkJD62934506 = ggnsKeZkJD99011067;     ggnsKeZkJD99011067 = ggnsKeZkJD30941758;     ggnsKeZkJD30941758 = ggnsKeZkJD5165574;     ggnsKeZkJD5165574 = ggnsKeZkJD89195765;     ggnsKeZkJD89195765 = ggnsKeZkJD34258146;     ggnsKeZkJD34258146 = ggnsKeZkJD65162355;     ggnsKeZkJD65162355 = ggnsKeZkJD62152460;     ggnsKeZkJD62152460 = ggnsKeZkJD24762146;     ggnsKeZkJD24762146 = ggnsKeZkJD23476115;     ggnsKeZkJD23476115 = ggnsKeZkJD32988040;     ggnsKeZkJD32988040 = ggnsKeZkJD12203132;     ggnsKeZkJD12203132 = ggnsKeZkJD19261266;     ggnsKeZkJD19261266 = ggnsKeZkJD70459285;     ggnsKeZkJD70459285 = ggnsKeZkJD24959645;     ggnsKeZkJD24959645 = ggnsKeZkJD8052264;     ggnsKeZkJD8052264 = ggnsKeZkJD53457093;     ggnsKeZkJD53457093 = ggnsKeZkJD10444845;     ggnsKeZkJD10444845 = ggnsKeZkJD1816295;     ggnsKeZkJD1816295 = ggnsKeZkJD37975940;     ggnsKeZkJD37975940 = ggnsKeZkJD76795243;     ggnsKeZkJD76795243 = ggnsKeZkJD44378466;     ggnsKeZkJD44378466 = ggnsKeZkJD99110168;     ggnsKeZkJD99110168 = ggnsKeZkJD92755668;     ggnsKeZkJD92755668 = ggnsKeZkJD52382279;     ggnsKeZkJD52382279 = ggnsKeZkJD59923548;     ggnsKeZkJD59923548 = ggnsKeZkJD48097982;     ggnsKeZkJD48097982 = ggnsKeZkJD4122280;     ggnsKeZkJD4122280 = ggnsKeZkJD7513557;     ggnsKeZkJD7513557 = ggnsKeZkJD21855869;     ggnsKeZkJD21855869 = ggnsKeZkJD69280561;     ggnsKeZkJD69280561 = ggnsKeZkJD51255388;     ggnsKeZkJD51255388 = ggnsKeZkJD75822130;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void UaFNRoKgOG75667975() {     int bMlzsLJTlz56068276 = -26045803;    int bMlzsLJTlz76961013 = -865242613;    int bMlzsLJTlz33064230 = -846847451;    int bMlzsLJTlz35550485 = -238612120;    int bMlzsLJTlz62201891 = -881546509;    int bMlzsLJTlz79512811 = 68717683;    int bMlzsLJTlz67306968 = -757808163;    int bMlzsLJTlz84942313 = -575690075;    int bMlzsLJTlz21866558 = -845817235;    int bMlzsLJTlz68120692 = 94591347;    int bMlzsLJTlz61592353 = -635717881;    int bMlzsLJTlz59001403 = -554493329;    int bMlzsLJTlz95812863 = -367702165;    int bMlzsLJTlz84629272 = -144908698;    int bMlzsLJTlz84751049 = -344548482;    int bMlzsLJTlz95830227 = -245329037;    int bMlzsLJTlz22306843 = -531051020;    int bMlzsLJTlz78493107 = -960052536;    int bMlzsLJTlz39456679 = -30564002;    int bMlzsLJTlz74716906 = -447872119;    int bMlzsLJTlz53479570 = -58848170;    int bMlzsLJTlz3647187 = -584738034;    int bMlzsLJTlz30184840 = -256252827;    int bMlzsLJTlz51049152 = -472852837;    int bMlzsLJTlz4704671 = -514805854;    int bMlzsLJTlz17742490 = -239906405;    int bMlzsLJTlz82447322 = -239241466;    int bMlzsLJTlz92467020 = -306752713;    int bMlzsLJTlz16768255 = -22706604;    int bMlzsLJTlz80601306 = -852795326;    int bMlzsLJTlz69236390 = -339398387;    int bMlzsLJTlz65112373 = -161501554;    int bMlzsLJTlz95948265 = -106243451;    int bMlzsLJTlz75193945 = 39475124;    int bMlzsLJTlz44563947 = -289741539;    int bMlzsLJTlz93709332 = -201155494;    int bMlzsLJTlz54372944 = -840103138;    int bMlzsLJTlz91996395 = -307097431;    int bMlzsLJTlz79965014 = -408486309;    int bMlzsLJTlz23838657 = -384235917;    int bMlzsLJTlz18087306 = -706592406;    int bMlzsLJTlz30799468 = -204181987;    int bMlzsLJTlz84342653 = -875860214;    int bMlzsLJTlz23909273 = -411530418;    int bMlzsLJTlz26515697 = -350710695;    int bMlzsLJTlz51594429 = -929241929;    int bMlzsLJTlz32869590 = -836361305;    int bMlzsLJTlz53988285 = -82434917;    int bMlzsLJTlz60258797 = -164889780;    int bMlzsLJTlz52225783 = -360166115;    int bMlzsLJTlz27466601 = -993228051;    int bMlzsLJTlz20545533 = -351067961;    int bMlzsLJTlz54191652 = -395584578;    int bMlzsLJTlz70646215 = -176853193;    int bMlzsLJTlz22188406 = -510758941;    int bMlzsLJTlz52421090 = -441307769;    int bMlzsLJTlz46776174 = -508989786;    int bMlzsLJTlz82015077 = -273994614;    int bMlzsLJTlz30845815 = -723806266;    int bMlzsLJTlz44459401 = -541640104;    int bMlzsLJTlz97065488 = -692040852;    int bMlzsLJTlz74839948 = -351055450;    int bMlzsLJTlz68174059 = -452983471;    int bMlzsLJTlz41265251 = -993021910;    int bMlzsLJTlz98884301 = -566010267;    int bMlzsLJTlz96479979 = -374216328;    int bMlzsLJTlz63053138 = -348249878;    int bMlzsLJTlz20618919 = -307177289;    int bMlzsLJTlz40065326 = -855167160;    int bMlzsLJTlz91041717 = -43392988;    int bMlzsLJTlz41457284 = -405225899;    int bMlzsLJTlz30310448 = -123953590;    int bMlzsLJTlz98528093 = -451566228;    int bMlzsLJTlz15618023 = -646328086;    int bMlzsLJTlz56629600 = -741279714;    int bMlzsLJTlz22680102 = -854666184;    int bMlzsLJTlz19304534 = -708877821;    int bMlzsLJTlz6275568 = -844722410;    int bMlzsLJTlz24533456 = -22142142;    int bMlzsLJTlz53110242 = -585563926;    int bMlzsLJTlz84872899 = -403545101;    int bMlzsLJTlz28459038 = -56806549;    int bMlzsLJTlz32208223 = -41862933;    int bMlzsLJTlz64542471 = -662540490;    int bMlzsLJTlz53134706 = -859567276;    int bMlzsLJTlz48690857 = -988330426;    int bMlzsLJTlz10920722 = -765916976;    int bMlzsLJTlz25302050 = -929390258;    int bMlzsLJTlz53005539 = -449765936;    int bMlzsLJTlz92142856 = -848433770;    int bMlzsLJTlz46933159 = -692165709;    int bMlzsLJTlz72357866 = -466108524;    int bMlzsLJTlz61150580 = -583291165;    int bMlzsLJTlz35505613 = -866846205;    int bMlzsLJTlz26773168 = -692195065;    int bMlzsLJTlz43247357 = -255536956;    int bMlzsLJTlz62625409 = -751198516;    int bMlzsLJTlz43077402 = -882838305;    int bMlzsLJTlz25024972 = -845520151;    int bMlzsLJTlz30035717 = -26045803;     bMlzsLJTlz56068276 = bMlzsLJTlz76961013;     bMlzsLJTlz76961013 = bMlzsLJTlz33064230;     bMlzsLJTlz33064230 = bMlzsLJTlz35550485;     bMlzsLJTlz35550485 = bMlzsLJTlz62201891;     bMlzsLJTlz62201891 = bMlzsLJTlz79512811;     bMlzsLJTlz79512811 = bMlzsLJTlz67306968;     bMlzsLJTlz67306968 = bMlzsLJTlz84942313;     bMlzsLJTlz84942313 = bMlzsLJTlz21866558;     bMlzsLJTlz21866558 = bMlzsLJTlz68120692;     bMlzsLJTlz68120692 = bMlzsLJTlz61592353;     bMlzsLJTlz61592353 = bMlzsLJTlz59001403;     bMlzsLJTlz59001403 = bMlzsLJTlz95812863;     bMlzsLJTlz95812863 = bMlzsLJTlz84629272;     bMlzsLJTlz84629272 = bMlzsLJTlz84751049;     bMlzsLJTlz84751049 = bMlzsLJTlz95830227;     bMlzsLJTlz95830227 = bMlzsLJTlz22306843;     bMlzsLJTlz22306843 = bMlzsLJTlz78493107;     bMlzsLJTlz78493107 = bMlzsLJTlz39456679;     bMlzsLJTlz39456679 = bMlzsLJTlz74716906;     bMlzsLJTlz74716906 = bMlzsLJTlz53479570;     bMlzsLJTlz53479570 = bMlzsLJTlz3647187;     bMlzsLJTlz3647187 = bMlzsLJTlz30184840;     bMlzsLJTlz30184840 = bMlzsLJTlz51049152;     bMlzsLJTlz51049152 = bMlzsLJTlz4704671;     bMlzsLJTlz4704671 = bMlzsLJTlz17742490;     bMlzsLJTlz17742490 = bMlzsLJTlz82447322;     bMlzsLJTlz82447322 = bMlzsLJTlz92467020;     bMlzsLJTlz92467020 = bMlzsLJTlz16768255;     bMlzsLJTlz16768255 = bMlzsLJTlz80601306;     bMlzsLJTlz80601306 = bMlzsLJTlz69236390;     bMlzsLJTlz69236390 = bMlzsLJTlz65112373;     bMlzsLJTlz65112373 = bMlzsLJTlz95948265;     bMlzsLJTlz95948265 = bMlzsLJTlz75193945;     bMlzsLJTlz75193945 = bMlzsLJTlz44563947;     bMlzsLJTlz44563947 = bMlzsLJTlz93709332;     bMlzsLJTlz93709332 = bMlzsLJTlz54372944;     bMlzsLJTlz54372944 = bMlzsLJTlz91996395;     bMlzsLJTlz91996395 = bMlzsLJTlz79965014;     bMlzsLJTlz79965014 = bMlzsLJTlz23838657;     bMlzsLJTlz23838657 = bMlzsLJTlz18087306;     bMlzsLJTlz18087306 = bMlzsLJTlz30799468;     bMlzsLJTlz30799468 = bMlzsLJTlz84342653;     bMlzsLJTlz84342653 = bMlzsLJTlz23909273;     bMlzsLJTlz23909273 = bMlzsLJTlz26515697;     bMlzsLJTlz26515697 = bMlzsLJTlz51594429;     bMlzsLJTlz51594429 = bMlzsLJTlz32869590;     bMlzsLJTlz32869590 = bMlzsLJTlz53988285;     bMlzsLJTlz53988285 = bMlzsLJTlz60258797;     bMlzsLJTlz60258797 = bMlzsLJTlz52225783;     bMlzsLJTlz52225783 = bMlzsLJTlz27466601;     bMlzsLJTlz27466601 = bMlzsLJTlz20545533;     bMlzsLJTlz20545533 = bMlzsLJTlz54191652;     bMlzsLJTlz54191652 = bMlzsLJTlz70646215;     bMlzsLJTlz70646215 = bMlzsLJTlz22188406;     bMlzsLJTlz22188406 = bMlzsLJTlz52421090;     bMlzsLJTlz52421090 = bMlzsLJTlz46776174;     bMlzsLJTlz46776174 = bMlzsLJTlz82015077;     bMlzsLJTlz82015077 = bMlzsLJTlz30845815;     bMlzsLJTlz30845815 = bMlzsLJTlz44459401;     bMlzsLJTlz44459401 = bMlzsLJTlz97065488;     bMlzsLJTlz97065488 = bMlzsLJTlz74839948;     bMlzsLJTlz74839948 = bMlzsLJTlz68174059;     bMlzsLJTlz68174059 = bMlzsLJTlz41265251;     bMlzsLJTlz41265251 = bMlzsLJTlz98884301;     bMlzsLJTlz98884301 = bMlzsLJTlz96479979;     bMlzsLJTlz96479979 = bMlzsLJTlz63053138;     bMlzsLJTlz63053138 = bMlzsLJTlz20618919;     bMlzsLJTlz20618919 = bMlzsLJTlz40065326;     bMlzsLJTlz40065326 = bMlzsLJTlz91041717;     bMlzsLJTlz91041717 = bMlzsLJTlz41457284;     bMlzsLJTlz41457284 = bMlzsLJTlz30310448;     bMlzsLJTlz30310448 = bMlzsLJTlz98528093;     bMlzsLJTlz98528093 = bMlzsLJTlz15618023;     bMlzsLJTlz15618023 = bMlzsLJTlz56629600;     bMlzsLJTlz56629600 = bMlzsLJTlz22680102;     bMlzsLJTlz22680102 = bMlzsLJTlz19304534;     bMlzsLJTlz19304534 = bMlzsLJTlz6275568;     bMlzsLJTlz6275568 = bMlzsLJTlz24533456;     bMlzsLJTlz24533456 = bMlzsLJTlz53110242;     bMlzsLJTlz53110242 = bMlzsLJTlz84872899;     bMlzsLJTlz84872899 = bMlzsLJTlz28459038;     bMlzsLJTlz28459038 = bMlzsLJTlz32208223;     bMlzsLJTlz32208223 = bMlzsLJTlz64542471;     bMlzsLJTlz64542471 = bMlzsLJTlz53134706;     bMlzsLJTlz53134706 = bMlzsLJTlz48690857;     bMlzsLJTlz48690857 = bMlzsLJTlz10920722;     bMlzsLJTlz10920722 = bMlzsLJTlz25302050;     bMlzsLJTlz25302050 = bMlzsLJTlz53005539;     bMlzsLJTlz53005539 = bMlzsLJTlz92142856;     bMlzsLJTlz92142856 = bMlzsLJTlz46933159;     bMlzsLJTlz46933159 = bMlzsLJTlz72357866;     bMlzsLJTlz72357866 = bMlzsLJTlz61150580;     bMlzsLJTlz61150580 = bMlzsLJTlz35505613;     bMlzsLJTlz35505613 = bMlzsLJTlz26773168;     bMlzsLJTlz26773168 = bMlzsLJTlz43247357;     bMlzsLJTlz43247357 = bMlzsLJTlz62625409;     bMlzsLJTlz62625409 = bMlzsLJTlz43077402;     bMlzsLJTlz43077402 = bMlzsLJTlz25024972;     bMlzsLJTlz25024972 = bMlzsLJTlz30035717;     bMlzsLJTlz30035717 = bMlzsLJTlz56068276;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void SkEZeXMpwn15807422() {     int EGbRBFsuQu1121724 = -964210116;    int EGbRBFsuQu26382021 = -566598385;    int EGbRBFsuQu82780397 = -300937602;    int EGbRBFsuQu99919563 = -62509276;    int EGbRBFsuQu31990412 = -454741212;    int EGbRBFsuQu22114162 = 23251911;    int EGbRBFsuQu17459692 = -683385600;    int EGbRBFsuQu65202671 = 49820080;    int EGbRBFsuQu7882648 = -970232659;    int EGbRBFsuQu65207797 = -245556223;    int EGbRBFsuQu30149170 = -279136068;    int EGbRBFsuQu97813672 = -997504940;    int EGbRBFsuQu62765300 = -556307807;    int EGbRBFsuQu84605029 = -661718717;    int EGbRBFsuQu1546399 = -531178231;    int EGbRBFsuQu69766920 = -44712448;    int EGbRBFsuQu28067072 = -391145496;    int EGbRBFsuQu23671763 = -127084615;    int EGbRBFsuQu556280 = -90742620;    int EGbRBFsuQu16489675 = -39847951;    int EGbRBFsuQu66944907 = -26760277;    int EGbRBFsuQu20132377 = -416274177;    int EGbRBFsuQu2121644 = -597919551;    int EGbRBFsuQu70484863 = 31754192;    int EGbRBFsuQu70811299 = -376602106;    int EGbRBFsuQu51999088 = -590152165;    int EGbRBFsuQu48763363 = -570205532;    int EGbRBFsuQu7157495 = -700148225;    int EGbRBFsuQu66390424 = -272911601;    int EGbRBFsuQu18630652 = -853143583;    int EGbRBFsuQu21087110 = 16628489;    int EGbRBFsuQu41881617 = -999646406;    int EGbRBFsuQu28611421 = -9272355;    int EGbRBFsuQu87537523 = -321273054;    int EGbRBFsuQu85899270 = 46119744;    int EGbRBFsuQu34567120 = 77681181;    int EGbRBFsuQu72401780 = -747491158;    int EGbRBFsuQu9051557 = -233021072;    int EGbRBFsuQu88201917 = -231239456;    int EGbRBFsuQu53904067 = -850737332;    int EGbRBFsuQu6720644 = -691438891;    int EGbRBFsuQu86668191 = -952116717;    int EGbRBFsuQu4676114 = -852268393;    int EGbRBFsuQu78088091 = -229018677;    int EGbRBFsuQu98524983 = -566854776;    int EGbRBFsuQu72455878 = -889120887;    int EGbRBFsuQu14627925 = -782523489;    int EGbRBFsuQu62256886 = -458905078;    int EGbRBFsuQu52205708 = -278505246;    int EGbRBFsuQu46934121 = 30798386;    int EGbRBFsuQu12038417 = -548251584;    int EGbRBFsuQu64252973 = -906500000;    int EGbRBFsuQu42090402 = -639592088;    int EGbRBFsuQu12475153 = -486510611;    int EGbRBFsuQu48862514 = -760407993;    int EGbRBFsuQu80989347 = -447935939;    int EGbRBFsuQu24260377 = -968678835;    int EGbRBFsuQu12295534 = -232691794;    int EGbRBFsuQu29108265 = -685907171;    int EGbRBFsuQu79991324 = -864589047;    int EGbRBFsuQu73350799 = -406542558;    int EGbRBFsuQu10302197 = -983237375;    int EGbRBFsuQu98812247 = -677268320;    int EGbRBFsuQu89251996 = -17089077;    int EGbRBFsuQu44120687 = -162184712;    int EGbRBFsuQu88267553 = -279489663;    int EGbRBFsuQu69202252 = -888232586;    int EGbRBFsuQu75227777 = -135034753;    int EGbRBFsuQu98705759 = -607838462;    int EGbRBFsuQu66979279 = -508859413;    int EGbRBFsuQu97365140 = -297221291;    int EGbRBFsuQu19015516 = -58124425;    int EGbRBFsuQu35469846 = -895845160;    int EGbRBFsuQu46652213 = -240005288;    int EGbRBFsuQu9769031 = -348409060;    int EGbRBFsuQu80276716 = -74643561;    int EGbRBFsuQu15456263 = -564005785;    int EGbRBFsuQu24033553 = -268900874;    int EGbRBFsuQu71959880 = -401391033;    int EGbRBFsuQu98355420 = -487481219;    int EGbRBFsuQu37371163 = -807628677;    int EGbRBFsuQu86506476 = -11300454;    int EGbRBFsuQu54951787 = -321642980;    int EGbRBFsuQu19456303 = -203709988;    int EGbRBFsuQu6592235 = -204891999;    int EGbRBFsuQu56834137 = -76871511;    int EGbRBFsuQu99791214 = -260054319;    int EGbRBFsuQu16136268 = -522761744;    int EGbRBFsuQu38675009 = -560865061;    int EGbRBFsuQu4909924 = -505944317;    int EGbRBFsuQu10306743 = 46360016;    int EGbRBFsuQu60106246 = -414799364;    int EGbRBFsuQu79943291 = -547113901;    int EGbRBFsuQu8210594 = -366650409;    int EGbRBFsuQu80553267 = -344194775;    int EGbRBFsuQu96418447 = -708201517;    int EGbRBFsuQu87855944 = -174848398;    int EGbRBFsuQu15424118 = -735179316;    int EGbRBFsuQu33967404 = 33166035;    int EGbRBFsuQu10257430 = -964210116;     EGbRBFsuQu1121724 = EGbRBFsuQu26382021;     EGbRBFsuQu26382021 = EGbRBFsuQu82780397;     EGbRBFsuQu82780397 = EGbRBFsuQu99919563;     EGbRBFsuQu99919563 = EGbRBFsuQu31990412;     EGbRBFsuQu31990412 = EGbRBFsuQu22114162;     EGbRBFsuQu22114162 = EGbRBFsuQu17459692;     EGbRBFsuQu17459692 = EGbRBFsuQu65202671;     EGbRBFsuQu65202671 = EGbRBFsuQu7882648;     EGbRBFsuQu7882648 = EGbRBFsuQu65207797;     EGbRBFsuQu65207797 = EGbRBFsuQu30149170;     EGbRBFsuQu30149170 = EGbRBFsuQu97813672;     EGbRBFsuQu97813672 = EGbRBFsuQu62765300;     EGbRBFsuQu62765300 = EGbRBFsuQu84605029;     EGbRBFsuQu84605029 = EGbRBFsuQu1546399;     EGbRBFsuQu1546399 = EGbRBFsuQu69766920;     EGbRBFsuQu69766920 = EGbRBFsuQu28067072;     EGbRBFsuQu28067072 = EGbRBFsuQu23671763;     EGbRBFsuQu23671763 = EGbRBFsuQu556280;     EGbRBFsuQu556280 = EGbRBFsuQu16489675;     EGbRBFsuQu16489675 = EGbRBFsuQu66944907;     EGbRBFsuQu66944907 = EGbRBFsuQu20132377;     EGbRBFsuQu20132377 = EGbRBFsuQu2121644;     EGbRBFsuQu2121644 = EGbRBFsuQu70484863;     EGbRBFsuQu70484863 = EGbRBFsuQu70811299;     EGbRBFsuQu70811299 = EGbRBFsuQu51999088;     EGbRBFsuQu51999088 = EGbRBFsuQu48763363;     EGbRBFsuQu48763363 = EGbRBFsuQu7157495;     EGbRBFsuQu7157495 = EGbRBFsuQu66390424;     EGbRBFsuQu66390424 = EGbRBFsuQu18630652;     EGbRBFsuQu18630652 = EGbRBFsuQu21087110;     EGbRBFsuQu21087110 = EGbRBFsuQu41881617;     EGbRBFsuQu41881617 = EGbRBFsuQu28611421;     EGbRBFsuQu28611421 = EGbRBFsuQu87537523;     EGbRBFsuQu87537523 = EGbRBFsuQu85899270;     EGbRBFsuQu85899270 = EGbRBFsuQu34567120;     EGbRBFsuQu34567120 = EGbRBFsuQu72401780;     EGbRBFsuQu72401780 = EGbRBFsuQu9051557;     EGbRBFsuQu9051557 = EGbRBFsuQu88201917;     EGbRBFsuQu88201917 = EGbRBFsuQu53904067;     EGbRBFsuQu53904067 = EGbRBFsuQu6720644;     EGbRBFsuQu6720644 = EGbRBFsuQu86668191;     EGbRBFsuQu86668191 = EGbRBFsuQu4676114;     EGbRBFsuQu4676114 = EGbRBFsuQu78088091;     EGbRBFsuQu78088091 = EGbRBFsuQu98524983;     EGbRBFsuQu98524983 = EGbRBFsuQu72455878;     EGbRBFsuQu72455878 = EGbRBFsuQu14627925;     EGbRBFsuQu14627925 = EGbRBFsuQu62256886;     EGbRBFsuQu62256886 = EGbRBFsuQu52205708;     EGbRBFsuQu52205708 = EGbRBFsuQu46934121;     EGbRBFsuQu46934121 = EGbRBFsuQu12038417;     EGbRBFsuQu12038417 = EGbRBFsuQu64252973;     EGbRBFsuQu64252973 = EGbRBFsuQu42090402;     EGbRBFsuQu42090402 = EGbRBFsuQu12475153;     EGbRBFsuQu12475153 = EGbRBFsuQu48862514;     EGbRBFsuQu48862514 = EGbRBFsuQu80989347;     EGbRBFsuQu80989347 = EGbRBFsuQu24260377;     EGbRBFsuQu24260377 = EGbRBFsuQu12295534;     EGbRBFsuQu12295534 = EGbRBFsuQu29108265;     EGbRBFsuQu29108265 = EGbRBFsuQu79991324;     EGbRBFsuQu79991324 = EGbRBFsuQu73350799;     EGbRBFsuQu73350799 = EGbRBFsuQu10302197;     EGbRBFsuQu10302197 = EGbRBFsuQu98812247;     EGbRBFsuQu98812247 = EGbRBFsuQu89251996;     EGbRBFsuQu89251996 = EGbRBFsuQu44120687;     EGbRBFsuQu44120687 = EGbRBFsuQu88267553;     EGbRBFsuQu88267553 = EGbRBFsuQu69202252;     EGbRBFsuQu69202252 = EGbRBFsuQu75227777;     EGbRBFsuQu75227777 = EGbRBFsuQu98705759;     EGbRBFsuQu98705759 = EGbRBFsuQu66979279;     EGbRBFsuQu66979279 = EGbRBFsuQu97365140;     EGbRBFsuQu97365140 = EGbRBFsuQu19015516;     EGbRBFsuQu19015516 = EGbRBFsuQu35469846;     EGbRBFsuQu35469846 = EGbRBFsuQu46652213;     EGbRBFsuQu46652213 = EGbRBFsuQu9769031;     EGbRBFsuQu9769031 = EGbRBFsuQu80276716;     EGbRBFsuQu80276716 = EGbRBFsuQu15456263;     EGbRBFsuQu15456263 = EGbRBFsuQu24033553;     EGbRBFsuQu24033553 = EGbRBFsuQu71959880;     EGbRBFsuQu71959880 = EGbRBFsuQu98355420;     EGbRBFsuQu98355420 = EGbRBFsuQu37371163;     EGbRBFsuQu37371163 = EGbRBFsuQu86506476;     EGbRBFsuQu86506476 = EGbRBFsuQu54951787;     EGbRBFsuQu54951787 = EGbRBFsuQu19456303;     EGbRBFsuQu19456303 = EGbRBFsuQu6592235;     EGbRBFsuQu6592235 = EGbRBFsuQu56834137;     EGbRBFsuQu56834137 = EGbRBFsuQu99791214;     EGbRBFsuQu99791214 = EGbRBFsuQu16136268;     EGbRBFsuQu16136268 = EGbRBFsuQu38675009;     EGbRBFsuQu38675009 = EGbRBFsuQu4909924;     EGbRBFsuQu4909924 = EGbRBFsuQu10306743;     EGbRBFsuQu10306743 = EGbRBFsuQu60106246;     EGbRBFsuQu60106246 = EGbRBFsuQu79943291;     EGbRBFsuQu79943291 = EGbRBFsuQu8210594;     EGbRBFsuQu8210594 = EGbRBFsuQu80553267;     EGbRBFsuQu80553267 = EGbRBFsuQu96418447;     EGbRBFsuQu96418447 = EGbRBFsuQu87855944;     EGbRBFsuQu87855944 = EGbRBFsuQu15424118;     EGbRBFsuQu15424118 = EGbRBFsuQu33967404;     EGbRBFsuQu33967404 = EGbRBFsuQu10257430;     EGbRBFsuQu10257430 = EGbRBFsuQu1121724;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void faSBInpAQj73387908() {     int coKagugdqX49100589 = -151123038;    int coKagugdqX68554348 = -728024092;    int coKagugdqX43115639 = -385924368;    int coKagugdqX75568321 = -255698871;    int coKagugdqX90666568 = -624365179;    int coKagugdqX19201124 = -292904658;    int coKagugdqX46388939 = -283107646;    int coKagugdqX86632603 = 2718874;    int coKagugdqX47634907 = -537006673;    int coKagugdqX79490251 = -686052208;    int coKagugdqX61703978 = -626716283;    int coKagugdqX74742601 = -856480778;    int coKagugdqX74501345 = -917615017;    int coKagugdqX64935279 = -818798717;    int coKagugdqX49378455 = -84489050;    int coKagugdqX47179328 = -529775817;    int coKagugdqX21835781 = -537130540;    int coKagugdqX27763551 = -698033045;    int coKagugdqX82874361 = -390836336;    int coKagugdqX84093661 = -754897329;    int coKagugdqX89167855 = -769480993;    int coKagugdqX7154436 = -830781536;    int coKagugdqX72300368 = -359134406;    int coKagugdqX55048585 = -510167123;    int coKagugdqX32811996 = -238963520;    int coKagugdqX53217142 = -690291002;    int coKagugdqX8019111 = -692805446;    int coKagugdqX41564220 = -109297923;    int coKagugdqX68481750 = -207392255;    int coKagugdqX5020452 = 93082363;    int coKagugdqX54011871 = -556241459;    int coKagugdqX51888883 = -433691833;    int coKagugdqX45384720 = -784492771;    int coKagugdqX230445 = -824863143;    int coKagugdqX81175585 = -459758666;    int coKagugdqX38223650 = -675543165;    int coKagugdqX3545510 = -861297676;    int coKagugdqX68332664 = 45901310;    int coKagugdqX42120031 = -377942393;    int coKagugdqX11000563 = -747499995;    int coKagugdqX94773627 = -581732849;    int coKagugdqX33488512 = 74728170;    int coKagugdqX99143165 = -209275103;    int coKagugdqX89093591 = -37833482;    int coKagugdqX74471074 = -941759969;    int coKagugdqX6528514 = -681852850;    int coKagugdqX98995983 = -912121980;    int coKagugdqX39584751 = -899861559;    int coKagugdqX78818544 = -764134309;    int coKagugdqX77782438 = -372220139;    int coKagugdqX17784511 = -473431456;    int coKagugdqX50815552 = -33252713;    int coKagugdqX63030060 = -987347858;    int coKagugdqX31410336 = -545335350;    int coKagugdqX84220052 = -519303248;    int coKagugdqX41946154 = -320341502;    int coKagugdqX96253979 = -268889686;    int coKagugdqX88067054 = -875757246;    int coKagugdqX42756326 = 83264648;    int coKagugdqX37449427 = -934074177;    int coKagugdqX11182013 = -600099212;    int coKagugdqX4824719 = -73809723;    int coKagugdqX18150853 = -789888871;    int coKagugdqX42614456 = -530089036;    int coKagugdqX25478380 = -29810749;    int coKagugdqX9815096 = -93024451;    int coKagugdqX29357881 = 28011993;    int coKagugdqX74270900 = 7248125;    int coKagugdqX83759693 = -259040052;    int coKagugdqX11154805 = -408945886;    int coKagugdqX43633818 = -668478142;    int coKagugdqX53503116 = -483031851;    int coKagugdqX85643520 = -220090652;    int coKagugdqX71873799 = -643336342;    int coKagugdqX89320033 = -73164480;    int coKagugdqX55679344 = -744209164;    int coKagugdqX8011271 = -521506433;    int coKagugdqX83206777 = -221300925;    int coKagugdqX80577510 = -568407154;    int coKagugdqX26283482 = -557110671;    int coKagugdqX54221159 = -778169023;    int coKagugdqX68434360 = -792943888;    int coKagugdqX62745676 = -345163614;    int coKagugdqX90699311 = -835172117;    int coKagugdqX87235940 = -433486182;    int coKagugdqX3196319 = -422988746;    int coKagugdqX88858822 = -446343975;    int coKagugdqX13974384 = -139157421;    int coKagugdqX16010392 = -205559896;    int coKagugdqX39229432 = -39417164;    int coKagugdqX41969670 = -306653479;    int coKagugdqX15478455 = -985540430;    int coKagugdqX25576339 = 62636662;    int coKagugdqX4670604 = -443868217;    int coKagugdqX99818549 = -47400783;    int coKagugdqX89948909 = -407923126;    int coKagugdqX15337659 = -135382959;    int coKagugdqX56528710 = -679186068;    int coKagugdqX63615211 = 91977267;    int coKagugdqX64655978 = -151123038;     coKagugdqX49100589 = coKagugdqX68554348;     coKagugdqX68554348 = coKagugdqX43115639;     coKagugdqX43115639 = coKagugdqX75568321;     coKagugdqX75568321 = coKagugdqX90666568;     coKagugdqX90666568 = coKagugdqX19201124;     coKagugdqX19201124 = coKagugdqX46388939;     coKagugdqX46388939 = coKagugdqX86632603;     coKagugdqX86632603 = coKagugdqX47634907;     coKagugdqX47634907 = coKagugdqX79490251;     coKagugdqX79490251 = coKagugdqX61703978;     coKagugdqX61703978 = coKagugdqX74742601;     coKagugdqX74742601 = coKagugdqX74501345;     coKagugdqX74501345 = coKagugdqX64935279;     coKagugdqX64935279 = coKagugdqX49378455;     coKagugdqX49378455 = coKagugdqX47179328;     coKagugdqX47179328 = coKagugdqX21835781;     coKagugdqX21835781 = coKagugdqX27763551;     coKagugdqX27763551 = coKagugdqX82874361;     coKagugdqX82874361 = coKagugdqX84093661;     coKagugdqX84093661 = coKagugdqX89167855;     coKagugdqX89167855 = coKagugdqX7154436;     coKagugdqX7154436 = coKagugdqX72300368;     coKagugdqX72300368 = coKagugdqX55048585;     coKagugdqX55048585 = coKagugdqX32811996;     coKagugdqX32811996 = coKagugdqX53217142;     coKagugdqX53217142 = coKagugdqX8019111;     coKagugdqX8019111 = coKagugdqX41564220;     coKagugdqX41564220 = coKagugdqX68481750;     coKagugdqX68481750 = coKagugdqX5020452;     coKagugdqX5020452 = coKagugdqX54011871;     coKagugdqX54011871 = coKagugdqX51888883;     coKagugdqX51888883 = coKagugdqX45384720;     coKagugdqX45384720 = coKagugdqX230445;     coKagugdqX230445 = coKagugdqX81175585;     coKagugdqX81175585 = coKagugdqX38223650;     coKagugdqX38223650 = coKagugdqX3545510;     coKagugdqX3545510 = coKagugdqX68332664;     coKagugdqX68332664 = coKagugdqX42120031;     coKagugdqX42120031 = coKagugdqX11000563;     coKagugdqX11000563 = coKagugdqX94773627;     coKagugdqX94773627 = coKagugdqX33488512;     coKagugdqX33488512 = coKagugdqX99143165;     coKagugdqX99143165 = coKagugdqX89093591;     coKagugdqX89093591 = coKagugdqX74471074;     coKagugdqX74471074 = coKagugdqX6528514;     coKagugdqX6528514 = coKagugdqX98995983;     coKagugdqX98995983 = coKagugdqX39584751;     coKagugdqX39584751 = coKagugdqX78818544;     coKagugdqX78818544 = coKagugdqX77782438;     coKagugdqX77782438 = coKagugdqX17784511;     coKagugdqX17784511 = coKagugdqX50815552;     coKagugdqX50815552 = coKagugdqX63030060;     coKagugdqX63030060 = coKagugdqX31410336;     coKagugdqX31410336 = coKagugdqX84220052;     coKagugdqX84220052 = coKagugdqX41946154;     coKagugdqX41946154 = coKagugdqX96253979;     coKagugdqX96253979 = coKagugdqX88067054;     coKagugdqX88067054 = coKagugdqX42756326;     coKagugdqX42756326 = coKagugdqX37449427;     coKagugdqX37449427 = coKagugdqX11182013;     coKagugdqX11182013 = coKagugdqX4824719;     coKagugdqX4824719 = coKagugdqX18150853;     coKagugdqX18150853 = coKagugdqX42614456;     coKagugdqX42614456 = coKagugdqX25478380;     coKagugdqX25478380 = coKagugdqX9815096;     coKagugdqX9815096 = coKagugdqX29357881;     coKagugdqX29357881 = coKagugdqX74270900;     coKagugdqX74270900 = coKagugdqX83759693;     coKagugdqX83759693 = coKagugdqX11154805;     coKagugdqX11154805 = coKagugdqX43633818;     coKagugdqX43633818 = coKagugdqX53503116;     coKagugdqX53503116 = coKagugdqX85643520;     coKagugdqX85643520 = coKagugdqX71873799;     coKagugdqX71873799 = coKagugdqX89320033;     coKagugdqX89320033 = coKagugdqX55679344;     coKagugdqX55679344 = coKagugdqX8011271;     coKagugdqX8011271 = coKagugdqX83206777;     coKagugdqX83206777 = coKagugdqX80577510;     coKagugdqX80577510 = coKagugdqX26283482;     coKagugdqX26283482 = coKagugdqX54221159;     coKagugdqX54221159 = coKagugdqX68434360;     coKagugdqX68434360 = coKagugdqX62745676;     coKagugdqX62745676 = coKagugdqX90699311;     coKagugdqX90699311 = coKagugdqX87235940;     coKagugdqX87235940 = coKagugdqX3196319;     coKagugdqX3196319 = coKagugdqX88858822;     coKagugdqX88858822 = coKagugdqX13974384;     coKagugdqX13974384 = coKagugdqX16010392;     coKagugdqX16010392 = coKagugdqX39229432;     coKagugdqX39229432 = coKagugdqX41969670;     coKagugdqX41969670 = coKagugdqX15478455;     coKagugdqX15478455 = coKagugdqX25576339;     coKagugdqX25576339 = coKagugdqX4670604;     coKagugdqX4670604 = coKagugdqX99818549;     coKagugdqX99818549 = coKagugdqX89948909;     coKagugdqX89948909 = coKagugdqX15337659;     coKagugdqX15337659 = coKagugdqX56528710;     coKagugdqX56528710 = coKagugdqX63615211;     coKagugdqX63615211 = coKagugdqX64655978;     coKagugdqX64655978 = coKagugdqX49100589;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void lbiegvFYBE1312363() {     int QNiRPQljSO20024998 = -111152696;    int QNiRPQljSO56526188 = -446532180;    int QNiRPQljSO16575381 = -860129905;    int QNiRPQljSO34935170 = -77460183;    int QNiRPQljSO94397004 = -367207548;    int QNiRPQljSO56841435 = -18167637;    int QNiRPQljSO99156415 = -268022647;    int QNiRPQljSO41681675 = -681572090;    int QNiRPQljSO67929953 = -700023417;    int QNiRPQljSO12656162 = -378619333;    int QNiRPQljSO17746843 = -271259670;    int QNiRPQljSO61587220 = -849243958;    int QNiRPQljSO19117722 = -899981553;    int QNiRPQljSO17372785 = -426372484;    int QNiRPQljSO20595379 = -28626228;    int QNiRPQljSO39697382 = -568603380;    int QNiRPQljSO77654892 = -671465075;    int QNiRPQljSO4283401 = -447817560;    int QNiRPQljSO63546751 = -405980913;    int QNiRPQljSO99694335 = -995995009;    int QNiRPQljSO35672158 = -373563997;    int QNiRPQljSO35701219 = -494062241;    int QNiRPQljSO76472731 = -275440932;    int QNiRPQljSO98984366 = -550895809;    int QNiRPQljSO20405208 = -960240063;    int QNiRPQljSO58039408 = -159238688;    int QNiRPQljSO58638677 = -4574015;    int QNiRPQljSO87617545 = -939875283;    int QNiRPQljSO49139733 = -709511545;    int QNiRPQljSO39997404 = -300500605;    int QNiRPQljSO57765655 = -173109199;    int QNiRPQljSO42811062 = -687812900;    int QNiRPQljSO84368318 = -877740510;    int QNiRPQljSO59444460 = 22430963;    int QNiRPQljSO30434455 = -102645242;    int QNiRPQljSO98517147 = 75091970;    int QNiRPQljSO90427774 = -491036378;    int QNiRPQljSO845792 = 75852827;    int QNiRPQljSO67587557 = -67013530;    int QNiRPQljSO67670734 = -68593401;    int QNiRPQljSO73821175 = -32186779;    int QNiRPQljSO26521104 = -20570329;    int QNiRPQljSO17626562 = -956506421;    int QNiRPQljSO10124370 = -589533858;    int QNiRPQljSO90485939 = -121522890;    int QNiRPQljSO58023202 = -947655443;    int QNiRPQljSO9988519 = -298814079;    int QNiRPQljSO99653793 = -624153390;    int QNiRPQljSO5945487 = -527844208;    int QNiRPQljSO6796194 = -667248884;    int QNiRPQljSO66066589 = -643429564;    int QNiRPQljSO3239240 = -78411658;    int QNiRPQljSO24824010 = -607384958;    int QNiRPQljSO53143758 = -396432498;    int QNiRPQljSO65640205 = -355384262;    int QNiRPQljSO84323778 = -617090456;    int QNiRPQljSO80053457 = -71091248;    int QNiRPQljSO17591014 = -209234097;    int QNiRPQljSO14529962 = -117220121;    int QNiRPQljSO36357597 = -107968861;    int QNiRPQljSO98202758 = 86406377;    int QNiRPQljSO11538870 = -328147365;    int QNiRPQljSO92541942 = -972060545;    int QNiRPQljSO27932550 = -299522813;    int QNiRPQljSO54890506 = -105510135;    int QNiRPQljSO74935780 = -583446770;    int QNiRPQljSO77218902 = -971503449;    int QNiRPQljSO59673262 = -822412516;    int QNiRPQljSO86938330 = -223727242;    int QNiRPQljSO22078231 = -3718198;    int QNiRPQljSO49269608 = 22432997;    int QNiRPQljSO76809101 = -647317903;    int QNiRPQljSO36695844 = -280804031;    int QNiRPQljSO95876017 = -237387512;    int QNiRPQljSO25873160 = -863808231;    int QNiRPQljSO9151054 = -252993668;    int QNiRPQljSO18074658 = -537555820;    int QNiRPQljSO66348362 = -685907074;    int QNiRPQljSO8498428 = -329372919;    int QNiRPQljSO62382006 = 87415380;    int QNiRPQljSO48050890 = -860424610;    int QNiRPQljSO58984883 = -380420626;    int QNiRPQljSO81672058 = -312031075;    int QNiRPQljSO42343539 = 57737339;    int QNiRPQljSO73930815 = -657071041;    int QNiRPQljSO54526416 = 5302459;    int QNiRPQljSO17987053 = 19572058;    int QNiRPQljSO31224560 = -381308012;    int QNiRPQljSO93804255 = -622184776;    int QNiRPQljSO46110676 = -485554787;    int QNiRPQljSO18463691 = -853816783;    int QNiRPQljSO72836761 = -181802282;    int QNiRPQljSO86315829 = -806927053;    int QNiRPQljSO31229961 = -959044669;    int QNiRPQljSO69467976 = -54999778;    int QNiRPQljSO62282305 = -704039415;    int QNiRPQljSO33979162 = -48509785;    int QNiRPQljSO89694011 = -556983609;    int QNiRPQljSO55233863 = -384023724;    int QNiRPQljSO15550159 = -111152696;     QNiRPQljSO20024998 = QNiRPQljSO56526188;     QNiRPQljSO56526188 = QNiRPQljSO16575381;     QNiRPQljSO16575381 = QNiRPQljSO34935170;     QNiRPQljSO34935170 = QNiRPQljSO94397004;     QNiRPQljSO94397004 = QNiRPQljSO56841435;     QNiRPQljSO56841435 = QNiRPQljSO99156415;     QNiRPQljSO99156415 = QNiRPQljSO41681675;     QNiRPQljSO41681675 = QNiRPQljSO67929953;     QNiRPQljSO67929953 = QNiRPQljSO12656162;     QNiRPQljSO12656162 = QNiRPQljSO17746843;     QNiRPQljSO17746843 = QNiRPQljSO61587220;     QNiRPQljSO61587220 = QNiRPQljSO19117722;     QNiRPQljSO19117722 = QNiRPQljSO17372785;     QNiRPQljSO17372785 = QNiRPQljSO20595379;     QNiRPQljSO20595379 = QNiRPQljSO39697382;     QNiRPQljSO39697382 = QNiRPQljSO77654892;     QNiRPQljSO77654892 = QNiRPQljSO4283401;     QNiRPQljSO4283401 = QNiRPQljSO63546751;     QNiRPQljSO63546751 = QNiRPQljSO99694335;     QNiRPQljSO99694335 = QNiRPQljSO35672158;     QNiRPQljSO35672158 = QNiRPQljSO35701219;     QNiRPQljSO35701219 = QNiRPQljSO76472731;     QNiRPQljSO76472731 = QNiRPQljSO98984366;     QNiRPQljSO98984366 = QNiRPQljSO20405208;     QNiRPQljSO20405208 = QNiRPQljSO58039408;     QNiRPQljSO58039408 = QNiRPQljSO58638677;     QNiRPQljSO58638677 = QNiRPQljSO87617545;     QNiRPQljSO87617545 = QNiRPQljSO49139733;     QNiRPQljSO49139733 = QNiRPQljSO39997404;     QNiRPQljSO39997404 = QNiRPQljSO57765655;     QNiRPQljSO57765655 = QNiRPQljSO42811062;     QNiRPQljSO42811062 = QNiRPQljSO84368318;     QNiRPQljSO84368318 = QNiRPQljSO59444460;     QNiRPQljSO59444460 = QNiRPQljSO30434455;     QNiRPQljSO30434455 = QNiRPQljSO98517147;     QNiRPQljSO98517147 = QNiRPQljSO90427774;     QNiRPQljSO90427774 = QNiRPQljSO845792;     QNiRPQljSO845792 = QNiRPQljSO67587557;     QNiRPQljSO67587557 = QNiRPQljSO67670734;     QNiRPQljSO67670734 = QNiRPQljSO73821175;     QNiRPQljSO73821175 = QNiRPQljSO26521104;     QNiRPQljSO26521104 = QNiRPQljSO17626562;     QNiRPQljSO17626562 = QNiRPQljSO10124370;     QNiRPQljSO10124370 = QNiRPQljSO90485939;     QNiRPQljSO90485939 = QNiRPQljSO58023202;     QNiRPQljSO58023202 = QNiRPQljSO9988519;     QNiRPQljSO9988519 = QNiRPQljSO99653793;     QNiRPQljSO99653793 = QNiRPQljSO5945487;     QNiRPQljSO5945487 = QNiRPQljSO6796194;     QNiRPQljSO6796194 = QNiRPQljSO66066589;     QNiRPQljSO66066589 = QNiRPQljSO3239240;     QNiRPQljSO3239240 = QNiRPQljSO24824010;     QNiRPQljSO24824010 = QNiRPQljSO53143758;     QNiRPQljSO53143758 = QNiRPQljSO65640205;     QNiRPQljSO65640205 = QNiRPQljSO84323778;     QNiRPQljSO84323778 = QNiRPQljSO80053457;     QNiRPQljSO80053457 = QNiRPQljSO17591014;     QNiRPQljSO17591014 = QNiRPQljSO14529962;     QNiRPQljSO14529962 = QNiRPQljSO36357597;     QNiRPQljSO36357597 = QNiRPQljSO98202758;     QNiRPQljSO98202758 = QNiRPQljSO11538870;     QNiRPQljSO11538870 = QNiRPQljSO92541942;     QNiRPQljSO92541942 = QNiRPQljSO27932550;     QNiRPQljSO27932550 = QNiRPQljSO54890506;     QNiRPQljSO54890506 = QNiRPQljSO74935780;     QNiRPQljSO74935780 = QNiRPQljSO77218902;     QNiRPQljSO77218902 = QNiRPQljSO59673262;     QNiRPQljSO59673262 = QNiRPQljSO86938330;     QNiRPQljSO86938330 = QNiRPQljSO22078231;     QNiRPQljSO22078231 = QNiRPQljSO49269608;     QNiRPQljSO49269608 = QNiRPQljSO76809101;     QNiRPQljSO76809101 = QNiRPQljSO36695844;     QNiRPQljSO36695844 = QNiRPQljSO95876017;     QNiRPQljSO95876017 = QNiRPQljSO25873160;     QNiRPQljSO25873160 = QNiRPQljSO9151054;     QNiRPQljSO9151054 = QNiRPQljSO18074658;     QNiRPQljSO18074658 = QNiRPQljSO66348362;     QNiRPQljSO66348362 = QNiRPQljSO8498428;     QNiRPQljSO8498428 = QNiRPQljSO62382006;     QNiRPQljSO62382006 = QNiRPQljSO48050890;     QNiRPQljSO48050890 = QNiRPQljSO58984883;     QNiRPQljSO58984883 = QNiRPQljSO81672058;     QNiRPQljSO81672058 = QNiRPQljSO42343539;     QNiRPQljSO42343539 = QNiRPQljSO73930815;     QNiRPQljSO73930815 = QNiRPQljSO54526416;     QNiRPQljSO54526416 = QNiRPQljSO17987053;     QNiRPQljSO17987053 = QNiRPQljSO31224560;     QNiRPQljSO31224560 = QNiRPQljSO93804255;     QNiRPQljSO93804255 = QNiRPQljSO46110676;     QNiRPQljSO46110676 = QNiRPQljSO18463691;     QNiRPQljSO18463691 = QNiRPQljSO72836761;     QNiRPQljSO72836761 = QNiRPQljSO86315829;     QNiRPQljSO86315829 = QNiRPQljSO31229961;     QNiRPQljSO31229961 = QNiRPQljSO69467976;     QNiRPQljSO69467976 = QNiRPQljSO62282305;     QNiRPQljSO62282305 = QNiRPQljSO33979162;     QNiRPQljSO33979162 = QNiRPQljSO89694011;     QNiRPQljSO89694011 = QNiRPQljSO55233863;     QNiRPQljSO55233863 = QNiRPQljSO15550159;     QNiRPQljSO15550159 = QNiRPQljSO20024998;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void TXbzQqvLaG1754466() {     int ZpOKZdlRVT55204753 = -8073210;    int ZpOKZdlRVT89072260 = -522814123;    int ZpOKZdlRVT61784247 = -451014517;    int ZpOKZdlRVT72802823 = -87529162;    int ZpOKZdlRVT77242261 = -981725693;    int ZpOKZdlRVT80229190 = 43733483;    int ZpOKZdlRVT43972577 = -931145557;    int ZpOKZdlRVT74820595 = -792509673;    int ZpOKZdlRVT77757731 = -832331479;    int ZpOKZdlRVT13998938 = -288641428;    int ZpOKZdlRVT62455479 = -423098014;    int ZpOKZdlRVT35148998 = -771843705;    int ZpOKZdlRVT24416292 = -300823055;    int ZpOKZdlRVT55767396 = -941343387;    int ZpOKZdlRVT35465100 = -700376920;    int ZpOKZdlRVT37813816 = -68366661;    int ZpOKZdlRVT27377303 = -792904792;    int ZpOKZdlRVT70817769 = -57698931;    int ZpOKZdlRVT85560743 = -932569966;    int ZpOKZdlRVT8791352 = -135849150;    int ZpOKZdlRVT37059897 = -45901196;    int ZpOKZdlRVT50267991 = -658695019;    int ZpOKZdlRVT81647953 = 76432423;    int ZpOKZdlRVT26341175 = -494313156;    int ZpOKZdlRVT33397025 = -365547259;    int ZpOKZdlRVT11086971 = -385358182;    int ZpOKZdlRVT46922052 = -95067075;    int ZpOKZdlRVT25478396 = -293160853;    int ZpOKZdlRVT59970899 = -621915590;    int ZpOKZdlRVT25815829 = -175251252;    int ZpOKZdlRVT13079778 = -143748866;    int ZpOKZdlRVT18947220 = -926782172;    int ZpOKZdlRVT26000515 = 19005427;    int ZpOKZdlRVT95626683 = -329768373;    int ZpOKZdlRVT7366314 = -517119620;    int ZpOKZdlRVT92605942 = 50899235;    int ZpOKZdlRVT8690180 = 85759698;    int ZpOKZdlRVT42258236 = -816130057;    int ZpOKZdlRVT86357477 = -697228722;    int ZpOKZdlRVT42248286 = -439802590;    int ZpOKZdlRVT76154187 = -822894540;    int ZpOKZdlRVT37034291 = -582998272;    int ZpOKZdlRVT97776863 = -308340196;    int ZpOKZdlRVT94965127 = -271105307;    int ZpOKZdlRVT54459644 = -450176927;    int ZpOKZdlRVT99323645 = -291158308;    int ZpOKZdlRVT72170142 = -893458762;    int ZpOKZdlRVT98308853 = 72720196;    int ZpOKZdlRVT25811052 = 22600980;    int ZpOKZdlRVT30784937 = -733280720;    int ZpOKZdlRVT80003929 = -572835142;    int ZpOKZdlRVT90719786 = -598270530;    int ZpOKZdlRVT62175214 = -563245463;    int ZpOKZdlRVT47879758 = -829645198;    int ZpOKZdlRVT64694568 = -733633586;    int ZpOKZdlRVT4936763 = -349378191;    int ZpOKZdlRVT7424307 = -499246546;    int ZpOKZdlRVT35443072 = -956701362;    int ZpOKZdlRVT39405799 = -721981903;    int ZpOKZdlRVT66155290 = -496367511;    int ZpOKZdlRVT33307139 = -861199442;    int ZpOKZdlRVT18494181 = -537984704;    int ZpOKZdlRVT14849696 = -70594084;    int ZpOKZdlRVT51941903 = -557080227;    int ZpOKZdlRVT919160 = -44892562;    int ZpOKZdlRVT43508260 = -496315843;    int ZpOKZdlRVT9148483 = -690849132;    int ZpOKZdlRVT28789608 = -971054682;    int ZpOKZdlRVT48401082 = -324223768;    int ZpOKZdlRVT42859157 = -651276156;    int ZpOKZdlRVT29123637 = -54126360;    int ZpOKZdlRVT85119066 = -976774736;    int ZpOKZdlRVT84460291 = -360470209;    int ZpOKZdlRVT43312457 = -392767377;    int ZpOKZdlRVT32637165 = -312954611;    int ZpOKZdlRVT25607 = -462902924;    int ZpOKZdlRVT52491127 = -250354824;    int ZpOKZdlRVT86682825 = -652462271;    int ZpOKZdlRVT71881531 = 55863771;    int ZpOKZdlRVT34073379 = 25611048;    int ZpOKZdlRVT38916829 = -491899421;    int ZpOKZdlRVT48613198 = -67787272;    int ZpOKZdlRVT99667343 = -215761834;    int ZpOKZdlRVT29185963 = -888634870;    int ZpOKZdlRVT45811900 = -602416111;    int ZpOKZdlRVT22359992 = -545478337;    int ZpOKZdlRVT56772005 = -263536710;    int ZpOKZdlRVT78120757 = -151349376;    int ZpOKZdlRVT30932115 = -596134788;    int ZpOKZdlRVT2429551 = -67741430;    int ZpOKZdlRVT85181635 = -449854219;    int ZpOKZdlRVT73247107 = 42461059;    int ZpOKZdlRVT2852438 = 5851845;    int ZpOKZdlRVT20202188 = -100861211;    int ZpOKZdlRVT8941148 = -578603148;    int ZpOKZdlRVT57660006 = -184909836;    int ZpOKZdlRVT22184595 = -412404189;    int ZpOKZdlRVT45834961 = -751259969;    int ZpOKZdlRVT94045968 = -126212745;    int ZpOKZdlRVT10951384 = -8073210;     ZpOKZdlRVT55204753 = ZpOKZdlRVT89072260;     ZpOKZdlRVT89072260 = ZpOKZdlRVT61784247;     ZpOKZdlRVT61784247 = ZpOKZdlRVT72802823;     ZpOKZdlRVT72802823 = ZpOKZdlRVT77242261;     ZpOKZdlRVT77242261 = ZpOKZdlRVT80229190;     ZpOKZdlRVT80229190 = ZpOKZdlRVT43972577;     ZpOKZdlRVT43972577 = ZpOKZdlRVT74820595;     ZpOKZdlRVT74820595 = ZpOKZdlRVT77757731;     ZpOKZdlRVT77757731 = ZpOKZdlRVT13998938;     ZpOKZdlRVT13998938 = ZpOKZdlRVT62455479;     ZpOKZdlRVT62455479 = ZpOKZdlRVT35148998;     ZpOKZdlRVT35148998 = ZpOKZdlRVT24416292;     ZpOKZdlRVT24416292 = ZpOKZdlRVT55767396;     ZpOKZdlRVT55767396 = ZpOKZdlRVT35465100;     ZpOKZdlRVT35465100 = ZpOKZdlRVT37813816;     ZpOKZdlRVT37813816 = ZpOKZdlRVT27377303;     ZpOKZdlRVT27377303 = ZpOKZdlRVT70817769;     ZpOKZdlRVT70817769 = ZpOKZdlRVT85560743;     ZpOKZdlRVT85560743 = ZpOKZdlRVT8791352;     ZpOKZdlRVT8791352 = ZpOKZdlRVT37059897;     ZpOKZdlRVT37059897 = ZpOKZdlRVT50267991;     ZpOKZdlRVT50267991 = ZpOKZdlRVT81647953;     ZpOKZdlRVT81647953 = ZpOKZdlRVT26341175;     ZpOKZdlRVT26341175 = ZpOKZdlRVT33397025;     ZpOKZdlRVT33397025 = ZpOKZdlRVT11086971;     ZpOKZdlRVT11086971 = ZpOKZdlRVT46922052;     ZpOKZdlRVT46922052 = ZpOKZdlRVT25478396;     ZpOKZdlRVT25478396 = ZpOKZdlRVT59970899;     ZpOKZdlRVT59970899 = ZpOKZdlRVT25815829;     ZpOKZdlRVT25815829 = ZpOKZdlRVT13079778;     ZpOKZdlRVT13079778 = ZpOKZdlRVT18947220;     ZpOKZdlRVT18947220 = ZpOKZdlRVT26000515;     ZpOKZdlRVT26000515 = ZpOKZdlRVT95626683;     ZpOKZdlRVT95626683 = ZpOKZdlRVT7366314;     ZpOKZdlRVT7366314 = ZpOKZdlRVT92605942;     ZpOKZdlRVT92605942 = ZpOKZdlRVT8690180;     ZpOKZdlRVT8690180 = ZpOKZdlRVT42258236;     ZpOKZdlRVT42258236 = ZpOKZdlRVT86357477;     ZpOKZdlRVT86357477 = ZpOKZdlRVT42248286;     ZpOKZdlRVT42248286 = ZpOKZdlRVT76154187;     ZpOKZdlRVT76154187 = ZpOKZdlRVT37034291;     ZpOKZdlRVT37034291 = ZpOKZdlRVT97776863;     ZpOKZdlRVT97776863 = ZpOKZdlRVT94965127;     ZpOKZdlRVT94965127 = ZpOKZdlRVT54459644;     ZpOKZdlRVT54459644 = ZpOKZdlRVT99323645;     ZpOKZdlRVT99323645 = ZpOKZdlRVT72170142;     ZpOKZdlRVT72170142 = ZpOKZdlRVT98308853;     ZpOKZdlRVT98308853 = ZpOKZdlRVT25811052;     ZpOKZdlRVT25811052 = ZpOKZdlRVT30784937;     ZpOKZdlRVT30784937 = ZpOKZdlRVT80003929;     ZpOKZdlRVT80003929 = ZpOKZdlRVT90719786;     ZpOKZdlRVT90719786 = ZpOKZdlRVT62175214;     ZpOKZdlRVT62175214 = ZpOKZdlRVT47879758;     ZpOKZdlRVT47879758 = ZpOKZdlRVT64694568;     ZpOKZdlRVT64694568 = ZpOKZdlRVT4936763;     ZpOKZdlRVT4936763 = ZpOKZdlRVT7424307;     ZpOKZdlRVT7424307 = ZpOKZdlRVT35443072;     ZpOKZdlRVT35443072 = ZpOKZdlRVT39405799;     ZpOKZdlRVT39405799 = ZpOKZdlRVT66155290;     ZpOKZdlRVT66155290 = ZpOKZdlRVT33307139;     ZpOKZdlRVT33307139 = ZpOKZdlRVT18494181;     ZpOKZdlRVT18494181 = ZpOKZdlRVT14849696;     ZpOKZdlRVT14849696 = ZpOKZdlRVT51941903;     ZpOKZdlRVT51941903 = ZpOKZdlRVT919160;     ZpOKZdlRVT919160 = ZpOKZdlRVT43508260;     ZpOKZdlRVT43508260 = ZpOKZdlRVT9148483;     ZpOKZdlRVT9148483 = ZpOKZdlRVT28789608;     ZpOKZdlRVT28789608 = ZpOKZdlRVT48401082;     ZpOKZdlRVT48401082 = ZpOKZdlRVT42859157;     ZpOKZdlRVT42859157 = ZpOKZdlRVT29123637;     ZpOKZdlRVT29123637 = ZpOKZdlRVT85119066;     ZpOKZdlRVT85119066 = ZpOKZdlRVT84460291;     ZpOKZdlRVT84460291 = ZpOKZdlRVT43312457;     ZpOKZdlRVT43312457 = ZpOKZdlRVT32637165;     ZpOKZdlRVT32637165 = ZpOKZdlRVT25607;     ZpOKZdlRVT25607 = ZpOKZdlRVT52491127;     ZpOKZdlRVT52491127 = ZpOKZdlRVT86682825;     ZpOKZdlRVT86682825 = ZpOKZdlRVT71881531;     ZpOKZdlRVT71881531 = ZpOKZdlRVT34073379;     ZpOKZdlRVT34073379 = ZpOKZdlRVT38916829;     ZpOKZdlRVT38916829 = ZpOKZdlRVT48613198;     ZpOKZdlRVT48613198 = ZpOKZdlRVT99667343;     ZpOKZdlRVT99667343 = ZpOKZdlRVT29185963;     ZpOKZdlRVT29185963 = ZpOKZdlRVT45811900;     ZpOKZdlRVT45811900 = ZpOKZdlRVT22359992;     ZpOKZdlRVT22359992 = ZpOKZdlRVT56772005;     ZpOKZdlRVT56772005 = ZpOKZdlRVT78120757;     ZpOKZdlRVT78120757 = ZpOKZdlRVT30932115;     ZpOKZdlRVT30932115 = ZpOKZdlRVT2429551;     ZpOKZdlRVT2429551 = ZpOKZdlRVT85181635;     ZpOKZdlRVT85181635 = ZpOKZdlRVT73247107;     ZpOKZdlRVT73247107 = ZpOKZdlRVT2852438;     ZpOKZdlRVT2852438 = ZpOKZdlRVT20202188;     ZpOKZdlRVT20202188 = ZpOKZdlRVT8941148;     ZpOKZdlRVT8941148 = ZpOKZdlRVT57660006;     ZpOKZdlRVT57660006 = ZpOKZdlRVT22184595;     ZpOKZdlRVT22184595 = ZpOKZdlRVT45834961;     ZpOKZdlRVT45834961 = ZpOKZdlRVT94045968;     ZpOKZdlRVT94045968 = ZpOKZdlRVT10951384;     ZpOKZdlRVT10951384 = ZpOKZdlRVT55204753;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void KaVqnqNdmo20298004() {     int ZvSWBZxpHj83988190 = -323735448;    int ZvSWBZxpHj97519046 = 14773378;    int ZvSWBZxpHj98773319 = -916283745;    int ZvSWBZxpHj49239994 = -95767417;    int ZvSWBZxpHj17752017 = -484513266;    int ZvSWBZxpHj99364626 = -405620146;    int ZvSWBZxpHj62458526 = -73700665;    int ZvSWBZxpHj29206985 = 16723213;    int ZvSWBZxpHj31253185 = -840583529;    int ZvSWBZxpHj60552118 = -115023141;    int ZvSWBZxpHj53580727 = 52670613;    int ZvSWBZxpHj49881360 = -308516225;    int ZvSWBZxpHj10569667 = -310602466;    int ZvSWBZxpHj96272077 = -362683218;    int ZvSWBZxpHj11267599 = -849991123;    int ZvSWBZxpHj8999990 = -559082073;    int ZvSWBZxpHj77150183 = -992264561;    int ZvSWBZxpHj7073162 = -638510962;    int ZvSWBZxpHj67208554 = -163415556;    int ZvSWBZxpHj52598002 = -932093448;    int ZvSWBZxpHj38195321 = -977813449;    int ZvSWBZxpHj89458986 = -993394565;    int ZvSWBZxpHj85882226 = -935671195;    int ZvSWBZxpHj3269473 = -748018258;    int ZvSWBZxpHj7663057 = -978980419;    int ZvSWBZxpHj81762249 = -170365042;    int ZvSWBZxpHj64608449 = -569106852;    int ZvSWBZxpHj47364546 = -964030865;    int ZvSWBZxpHj68832763 = -750246171;    int ZvSWBZxpHj23303631 = -72774509;    int ZvSWBZxpHj12882242 = -719726776;    int ZvSWBZxpHj35785894 = -822302485;    int ZvSWBZxpHj87335948 = -347293352;    int ZvSWBZxpHj43412138 = -117931466;    int ZvSWBZxpHj33946925 = -756235021;    int ZvSWBZxpHj60496774 = -668894820;    int ZvSWBZxpHj14541239 = -42316239;    int ZvSWBZxpHj39777508 = -645934236;    int ZvSWBZxpHj19896504 = -112859334;    int ZvSWBZxpHj39629919 = -143519199;    int ZvSWBZxpHj41699378 = -369837253;    int ZvSWBZxpHj36545079 = -743166589;    int ZvSWBZxpHj90627110 = -478022375;    int ZvSWBZxpHj37107567 = -110572855;    int ZvSWBZxpHj70438129 = -519075684;    int ZvSWBZxpHj24024008 = -54024287;    int ZvSWBZxpHj59409653 = -379986230;    int ZvSWBZxpHj69935721 = -557110507;    int ZvSWBZxpHj32973787 = -227034775;    int ZvSWBZxpHj41321182 = -287306767;    int ZvSWBZxpHj91407207 = -715076070;    int ZvSWBZxpHj71385688 = -523609607;    int ZvSWBZxpHj20008019 = -927131330;    int ZvSWBZxpHj25391031 = -84091952;    int ZvSWBZxpHj82102683 = -443110305;    int ZvSWBZxpHj94529204 = -330340884;    int ZvSWBZxpHj11636821 = -49555427;    int ZvSWBZxpHj95503846 = -68265488;    int ZvSWBZxpHj41576938 = -116786998;    int ZvSWBZxpHj35989767 = -214148225;    int ZvSWBZxpHj34756177 = -836513294;    int ZvSWBZxpHj15093981 = -109669800;    int ZvSWBZxpHj60374222 = -233030616;    int ZvSWBZxpHj7949555 = -667809020;    int ZvSWBZxpHj47669876 = -395296366;    int ZvSWBZxpHj17794834 = -125026902;    int ZvSWBZxpHj62545412 = -961222873;    int ZvSWBZxpHj67157528 = -92671000;    int ZvSWBZxpHj62325152 = -606448198;    int ZvSWBZxpHj50770825 = -81096303;    int ZvSWBZxpHj94458751 = -416765834;    int ZvSWBZxpHj37372675 = -246330326;    int ZvSWBZxpHj87176658 = -425651628;    int ZvSWBZxpHj27578636 = 80103642;    int ZvSWBZxpHj10898624 = -462256195;    int ZvSWBZxpHj1650242 = -134646861;    int ZvSWBZxpHj98831875 = -415372190;    int ZvSWBZxpHj48774659 = -725098340;    int ZvSWBZxpHj32831344 = -128942575;    int ZvSWBZxpHj83639048 = -824956132;    int ZvSWBZxpHj22352597 = -790378813;    int ZvSWBZxpHj94672728 = 88003654;    int ZvSWBZxpHj14390759 = -636996090;    int ZvSWBZxpHj27511582 = -362939405;    int ZvSWBZxpHj31896424 = -357698440;    int ZvSWBZxpHj41496553 = -96117170;    int ZvSWBZxpHj15777875 = -895171155;    int ZvSWBZxpHj61944918 = -163201401;    int ZvSWBZxpHj61309455 = -674821161;    int ZvSWBZxpHj39417721 = -325894138;    int ZvSWBZxpHj48859954 = -519339394;    int ZvSWBZxpHj19037392 = -974050752;    int ZvSWBZxpHj98200570 = -429147238;    int ZvSWBZxpHj83906736 = -898711110;    int ZvSWBZxpHj4873742 = -307005905;    int ZvSWBZxpHj26605398 = -160167453;    int ZvSWBZxpHj76170857 = -410135973;    int ZvSWBZxpHj82677556 = -810213355;    int ZvSWBZxpHj89437691 = -715276490;    int ZvSWBZxpHj52643295 = -323735448;     ZvSWBZxpHj83988190 = ZvSWBZxpHj97519046;     ZvSWBZxpHj97519046 = ZvSWBZxpHj98773319;     ZvSWBZxpHj98773319 = ZvSWBZxpHj49239994;     ZvSWBZxpHj49239994 = ZvSWBZxpHj17752017;     ZvSWBZxpHj17752017 = ZvSWBZxpHj99364626;     ZvSWBZxpHj99364626 = ZvSWBZxpHj62458526;     ZvSWBZxpHj62458526 = ZvSWBZxpHj29206985;     ZvSWBZxpHj29206985 = ZvSWBZxpHj31253185;     ZvSWBZxpHj31253185 = ZvSWBZxpHj60552118;     ZvSWBZxpHj60552118 = ZvSWBZxpHj53580727;     ZvSWBZxpHj53580727 = ZvSWBZxpHj49881360;     ZvSWBZxpHj49881360 = ZvSWBZxpHj10569667;     ZvSWBZxpHj10569667 = ZvSWBZxpHj96272077;     ZvSWBZxpHj96272077 = ZvSWBZxpHj11267599;     ZvSWBZxpHj11267599 = ZvSWBZxpHj8999990;     ZvSWBZxpHj8999990 = ZvSWBZxpHj77150183;     ZvSWBZxpHj77150183 = ZvSWBZxpHj7073162;     ZvSWBZxpHj7073162 = ZvSWBZxpHj67208554;     ZvSWBZxpHj67208554 = ZvSWBZxpHj52598002;     ZvSWBZxpHj52598002 = ZvSWBZxpHj38195321;     ZvSWBZxpHj38195321 = ZvSWBZxpHj89458986;     ZvSWBZxpHj89458986 = ZvSWBZxpHj85882226;     ZvSWBZxpHj85882226 = ZvSWBZxpHj3269473;     ZvSWBZxpHj3269473 = ZvSWBZxpHj7663057;     ZvSWBZxpHj7663057 = ZvSWBZxpHj81762249;     ZvSWBZxpHj81762249 = ZvSWBZxpHj64608449;     ZvSWBZxpHj64608449 = ZvSWBZxpHj47364546;     ZvSWBZxpHj47364546 = ZvSWBZxpHj68832763;     ZvSWBZxpHj68832763 = ZvSWBZxpHj23303631;     ZvSWBZxpHj23303631 = ZvSWBZxpHj12882242;     ZvSWBZxpHj12882242 = ZvSWBZxpHj35785894;     ZvSWBZxpHj35785894 = ZvSWBZxpHj87335948;     ZvSWBZxpHj87335948 = ZvSWBZxpHj43412138;     ZvSWBZxpHj43412138 = ZvSWBZxpHj33946925;     ZvSWBZxpHj33946925 = ZvSWBZxpHj60496774;     ZvSWBZxpHj60496774 = ZvSWBZxpHj14541239;     ZvSWBZxpHj14541239 = ZvSWBZxpHj39777508;     ZvSWBZxpHj39777508 = ZvSWBZxpHj19896504;     ZvSWBZxpHj19896504 = ZvSWBZxpHj39629919;     ZvSWBZxpHj39629919 = ZvSWBZxpHj41699378;     ZvSWBZxpHj41699378 = ZvSWBZxpHj36545079;     ZvSWBZxpHj36545079 = ZvSWBZxpHj90627110;     ZvSWBZxpHj90627110 = ZvSWBZxpHj37107567;     ZvSWBZxpHj37107567 = ZvSWBZxpHj70438129;     ZvSWBZxpHj70438129 = ZvSWBZxpHj24024008;     ZvSWBZxpHj24024008 = ZvSWBZxpHj59409653;     ZvSWBZxpHj59409653 = ZvSWBZxpHj69935721;     ZvSWBZxpHj69935721 = ZvSWBZxpHj32973787;     ZvSWBZxpHj32973787 = ZvSWBZxpHj41321182;     ZvSWBZxpHj41321182 = ZvSWBZxpHj91407207;     ZvSWBZxpHj91407207 = ZvSWBZxpHj71385688;     ZvSWBZxpHj71385688 = ZvSWBZxpHj20008019;     ZvSWBZxpHj20008019 = ZvSWBZxpHj25391031;     ZvSWBZxpHj25391031 = ZvSWBZxpHj82102683;     ZvSWBZxpHj82102683 = ZvSWBZxpHj94529204;     ZvSWBZxpHj94529204 = ZvSWBZxpHj11636821;     ZvSWBZxpHj11636821 = ZvSWBZxpHj95503846;     ZvSWBZxpHj95503846 = ZvSWBZxpHj41576938;     ZvSWBZxpHj41576938 = ZvSWBZxpHj35989767;     ZvSWBZxpHj35989767 = ZvSWBZxpHj34756177;     ZvSWBZxpHj34756177 = ZvSWBZxpHj15093981;     ZvSWBZxpHj15093981 = ZvSWBZxpHj60374222;     ZvSWBZxpHj60374222 = ZvSWBZxpHj7949555;     ZvSWBZxpHj7949555 = ZvSWBZxpHj47669876;     ZvSWBZxpHj47669876 = ZvSWBZxpHj17794834;     ZvSWBZxpHj17794834 = ZvSWBZxpHj62545412;     ZvSWBZxpHj62545412 = ZvSWBZxpHj67157528;     ZvSWBZxpHj67157528 = ZvSWBZxpHj62325152;     ZvSWBZxpHj62325152 = ZvSWBZxpHj50770825;     ZvSWBZxpHj50770825 = ZvSWBZxpHj94458751;     ZvSWBZxpHj94458751 = ZvSWBZxpHj37372675;     ZvSWBZxpHj37372675 = ZvSWBZxpHj87176658;     ZvSWBZxpHj87176658 = ZvSWBZxpHj27578636;     ZvSWBZxpHj27578636 = ZvSWBZxpHj10898624;     ZvSWBZxpHj10898624 = ZvSWBZxpHj1650242;     ZvSWBZxpHj1650242 = ZvSWBZxpHj98831875;     ZvSWBZxpHj98831875 = ZvSWBZxpHj48774659;     ZvSWBZxpHj48774659 = ZvSWBZxpHj32831344;     ZvSWBZxpHj32831344 = ZvSWBZxpHj83639048;     ZvSWBZxpHj83639048 = ZvSWBZxpHj22352597;     ZvSWBZxpHj22352597 = ZvSWBZxpHj94672728;     ZvSWBZxpHj94672728 = ZvSWBZxpHj14390759;     ZvSWBZxpHj14390759 = ZvSWBZxpHj27511582;     ZvSWBZxpHj27511582 = ZvSWBZxpHj31896424;     ZvSWBZxpHj31896424 = ZvSWBZxpHj41496553;     ZvSWBZxpHj41496553 = ZvSWBZxpHj15777875;     ZvSWBZxpHj15777875 = ZvSWBZxpHj61944918;     ZvSWBZxpHj61944918 = ZvSWBZxpHj61309455;     ZvSWBZxpHj61309455 = ZvSWBZxpHj39417721;     ZvSWBZxpHj39417721 = ZvSWBZxpHj48859954;     ZvSWBZxpHj48859954 = ZvSWBZxpHj19037392;     ZvSWBZxpHj19037392 = ZvSWBZxpHj98200570;     ZvSWBZxpHj98200570 = ZvSWBZxpHj83906736;     ZvSWBZxpHj83906736 = ZvSWBZxpHj4873742;     ZvSWBZxpHj4873742 = ZvSWBZxpHj26605398;     ZvSWBZxpHj26605398 = ZvSWBZxpHj76170857;     ZvSWBZxpHj76170857 = ZvSWBZxpHj82677556;     ZvSWBZxpHj82677556 = ZvSWBZxpHj89437691;     ZvSWBZxpHj89437691 = ZvSWBZxpHj52643295;     ZvSWBZxpHj52643295 = ZvSWBZxpHj83988190;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void XxJaObFqMN42005817() {     int bBZvotUhff90098825 = -308161478;    int bBZvotUhff79464642 = -837421527;    int bBZvotUhff16128716 = 75754720;    int bBZvotUhff61394635 = -107056877;    int bBZvotUhff95487607 = -373518459;    int bBZvotUhff25587261 = -369549192;    int bBZvotUhff91494828 = 82797891;    int bBZvotUhff48180927 = 25671982;    int bBZvotUhff78635845 = -322262264;    int bBZvotUhff98421290 = -80805490;    int bBZvotUhff34011623 = -884239045;    int bBZvotUhff95996080 = -488400789;    int bBZvotUhff28631699 = -772152029;    int bBZvotUhff33259974 = -140074837;    int bBZvotUhff52182134 = -403166141;    int bBZvotUhff25069931 = -864877267;    int bBZvotUhff26838946 = -328424243;    int bBZvotUhff27126848 = -701105227;    int bBZvotUhff49466666 = -87166920;    int bBZvotUhff5221930 = -801020819;    int bBZvotUhff6417939 = -543767278;    int bBZvotUhff54276276 = -311316164;    int bBZvotUhff58351414 = -41146524;    int bBZvotUhff30911955 = -851243768;    int bBZvotUhff79805396 = -678870305;    int bBZvotUhff23058002 = 42773707;    int bBZvotUhff33289810 = -770568768;    int bBZvotUhff95875196 = -538926807;    int bBZvotUhff47643466 = -518699191;    int bBZvotUhff68009137 = -665676750;    int bBZvotUhff38537470 = 79859052;    int bBZvotUhff18120373 = -923571062;    int bBZvotUhff82499320 = -441850938;    int bBZvotUhff38525540 = -846154964;    int bBZvotUhff77779615 = -554282051;    int bBZvotUhff72050877 = -962686674;    int bBZvotUhff7744541 = -95605487;    int bBZvotUhff43785400 = -412702924;    int bBZvotUhff28820354 = -819464247;    int bBZvotUhff99004749 = -226390107;    int bBZvotUhff35224270 = -523055046;    int bBZvotUhff54393197 = -107100950;    int bBZvotUhff28977449 = -17957213;    int bBZvotUhff83747205 = -786880237;    int bBZvotUhff66408646 = -654233240;    int bBZvotUhff76391171 = -951285075;    int bBZvotUhff4886021 = -980042389;    int bBZvotUhff53276243 = -75767395;    int bBZvotUhff61307905 = -976535624;    int bBZvotUhff74278257 = 38657538;    int bBZvotUhff40367256 = -135924748;    int bBZvotUhff96742665 = -706481675;    int bBZvotUhff43704824 = -610974926;    int bBZvotUhff31610182 = -936481948;    int bBZvotUhff35587878 = -900541366;    int bBZvotUhff35822550 = -996845314;    int bBZvotUhff21113228 = -696275004;    int bBZvotUhff85216760 = -73001512;    int bBZvotUhff81589239 = -428186572;    int bBZvotUhff72429605 = -316292166;    int bBZvotUhff92297451 = -598980425;    int bBZvotUhff95619632 = -378275302;    int bBZvotUhff537461 = -455628827;    int bBZvotUhff10626708 = -656585514;    int bBZvotUhff59883821 = -60664542;    int bBZvotUhff15891251 = -960667984;    int bBZvotUhff13496760 = 53450149;    int bBZvotUhff90106159 = -925997066;    int bBZvotUhff55480359 = -585792787;    int bBZvotUhff80131257 = -440479467;    int bBZvotUhff17325390 = -669271780;    int bBZvotUhff83053545 = -915721320;    int bBZvotUhff98306493 = -881640980;    int bBZvotUhff50461917 = -860776813;    int bBZvotUhff69997660 = -177965773;    int bBZvotUhff52024741 = -336666329;    int bBZvotUhff25298827 = -193358952;    int bBZvotUhff74604209 = -254266288;    int bBZvotUhff64503308 = -97010529;    int bBZvotUhff3414225 = -727585231;    int bBZvotUhff18171982 = 22816096;    int bBZvotUhff80013566 = -594801373;    int bBZvotUhff34567291 = -562391183;    int bBZvotUhff73365208 = -457356730;    int bBZvotUhff27641882 = -429752003;    int bBZvotUhff41794804 = -213659274;    int bBZvotUhff74415548 = -212596137;    int bBZvotUhff50889139 = -505368991;    int bBZvotUhff2937662 = -945613599;    int bBZvotUhff41957065 = -557436737;    int bBZvotUhff50937649 = -166411671;    int bBZvotUhff22527780 = 77396024;    int bBZvotUhff62196161 = -984516352;    int bBZvotUhff56390749 = -403172082;    int bBZvotUhff6707298 = -627409683;    int bBZvotUhff39604637 = -44779744;    int bBZvotUhff53855736 = -651472123;    int bBZvotUhff18350742 = -361371699;    int bBZvotUhff23863385 = -626215695;    int bBZvotUhff50517396 = -308161478;     bBZvotUhff90098825 = bBZvotUhff79464642;     bBZvotUhff79464642 = bBZvotUhff16128716;     bBZvotUhff16128716 = bBZvotUhff61394635;     bBZvotUhff61394635 = bBZvotUhff95487607;     bBZvotUhff95487607 = bBZvotUhff25587261;     bBZvotUhff25587261 = bBZvotUhff91494828;     bBZvotUhff91494828 = bBZvotUhff48180927;     bBZvotUhff48180927 = bBZvotUhff78635845;     bBZvotUhff78635845 = bBZvotUhff98421290;     bBZvotUhff98421290 = bBZvotUhff34011623;     bBZvotUhff34011623 = bBZvotUhff95996080;     bBZvotUhff95996080 = bBZvotUhff28631699;     bBZvotUhff28631699 = bBZvotUhff33259974;     bBZvotUhff33259974 = bBZvotUhff52182134;     bBZvotUhff52182134 = bBZvotUhff25069931;     bBZvotUhff25069931 = bBZvotUhff26838946;     bBZvotUhff26838946 = bBZvotUhff27126848;     bBZvotUhff27126848 = bBZvotUhff49466666;     bBZvotUhff49466666 = bBZvotUhff5221930;     bBZvotUhff5221930 = bBZvotUhff6417939;     bBZvotUhff6417939 = bBZvotUhff54276276;     bBZvotUhff54276276 = bBZvotUhff58351414;     bBZvotUhff58351414 = bBZvotUhff30911955;     bBZvotUhff30911955 = bBZvotUhff79805396;     bBZvotUhff79805396 = bBZvotUhff23058002;     bBZvotUhff23058002 = bBZvotUhff33289810;     bBZvotUhff33289810 = bBZvotUhff95875196;     bBZvotUhff95875196 = bBZvotUhff47643466;     bBZvotUhff47643466 = bBZvotUhff68009137;     bBZvotUhff68009137 = bBZvotUhff38537470;     bBZvotUhff38537470 = bBZvotUhff18120373;     bBZvotUhff18120373 = bBZvotUhff82499320;     bBZvotUhff82499320 = bBZvotUhff38525540;     bBZvotUhff38525540 = bBZvotUhff77779615;     bBZvotUhff77779615 = bBZvotUhff72050877;     bBZvotUhff72050877 = bBZvotUhff7744541;     bBZvotUhff7744541 = bBZvotUhff43785400;     bBZvotUhff43785400 = bBZvotUhff28820354;     bBZvotUhff28820354 = bBZvotUhff99004749;     bBZvotUhff99004749 = bBZvotUhff35224270;     bBZvotUhff35224270 = bBZvotUhff54393197;     bBZvotUhff54393197 = bBZvotUhff28977449;     bBZvotUhff28977449 = bBZvotUhff83747205;     bBZvotUhff83747205 = bBZvotUhff66408646;     bBZvotUhff66408646 = bBZvotUhff76391171;     bBZvotUhff76391171 = bBZvotUhff4886021;     bBZvotUhff4886021 = bBZvotUhff53276243;     bBZvotUhff53276243 = bBZvotUhff61307905;     bBZvotUhff61307905 = bBZvotUhff74278257;     bBZvotUhff74278257 = bBZvotUhff40367256;     bBZvotUhff40367256 = bBZvotUhff96742665;     bBZvotUhff96742665 = bBZvotUhff43704824;     bBZvotUhff43704824 = bBZvotUhff31610182;     bBZvotUhff31610182 = bBZvotUhff35587878;     bBZvotUhff35587878 = bBZvotUhff35822550;     bBZvotUhff35822550 = bBZvotUhff21113228;     bBZvotUhff21113228 = bBZvotUhff85216760;     bBZvotUhff85216760 = bBZvotUhff81589239;     bBZvotUhff81589239 = bBZvotUhff72429605;     bBZvotUhff72429605 = bBZvotUhff92297451;     bBZvotUhff92297451 = bBZvotUhff95619632;     bBZvotUhff95619632 = bBZvotUhff537461;     bBZvotUhff537461 = bBZvotUhff10626708;     bBZvotUhff10626708 = bBZvotUhff59883821;     bBZvotUhff59883821 = bBZvotUhff15891251;     bBZvotUhff15891251 = bBZvotUhff13496760;     bBZvotUhff13496760 = bBZvotUhff90106159;     bBZvotUhff90106159 = bBZvotUhff55480359;     bBZvotUhff55480359 = bBZvotUhff80131257;     bBZvotUhff80131257 = bBZvotUhff17325390;     bBZvotUhff17325390 = bBZvotUhff83053545;     bBZvotUhff83053545 = bBZvotUhff98306493;     bBZvotUhff98306493 = bBZvotUhff50461917;     bBZvotUhff50461917 = bBZvotUhff69997660;     bBZvotUhff69997660 = bBZvotUhff52024741;     bBZvotUhff52024741 = bBZvotUhff25298827;     bBZvotUhff25298827 = bBZvotUhff74604209;     bBZvotUhff74604209 = bBZvotUhff64503308;     bBZvotUhff64503308 = bBZvotUhff3414225;     bBZvotUhff3414225 = bBZvotUhff18171982;     bBZvotUhff18171982 = bBZvotUhff80013566;     bBZvotUhff80013566 = bBZvotUhff34567291;     bBZvotUhff34567291 = bBZvotUhff73365208;     bBZvotUhff73365208 = bBZvotUhff27641882;     bBZvotUhff27641882 = bBZvotUhff41794804;     bBZvotUhff41794804 = bBZvotUhff74415548;     bBZvotUhff74415548 = bBZvotUhff50889139;     bBZvotUhff50889139 = bBZvotUhff2937662;     bBZvotUhff2937662 = bBZvotUhff41957065;     bBZvotUhff41957065 = bBZvotUhff50937649;     bBZvotUhff50937649 = bBZvotUhff22527780;     bBZvotUhff22527780 = bBZvotUhff62196161;     bBZvotUhff62196161 = bBZvotUhff56390749;     bBZvotUhff56390749 = bBZvotUhff6707298;     bBZvotUhff6707298 = bBZvotUhff39604637;     bBZvotUhff39604637 = bBZvotUhff53855736;     bBZvotUhff53855736 = bBZvotUhff18350742;     bBZvotUhff18350742 = bBZvotUhff23863385;     bBZvotUhff23863385 = bBZvotUhff50517396;     bBZvotUhff50517396 = bBZvotUhff90098825;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void qrWIAvJvHL38953449() {     int kKlcUWpIlc2612252 = -1321642;    int kKlcUWpIlc46937208 = -60890752;    int kKlcUWpIlc40390693 = -300693585;    int kKlcUWpIlc49899899 = -299636231;    int kKlcUWpIlc6718598 = -905898902;    int kKlcUWpIlc21256783 = -122790678;    int kKlcUWpIlc78314005 = -476734888;    int kKlcUWpIlc76693348 = -81372401;    int kKlcUWpIlc99610663 = -214350941;    int kKlcUWpIlc94440545 = -493421348;    int kKlcUWpIlc47705302 = -289283603;    int kKlcUWpIlc86648536 = -218734218;    int kKlcUWpIlc33986012 = -603105209;    int kKlcUWpIlc14293580 = -665944478;    int kKlcUWpIlc86991783 = -515764797;    int kKlcUWpIlc93505585 = -946924679;    int kKlcUWpIlc20624478 = -867049305;    int kKlcUWpIlc54458977 = -495697210;    int kKlcUWpIlc51662688 = -688679481;    int kKlcUWpIlc51062461 = -601533582;    int kKlcUWpIlc95223447 = -239679679;    int kKlcUWpIlc16173076 = -49179113;    int kKlcUWpIlc94883155 = -623687037;    int kKlcUWpIlc65332839 = -763261001;    int kKlcUWpIlc62230831 = -943940374;    int kKlcUWpIlc30151962 = -276994252;    int kKlcUWpIlc2346565 = -287684254;    int kKlcUWpIlc24957022 = -387271319;    int kKlcUWpIlc15745025 = -525155358;    int kKlcUWpIlc24955397 = -460375008;    int kKlcUWpIlc86291677 = -328123644;    int kKlcUWpIlc75028477 = -976466836;    int kKlcUWpIlc72507031 = -171419593;    int kKlcUWpIlc21752872 = -61732972;    int kKlcUWpIlc89605514 = -268374134;    int kKlcUWpIlc66974752 = -481111461;    int kKlcUWpIlc1417822 = -444369343;    int kKlcUWpIlc21768785 = -146387640;    int kKlcUWpIlc87661502 = -927972325;    int kKlcUWpIlc63702605 = -267321910;    int kKlcUWpIlc77681314 = -732093987;    int kKlcUWpIlc97546051 = -779502854;    int kKlcUWpIlc94344482 = -380913392;    int kKlcUWpIlc13853266 = -648327075;    int kKlcUWpIlc26356331 = -575886673;    int kKlcUWpIlc4930447 = -517138075;    int kKlcUWpIlc97606708 = -6935142;    int kKlcUWpIlc88261376 = -958958639;    int kKlcUWpIlc83686464 = -262191669;    int kKlcUWpIlc642409 = -560359058;    int kKlcUWpIlc78601995 = -865383070;    int kKlcUWpIlc14367030 = -1727790;    int kKlcUWpIlc71471682 = 5260849;    int kKlcUWpIlc44803789 = -235718039;    int kKlcUWpIlc43730001 = -69845752;    int kKlcUWpIlc86439175 = -952142529;    int kKlcUWpIlc52054052 = -437203716;    int kKlcUWpIlc75057853 = -537432585;    int kKlcUWpIlc87669068 = -355695857;    int kKlcUWpIlc76566635 = -528904651;    int kKlcUWpIlc18910218 = -835106424;    int kKlcUWpIlc53356984 = 10536430;    int kKlcUWpIlc60948324 = -556217043;    int kKlcUWpIlc74655266 = -753975933;    int kKlcUWpIlc8148868 = -65297704;    int kKlcUWpIlc72676824 = -312816768;    int kKlcUWpIlc14141505 = 52685375;    int kKlcUWpIlc12233141 = -441372238;    int kKlcUWpIlc24688066 = -297570345;    int kKlcUWpIlc20017031 = 65346663;    int kKlcUWpIlc92087763 = -402555337;    int kKlcUWpIlc98855693 = -620661665;    int kKlcUWpIlc66797474 = -567724885;    int kKlcUWpIlc87960082 = -321357571;    int kKlcUWpIlc73381147 = -869439595;    int kKlcUWpIlc97677396 = -460176826;    int kKlcUWpIlc21828594 = -668265721;    int kKlcUWpIlc81029890 = -975359963;    int kKlcUWpIlc38976509 = -87374328;    int kKlcUWpIlc57300384 = -326802299;    int kKlcUWpIlc32545254 = -170059110;    int kKlcUWpIlc14085189 = -328725615;    int kKlcUWpIlc41270557 = -25079650;    int kKlcUWpIlc15102616 = -964796301;    int kKlcUWpIlc46353401 = -594991939;    int kKlcUWpIlc71924648 = -226395855;    int kKlcUWpIlc3556796 = -881727686;    int kKlcUWpIlc27703243 = -935701555;    int kKlcUWpIlc78022870 = -991887220;    int kKlcUWpIlc3166339 = -316231605;    int kKlcUWpIlc14920701 = 56092255;    int kKlcUWpIlc26359968 = -906936759;    int kKlcUWpIlc34099717 = -790691783;    int kKlcUWpIlc11094867 = -299067675;    int kKlcUWpIlc44792388 = -432215486;    int kKlcUWpIlc24324330 = -642630418;    int kKlcUWpIlc36597728 = -123285811;    int kKlcUWpIlc19689216 = -626937459;    int kKlcUWpIlc5704399 = -483029371;    int kKlcUWpIlc53679506 = -1321642;     kKlcUWpIlc2612252 = kKlcUWpIlc46937208;     kKlcUWpIlc46937208 = kKlcUWpIlc40390693;     kKlcUWpIlc40390693 = kKlcUWpIlc49899899;     kKlcUWpIlc49899899 = kKlcUWpIlc6718598;     kKlcUWpIlc6718598 = kKlcUWpIlc21256783;     kKlcUWpIlc21256783 = kKlcUWpIlc78314005;     kKlcUWpIlc78314005 = kKlcUWpIlc76693348;     kKlcUWpIlc76693348 = kKlcUWpIlc99610663;     kKlcUWpIlc99610663 = kKlcUWpIlc94440545;     kKlcUWpIlc94440545 = kKlcUWpIlc47705302;     kKlcUWpIlc47705302 = kKlcUWpIlc86648536;     kKlcUWpIlc86648536 = kKlcUWpIlc33986012;     kKlcUWpIlc33986012 = kKlcUWpIlc14293580;     kKlcUWpIlc14293580 = kKlcUWpIlc86991783;     kKlcUWpIlc86991783 = kKlcUWpIlc93505585;     kKlcUWpIlc93505585 = kKlcUWpIlc20624478;     kKlcUWpIlc20624478 = kKlcUWpIlc54458977;     kKlcUWpIlc54458977 = kKlcUWpIlc51662688;     kKlcUWpIlc51662688 = kKlcUWpIlc51062461;     kKlcUWpIlc51062461 = kKlcUWpIlc95223447;     kKlcUWpIlc95223447 = kKlcUWpIlc16173076;     kKlcUWpIlc16173076 = kKlcUWpIlc94883155;     kKlcUWpIlc94883155 = kKlcUWpIlc65332839;     kKlcUWpIlc65332839 = kKlcUWpIlc62230831;     kKlcUWpIlc62230831 = kKlcUWpIlc30151962;     kKlcUWpIlc30151962 = kKlcUWpIlc2346565;     kKlcUWpIlc2346565 = kKlcUWpIlc24957022;     kKlcUWpIlc24957022 = kKlcUWpIlc15745025;     kKlcUWpIlc15745025 = kKlcUWpIlc24955397;     kKlcUWpIlc24955397 = kKlcUWpIlc86291677;     kKlcUWpIlc86291677 = kKlcUWpIlc75028477;     kKlcUWpIlc75028477 = kKlcUWpIlc72507031;     kKlcUWpIlc72507031 = kKlcUWpIlc21752872;     kKlcUWpIlc21752872 = kKlcUWpIlc89605514;     kKlcUWpIlc89605514 = kKlcUWpIlc66974752;     kKlcUWpIlc66974752 = kKlcUWpIlc1417822;     kKlcUWpIlc1417822 = kKlcUWpIlc21768785;     kKlcUWpIlc21768785 = kKlcUWpIlc87661502;     kKlcUWpIlc87661502 = kKlcUWpIlc63702605;     kKlcUWpIlc63702605 = kKlcUWpIlc77681314;     kKlcUWpIlc77681314 = kKlcUWpIlc97546051;     kKlcUWpIlc97546051 = kKlcUWpIlc94344482;     kKlcUWpIlc94344482 = kKlcUWpIlc13853266;     kKlcUWpIlc13853266 = kKlcUWpIlc26356331;     kKlcUWpIlc26356331 = kKlcUWpIlc4930447;     kKlcUWpIlc4930447 = kKlcUWpIlc97606708;     kKlcUWpIlc97606708 = kKlcUWpIlc88261376;     kKlcUWpIlc88261376 = kKlcUWpIlc83686464;     kKlcUWpIlc83686464 = kKlcUWpIlc642409;     kKlcUWpIlc642409 = kKlcUWpIlc78601995;     kKlcUWpIlc78601995 = kKlcUWpIlc14367030;     kKlcUWpIlc14367030 = kKlcUWpIlc71471682;     kKlcUWpIlc71471682 = kKlcUWpIlc44803789;     kKlcUWpIlc44803789 = kKlcUWpIlc43730001;     kKlcUWpIlc43730001 = kKlcUWpIlc86439175;     kKlcUWpIlc86439175 = kKlcUWpIlc52054052;     kKlcUWpIlc52054052 = kKlcUWpIlc75057853;     kKlcUWpIlc75057853 = kKlcUWpIlc87669068;     kKlcUWpIlc87669068 = kKlcUWpIlc76566635;     kKlcUWpIlc76566635 = kKlcUWpIlc18910218;     kKlcUWpIlc18910218 = kKlcUWpIlc53356984;     kKlcUWpIlc53356984 = kKlcUWpIlc60948324;     kKlcUWpIlc60948324 = kKlcUWpIlc74655266;     kKlcUWpIlc74655266 = kKlcUWpIlc8148868;     kKlcUWpIlc8148868 = kKlcUWpIlc72676824;     kKlcUWpIlc72676824 = kKlcUWpIlc14141505;     kKlcUWpIlc14141505 = kKlcUWpIlc12233141;     kKlcUWpIlc12233141 = kKlcUWpIlc24688066;     kKlcUWpIlc24688066 = kKlcUWpIlc20017031;     kKlcUWpIlc20017031 = kKlcUWpIlc92087763;     kKlcUWpIlc92087763 = kKlcUWpIlc98855693;     kKlcUWpIlc98855693 = kKlcUWpIlc66797474;     kKlcUWpIlc66797474 = kKlcUWpIlc87960082;     kKlcUWpIlc87960082 = kKlcUWpIlc73381147;     kKlcUWpIlc73381147 = kKlcUWpIlc97677396;     kKlcUWpIlc97677396 = kKlcUWpIlc21828594;     kKlcUWpIlc21828594 = kKlcUWpIlc81029890;     kKlcUWpIlc81029890 = kKlcUWpIlc38976509;     kKlcUWpIlc38976509 = kKlcUWpIlc57300384;     kKlcUWpIlc57300384 = kKlcUWpIlc32545254;     kKlcUWpIlc32545254 = kKlcUWpIlc14085189;     kKlcUWpIlc14085189 = kKlcUWpIlc41270557;     kKlcUWpIlc41270557 = kKlcUWpIlc15102616;     kKlcUWpIlc15102616 = kKlcUWpIlc46353401;     kKlcUWpIlc46353401 = kKlcUWpIlc71924648;     kKlcUWpIlc71924648 = kKlcUWpIlc3556796;     kKlcUWpIlc3556796 = kKlcUWpIlc27703243;     kKlcUWpIlc27703243 = kKlcUWpIlc78022870;     kKlcUWpIlc78022870 = kKlcUWpIlc3166339;     kKlcUWpIlc3166339 = kKlcUWpIlc14920701;     kKlcUWpIlc14920701 = kKlcUWpIlc26359968;     kKlcUWpIlc26359968 = kKlcUWpIlc34099717;     kKlcUWpIlc34099717 = kKlcUWpIlc11094867;     kKlcUWpIlc11094867 = kKlcUWpIlc44792388;     kKlcUWpIlc44792388 = kKlcUWpIlc24324330;     kKlcUWpIlc24324330 = kKlcUWpIlc36597728;     kKlcUWpIlc36597728 = kKlcUWpIlc19689216;     kKlcUWpIlc19689216 = kKlcUWpIlc5704399;     kKlcUWpIlc5704399 = kKlcUWpIlc53679506;     kKlcUWpIlc53679506 = kKlcUWpIlc2612252;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void eydROrGzBg9079125() {     int MPCLVwQpCe70059287 = -701365776;    int MPCLVwQpCe42133399 = -768194455;    int MPCLVwQpCe17562928 = -37308966;    int MPCLVwQpCe44195805 = -309400088;    int MPCLVwQpCe65841270 = -601795285;    int MPCLVwQpCe43935818 = -329432016;    int MPCLVwQpCe52075131 = -519763164;    int MPCLVwQpCe63373514 = -222281573;    int MPCLVwQpCe49721 = -509316334;    int MPCLVwQpCe86651722 = -939503379;    int MPCLVwQpCe33483374 = 30145881;    int MPCLVwQpCe67072078 = -77012760;    int MPCLVwQpCe36093716 = -288769696;    int MPCLVwQpCe3039870 = -265310203;    int MPCLVwQpCe95350300 = -367159407;    int MPCLVwQpCe37133642 = -795179982;    int MPCLVwQpCe20355300 = -84809030;    int MPCLVwQpCe82613516 = -817400357;    int MPCLVwQpCe33615649 = -265977957;    int MPCLVwQpCe99277749 = -934119416;    int MPCLVwQpCe29902468 = -488612721;    int MPCLVwQpCe18177219 = -975489686;    int MPCLVwQpCe33234886 = -682476511;    int MPCLVwQpCe67618229 = -941726307;    int MPCLVwQpCe35435017 = -601897;    int MPCLVwQpCe36137477 = -62928307;    int MPCLVwQpCe45530444 = -75435100;    int MPCLVwQpCe10155422 = 39845705;    int MPCLVwQpCe59581308 = -473547159;    int MPCLVwQpCe96052051 = -705587757;    int MPCLVwQpCe49020524 = -766319685;    int MPCLVwQpCe24615054 = -974861281;    int MPCLVwQpCe756434 = -401847776;    int MPCLVwQpCe93202299 = -869926267;    int MPCLVwQpCe24812165 = -836955349;    int MPCLVwQpCe6697220 = -437904415;    int MPCLVwQpCe945003 = 14948064;    int MPCLVwQpCe22532367 = 55325927;    int MPCLVwQpCe8892941 = -439090087;    int MPCLVwQpCe42080837 = -160615669;    int MPCLVwQpCe7216356 = -32174240;    int MPCLVwQpCe56225505 = 8445808;    int MPCLVwQpCe59944775 = -785721901;    int MPCLVwQpCe8244305 = -906214540;    int MPCLVwQpCe82330832 = -127914830;    int MPCLVwQpCe93464209 = -847201459;    int MPCLVwQpCe63964647 = -50226956;    int MPCLVwQpCe65745071 = -483202435;    int MPCLVwQpCe51434891 = -761759971;    int MPCLVwQpCe72389069 = -724389929;    int MPCLVwQpCe58783659 = -96927873;    int MPCLVwQpCe17378470 = -605833363;    int MPCLVwQpCe62236487 = -18603883;    int MPCLVwQpCe36669001 = -289136414;    int MPCLVwQpCe79176656 = -703299642;    int MPCLVwQpCe51882069 = -725876091;    int MPCLVwQpCe8898513 = 14282055;    int MPCLVwQpCe49944698 = -95582660;    int MPCLVwQpCe8760789 = -208798192;    int MPCLVwQpCe29703793 = -438866978;    int MPCLVwQpCe98405374 = -153996916;    int MPCLVwQpCe41919710 = -459608869;    int MPCLVwQpCe3792207 = -748734415;    int MPCLVwQpCe3997670 = -803728577;    int MPCLVwQpCe37631198 = -73183695;    int MPCLVwQpCe8868320 = 5007162;    int MPCLVwQpCe66315644 = -675164985;    int MPCLVwQpCe42891416 = -418843430;    int MPCLVwQpCe78227704 = -428354854;    int MPCLVwQpCe88653080 = -929254992;    int MPCLVwQpCe36188640 = -710128047;    int MPCLVwQpCe97822933 = -40134957;    int MPCLVwQpCe73720575 = -278310270;    int MPCLVwQpCe91534812 = -5362289;    int MPCLVwQpCe92061394 = -801945176;    int MPCLVwQpCe73676963 = -397058529;    int MPCLVwQpCe58232444 = -89767785;    int MPCLVwQpCe24990582 = -776261971;    int MPCLVwQpCe85287397 = -713811478;    int MPCLVwQpCe41970807 = -153400438;    int MPCLVwQpCe72172830 = 87298648;    int MPCLVwQpCe79785372 = -592232666;    int MPCLVwQpCe58720531 = -198394325;    int MPCLVwQpCe87192239 = -749157230;    int MPCLVwQpCe37268393 = -508659885;    int MPCLVwQpCe31642054 = -60486323;    int MPCLVwQpCe62378567 = -856257399;    int MPCLVwQpCe64087433 = -12711362;    int MPCLVwQpCe14025644 = -66626626;    int MPCLVwQpCe72930095 = -11079259;    int MPCLVwQpCe97798707 = -352186471;    int MPCLVwQpCe51000304 = -889469276;    int MPCLVwQpCe13771579 = -735875882;    int MPCLVwQpCe79189147 = 99776890;    int MPCLVwQpCe43675463 = 93381247;    int MPCLVwQpCe65296645 = -572565372;    int MPCLVwQpCe52433298 = -242819778;    int MPCLVwQpCe55947106 = -981993324;    int MPCLVwQpCe70613106 = -733030846;    int MPCLVwQpCe73462512 = -701365776;     MPCLVwQpCe70059287 = MPCLVwQpCe42133399;     MPCLVwQpCe42133399 = MPCLVwQpCe17562928;     MPCLVwQpCe17562928 = MPCLVwQpCe44195805;     MPCLVwQpCe44195805 = MPCLVwQpCe65841270;     MPCLVwQpCe65841270 = MPCLVwQpCe43935818;     MPCLVwQpCe43935818 = MPCLVwQpCe52075131;     MPCLVwQpCe52075131 = MPCLVwQpCe63373514;     MPCLVwQpCe63373514 = MPCLVwQpCe49721;     MPCLVwQpCe49721 = MPCLVwQpCe86651722;     MPCLVwQpCe86651722 = MPCLVwQpCe33483374;     MPCLVwQpCe33483374 = MPCLVwQpCe67072078;     MPCLVwQpCe67072078 = MPCLVwQpCe36093716;     MPCLVwQpCe36093716 = MPCLVwQpCe3039870;     MPCLVwQpCe3039870 = MPCLVwQpCe95350300;     MPCLVwQpCe95350300 = MPCLVwQpCe37133642;     MPCLVwQpCe37133642 = MPCLVwQpCe20355300;     MPCLVwQpCe20355300 = MPCLVwQpCe82613516;     MPCLVwQpCe82613516 = MPCLVwQpCe33615649;     MPCLVwQpCe33615649 = MPCLVwQpCe99277749;     MPCLVwQpCe99277749 = MPCLVwQpCe29902468;     MPCLVwQpCe29902468 = MPCLVwQpCe18177219;     MPCLVwQpCe18177219 = MPCLVwQpCe33234886;     MPCLVwQpCe33234886 = MPCLVwQpCe67618229;     MPCLVwQpCe67618229 = MPCLVwQpCe35435017;     MPCLVwQpCe35435017 = MPCLVwQpCe36137477;     MPCLVwQpCe36137477 = MPCLVwQpCe45530444;     MPCLVwQpCe45530444 = MPCLVwQpCe10155422;     MPCLVwQpCe10155422 = MPCLVwQpCe59581308;     MPCLVwQpCe59581308 = MPCLVwQpCe96052051;     MPCLVwQpCe96052051 = MPCLVwQpCe49020524;     MPCLVwQpCe49020524 = MPCLVwQpCe24615054;     MPCLVwQpCe24615054 = MPCLVwQpCe756434;     MPCLVwQpCe756434 = MPCLVwQpCe93202299;     MPCLVwQpCe93202299 = MPCLVwQpCe24812165;     MPCLVwQpCe24812165 = MPCLVwQpCe6697220;     MPCLVwQpCe6697220 = MPCLVwQpCe945003;     MPCLVwQpCe945003 = MPCLVwQpCe22532367;     MPCLVwQpCe22532367 = MPCLVwQpCe8892941;     MPCLVwQpCe8892941 = MPCLVwQpCe42080837;     MPCLVwQpCe42080837 = MPCLVwQpCe7216356;     MPCLVwQpCe7216356 = MPCLVwQpCe56225505;     MPCLVwQpCe56225505 = MPCLVwQpCe59944775;     MPCLVwQpCe59944775 = MPCLVwQpCe8244305;     MPCLVwQpCe8244305 = MPCLVwQpCe82330832;     MPCLVwQpCe82330832 = MPCLVwQpCe93464209;     MPCLVwQpCe93464209 = MPCLVwQpCe63964647;     MPCLVwQpCe63964647 = MPCLVwQpCe65745071;     MPCLVwQpCe65745071 = MPCLVwQpCe51434891;     MPCLVwQpCe51434891 = MPCLVwQpCe72389069;     MPCLVwQpCe72389069 = MPCLVwQpCe58783659;     MPCLVwQpCe58783659 = MPCLVwQpCe17378470;     MPCLVwQpCe17378470 = MPCLVwQpCe62236487;     MPCLVwQpCe62236487 = MPCLVwQpCe36669001;     MPCLVwQpCe36669001 = MPCLVwQpCe79176656;     MPCLVwQpCe79176656 = MPCLVwQpCe51882069;     MPCLVwQpCe51882069 = MPCLVwQpCe8898513;     MPCLVwQpCe8898513 = MPCLVwQpCe49944698;     MPCLVwQpCe49944698 = MPCLVwQpCe8760789;     MPCLVwQpCe8760789 = MPCLVwQpCe29703793;     MPCLVwQpCe29703793 = MPCLVwQpCe98405374;     MPCLVwQpCe98405374 = MPCLVwQpCe41919710;     MPCLVwQpCe41919710 = MPCLVwQpCe3792207;     MPCLVwQpCe3792207 = MPCLVwQpCe3997670;     MPCLVwQpCe3997670 = MPCLVwQpCe37631198;     MPCLVwQpCe37631198 = MPCLVwQpCe8868320;     MPCLVwQpCe8868320 = MPCLVwQpCe66315644;     MPCLVwQpCe66315644 = MPCLVwQpCe42891416;     MPCLVwQpCe42891416 = MPCLVwQpCe78227704;     MPCLVwQpCe78227704 = MPCLVwQpCe88653080;     MPCLVwQpCe88653080 = MPCLVwQpCe36188640;     MPCLVwQpCe36188640 = MPCLVwQpCe97822933;     MPCLVwQpCe97822933 = MPCLVwQpCe73720575;     MPCLVwQpCe73720575 = MPCLVwQpCe91534812;     MPCLVwQpCe91534812 = MPCLVwQpCe92061394;     MPCLVwQpCe92061394 = MPCLVwQpCe73676963;     MPCLVwQpCe73676963 = MPCLVwQpCe58232444;     MPCLVwQpCe58232444 = MPCLVwQpCe24990582;     MPCLVwQpCe24990582 = MPCLVwQpCe85287397;     MPCLVwQpCe85287397 = MPCLVwQpCe41970807;     MPCLVwQpCe41970807 = MPCLVwQpCe72172830;     MPCLVwQpCe72172830 = MPCLVwQpCe79785372;     MPCLVwQpCe79785372 = MPCLVwQpCe58720531;     MPCLVwQpCe58720531 = MPCLVwQpCe87192239;     MPCLVwQpCe87192239 = MPCLVwQpCe37268393;     MPCLVwQpCe37268393 = MPCLVwQpCe31642054;     MPCLVwQpCe31642054 = MPCLVwQpCe62378567;     MPCLVwQpCe62378567 = MPCLVwQpCe64087433;     MPCLVwQpCe64087433 = MPCLVwQpCe14025644;     MPCLVwQpCe14025644 = MPCLVwQpCe72930095;     MPCLVwQpCe72930095 = MPCLVwQpCe97798707;     MPCLVwQpCe97798707 = MPCLVwQpCe51000304;     MPCLVwQpCe51000304 = MPCLVwQpCe13771579;     MPCLVwQpCe13771579 = MPCLVwQpCe79189147;     MPCLVwQpCe79189147 = MPCLVwQpCe43675463;     MPCLVwQpCe43675463 = MPCLVwQpCe65296645;     MPCLVwQpCe65296645 = MPCLVwQpCe52433298;     MPCLVwQpCe52433298 = MPCLVwQpCe55947106;     MPCLVwQpCe55947106 = MPCLVwQpCe70613106;     MPCLVwQpCe70613106 = MPCLVwQpCe73462512;     MPCLVwQpCe73462512 = MPCLVwQpCe70059287;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void kJqYCGjkip9521228() {     int crvExXbqgb5239044 = -598286290;    int crvExXbqgb74679470 = -844476398;    int crvExXbqgb62771794 = -728193578;    int crvExXbqgb82063458 = -319469067;    int crvExXbqgb48686527 = -116313430;    int crvExXbqgb67323573 = -267530896;    int crvExXbqgb96891292 = -82886073;    int crvExXbqgb96512435 = -333219157;    int crvExXbqgb9877498 = -641624396;    int crvExXbqgb87994498 = -849525474;    int crvExXbqgb78192010 = -121692463;    int crvExXbqgb40633855 = 387493;    int crvExXbqgb41392285 = -789611199;    int crvExXbqgb41434480 = -780281107;    int crvExXbqgb10220022 = 61089901;    int crvExXbqgb35250076 = -294943263;    int crvExXbqgb70077710 = -206248747;    int crvExXbqgb49147884 = -427281728;    int crvExXbqgb55629640 = -792567011;    int crvExXbqgb8374767 = -73973557;    int crvExXbqgb31290208 = -160949920;    int crvExXbqgb32743990 = -40122464;    int crvExXbqgb38410108 = -330603155;    int crvExXbqgb94975038 = -885143654;    int crvExXbqgb48426833 = -505909093;    int crvExXbqgb89185040 = -289047802;    int crvExXbqgb33813819 = -165928161;    int crvExXbqgb48016272 = -413439865;    int crvExXbqgb70412475 = -385951203;    int crvExXbqgb81870476 = -580338405;    int crvExXbqgb4334647 = -736959353;    int crvExXbqgb751212 = -113830553;    int crvExXbqgb42388630 = -605101839;    int crvExXbqgb29384523 = -122125603;    int crvExXbqgb1744024 = -151429727;    int crvExXbqgb786015 = -462097150;    int crvExXbqgb19207407 = -508255859;    int crvExXbqgb63944811 = -836656958;    int crvExXbqgb27662861 = 30694720;    int crvExXbqgb16658389 = -531824858;    int crvExXbqgb9549367 = -822882001;    int crvExXbqgb66738691 = -553982136;    int crvExXbqgb40095076 = -137555675;    int crvExXbqgb93085063 = -587785988;    int crvExXbqgb46304537 = -456568866;    int crvExXbqgb34764653 = -190704323;    int crvExXbqgb26146272 = -644871639;    int crvExXbqgb64400131 = -886328849;    int crvExXbqgb71300456 = -211314783;    int crvExXbqgb96377812 = -790421764;    int crvExXbqgb72720999 = -26333451;    int crvExXbqgb4859017 = -25692235;    int crvExXbqgb99587692 = 25535613;    int crvExXbqgb31405000 = -722349113;    int crvExXbqgb78231019 = 18451034;    int crvExXbqgb72495053 = -458163827;    int crvExXbqgb36269362 = -413873243;    int crvExXbqgb67796756 = -843049925;    int crvExXbqgb33636625 = -813559975;    int crvExXbqgb59501487 = -827265628;    int crvExXbqgb33509755 = -1602735;    int crvExXbqgb48875021 = -669446208;    int crvExXbqgb26099961 = -947267954;    int crvExXbqgb28007022 = 38714009;    int crvExXbqgb83659851 = -12566122;    int crvExXbqgb77440799 = 92138089;    int crvExXbqgb98245224 = -394510668;    int crvExXbqgb12007763 = -567485596;    int crvExXbqgb39690456 = -528851380;    int crvExXbqgb9434008 = -476812950;    int crvExXbqgb16042670 = -786687404;    int crvExXbqgb6132899 = -369591790;    int crvExXbqgb21485023 = -357976449;    int crvExXbqgb38971252 = -160742154;    int crvExXbqgb98825399 = -251091556;    int crvExXbqgb64551517 = -606967785;    int crvExXbqgb92648913 = -902566789;    int crvExXbqgb45325045 = -742817168;    int crvExXbqgb48670501 = -328574789;    int crvExXbqgb13662181 = -215204770;    int crvExXbqgb63038768 = -644176163;    int crvExXbqgb69413687 = -279599312;    int crvExXbqgb76715816 = -102125083;    int crvExXbqgb74034663 = -595529439;    int crvExXbqgb9149477 = -454004954;    int crvExXbqgb99475629 = -611267119;    int crvExXbqgb1163519 = -39366166;    int crvExXbqgb10983630 = -882752726;    int crvExXbqgb51153504 = -40576638;    int crvExXbqgb29248970 = -693265901;    int crvExXbqgb64516652 = 51776093;    int crvExXbqgb51410651 = -665205935;    int crvExXbqgb30308186 = 76903016;    int crvExXbqgb68161374 = -142039652;    int crvExXbqgb83148634 = -430222123;    int crvExXbqgb60674346 = -53435793;    int crvExXbqgb40638731 = -606714182;    int crvExXbqgb12088055 = -76269684;    int crvExXbqgb9425212 = -475219867;    int crvExXbqgb68863738 = -598286290;     crvExXbqgb5239044 = crvExXbqgb74679470;     crvExXbqgb74679470 = crvExXbqgb62771794;     crvExXbqgb62771794 = crvExXbqgb82063458;     crvExXbqgb82063458 = crvExXbqgb48686527;     crvExXbqgb48686527 = crvExXbqgb67323573;     crvExXbqgb67323573 = crvExXbqgb96891292;     crvExXbqgb96891292 = crvExXbqgb96512435;     crvExXbqgb96512435 = crvExXbqgb9877498;     crvExXbqgb9877498 = crvExXbqgb87994498;     crvExXbqgb87994498 = crvExXbqgb78192010;     crvExXbqgb78192010 = crvExXbqgb40633855;     crvExXbqgb40633855 = crvExXbqgb41392285;     crvExXbqgb41392285 = crvExXbqgb41434480;     crvExXbqgb41434480 = crvExXbqgb10220022;     crvExXbqgb10220022 = crvExXbqgb35250076;     crvExXbqgb35250076 = crvExXbqgb70077710;     crvExXbqgb70077710 = crvExXbqgb49147884;     crvExXbqgb49147884 = crvExXbqgb55629640;     crvExXbqgb55629640 = crvExXbqgb8374767;     crvExXbqgb8374767 = crvExXbqgb31290208;     crvExXbqgb31290208 = crvExXbqgb32743990;     crvExXbqgb32743990 = crvExXbqgb38410108;     crvExXbqgb38410108 = crvExXbqgb94975038;     crvExXbqgb94975038 = crvExXbqgb48426833;     crvExXbqgb48426833 = crvExXbqgb89185040;     crvExXbqgb89185040 = crvExXbqgb33813819;     crvExXbqgb33813819 = crvExXbqgb48016272;     crvExXbqgb48016272 = crvExXbqgb70412475;     crvExXbqgb70412475 = crvExXbqgb81870476;     crvExXbqgb81870476 = crvExXbqgb4334647;     crvExXbqgb4334647 = crvExXbqgb751212;     crvExXbqgb751212 = crvExXbqgb42388630;     crvExXbqgb42388630 = crvExXbqgb29384523;     crvExXbqgb29384523 = crvExXbqgb1744024;     crvExXbqgb1744024 = crvExXbqgb786015;     crvExXbqgb786015 = crvExXbqgb19207407;     crvExXbqgb19207407 = crvExXbqgb63944811;     crvExXbqgb63944811 = crvExXbqgb27662861;     crvExXbqgb27662861 = crvExXbqgb16658389;     crvExXbqgb16658389 = crvExXbqgb9549367;     crvExXbqgb9549367 = crvExXbqgb66738691;     crvExXbqgb66738691 = crvExXbqgb40095076;     crvExXbqgb40095076 = crvExXbqgb93085063;     crvExXbqgb93085063 = crvExXbqgb46304537;     crvExXbqgb46304537 = crvExXbqgb34764653;     crvExXbqgb34764653 = crvExXbqgb26146272;     crvExXbqgb26146272 = crvExXbqgb64400131;     crvExXbqgb64400131 = crvExXbqgb71300456;     crvExXbqgb71300456 = crvExXbqgb96377812;     crvExXbqgb96377812 = crvExXbqgb72720999;     crvExXbqgb72720999 = crvExXbqgb4859017;     crvExXbqgb4859017 = crvExXbqgb99587692;     crvExXbqgb99587692 = crvExXbqgb31405000;     crvExXbqgb31405000 = crvExXbqgb78231019;     crvExXbqgb78231019 = crvExXbqgb72495053;     crvExXbqgb72495053 = crvExXbqgb36269362;     crvExXbqgb36269362 = crvExXbqgb67796756;     crvExXbqgb67796756 = crvExXbqgb33636625;     crvExXbqgb33636625 = crvExXbqgb59501487;     crvExXbqgb59501487 = crvExXbqgb33509755;     crvExXbqgb33509755 = crvExXbqgb48875021;     crvExXbqgb48875021 = crvExXbqgb26099961;     crvExXbqgb26099961 = crvExXbqgb28007022;     crvExXbqgb28007022 = crvExXbqgb83659851;     crvExXbqgb83659851 = crvExXbqgb77440799;     crvExXbqgb77440799 = crvExXbqgb98245224;     crvExXbqgb98245224 = crvExXbqgb12007763;     crvExXbqgb12007763 = crvExXbqgb39690456;     crvExXbqgb39690456 = crvExXbqgb9434008;     crvExXbqgb9434008 = crvExXbqgb16042670;     crvExXbqgb16042670 = crvExXbqgb6132899;     crvExXbqgb6132899 = crvExXbqgb21485023;     crvExXbqgb21485023 = crvExXbqgb38971252;     crvExXbqgb38971252 = crvExXbqgb98825399;     crvExXbqgb98825399 = crvExXbqgb64551517;     crvExXbqgb64551517 = crvExXbqgb92648913;     crvExXbqgb92648913 = crvExXbqgb45325045;     crvExXbqgb45325045 = crvExXbqgb48670501;     crvExXbqgb48670501 = crvExXbqgb13662181;     crvExXbqgb13662181 = crvExXbqgb63038768;     crvExXbqgb63038768 = crvExXbqgb69413687;     crvExXbqgb69413687 = crvExXbqgb76715816;     crvExXbqgb76715816 = crvExXbqgb74034663;     crvExXbqgb74034663 = crvExXbqgb9149477;     crvExXbqgb9149477 = crvExXbqgb99475629;     crvExXbqgb99475629 = crvExXbqgb1163519;     crvExXbqgb1163519 = crvExXbqgb10983630;     crvExXbqgb10983630 = crvExXbqgb51153504;     crvExXbqgb51153504 = crvExXbqgb29248970;     crvExXbqgb29248970 = crvExXbqgb64516652;     crvExXbqgb64516652 = crvExXbqgb51410651;     crvExXbqgb51410651 = crvExXbqgb30308186;     crvExXbqgb30308186 = crvExXbqgb68161374;     crvExXbqgb68161374 = crvExXbqgb83148634;     crvExXbqgb83148634 = crvExXbqgb60674346;     crvExXbqgb60674346 = crvExXbqgb40638731;     crvExXbqgb40638731 = crvExXbqgb12088055;     crvExXbqgb12088055 = crvExXbqgb9425212;     crvExXbqgb9425212 = crvExXbqgb68863738;     crvExXbqgb68863738 = crvExXbqgb5239044;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void wFOEPiJvQx83141373() {     int aJIOOSUhzS95352409 = -402090773;    int aJIOOSUhzS34949169 = -204592818;    int aJIOOSUhzS60890917 = -779245267;    int aJIOOSUhzS25721755 = -146722549;    int aJIOOSUhzS79423466 = -994347515;    int aJIOOSUhzS17720843 = -659029627;    int aJIOOSUhzS28649403 = -229504480;    int aJIOOSUhzS87819099 = -478021530;    int aJIOOSUhzS99169513 = -76809173;    int aJIOOSUhzS85529195 = -793013742;    int aJIOOSUhzS94985040 = -549056765;    int aJIOOSUhzS3966717 = -50157367;    int aJIOOSUhzS43444245 = -45164008;    int aJIOOSUhzS87541773 = -368748094;    int aJIOOSUhzS98638611 = -349456746;    int aJIOOSUhzS8558913 = -660914434;    int aJIOOSUhzS25745409 = -106823128;    int aJIOOSUhzS16504663 = -564274264;    int aJIOOSUhzS57400571 = -294941980;    int aJIOOSUhzS19846541 = -845900770;    int aJIOOSUhzS78551458 = -386307759;    int aJIOOSUhzS87418103 = -293202865;    int aJIOOSUhzS45405320 = -554978761;    int aJIOOSUhzS90196351 = 4990925;    int aJIOOSUhzS52197400 = -902807743;    int aJIOOSUhzS41124159 = 18666606;    int aJIOOSUhzS96224316 = -527056580;    int aJIOOSUhzS41993697 = -591263900;    int aJIOOSUhzS56978366 = -240290881;    int aJIOOSUhzS81839296 = -905603544;    int aJIOOSUhzS74623406 = -737812366;    int aJIOOSUhzS69565840 = -298298496;    int aJIOOSUhzS22262518 = -209215431;    int aJIOOSUhzS53788842 = -966940226;    int aJIOOSUhzS2056634 = -320393238;    int aJIOOSUhzS39673400 = -924658052;    int aJIOOSUhzS43323711 = -223378520;    int aJIOOSUhzS28137454 = -693241560;    int aJIOOSUhzS8823072 = -2130158;    int aJIOOSUhzS4916316 = -755396003;    int aJIOOSUhzS98960375 = -704631074;    int aJIOOSUhzS92778476 = -756059513;    int aJIOOSUhzS20478638 = -631241779;    int aJIOOSUhzS42210801 = -665798064;    int aJIOOSUhzS6305059 = -415597625;    int aJIOOSUhzS36059583 = -298417570;    int aJIOOSUhzS61965147 = -55915383;    int aJIOOSUhzS5553752 = 69492185;    int aJIOOSUhzS36535889 = -874781852;    int aJIOOSUhzS65749064 = -421467874;    int aJIOOSUhzS28605263 = -657825510;    int aJIOOSUhzS77726638 = -754410564;    int aJIOOSUhzS99936843 = -570425398;    int aJIOOSUhzS4812605 = -809744098;    int aJIOOSUhzS4589916 = -723947793;    int aJIOOSUhzS7934306 = -8887908;    int aJIOOSUhzS89543848 = -649614058;    int aJIOOSUhzS70694565 = -684236193;    int aJIOOSUhzS73524354 = -243914807;    int aJIOOSUhzS38299308 = -913014122;    int aJIOOSUhzS21496526 = -31973047;    int aJIOOSUhzS86655705 = -638240580;    int aJIOOSUhzS30840733 = -137730649;    int aJIOOSUhzS17330218 = -171205630;    int aJIOOSUhzS10905789 = 44798624;    int aJIOOSUhzS25419200 = -150758270;    int aJIOOSUhzS81704198 = -840941937;    int aJIOOSUhzS89655403 = -78223782;    int aJIOOSUhzS85485139 = 51645143;    int aJIOOSUhzS58965211 = -424798694;    int aJIOOSUhzS65235201 = -337535915;    int aJIOOSUhzS97607955 = -413581569;    int aJIOOSUhzS7681592 = -462144107;    int aJIOOSUhzS52484256 = -539545978;    int aJIOOSUhzS20886166 = -41269696;    int aJIOOSUhzS85772982 = -630248247;    int aJIOOSUhzS66939466 = -661961087;    int aJIOOSUhzS3194519 = -889180697;    int aJIOOSUhzS83891293 = -579411450;    int aJIOOSUhzS16137818 = -504390173;    int aJIOOSUhzS79159012 = -925418011;    int aJIOOSUhzS90670564 = -496548766;    int aJIOOSUhzS5457809 = -716482049;    int aJIOOSUhzS91229302 = -818823007;    int aJIOOSUhzS53234034 = -147778034;    int aJIOOSUhzS96896767 = -983401802;    int aJIOOSUhzS69628996 = -727873098;    int aJIOOSUhzS17449914 = -399471333;    int aJIOOSUhzS49198927 = -142992434;    int aJIOOSUhzS94122328 = -211505330;    int aJIOOSUhzS50129551 = -175043994;    int aJIOOSUhzS72629146 = -539142328;    int aJIOOSUhzS54613099 = -349326754;    int aJIOOSUhzS70523764 = -89116037;    int aJIOOSUhzS83419790 = -623422956;    int aJIOOSUhzS12304670 = 33609506;    int aJIOOSUhzS61937743 = -518328864;    int aJIOOSUhzS3148421 = -360036149;    int aJIOOSUhzS31305012 = -610596688;    int aJIOOSUhzS80885859 = -402090773;     aJIOOSUhzS95352409 = aJIOOSUhzS34949169;     aJIOOSUhzS34949169 = aJIOOSUhzS60890917;     aJIOOSUhzS60890917 = aJIOOSUhzS25721755;     aJIOOSUhzS25721755 = aJIOOSUhzS79423466;     aJIOOSUhzS79423466 = aJIOOSUhzS17720843;     aJIOOSUhzS17720843 = aJIOOSUhzS28649403;     aJIOOSUhzS28649403 = aJIOOSUhzS87819099;     aJIOOSUhzS87819099 = aJIOOSUhzS99169513;     aJIOOSUhzS99169513 = aJIOOSUhzS85529195;     aJIOOSUhzS85529195 = aJIOOSUhzS94985040;     aJIOOSUhzS94985040 = aJIOOSUhzS3966717;     aJIOOSUhzS3966717 = aJIOOSUhzS43444245;     aJIOOSUhzS43444245 = aJIOOSUhzS87541773;     aJIOOSUhzS87541773 = aJIOOSUhzS98638611;     aJIOOSUhzS98638611 = aJIOOSUhzS8558913;     aJIOOSUhzS8558913 = aJIOOSUhzS25745409;     aJIOOSUhzS25745409 = aJIOOSUhzS16504663;     aJIOOSUhzS16504663 = aJIOOSUhzS57400571;     aJIOOSUhzS57400571 = aJIOOSUhzS19846541;     aJIOOSUhzS19846541 = aJIOOSUhzS78551458;     aJIOOSUhzS78551458 = aJIOOSUhzS87418103;     aJIOOSUhzS87418103 = aJIOOSUhzS45405320;     aJIOOSUhzS45405320 = aJIOOSUhzS90196351;     aJIOOSUhzS90196351 = aJIOOSUhzS52197400;     aJIOOSUhzS52197400 = aJIOOSUhzS41124159;     aJIOOSUhzS41124159 = aJIOOSUhzS96224316;     aJIOOSUhzS96224316 = aJIOOSUhzS41993697;     aJIOOSUhzS41993697 = aJIOOSUhzS56978366;     aJIOOSUhzS56978366 = aJIOOSUhzS81839296;     aJIOOSUhzS81839296 = aJIOOSUhzS74623406;     aJIOOSUhzS74623406 = aJIOOSUhzS69565840;     aJIOOSUhzS69565840 = aJIOOSUhzS22262518;     aJIOOSUhzS22262518 = aJIOOSUhzS53788842;     aJIOOSUhzS53788842 = aJIOOSUhzS2056634;     aJIOOSUhzS2056634 = aJIOOSUhzS39673400;     aJIOOSUhzS39673400 = aJIOOSUhzS43323711;     aJIOOSUhzS43323711 = aJIOOSUhzS28137454;     aJIOOSUhzS28137454 = aJIOOSUhzS8823072;     aJIOOSUhzS8823072 = aJIOOSUhzS4916316;     aJIOOSUhzS4916316 = aJIOOSUhzS98960375;     aJIOOSUhzS98960375 = aJIOOSUhzS92778476;     aJIOOSUhzS92778476 = aJIOOSUhzS20478638;     aJIOOSUhzS20478638 = aJIOOSUhzS42210801;     aJIOOSUhzS42210801 = aJIOOSUhzS6305059;     aJIOOSUhzS6305059 = aJIOOSUhzS36059583;     aJIOOSUhzS36059583 = aJIOOSUhzS61965147;     aJIOOSUhzS61965147 = aJIOOSUhzS5553752;     aJIOOSUhzS5553752 = aJIOOSUhzS36535889;     aJIOOSUhzS36535889 = aJIOOSUhzS65749064;     aJIOOSUhzS65749064 = aJIOOSUhzS28605263;     aJIOOSUhzS28605263 = aJIOOSUhzS77726638;     aJIOOSUhzS77726638 = aJIOOSUhzS99936843;     aJIOOSUhzS99936843 = aJIOOSUhzS4812605;     aJIOOSUhzS4812605 = aJIOOSUhzS4589916;     aJIOOSUhzS4589916 = aJIOOSUhzS7934306;     aJIOOSUhzS7934306 = aJIOOSUhzS89543848;     aJIOOSUhzS89543848 = aJIOOSUhzS70694565;     aJIOOSUhzS70694565 = aJIOOSUhzS73524354;     aJIOOSUhzS73524354 = aJIOOSUhzS38299308;     aJIOOSUhzS38299308 = aJIOOSUhzS21496526;     aJIOOSUhzS21496526 = aJIOOSUhzS86655705;     aJIOOSUhzS86655705 = aJIOOSUhzS30840733;     aJIOOSUhzS30840733 = aJIOOSUhzS17330218;     aJIOOSUhzS17330218 = aJIOOSUhzS10905789;     aJIOOSUhzS10905789 = aJIOOSUhzS25419200;     aJIOOSUhzS25419200 = aJIOOSUhzS81704198;     aJIOOSUhzS81704198 = aJIOOSUhzS89655403;     aJIOOSUhzS89655403 = aJIOOSUhzS85485139;     aJIOOSUhzS85485139 = aJIOOSUhzS58965211;     aJIOOSUhzS58965211 = aJIOOSUhzS65235201;     aJIOOSUhzS65235201 = aJIOOSUhzS97607955;     aJIOOSUhzS97607955 = aJIOOSUhzS7681592;     aJIOOSUhzS7681592 = aJIOOSUhzS52484256;     aJIOOSUhzS52484256 = aJIOOSUhzS20886166;     aJIOOSUhzS20886166 = aJIOOSUhzS85772982;     aJIOOSUhzS85772982 = aJIOOSUhzS66939466;     aJIOOSUhzS66939466 = aJIOOSUhzS3194519;     aJIOOSUhzS3194519 = aJIOOSUhzS83891293;     aJIOOSUhzS83891293 = aJIOOSUhzS16137818;     aJIOOSUhzS16137818 = aJIOOSUhzS79159012;     aJIOOSUhzS79159012 = aJIOOSUhzS90670564;     aJIOOSUhzS90670564 = aJIOOSUhzS5457809;     aJIOOSUhzS5457809 = aJIOOSUhzS91229302;     aJIOOSUhzS91229302 = aJIOOSUhzS53234034;     aJIOOSUhzS53234034 = aJIOOSUhzS96896767;     aJIOOSUhzS96896767 = aJIOOSUhzS69628996;     aJIOOSUhzS69628996 = aJIOOSUhzS17449914;     aJIOOSUhzS17449914 = aJIOOSUhzS49198927;     aJIOOSUhzS49198927 = aJIOOSUhzS94122328;     aJIOOSUhzS94122328 = aJIOOSUhzS50129551;     aJIOOSUhzS50129551 = aJIOOSUhzS72629146;     aJIOOSUhzS72629146 = aJIOOSUhzS54613099;     aJIOOSUhzS54613099 = aJIOOSUhzS70523764;     aJIOOSUhzS70523764 = aJIOOSUhzS83419790;     aJIOOSUhzS83419790 = aJIOOSUhzS12304670;     aJIOOSUhzS12304670 = aJIOOSUhzS61937743;     aJIOOSUhzS61937743 = aJIOOSUhzS3148421;     aJIOOSUhzS3148421 = aJIOOSUhzS31305012;     aJIOOSUhzS31305012 = aJIOOSUhzS80885859;     aJIOOSUhzS80885859 = aJIOOSUhzS95352409;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void quptYNlUOo92634194() {     int paIilCcJzw27334006 = -508382149;    int paIilCcJzw55445598 = 26059961;    int paIilCcJzw1989887 = -807322187;    int paIilCcJzw32874167 = -155876166;    int paIilCcJzw91100972 = 46999626;    int paIilCcJzw38982438 = -302755881;    int paIilCcJzw60300458 = -132343489;    int paIilCcJzw81581755 = -678873879;    int paIilCcJzw80831129 = -697089229;    int paIilCcJzw59477173 = -111215646;    int paIilCcJzw62901982 = -387091623;    int paIilCcJzw98113786 = -879793500;    int paIilCcJzw39170218 = -300474465;    int paIilCcJzw76991420 = -336903461;    int paIilCcJzw93974721 = -760139193;    int paIilCcJzw43210216 = -106153781;    int paIilCcJzw25493055 = -817222871;    int paIilCcJzw67899543 = -109620965;    int paIilCcJzw59231473 = -173659302;    int paIilCcJzw46298374 = -263949989;    int paIilCcJzw79813040 = -688432486;    int paIilCcJzw64296987 = -542869027;    int paIilCcJzw50110067 = -335093892;    int paIilCcJzw42338905 = -643570299;    int paIilCcJzw45826324 = -362177921;    int paIilCcJzw52985580 = 13103429;    int paIilCcJzw49209203 = -809322999;    int paIilCcJzw21867197 = -603341691;    int paIilCcJzw66824882 = -260658194;    int paIilCcJzw23492410 = -791740496;    int paIilCcJzw52181700 = 88878846;    int paIilCcJzw66053256 = -915543288;    int paIilCcJzw23746333 = -493991852;    int paIilCcJzw95772681 = -487121441;    int paIilCcJzw53812869 = -97188127;    int paIilCcJzw70663213 = -746651447;    int paIilCcJzw5380443 = 981549;    int paIilCcJzw47603312 = -504135091;    int paIilCcJzw34977545 = -575053061;    int paIilCcJzw90895908 = -792858902;    int paIilCcJzw82899476 = -323456311;    int paIilCcJzw47790464 = -567357643;    int paIilCcJzw56978912 = -941999756;    int paIilCcJzw55702400 = -976317562;    int paIilCcJzw46281154 = -614374022;    int paIilCcJzw19059986 = -401601992;    int paIilCcJzw36675715 = -96501459;    int paIilCcJzw40694716 = -996986373;    int paIilCcJzw50039 = -174377135;    int paIilCcJzw33011558 = -781496816;    int paIilCcJzw41275572 = -693648763;    int paIilCcJzw11799864 = -427009538;    int paIilCcJzw97528848 = -730298584;    int paIilCcJzw90936240 = -103573824;    int paIilCcJzw12821155 = -767810815;    int paIilCcJzw63037018 = -965513122;    int paIilCcJzw5335531 = -638846148;    int paIilCcJzw59650981 = -63751888;    int paIilCcJzw87047842 = -793698245;    int paIilCcJzw38115393 = -966103804;    int paIilCcJzw89773234 = -493432883;    int paIilCcJzw38433261 = -529001798;    int paIilCcJzw14756873 = -318215685;    int paIilCcJzw57338720 = -905348734;    int paIilCcJzw7295474 = -100094492;    int paIilCcJzw96848726 = -471548336;    int paIilCcJzw74367453 = -285801649;    int paIilCcJzw43397537 = -813353025;    int paIilCcJzw23178551 = -139715335;    int paIilCcJzw23311508 = 86512254;    int paIilCcJzw37829774 = -7135330;    int paIilCcJzw77889742 = -213087780;    int paIilCcJzw32921999 = -534567905;    int paIilCcJzw68335564 = -380800401;    int paIilCcJzw63398897 = -940493678;    int paIilCcJzw32022577 = -21074843;    int paIilCcJzw7318076 = -600869272;    int paIilCcJzw94407666 = -358776330;    int paIilCcJzw96057750 = 70803722;    int paIilCcJzw26766339 = -960575929;    int paIilCcJzw16309865 = -890395112;    int paIilCcJzw8514488 = -812336626;    int paIilCcJzw21817159 = -328964556;    int paIilCcJzw33813324 = -479161379;    int paIilCcJzw82216838 = 1908267;    int paIilCcJzw40381837 = -484111617;    int paIilCcJzw68524407 = -85244704;    int paIilCcJzw32810093 = -290418028;    int paIilCcJzw82951526 = -719310626;    int paIilCcJzw90775850 = -131675005;    int paIilCcJzw65327682 = -7805300;    int paIilCcJzw45729462 = -935266563;    int paIilCcJzw60555470 = -710436846;    int paIilCcJzw96862152 = -608949258;    int paIilCcJzw1122674 = -199426019;    int paIilCcJzw44466215 = -794454513;    int paIilCcJzw33033591 = -149141959;    int paIilCcJzw99640192 = 63348977;    int paIilCcJzw48406926 = -776223071;    int paIilCcJzw49432427 = -508382149;     paIilCcJzw27334006 = paIilCcJzw55445598;     paIilCcJzw55445598 = paIilCcJzw1989887;     paIilCcJzw1989887 = paIilCcJzw32874167;     paIilCcJzw32874167 = paIilCcJzw91100972;     paIilCcJzw91100972 = paIilCcJzw38982438;     paIilCcJzw38982438 = paIilCcJzw60300458;     paIilCcJzw60300458 = paIilCcJzw81581755;     paIilCcJzw81581755 = paIilCcJzw80831129;     paIilCcJzw80831129 = paIilCcJzw59477173;     paIilCcJzw59477173 = paIilCcJzw62901982;     paIilCcJzw62901982 = paIilCcJzw98113786;     paIilCcJzw98113786 = paIilCcJzw39170218;     paIilCcJzw39170218 = paIilCcJzw76991420;     paIilCcJzw76991420 = paIilCcJzw93974721;     paIilCcJzw93974721 = paIilCcJzw43210216;     paIilCcJzw43210216 = paIilCcJzw25493055;     paIilCcJzw25493055 = paIilCcJzw67899543;     paIilCcJzw67899543 = paIilCcJzw59231473;     paIilCcJzw59231473 = paIilCcJzw46298374;     paIilCcJzw46298374 = paIilCcJzw79813040;     paIilCcJzw79813040 = paIilCcJzw64296987;     paIilCcJzw64296987 = paIilCcJzw50110067;     paIilCcJzw50110067 = paIilCcJzw42338905;     paIilCcJzw42338905 = paIilCcJzw45826324;     paIilCcJzw45826324 = paIilCcJzw52985580;     paIilCcJzw52985580 = paIilCcJzw49209203;     paIilCcJzw49209203 = paIilCcJzw21867197;     paIilCcJzw21867197 = paIilCcJzw66824882;     paIilCcJzw66824882 = paIilCcJzw23492410;     paIilCcJzw23492410 = paIilCcJzw52181700;     paIilCcJzw52181700 = paIilCcJzw66053256;     paIilCcJzw66053256 = paIilCcJzw23746333;     paIilCcJzw23746333 = paIilCcJzw95772681;     paIilCcJzw95772681 = paIilCcJzw53812869;     paIilCcJzw53812869 = paIilCcJzw70663213;     paIilCcJzw70663213 = paIilCcJzw5380443;     paIilCcJzw5380443 = paIilCcJzw47603312;     paIilCcJzw47603312 = paIilCcJzw34977545;     paIilCcJzw34977545 = paIilCcJzw90895908;     paIilCcJzw90895908 = paIilCcJzw82899476;     paIilCcJzw82899476 = paIilCcJzw47790464;     paIilCcJzw47790464 = paIilCcJzw56978912;     paIilCcJzw56978912 = paIilCcJzw55702400;     paIilCcJzw55702400 = paIilCcJzw46281154;     paIilCcJzw46281154 = paIilCcJzw19059986;     paIilCcJzw19059986 = paIilCcJzw36675715;     paIilCcJzw36675715 = paIilCcJzw40694716;     paIilCcJzw40694716 = paIilCcJzw50039;     paIilCcJzw50039 = paIilCcJzw33011558;     paIilCcJzw33011558 = paIilCcJzw41275572;     paIilCcJzw41275572 = paIilCcJzw11799864;     paIilCcJzw11799864 = paIilCcJzw97528848;     paIilCcJzw97528848 = paIilCcJzw90936240;     paIilCcJzw90936240 = paIilCcJzw12821155;     paIilCcJzw12821155 = paIilCcJzw63037018;     paIilCcJzw63037018 = paIilCcJzw5335531;     paIilCcJzw5335531 = paIilCcJzw59650981;     paIilCcJzw59650981 = paIilCcJzw87047842;     paIilCcJzw87047842 = paIilCcJzw38115393;     paIilCcJzw38115393 = paIilCcJzw89773234;     paIilCcJzw89773234 = paIilCcJzw38433261;     paIilCcJzw38433261 = paIilCcJzw14756873;     paIilCcJzw14756873 = paIilCcJzw57338720;     paIilCcJzw57338720 = paIilCcJzw7295474;     paIilCcJzw7295474 = paIilCcJzw96848726;     paIilCcJzw96848726 = paIilCcJzw74367453;     paIilCcJzw74367453 = paIilCcJzw43397537;     paIilCcJzw43397537 = paIilCcJzw23178551;     paIilCcJzw23178551 = paIilCcJzw23311508;     paIilCcJzw23311508 = paIilCcJzw37829774;     paIilCcJzw37829774 = paIilCcJzw77889742;     paIilCcJzw77889742 = paIilCcJzw32921999;     paIilCcJzw32921999 = paIilCcJzw68335564;     paIilCcJzw68335564 = paIilCcJzw63398897;     paIilCcJzw63398897 = paIilCcJzw32022577;     paIilCcJzw32022577 = paIilCcJzw7318076;     paIilCcJzw7318076 = paIilCcJzw94407666;     paIilCcJzw94407666 = paIilCcJzw96057750;     paIilCcJzw96057750 = paIilCcJzw26766339;     paIilCcJzw26766339 = paIilCcJzw16309865;     paIilCcJzw16309865 = paIilCcJzw8514488;     paIilCcJzw8514488 = paIilCcJzw21817159;     paIilCcJzw21817159 = paIilCcJzw33813324;     paIilCcJzw33813324 = paIilCcJzw82216838;     paIilCcJzw82216838 = paIilCcJzw40381837;     paIilCcJzw40381837 = paIilCcJzw68524407;     paIilCcJzw68524407 = paIilCcJzw32810093;     paIilCcJzw32810093 = paIilCcJzw82951526;     paIilCcJzw82951526 = paIilCcJzw90775850;     paIilCcJzw90775850 = paIilCcJzw65327682;     paIilCcJzw65327682 = paIilCcJzw45729462;     paIilCcJzw45729462 = paIilCcJzw60555470;     paIilCcJzw60555470 = paIilCcJzw96862152;     paIilCcJzw96862152 = paIilCcJzw1122674;     paIilCcJzw1122674 = paIilCcJzw44466215;     paIilCcJzw44466215 = paIilCcJzw33033591;     paIilCcJzw33033591 = paIilCcJzw99640192;     paIilCcJzw99640192 = paIilCcJzw48406926;     paIilCcJzw48406926 = paIilCcJzw49432427;     paIilCcJzw49432427 = paIilCcJzw27334006;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void pTSlcPnfhs65924144() {     int poMktuwZjq72108240 = -877190075;    int poMktuwZjq24140599 = -971026149;    int poMktuwZjq59528444 = -186629875;    int poMktuwZjq62887543 = -168691229;    int poMktuwZjq87449481 = -35114376;    int poMktuwZjq68748672 = -23972637;    int poMktuwZjq44611936 = -876318101;    int poMktuwZjq32849472 = -520067167;    int poMktuwZjq75157391 = -465481307;    int poMktuwZjq43004343 = -696698312;    int poMktuwZjq37985702 = -380340425;    int poMktuwZjq9919685 = -281284087;    int poMktuwZjq73186578 = -437909104;    int poMktuwZjq62220924 = -292320975;    int poMktuwZjq67445275 = -15094619;    int poMktuwZjq31722042 = -869488866;    int poMktuwZjq25139758 = -271782511;    int poMktuwZjq79852376 = 86893654;    int poMktuwZjq41794735 = -443863553;    int poMktuwZjq3330941 = -769218896;    int poMktuwZjq81579254 = -671407103;    int poMktuwZjq91927423 = -452401654;    int poMktuwZjq56696713 = -687255076;    int poMktuwZjq95338479 = -671556014;    int poMktuwZjq16906818 = -705296170;    int poMktuwZjq29591569 = -874685018;    int poMktuwZjq43388044 = -324495984;    int poMktuwZjq33690097 = -180250598;    int poMktuwZjq80610003 = -949172432;    int poMktuwZjq41806769 = -632332229;    int poMktuwZjq40763310 = -73753458;    int poMktuwZjq81135637 = -19685997;    int poMktuwZjq85823673 = -452678842;    int poMktuwZjq14550056 = -35375141;    int poMktuwZjq6271599 = -224700972;    int poMktuwZjq54048951 = -277442200;    int poMktuwZjq92259867 = -564914354;    int poMktuwZjq54855514 = -239386035;    int poMktuwZjq31593808 = -277145124;    int poMktuwZjq31267337 = 34693040;    int poMktuwZjq40414218 = -229811643;    int poMktuwZjq24807246 = -83175025;    int poMktuwZjq68079296 = -717060923;    int poMktuwZjq54590639 = -971044860;    int poMktuwZjq82247687 = -232660977;    int poMktuwZjq35260549 = -766060183;    int poMktuwZjq61270509 = -153321965;    int poMktuwZjq29892065 = -510056355;    int poMktuwZjq88969848 = -73810532;    int poMktuwZjq27179049 = 34462666;    int poMktuwZjq59014005 = -303801317;    int poMktuwZjq59502377 = -188648102;    int poMktuwZjq54157655 = -74121045;    int poMktuwZjq11509331 = -654935442;    int poMktuwZjq84344889 = 50780955;    int poMktuwZjq80180816 = -324788422;    int poMktuwZjq67443885 = -183771073;    int poMktuwZjq64189964 = -515073862;    int poMktuwZjq45980725 = -463395060;    int poMktuwZjq57857912 = -160429358;    int poMktuwZjq25360628 = -699476653;    int poMktuwZjq10921839 = -596067503;    int poMktuwZjq52239469 = -570894735;    int poMktuwZjq33350623 = -833149079;    int poMktuwZjq2241033 = -522944854;    int poMktuwZjq56850064 = -260654428;    int poMktuwZjq24096011 = -828605246;    int poMktuwZjq58636523 = -302533964;    int poMktuwZjq55949326 = 32379996;    int poMktuwZjq13396324 = -737652420;    int poMktuwZjq39462174 = -204574512;    int poMktuwZjq70284244 = 67603524;    int poMktuwZjq48258568 = -635961223;    int poMktuwZjq10527398 = -378556593;    int poMktuwZjq62916722 = -439407254;    int poMktuwZjq56772008 = -488232078;    int poMktuwZjq23848128 = -735340731;    int poMktuwZjq2106075 = -716210216;    int poMktuwZjq13090792 = -338895037;    int poMktuwZjq81646268 = -939235988;    int poMktuwZjq68321059 = -621363054;    int poMktuwZjq13495980 = -814439630;    int poMktuwZjq44720249 = -6440067;    int poMktuwZjq53430955 = -883635099;    int poMktuwZjq82792764 = -228530912;    int poMktuwZjq81260932 = -885105356;    int poMktuwZjq26977983 = -945564953;    int poMktuwZjq74314343 = -797743400;    int poMktuwZjq30205166 = 13843904;    int poMktuwZjq26090782 = -899912551;    int poMktuwZjq86605066 = 6328873;    int poMktuwZjq28069903 = 50159508;    int poMktuwZjq8874789 = -775990976;    int poMktuwZjq73735895 = -16715766;    int poMktuwZjq5906710 = -265830308;    int poMktuwZjq29492380 = -633744140;    int poMktuwZjq72567777 = -512280290;    int poMktuwZjq34728673 = -883911845;    int poMktuwZjq52349606 = -348100007;    int poMktuwZjq25397623 = -877190075;     poMktuwZjq72108240 = poMktuwZjq24140599;     poMktuwZjq24140599 = poMktuwZjq59528444;     poMktuwZjq59528444 = poMktuwZjq62887543;     poMktuwZjq62887543 = poMktuwZjq87449481;     poMktuwZjq87449481 = poMktuwZjq68748672;     poMktuwZjq68748672 = poMktuwZjq44611936;     poMktuwZjq44611936 = poMktuwZjq32849472;     poMktuwZjq32849472 = poMktuwZjq75157391;     poMktuwZjq75157391 = poMktuwZjq43004343;     poMktuwZjq43004343 = poMktuwZjq37985702;     poMktuwZjq37985702 = poMktuwZjq9919685;     poMktuwZjq9919685 = poMktuwZjq73186578;     poMktuwZjq73186578 = poMktuwZjq62220924;     poMktuwZjq62220924 = poMktuwZjq67445275;     poMktuwZjq67445275 = poMktuwZjq31722042;     poMktuwZjq31722042 = poMktuwZjq25139758;     poMktuwZjq25139758 = poMktuwZjq79852376;     poMktuwZjq79852376 = poMktuwZjq41794735;     poMktuwZjq41794735 = poMktuwZjq3330941;     poMktuwZjq3330941 = poMktuwZjq81579254;     poMktuwZjq81579254 = poMktuwZjq91927423;     poMktuwZjq91927423 = poMktuwZjq56696713;     poMktuwZjq56696713 = poMktuwZjq95338479;     poMktuwZjq95338479 = poMktuwZjq16906818;     poMktuwZjq16906818 = poMktuwZjq29591569;     poMktuwZjq29591569 = poMktuwZjq43388044;     poMktuwZjq43388044 = poMktuwZjq33690097;     poMktuwZjq33690097 = poMktuwZjq80610003;     poMktuwZjq80610003 = poMktuwZjq41806769;     poMktuwZjq41806769 = poMktuwZjq40763310;     poMktuwZjq40763310 = poMktuwZjq81135637;     poMktuwZjq81135637 = poMktuwZjq85823673;     poMktuwZjq85823673 = poMktuwZjq14550056;     poMktuwZjq14550056 = poMktuwZjq6271599;     poMktuwZjq6271599 = poMktuwZjq54048951;     poMktuwZjq54048951 = poMktuwZjq92259867;     poMktuwZjq92259867 = poMktuwZjq54855514;     poMktuwZjq54855514 = poMktuwZjq31593808;     poMktuwZjq31593808 = poMktuwZjq31267337;     poMktuwZjq31267337 = poMktuwZjq40414218;     poMktuwZjq40414218 = poMktuwZjq24807246;     poMktuwZjq24807246 = poMktuwZjq68079296;     poMktuwZjq68079296 = poMktuwZjq54590639;     poMktuwZjq54590639 = poMktuwZjq82247687;     poMktuwZjq82247687 = poMktuwZjq35260549;     poMktuwZjq35260549 = poMktuwZjq61270509;     poMktuwZjq61270509 = poMktuwZjq29892065;     poMktuwZjq29892065 = poMktuwZjq88969848;     poMktuwZjq88969848 = poMktuwZjq27179049;     poMktuwZjq27179049 = poMktuwZjq59014005;     poMktuwZjq59014005 = poMktuwZjq59502377;     poMktuwZjq59502377 = poMktuwZjq54157655;     poMktuwZjq54157655 = poMktuwZjq11509331;     poMktuwZjq11509331 = poMktuwZjq84344889;     poMktuwZjq84344889 = poMktuwZjq80180816;     poMktuwZjq80180816 = poMktuwZjq67443885;     poMktuwZjq67443885 = poMktuwZjq64189964;     poMktuwZjq64189964 = poMktuwZjq45980725;     poMktuwZjq45980725 = poMktuwZjq57857912;     poMktuwZjq57857912 = poMktuwZjq25360628;     poMktuwZjq25360628 = poMktuwZjq10921839;     poMktuwZjq10921839 = poMktuwZjq52239469;     poMktuwZjq52239469 = poMktuwZjq33350623;     poMktuwZjq33350623 = poMktuwZjq2241033;     poMktuwZjq2241033 = poMktuwZjq56850064;     poMktuwZjq56850064 = poMktuwZjq24096011;     poMktuwZjq24096011 = poMktuwZjq58636523;     poMktuwZjq58636523 = poMktuwZjq55949326;     poMktuwZjq55949326 = poMktuwZjq13396324;     poMktuwZjq13396324 = poMktuwZjq39462174;     poMktuwZjq39462174 = poMktuwZjq70284244;     poMktuwZjq70284244 = poMktuwZjq48258568;     poMktuwZjq48258568 = poMktuwZjq10527398;     poMktuwZjq10527398 = poMktuwZjq62916722;     poMktuwZjq62916722 = poMktuwZjq56772008;     poMktuwZjq56772008 = poMktuwZjq23848128;     poMktuwZjq23848128 = poMktuwZjq2106075;     poMktuwZjq2106075 = poMktuwZjq13090792;     poMktuwZjq13090792 = poMktuwZjq81646268;     poMktuwZjq81646268 = poMktuwZjq68321059;     poMktuwZjq68321059 = poMktuwZjq13495980;     poMktuwZjq13495980 = poMktuwZjq44720249;     poMktuwZjq44720249 = poMktuwZjq53430955;     poMktuwZjq53430955 = poMktuwZjq82792764;     poMktuwZjq82792764 = poMktuwZjq81260932;     poMktuwZjq81260932 = poMktuwZjq26977983;     poMktuwZjq26977983 = poMktuwZjq74314343;     poMktuwZjq74314343 = poMktuwZjq30205166;     poMktuwZjq30205166 = poMktuwZjq26090782;     poMktuwZjq26090782 = poMktuwZjq86605066;     poMktuwZjq86605066 = poMktuwZjq28069903;     poMktuwZjq28069903 = poMktuwZjq8874789;     poMktuwZjq8874789 = poMktuwZjq73735895;     poMktuwZjq73735895 = poMktuwZjq5906710;     poMktuwZjq5906710 = poMktuwZjq29492380;     poMktuwZjq29492380 = poMktuwZjq72567777;     poMktuwZjq72567777 = poMktuwZjq34728673;     poMktuwZjq34728673 = poMktuwZjq52349606;     poMktuwZjq52349606 = poMktuwZjq25397623;     poMktuwZjq25397623 = poMktuwZjq72108240;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void RwQJUMCseg23504631() {     int VoJuLSmNgg20087106 = -64102998;    int VoJuLSmNgg66312925 = -32451855;    int VoJuLSmNgg19863686 = -271616642;    int VoJuLSmNgg38536301 = -361880824;    int VoJuLSmNgg46125638 = -204738343;    int VoJuLSmNgg65835633 = -340129206;    int VoJuLSmNgg73541183 = -476040147;    int VoJuLSmNgg54279404 = -567168373;    int VoJuLSmNgg14909651 = -32255321;    int VoJuLSmNgg57286796 = -37194297;    int VoJuLSmNgg69540510 = -727920640;    int VoJuLSmNgg86848612 = -140259924;    int VoJuLSmNgg84922623 = -799216315;    int VoJuLSmNgg42551173 = -449400974;    int VoJuLSmNgg15277332 = -668405438;    int VoJuLSmNgg9134450 = -254552235;    int VoJuLSmNgg18908467 = -417767555;    int VoJuLSmNgg83944163 = -484054776;    int VoJuLSmNgg24112817 = -743957269;    int VoJuLSmNgg70934927 = -384268274;    int VoJuLSmNgg3802203 = -314127818;    int VoJuLSmNgg78949483 = -866909013;    int VoJuLSmNgg26875438 = -448469931;    int VoJuLSmNgg79902200 = -113477328;    int VoJuLSmNgg78907514 = -567657584;    int VoJuLSmNgg30809623 = -974823855;    int VoJuLSmNgg2643792 = -447095899;    int VoJuLSmNgg68096822 = -689400296;    int VoJuLSmNgg82701330 = -883653087;    int VoJuLSmNgg28196569 = -786106284;    int VoJuLSmNgg73688071 = -646623407;    int VoJuLSmNgg91142903 = -553731424;    int VoJuLSmNgg2596973 = -127899258;    int VoJuLSmNgg27242977 = -538965230;    int VoJuLSmNgg1547914 = -730579381;    int VoJuLSmNgg57705481 = 69333454;    int VoJuLSmNgg23403597 = -678720872;    int VoJuLSmNgg14136622 = 39536347;    int VoJuLSmNgg85511921 = -423848061;    int VoJuLSmNgg88363832 = -962069623;    int VoJuLSmNgg28467203 = -120105601;    int VoJuLSmNgg71627566 = -156330138;    int VoJuLSmNgg62546347 = -74067634;    int VoJuLSmNgg65596139 = -779859665;    int VoJuLSmNgg58193778 = -607566171;    int VoJuLSmNgg69333185 = -558792145;    int VoJuLSmNgg45638569 = -282920456;    int VoJuLSmNgg7219930 = -951012836;    int VoJuLSmNgg15582684 = -559439595;    int VoJuLSmNgg58027367 = -368555859;    int VoJuLSmNgg64760099 = -228981189;    int VoJuLSmNgg46064957 = -415400816;    int VoJuLSmNgg75097313 = -421876815;    int VoJuLSmNgg30444514 = -713760181;    int VoJuLSmNgg19702428 = -808114300;    int VoJuLSmNgg41137623 = -197193985;    int VoJuLSmNgg39437488 = -583981924;    int VoJuLSmNgg39961485 = -58139314;    int VoJuLSmNgg59628786 = -794223241;    int VoJuLSmNgg15316015 = -229914488;    int VoJuLSmNgg63191841 = -893033308;    int VoJuLSmNgg5444361 = -786639852;    int VoJuLSmNgg71578074 = -683515287;    int VoJuLSmNgg86713082 = -246149038;    int VoJuLSmNgg83598725 = -390570891;    int VoJuLSmNgg78397606 = -74189216;    int VoJuLSmNgg84251639 = 87639333;    int VoJuLSmNgg57679646 = -160251085;    int VoJuLSmNgg41003260 = -718821594;    int VoJuLSmNgg57571850 = -637738892;    int VoJuLSmNgg85730852 = -575831363;    int VoJuLSmNgg4771845 = -357303902;    int VoJuLSmNgg98432242 = 39793285;    int VoJuLSmNgg35748984 = -781887646;    int VoJuLSmNgg42467725 = -164162674;    int VoJuLSmNgg32174637 = -57797681;    int VoJuLSmNgg16403136 = -692841380;    int VoJuLSmNgg61279299 = -668610267;    int VoJuLSmNgg21708423 = -505911158;    int VoJuLSmNgg9574330 = 91134561;    int VoJuLSmNgg85171054 = -591903400;    int VoJuLSmNgg95423862 = -496083063;    int VoJuLSmNgg52514139 = -29960701;    int VoJuLSmNgg24673964 = -415097228;    int VoJuLSmNgg63436470 = -457125095;    int VoJuLSmNgg27623114 = -131222592;    int VoJuLSmNgg16045590 = -31854610;    int VoJuLSmNgg72152459 = -414139077;    int VoJuLSmNgg7540549 = -730850930;    int VoJuLSmNgg60410290 = -433385397;    int VoJuLSmNgg18267994 = -346684623;    int VoJuLSmNgg83442112 = -520581558;    int VoJuLSmNgg54507835 = -166240413;    int VoJuLSmNgg70195906 = -93933574;    int VoJuLSmNgg25171992 = 30963685;    int VoJuLSmNgg23022842 = -333465750;    int VoJuLSmNgg49492 = -472814852;    int VoJuLSmNgg75833265 = -827918597;    int VoJuLSmNgg81997413 = -289288774;    int VoJuLSmNgg79796171 = -64102998;     VoJuLSmNgg20087106 = VoJuLSmNgg66312925;     VoJuLSmNgg66312925 = VoJuLSmNgg19863686;     VoJuLSmNgg19863686 = VoJuLSmNgg38536301;     VoJuLSmNgg38536301 = VoJuLSmNgg46125638;     VoJuLSmNgg46125638 = VoJuLSmNgg65835633;     VoJuLSmNgg65835633 = VoJuLSmNgg73541183;     VoJuLSmNgg73541183 = VoJuLSmNgg54279404;     VoJuLSmNgg54279404 = VoJuLSmNgg14909651;     VoJuLSmNgg14909651 = VoJuLSmNgg57286796;     VoJuLSmNgg57286796 = VoJuLSmNgg69540510;     VoJuLSmNgg69540510 = VoJuLSmNgg86848612;     VoJuLSmNgg86848612 = VoJuLSmNgg84922623;     VoJuLSmNgg84922623 = VoJuLSmNgg42551173;     VoJuLSmNgg42551173 = VoJuLSmNgg15277332;     VoJuLSmNgg15277332 = VoJuLSmNgg9134450;     VoJuLSmNgg9134450 = VoJuLSmNgg18908467;     VoJuLSmNgg18908467 = VoJuLSmNgg83944163;     VoJuLSmNgg83944163 = VoJuLSmNgg24112817;     VoJuLSmNgg24112817 = VoJuLSmNgg70934927;     VoJuLSmNgg70934927 = VoJuLSmNgg3802203;     VoJuLSmNgg3802203 = VoJuLSmNgg78949483;     VoJuLSmNgg78949483 = VoJuLSmNgg26875438;     VoJuLSmNgg26875438 = VoJuLSmNgg79902200;     VoJuLSmNgg79902200 = VoJuLSmNgg78907514;     VoJuLSmNgg78907514 = VoJuLSmNgg30809623;     VoJuLSmNgg30809623 = VoJuLSmNgg2643792;     VoJuLSmNgg2643792 = VoJuLSmNgg68096822;     VoJuLSmNgg68096822 = VoJuLSmNgg82701330;     VoJuLSmNgg82701330 = VoJuLSmNgg28196569;     VoJuLSmNgg28196569 = VoJuLSmNgg73688071;     VoJuLSmNgg73688071 = VoJuLSmNgg91142903;     VoJuLSmNgg91142903 = VoJuLSmNgg2596973;     VoJuLSmNgg2596973 = VoJuLSmNgg27242977;     VoJuLSmNgg27242977 = VoJuLSmNgg1547914;     VoJuLSmNgg1547914 = VoJuLSmNgg57705481;     VoJuLSmNgg57705481 = VoJuLSmNgg23403597;     VoJuLSmNgg23403597 = VoJuLSmNgg14136622;     VoJuLSmNgg14136622 = VoJuLSmNgg85511921;     VoJuLSmNgg85511921 = VoJuLSmNgg88363832;     VoJuLSmNgg88363832 = VoJuLSmNgg28467203;     VoJuLSmNgg28467203 = VoJuLSmNgg71627566;     VoJuLSmNgg71627566 = VoJuLSmNgg62546347;     VoJuLSmNgg62546347 = VoJuLSmNgg65596139;     VoJuLSmNgg65596139 = VoJuLSmNgg58193778;     VoJuLSmNgg58193778 = VoJuLSmNgg69333185;     VoJuLSmNgg69333185 = VoJuLSmNgg45638569;     VoJuLSmNgg45638569 = VoJuLSmNgg7219930;     VoJuLSmNgg7219930 = VoJuLSmNgg15582684;     VoJuLSmNgg15582684 = VoJuLSmNgg58027367;     VoJuLSmNgg58027367 = VoJuLSmNgg64760099;     VoJuLSmNgg64760099 = VoJuLSmNgg46064957;     VoJuLSmNgg46064957 = VoJuLSmNgg75097313;     VoJuLSmNgg75097313 = VoJuLSmNgg30444514;     VoJuLSmNgg30444514 = VoJuLSmNgg19702428;     VoJuLSmNgg19702428 = VoJuLSmNgg41137623;     VoJuLSmNgg41137623 = VoJuLSmNgg39437488;     VoJuLSmNgg39437488 = VoJuLSmNgg39961485;     VoJuLSmNgg39961485 = VoJuLSmNgg59628786;     VoJuLSmNgg59628786 = VoJuLSmNgg15316015;     VoJuLSmNgg15316015 = VoJuLSmNgg63191841;     VoJuLSmNgg63191841 = VoJuLSmNgg5444361;     VoJuLSmNgg5444361 = VoJuLSmNgg71578074;     VoJuLSmNgg71578074 = VoJuLSmNgg86713082;     VoJuLSmNgg86713082 = VoJuLSmNgg83598725;     VoJuLSmNgg83598725 = VoJuLSmNgg78397606;     VoJuLSmNgg78397606 = VoJuLSmNgg84251639;     VoJuLSmNgg84251639 = VoJuLSmNgg57679646;     VoJuLSmNgg57679646 = VoJuLSmNgg41003260;     VoJuLSmNgg41003260 = VoJuLSmNgg57571850;     VoJuLSmNgg57571850 = VoJuLSmNgg85730852;     VoJuLSmNgg85730852 = VoJuLSmNgg4771845;     VoJuLSmNgg4771845 = VoJuLSmNgg98432242;     VoJuLSmNgg98432242 = VoJuLSmNgg35748984;     VoJuLSmNgg35748984 = VoJuLSmNgg42467725;     VoJuLSmNgg42467725 = VoJuLSmNgg32174637;     VoJuLSmNgg32174637 = VoJuLSmNgg16403136;     VoJuLSmNgg16403136 = VoJuLSmNgg61279299;     VoJuLSmNgg61279299 = VoJuLSmNgg21708423;     VoJuLSmNgg21708423 = VoJuLSmNgg9574330;     VoJuLSmNgg9574330 = VoJuLSmNgg85171054;     VoJuLSmNgg85171054 = VoJuLSmNgg95423862;     VoJuLSmNgg95423862 = VoJuLSmNgg52514139;     VoJuLSmNgg52514139 = VoJuLSmNgg24673964;     VoJuLSmNgg24673964 = VoJuLSmNgg63436470;     VoJuLSmNgg63436470 = VoJuLSmNgg27623114;     VoJuLSmNgg27623114 = VoJuLSmNgg16045590;     VoJuLSmNgg16045590 = VoJuLSmNgg72152459;     VoJuLSmNgg72152459 = VoJuLSmNgg7540549;     VoJuLSmNgg7540549 = VoJuLSmNgg60410290;     VoJuLSmNgg60410290 = VoJuLSmNgg18267994;     VoJuLSmNgg18267994 = VoJuLSmNgg83442112;     VoJuLSmNgg83442112 = VoJuLSmNgg54507835;     VoJuLSmNgg54507835 = VoJuLSmNgg70195906;     VoJuLSmNgg70195906 = VoJuLSmNgg25171992;     VoJuLSmNgg25171992 = VoJuLSmNgg23022842;     VoJuLSmNgg23022842 = VoJuLSmNgg49492;     VoJuLSmNgg49492 = VoJuLSmNgg75833265;     VoJuLSmNgg75833265 = VoJuLSmNgg81997413;     VoJuLSmNgg81997413 = VoJuLSmNgg79796171;     VoJuLSmNgg79796171 = VoJuLSmNgg20087106;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void OERbmcKWeP56662963() {     int NrrrDLGvSQ47409451 = -462259896;    int NrrrDLGvSQ43740973 = -354180606;    int NrrrDLGvSQ26214919 = -157155409;    int NrrrDLGvSQ63063667 = 44662348;    int NrrrDLGvSQ89981549 = -392222454;    int NrrrDLGvSQ99026905 = -729279233;    int NrrrDLGvSQ10502038 = -130388833;    int NrrrDLGvSQ20777495 = -595585477;    int NrrrDLGvSQ20851980 = -115916559;    int NrrrDLGvSQ46082424 = -179200085;    int NrrrDLGvSQ74086611 = -460202980;    int NrrrDLGvSQ28949727 = -35080741;    int NrrrDLGvSQ90720966 = -442230323;    int NrrrDLGvSQ4417554 = -514317552;    int NrrrDLGvSQ64268450 = -44000893;    int NrrrDLGvSQ34941628 = -44228755;    int NrrrDLGvSQ60713918 = 30721604;    int NrrrDLGvSQ9992857 = -538640726;    int NrrrDLGvSQ65044319 = -250349743;    int NrrrDLGvSQ83807527 = -465969686;    int NrrrDLGvSQ30641465 = -381019174;    int NrrrDLGvSQ38297977 = -507624980;    int NrrrDLGvSQ22769151 = -261060023;    int NrrrDLGvSQ13353967 = -423688128;    int NrrrDLGvSQ23115840 = -799134699;    int NrrrDLGvSQ88860654 = -357832694;    int NrrrDLGvSQ31304940 = -400117823;    int NrrrDLGvSQ21273967 = -600151467;    int NrrrDLGvSQ12159004 = -183328261;    int NrrrDLGvSQ57481676 = -138058798;    int NrrrDLGvSQ24600345 = -111379596;    int NrrrDLGvSQ45181602 = -503346010;    int NrrrDLGvSQ50514228 = -282616227;    int NrrrDLGvSQ74783051 = -561536934;    int NrrrDLGvSQ30568520 = -483996454;    int NrrrDLGvSQ33489895 = -389488654;    int NrrrDLGvSQ44711867 = -953674215;    int NrrrDLGvSQ23063501 = -993875173;    int NrrrDLGvSQ37381943 = -874333424;    int NrrrDLGvSQ29261700 = -223297687;    int NrrrDLGvSQ47338654 = 32661397;    int NrrrDLGvSQ79238141 = -605440243;    int NrrrDLGvSQ78258959 = -413667984;    int NrrrDLGvSQ89517262 = -184422830;    int NrrrDLGvSQ51199349 = -203769521;    int NrrrDLGvSQ27320962 = -727220456;    int NrrrDLGvSQ74648769 = -107409614;    int NrrrDLGvSQ50471269 = -571410039;    int NrrrDLGvSQ25747860 = -457127586;    int NrrrDLGvSQ45482265 = -178834171;    int NrrrDLGvSQ62261396 = -291505196;    int NrrrDLGvSQ51666475 = -684543118;    int NrrrDLGvSQ72547576 = -485875050;    int NrrrDLGvSQ16840096 = -785643312;    int NrrrDLGvSQ26021498 = -273743099;    int NrrrDLGvSQ9111475 = -954634916;    int NrrrDLGvSQ20971822 = 6879417;    int NrrrDLGvSQ12860952 = -733467281;    int NrrrDLGvSQ39947827 = -156202953;    int NrrrDLGvSQ1120896 = 65610240;    int NrrrDLGvSQ67721966 = -229161411;    int NrrrDLGvSQ89228071 = -530237366;    int NrrrDLGvSQ8618491 = -312257217;    int NrrrDLGvSQ63370303 = -977857761;    int NrrrDLGvSQ21482080 = 32179510;    int NrrrDLGvSQ28905010 = -956856971;    int NrrrDLGvSQ78435498 = -752464515;    int NrrrDLGvSQ15937915 = -880693389;    int NrrrDLGvSQ73849034 = 69678902;    int NrrrDLGvSQ30778555 = -654512239;    int NrrrDLGvSQ90229761 = -90554540;    int NrrrDLGvSQ37650417 = 24596776;    int NrrrDLGvSQ72610914 = -664307302;    int NrrrDLGvSQ35782620 = 72947944;    int NrrrDLGvSQ36468874 = -398631083;    int NrrrDLGvSQ51403324 = -775578932;    int NrrrDLGvSQ60039018 = 6043004;    int NrrrDLGvSQ33251889 = 23362806;    int NrrrDLGvSQ62154618 = -119918608;    int NrrrDLGvSQ95794877 = 28085756;    int NrrrDLGvSQ14211886 = -150423080;    int NrrrDLGvSQ80833670 = -828707784;    int NrrrDLGvSQ95526106 = -43023882;    int NrrrDLGvSQ66676738 = 95505910;    int NrrrDLGvSQ95220280 = -846553603;    int NrrrDLGvSQ72933869 = -426836478;    int NrrrDLGvSQ72634025 = 82529040;    int NrrrDLGvSQ33674133 = -496972915;    int NrrrDLGvSQ48761553 = -187793836;    int NrrrDLGvSQ21457046 = -529361539;    int NrrrDLGvSQ12518074 = -296368072;    int NrrrDLGvSQ31850915 = -120206935;    int NrrrDLGvSQ83115673 = -737672220;    int NrrrDLGvSQ36261048 = -839943665;    int NrrrDLGvSQ61539734 = -994136277;    int NrrrDLGvSQ58110583 = -437101237;    int NrrrDLGvSQ70619650 = -193183026;    int NrrrDLGvSQ14888656 = -435810223;    int NrrrDLGvSQ68035182 = -116602341;    int NrrrDLGvSQ22294339 = -462259896;     NrrrDLGvSQ47409451 = NrrrDLGvSQ43740973;     NrrrDLGvSQ43740973 = NrrrDLGvSQ26214919;     NrrrDLGvSQ26214919 = NrrrDLGvSQ63063667;     NrrrDLGvSQ63063667 = NrrrDLGvSQ89981549;     NrrrDLGvSQ89981549 = NrrrDLGvSQ99026905;     NrrrDLGvSQ99026905 = NrrrDLGvSQ10502038;     NrrrDLGvSQ10502038 = NrrrDLGvSQ20777495;     NrrrDLGvSQ20777495 = NrrrDLGvSQ20851980;     NrrrDLGvSQ20851980 = NrrrDLGvSQ46082424;     NrrrDLGvSQ46082424 = NrrrDLGvSQ74086611;     NrrrDLGvSQ74086611 = NrrrDLGvSQ28949727;     NrrrDLGvSQ28949727 = NrrrDLGvSQ90720966;     NrrrDLGvSQ90720966 = NrrrDLGvSQ4417554;     NrrrDLGvSQ4417554 = NrrrDLGvSQ64268450;     NrrrDLGvSQ64268450 = NrrrDLGvSQ34941628;     NrrrDLGvSQ34941628 = NrrrDLGvSQ60713918;     NrrrDLGvSQ60713918 = NrrrDLGvSQ9992857;     NrrrDLGvSQ9992857 = NrrrDLGvSQ65044319;     NrrrDLGvSQ65044319 = NrrrDLGvSQ83807527;     NrrrDLGvSQ83807527 = NrrrDLGvSQ30641465;     NrrrDLGvSQ30641465 = NrrrDLGvSQ38297977;     NrrrDLGvSQ38297977 = NrrrDLGvSQ22769151;     NrrrDLGvSQ22769151 = NrrrDLGvSQ13353967;     NrrrDLGvSQ13353967 = NrrrDLGvSQ23115840;     NrrrDLGvSQ23115840 = NrrrDLGvSQ88860654;     NrrrDLGvSQ88860654 = NrrrDLGvSQ31304940;     NrrrDLGvSQ31304940 = NrrrDLGvSQ21273967;     NrrrDLGvSQ21273967 = NrrrDLGvSQ12159004;     NrrrDLGvSQ12159004 = NrrrDLGvSQ57481676;     NrrrDLGvSQ57481676 = NrrrDLGvSQ24600345;     NrrrDLGvSQ24600345 = NrrrDLGvSQ45181602;     NrrrDLGvSQ45181602 = NrrrDLGvSQ50514228;     NrrrDLGvSQ50514228 = NrrrDLGvSQ74783051;     NrrrDLGvSQ74783051 = NrrrDLGvSQ30568520;     NrrrDLGvSQ30568520 = NrrrDLGvSQ33489895;     NrrrDLGvSQ33489895 = NrrrDLGvSQ44711867;     NrrrDLGvSQ44711867 = NrrrDLGvSQ23063501;     NrrrDLGvSQ23063501 = NrrrDLGvSQ37381943;     NrrrDLGvSQ37381943 = NrrrDLGvSQ29261700;     NrrrDLGvSQ29261700 = NrrrDLGvSQ47338654;     NrrrDLGvSQ47338654 = NrrrDLGvSQ79238141;     NrrrDLGvSQ79238141 = NrrrDLGvSQ78258959;     NrrrDLGvSQ78258959 = NrrrDLGvSQ89517262;     NrrrDLGvSQ89517262 = NrrrDLGvSQ51199349;     NrrrDLGvSQ51199349 = NrrrDLGvSQ27320962;     NrrrDLGvSQ27320962 = NrrrDLGvSQ74648769;     NrrrDLGvSQ74648769 = NrrrDLGvSQ50471269;     NrrrDLGvSQ50471269 = NrrrDLGvSQ25747860;     NrrrDLGvSQ25747860 = NrrrDLGvSQ45482265;     NrrrDLGvSQ45482265 = NrrrDLGvSQ62261396;     NrrrDLGvSQ62261396 = NrrrDLGvSQ51666475;     NrrrDLGvSQ51666475 = NrrrDLGvSQ72547576;     NrrrDLGvSQ72547576 = NrrrDLGvSQ16840096;     NrrrDLGvSQ16840096 = NrrrDLGvSQ26021498;     NrrrDLGvSQ26021498 = NrrrDLGvSQ9111475;     NrrrDLGvSQ9111475 = NrrrDLGvSQ20971822;     NrrrDLGvSQ20971822 = NrrrDLGvSQ12860952;     NrrrDLGvSQ12860952 = NrrrDLGvSQ39947827;     NrrrDLGvSQ39947827 = NrrrDLGvSQ1120896;     NrrrDLGvSQ1120896 = NrrrDLGvSQ67721966;     NrrrDLGvSQ67721966 = NrrrDLGvSQ89228071;     NrrrDLGvSQ89228071 = NrrrDLGvSQ8618491;     NrrrDLGvSQ8618491 = NrrrDLGvSQ63370303;     NrrrDLGvSQ63370303 = NrrrDLGvSQ21482080;     NrrrDLGvSQ21482080 = NrrrDLGvSQ28905010;     NrrrDLGvSQ28905010 = NrrrDLGvSQ78435498;     NrrrDLGvSQ78435498 = NrrrDLGvSQ15937915;     NrrrDLGvSQ15937915 = NrrrDLGvSQ73849034;     NrrrDLGvSQ73849034 = NrrrDLGvSQ30778555;     NrrrDLGvSQ30778555 = NrrrDLGvSQ90229761;     NrrrDLGvSQ90229761 = NrrrDLGvSQ37650417;     NrrrDLGvSQ37650417 = NrrrDLGvSQ72610914;     NrrrDLGvSQ72610914 = NrrrDLGvSQ35782620;     NrrrDLGvSQ35782620 = NrrrDLGvSQ36468874;     NrrrDLGvSQ36468874 = NrrrDLGvSQ51403324;     NrrrDLGvSQ51403324 = NrrrDLGvSQ60039018;     NrrrDLGvSQ60039018 = NrrrDLGvSQ33251889;     NrrrDLGvSQ33251889 = NrrrDLGvSQ62154618;     NrrrDLGvSQ62154618 = NrrrDLGvSQ95794877;     NrrrDLGvSQ95794877 = NrrrDLGvSQ14211886;     NrrrDLGvSQ14211886 = NrrrDLGvSQ80833670;     NrrrDLGvSQ80833670 = NrrrDLGvSQ95526106;     NrrrDLGvSQ95526106 = NrrrDLGvSQ66676738;     NrrrDLGvSQ66676738 = NrrrDLGvSQ95220280;     NrrrDLGvSQ95220280 = NrrrDLGvSQ72933869;     NrrrDLGvSQ72933869 = NrrrDLGvSQ72634025;     NrrrDLGvSQ72634025 = NrrrDLGvSQ33674133;     NrrrDLGvSQ33674133 = NrrrDLGvSQ48761553;     NrrrDLGvSQ48761553 = NrrrDLGvSQ21457046;     NrrrDLGvSQ21457046 = NrrrDLGvSQ12518074;     NrrrDLGvSQ12518074 = NrrrDLGvSQ31850915;     NrrrDLGvSQ31850915 = NrrrDLGvSQ83115673;     NrrrDLGvSQ83115673 = NrrrDLGvSQ36261048;     NrrrDLGvSQ36261048 = NrrrDLGvSQ61539734;     NrrrDLGvSQ61539734 = NrrrDLGvSQ58110583;     NrrrDLGvSQ58110583 = NrrrDLGvSQ70619650;     NrrrDLGvSQ70619650 = NrrrDLGvSQ14888656;     NrrrDLGvSQ14888656 = NrrrDLGvSQ68035182;     NrrrDLGvSQ68035182 = NrrrDLGvSQ22294339;     NrrrDLGvSQ22294339 = NrrrDLGvSQ47409451;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void sTMtyTTWxa9339769() {     int MigzndcwAN84329511 = -846042136;    int MigzndcwAN88031790 = -475415960;    int MigzndcwAN94239235 = -402552945;    int MigzndcwAN87196826 = -191270150;    int MigzndcwAN42920662 = -913124762;    int MigzndcwAN21193941 = 48169270;    int MigzndcwAN2684540 = -563320989;    int MigzndcwAN70797355 = -502169628;    int MigzndcwAN69922710 = -528838778;    int MigzndcwAN18742689 = -628263009;    int MigzndcwAN98847492 = -54159742;    int MigzndcwAN2149124 = -641053216;    int MigzndcwAN9310644 = -261008231;    int MigzndcwAN36196718 = -947104214;    int MigzndcwAN49274347 = -221444656;    int MigzndcwAN63861923 = -381079253;    int MigzndcwAN24517283 = -44101876;    int MigzndcwAN19959748 = -38294876;    int MigzndcwAN6310958 = -291366280;    int MigzndcwAN8578796 = -507073638;    int MigzndcwAN18024490 = -903314761;    int MigzndcwAN21562003 = -188244853;    int MigzndcwAN1635091 = 1794266;    int MigzndcwAN50623444 = -878007034;    int MigzndcwAN61191497 = -105075942;    int MigzndcwAN12183074 = -448407522;    int MigzndcwAN80750763 = -727419816;    int MigzndcwAN30711398 = -430042482;    int MigzndcwAN38231409 = -486078471;    int MigzndcwAN31217782 = -718136711;    int MigzndcwAN92073766 = -674581804;    int MigzndcwAN45804596 = -222223152;    int MigzndcwAN76150417 = -641794014;    int MigzndcwAN4776859 = -391822136;    int MigzndcwAN93936978 = -920795032;    int MigzndcwAN77157157 = -865025908;    int MigzndcwAN78666472 = -671492849;    int MigzndcwAN62871298 = -872923412;    int MigzndcwAN49441508 = -590354950;    int MigzndcwAN50016998 = -131048778;    int MigzndcwAN27464001 = -536247228;    int MigzndcwAN60503482 = 88956254;    int MigzndcwAN44779973 = -896930599;    int MigzndcwAN47869916 = -123659623;    int MigzndcwAN74188722 = -502976089;    int MigzndcwAN39994876 = -360581757;    int MigzndcwAN52223243 = -253434284;    int MigzndcwAN96573108 = -647370132;    int MigzndcwAN45638085 = -472812231;    int MigzndcwAN93093200 = -413608723;    int MigzndcwAN56934101 = -245498674;    int MigzndcwAN10216332 = -554392239;    int MigzndcwAN1551267 = -541808237;    int MigzndcwAN23947633 = -159715435;    int MigzndcwAN91315279 = -864081166;    int MigzndcwAN62767508 = -557797283;    int MigzndcwAN86396700 = -377210227;    int MigzndcwAN43615792 = -524545911;    int MigzndcwAN26005329 = 13805792;    int MigzndcwAN30737589 = -364717241;    int MigzndcwAN40443178 = -224410915;    int MigzndcwAN71973142 = -33278508;    int MigzndcwAN32565947 = 83908843;    int MigzndcwAN38704929 = -810702067;    int MigzndcwAN26668923 = -953681206;    int MigzndcwAN53042897 = -831936591;    int MigzndcwAN25998707 = -999259202;    int MigzndcwAN4533785 = -869186095;    int MigzndcwAN42259740 = 73690818;    int MigzndcwAN72117189 = -356418749;    int MigzndcwAN85195451 = -709586404;    int MigzndcwAN61645985 = -171178464;    int MigzndcwAN70518239 = -447939926;    int MigzndcwAN56293959 = -60317502;    int MigzndcwAN81114794 = -970826410;    int MigzndcwAN57521007 = -892271015;    int MigzndcwAN76782030 = -291314254;    int MigzndcwAN53765174 = -874546111;    int MigzndcwAN76434721 = -275030946;    int MigzndcwAN21196621 = -744494185;    int MigzndcwAN59959830 = -94973238;    int MigzndcwAN84177655 = 19950315;    int MigzndcwAN85073312 = -957230252;    int MigzndcwAN45138208 = 27530251;    int MigzndcwAN74283681 = -372638037;    int MigzndcwAN81857435 = -20189565;    int MigzndcwAN44253330 = -680414916;    int MigzndcwAN52202784 = -382078580;    int MigzndcwAN13461579 = -527740971;    int MigzndcwAN31169470 = -262997750;    int MigzndcwAN90760457 = -387815681;    int MigzndcwAN35050681 = -46946939;    int MigzndcwAN36865969 = -786729204;    int MigzndcwAN18703920 = -125637710;    int MigzndcwAN9573821 = -906637863;    int MigzndcwAN55490859 = -402968721;    int MigzndcwAN27937535 = -994952589;    int MigzndcwAN6075045 = 13771468;    int MigzndcwAN21200994 = -169978418;    int MigzndcwAN21145825 = -846042136;     MigzndcwAN84329511 = MigzndcwAN88031790;     MigzndcwAN88031790 = MigzndcwAN94239235;     MigzndcwAN94239235 = MigzndcwAN87196826;     MigzndcwAN87196826 = MigzndcwAN42920662;     MigzndcwAN42920662 = MigzndcwAN21193941;     MigzndcwAN21193941 = MigzndcwAN2684540;     MigzndcwAN2684540 = MigzndcwAN70797355;     MigzndcwAN70797355 = MigzndcwAN69922710;     MigzndcwAN69922710 = MigzndcwAN18742689;     MigzndcwAN18742689 = MigzndcwAN98847492;     MigzndcwAN98847492 = MigzndcwAN2149124;     MigzndcwAN2149124 = MigzndcwAN9310644;     MigzndcwAN9310644 = MigzndcwAN36196718;     MigzndcwAN36196718 = MigzndcwAN49274347;     MigzndcwAN49274347 = MigzndcwAN63861923;     MigzndcwAN63861923 = MigzndcwAN24517283;     MigzndcwAN24517283 = MigzndcwAN19959748;     MigzndcwAN19959748 = MigzndcwAN6310958;     MigzndcwAN6310958 = MigzndcwAN8578796;     MigzndcwAN8578796 = MigzndcwAN18024490;     MigzndcwAN18024490 = MigzndcwAN21562003;     MigzndcwAN21562003 = MigzndcwAN1635091;     MigzndcwAN1635091 = MigzndcwAN50623444;     MigzndcwAN50623444 = MigzndcwAN61191497;     MigzndcwAN61191497 = MigzndcwAN12183074;     MigzndcwAN12183074 = MigzndcwAN80750763;     MigzndcwAN80750763 = MigzndcwAN30711398;     MigzndcwAN30711398 = MigzndcwAN38231409;     MigzndcwAN38231409 = MigzndcwAN31217782;     MigzndcwAN31217782 = MigzndcwAN92073766;     MigzndcwAN92073766 = MigzndcwAN45804596;     MigzndcwAN45804596 = MigzndcwAN76150417;     MigzndcwAN76150417 = MigzndcwAN4776859;     MigzndcwAN4776859 = MigzndcwAN93936978;     MigzndcwAN93936978 = MigzndcwAN77157157;     MigzndcwAN77157157 = MigzndcwAN78666472;     MigzndcwAN78666472 = MigzndcwAN62871298;     MigzndcwAN62871298 = MigzndcwAN49441508;     MigzndcwAN49441508 = MigzndcwAN50016998;     MigzndcwAN50016998 = MigzndcwAN27464001;     MigzndcwAN27464001 = MigzndcwAN60503482;     MigzndcwAN60503482 = MigzndcwAN44779973;     MigzndcwAN44779973 = MigzndcwAN47869916;     MigzndcwAN47869916 = MigzndcwAN74188722;     MigzndcwAN74188722 = MigzndcwAN39994876;     MigzndcwAN39994876 = MigzndcwAN52223243;     MigzndcwAN52223243 = MigzndcwAN96573108;     MigzndcwAN96573108 = MigzndcwAN45638085;     MigzndcwAN45638085 = MigzndcwAN93093200;     MigzndcwAN93093200 = MigzndcwAN56934101;     MigzndcwAN56934101 = MigzndcwAN10216332;     MigzndcwAN10216332 = MigzndcwAN1551267;     MigzndcwAN1551267 = MigzndcwAN23947633;     MigzndcwAN23947633 = MigzndcwAN91315279;     MigzndcwAN91315279 = MigzndcwAN62767508;     MigzndcwAN62767508 = MigzndcwAN86396700;     MigzndcwAN86396700 = MigzndcwAN43615792;     MigzndcwAN43615792 = MigzndcwAN26005329;     MigzndcwAN26005329 = MigzndcwAN30737589;     MigzndcwAN30737589 = MigzndcwAN40443178;     MigzndcwAN40443178 = MigzndcwAN71973142;     MigzndcwAN71973142 = MigzndcwAN32565947;     MigzndcwAN32565947 = MigzndcwAN38704929;     MigzndcwAN38704929 = MigzndcwAN26668923;     MigzndcwAN26668923 = MigzndcwAN53042897;     MigzndcwAN53042897 = MigzndcwAN25998707;     MigzndcwAN25998707 = MigzndcwAN4533785;     MigzndcwAN4533785 = MigzndcwAN42259740;     MigzndcwAN42259740 = MigzndcwAN72117189;     MigzndcwAN72117189 = MigzndcwAN85195451;     MigzndcwAN85195451 = MigzndcwAN61645985;     MigzndcwAN61645985 = MigzndcwAN70518239;     MigzndcwAN70518239 = MigzndcwAN56293959;     MigzndcwAN56293959 = MigzndcwAN81114794;     MigzndcwAN81114794 = MigzndcwAN57521007;     MigzndcwAN57521007 = MigzndcwAN76782030;     MigzndcwAN76782030 = MigzndcwAN53765174;     MigzndcwAN53765174 = MigzndcwAN76434721;     MigzndcwAN76434721 = MigzndcwAN21196621;     MigzndcwAN21196621 = MigzndcwAN59959830;     MigzndcwAN59959830 = MigzndcwAN84177655;     MigzndcwAN84177655 = MigzndcwAN85073312;     MigzndcwAN85073312 = MigzndcwAN45138208;     MigzndcwAN45138208 = MigzndcwAN74283681;     MigzndcwAN74283681 = MigzndcwAN81857435;     MigzndcwAN81857435 = MigzndcwAN44253330;     MigzndcwAN44253330 = MigzndcwAN52202784;     MigzndcwAN52202784 = MigzndcwAN13461579;     MigzndcwAN13461579 = MigzndcwAN31169470;     MigzndcwAN31169470 = MigzndcwAN90760457;     MigzndcwAN90760457 = MigzndcwAN35050681;     MigzndcwAN35050681 = MigzndcwAN36865969;     MigzndcwAN36865969 = MigzndcwAN18703920;     MigzndcwAN18703920 = MigzndcwAN9573821;     MigzndcwAN9573821 = MigzndcwAN55490859;     MigzndcwAN55490859 = MigzndcwAN27937535;     MigzndcwAN27937535 = MigzndcwAN6075045;     MigzndcwAN6075045 = MigzndcwAN21200994;     MigzndcwAN21200994 = MigzndcwAN21145825;     MigzndcwAN21145825 = MigzndcwAN84329511;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void tjJtpwWGWQ79135247() {     int hSnzQrzJJc6437417 = 88910288;    int hSnzQrzJJc91653284 = -619689352;    int hSnzQrzJJc30830904 = -567424326;    int hSnzQrzJJc67847813 = -386595589;    int hSnzQrzJJc67654904 = -913101062;    int hSnzQrzJJc23241942 = -588190093;    int hSnzQrzJJc28999034 = -103705470;    int hSnzQrzJJc17438574 = -339469715;    int hSnzQrzJJc75396014 = -57011472;    int hSnzQrzJJc96946337 = -616339439;    int hSnzQrzJJc42916254 = -400614758;    int hSnzQrzJJc31045701 = -950277484;    int hSnzQrzJJc43382748 = -828554548;    int hSnzQrzJJc64065218 = -913420465;    int hSnzQrzJJc42684829 = -17248046;    int hSnzQrzJJc22692969 = -626698470;    int hSnzQrzJJc68227109 = 84153140;    int hSnzQrzJJc92710341 = -26490869;    int hSnzQrzJJc69056250 = -636494037;    int hSnzQrzJJc2354878 = -573001167;    int hSnzQrzJJc7208474 = -909864580;    int hSnzQrzJJc96522468 = -771007650;    int hSnzQrzJJc39578256 = -184780786;    int hSnzQrzJJc10687094 = -874592635;    int hSnzQrzJJc1705610 = -207957064;    int hSnzQrzJJc42835459 = -329844433;    int hSnzQrzJJc55702985 = -769215228;    int hSnzQrzJJc33755273 = -502010331;    int hSnzQrzJJc9286922 = -168644832;    int hSnzQrzJJc20659976 = -478676055;    int hSnzQrzJJc73095462 = -174557136;    int hSnzQrzJJc41658926 = -240292364;    int hSnzQrzJJc86603272 = -126795595;    int hSnzQrzJJc70599342 = 96545491;    int hSnzQrzJJc81289748 = -347925582;    int hSnzQrzJJc61377977 = -990048713;    int hSnzQrzJJc40956773 = 37051316;    int hSnzQrzJJc6694440 = -549876188;    int hSnzQrzJJc86128998 = -870739898;    int hSnzQrzJJc80508732 = -73219450;    int hSnzQrzJJc25102776 = -960933741;    int hSnzQrzJJc70159932 = -636835089;    int hSnzQrzJJc41097088 = -583114171;    int hSnzQrzJJc92023455 = -298262311;    int hSnzQrzJJc6129235 = -814262442;    int hSnzQrzJJc43434272 = -947390085;    int hSnzQrzJJc7357102 = -942502860;    int hSnzQrzJJc22100531 = -640504943;    int hSnzQrzJJc37070889 = -208346860;    int hSnzQrzJJc89636099 = -130634001;    int hSnzQrzJJc98969933 = -655703972;    int hSnzQrzJJc88062663 = -191418046;    int hSnzQrzJJc48595726 = -413534417;    int hSnzQrzJJc62978331 = -677100443;    int hSnzQrzJJc71926774 = 63455541;    int hSnzQrzJJc9914948 = -140082063;    int hSnzQrzJJc52075028 = -334908566;    int hSnzQrzJJc20143810 = -692831692;    int hSnzQrzJJc66142204 = -78638525;    int hSnzQrzJJc24819445 = -483256630;    int hSnzQrzJJc67538956 = -818974865;    int hSnzQrzJJc95243760 = -601695140;    int hSnzQrzJJc8151652 = -70824884;    int hSnzQrzJJc54736038 = -578335417;    int hSnzQrzJJc23850875 = -341782303;    int hSnzQrzJJc1257329 = -60322395;    int hSnzQrzJJc44442428 = -723481890;    int hSnzQrzJJc72783406 = -825100039;    int hSnzQrzJJc82775469 = -465494884;    int hSnzQrzJJc81306851 = -27199334;    int hSnzQrzJJc81736196 = -563749786;    int hSnzQrzJJc61532669 = -365970673;    int hSnzQrzJJc6581343 = -155750971;    int hSnzQrzJJc88547518 = -463274588;    int hSnzQrzJJc77252101 = -612067426;    int hSnzQrzJJc37048541 = -173029491;    int hSnzQrzJJc55425380 = -87893479;    int hSnzQrzJJc47554800 = -886518476;    int hSnzQrzJJc4557860 = 39669807;    int hSnzQrzJJc58271337 = -260566980;    int hSnzQrzJJc35478358 = -387341574;    int hSnzQrzJJc33602454 = -28710285;    int hSnzQrzJJc96684384 = -193663471;    int hSnzQrzJJc19650822 = 61989169;    int hSnzQrzJJc21690042 = -822972083;    int hSnzQrzJJc85032799 = -983139090;    int hSnzQrzJJc93063199 = -826757947;    int hSnzQrzJJc23624942 = -449695152;    int hSnzQrzJJc98672568 = -966910051;    int hSnzQrzJJc71374800 = -107843520;    int hSnzQrzJJc9302949 = -555140148;    int hSnzQrzJJc20812963 = -270116993;    int hSnzQrzJJc40552236 = -371237663;    int hSnzQrzJJc61309554 = -287483269;    int hSnzQrzJJc12969776 = -254244586;    int hSnzQrzJJc29859016 = -259238602;    int hSnzQrzJJc62008280 = -466010206;    int hSnzQrzJJc86361049 = 95221246;    int hSnzQrzJJc68172581 = -956480008;    int hSnzQrzJJc4871906 = 88910288;     hSnzQrzJJc6437417 = hSnzQrzJJc91653284;     hSnzQrzJJc91653284 = hSnzQrzJJc30830904;     hSnzQrzJJc30830904 = hSnzQrzJJc67847813;     hSnzQrzJJc67847813 = hSnzQrzJJc67654904;     hSnzQrzJJc67654904 = hSnzQrzJJc23241942;     hSnzQrzJJc23241942 = hSnzQrzJJc28999034;     hSnzQrzJJc28999034 = hSnzQrzJJc17438574;     hSnzQrzJJc17438574 = hSnzQrzJJc75396014;     hSnzQrzJJc75396014 = hSnzQrzJJc96946337;     hSnzQrzJJc96946337 = hSnzQrzJJc42916254;     hSnzQrzJJc42916254 = hSnzQrzJJc31045701;     hSnzQrzJJc31045701 = hSnzQrzJJc43382748;     hSnzQrzJJc43382748 = hSnzQrzJJc64065218;     hSnzQrzJJc64065218 = hSnzQrzJJc42684829;     hSnzQrzJJc42684829 = hSnzQrzJJc22692969;     hSnzQrzJJc22692969 = hSnzQrzJJc68227109;     hSnzQrzJJc68227109 = hSnzQrzJJc92710341;     hSnzQrzJJc92710341 = hSnzQrzJJc69056250;     hSnzQrzJJc69056250 = hSnzQrzJJc2354878;     hSnzQrzJJc2354878 = hSnzQrzJJc7208474;     hSnzQrzJJc7208474 = hSnzQrzJJc96522468;     hSnzQrzJJc96522468 = hSnzQrzJJc39578256;     hSnzQrzJJc39578256 = hSnzQrzJJc10687094;     hSnzQrzJJc10687094 = hSnzQrzJJc1705610;     hSnzQrzJJc1705610 = hSnzQrzJJc42835459;     hSnzQrzJJc42835459 = hSnzQrzJJc55702985;     hSnzQrzJJc55702985 = hSnzQrzJJc33755273;     hSnzQrzJJc33755273 = hSnzQrzJJc9286922;     hSnzQrzJJc9286922 = hSnzQrzJJc20659976;     hSnzQrzJJc20659976 = hSnzQrzJJc73095462;     hSnzQrzJJc73095462 = hSnzQrzJJc41658926;     hSnzQrzJJc41658926 = hSnzQrzJJc86603272;     hSnzQrzJJc86603272 = hSnzQrzJJc70599342;     hSnzQrzJJc70599342 = hSnzQrzJJc81289748;     hSnzQrzJJc81289748 = hSnzQrzJJc61377977;     hSnzQrzJJc61377977 = hSnzQrzJJc40956773;     hSnzQrzJJc40956773 = hSnzQrzJJc6694440;     hSnzQrzJJc6694440 = hSnzQrzJJc86128998;     hSnzQrzJJc86128998 = hSnzQrzJJc80508732;     hSnzQrzJJc80508732 = hSnzQrzJJc25102776;     hSnzQrzJJc25102776 = hSnzQrzJJc70159932;     hSnzQrzJJc70159932 = hSnzQrzJJc41097088;     hSnzQrzJJc41097088 = hSnzQrzJJc92023455;     hSnzQrzJJc92023455 = hSnzQrzJJc6129235;     hSnzQrzJJc6129235 = hSnzQrzJJc43434272;     hSnzQrzJJc43434272 = hSnzQrzJJc7357102;     hSnzQrzJJc7357102 = hSnzQrzJJc22100531;     hSnzQrzJJc22100531 = hSnzQrzJJc37070889;     hSnzQrzJJc37070889 = hSnzQrzJJc89636099;     hSnzQrzJJc89636099 = hSnzQrzJJc98969933;     hSnzQrzJJc98969933 = hSnzQrzJJc88062663;     hSnzQrzJJc88062663 = hSnzQrzJJc48595726;     hSnzQrzJJc48595726 = hSnzQrzJJc62978331;     hSnzQrzJJc62978331 = hSnzQrzJJc71926774;     hSnzQrzJJc71926774 = hSnzQrzJJc9914948;     hSnzQrzJJc9914948 = hSnzQrzJJc52075028;     hSnzQrzJJc52075028 = hSnzQrzJJc20143810;     hSnzQrzJJc20143810 = hSnzQrzJJc66142204;     hSnzQrzJJc66142204 = hSnzQrzJJc24819445;     hSnzQrzJJc24819445 = hSnzQrzJJc67538956;     hSnzQrzJJc67538956 = hSnzQrzJJc95243760;     hSnzQrzJJc95243760 = hSnzQrzJJc8151652;     hSnzQrzJJc8151652 = hSnzQrzJJc54736038;     hSnzQrzJJc54736038 = hSnzQrzJJc23850875;     hSnzQrzJJc23850875 = hSnzQrzJJc1257329;     hSnzQrzJJc1257329 = hSnzQrzJJc44442428;     hSnzQrzJJc44442428 = hSnzQrzJJc72783406;     hSnzQrzJJc72783406 = hSnzQrzJJc82775469;     hSnzQrzJJc82775469 = hSnzQrzJJc81306851;     hSnzQrzJJc81306851 = hSnzQrzJJc81736196;     hSnzQrzJJc81736196 = hSnzQrzJJc61532669;     hSnzQrzJJc61532669 = hSnzQrzJJc6581343;     hSnzQrzJJc6581343 = hSnzQrzJJc88547518;     hSnzQrzJJc88547518 = hSnzQrzJJc77252101;     hSnzQrzJJc77252101 = hSnzQrzJJc37048541;     hSnzQrzJJc37048541 = hSnzQrzJJc55425380;     hSnzQrzJJc55425380 = hSnzQrzJJc47554800;     hSnzQrzJJc47554800 = hSnzQrzJJc4557860;     hSnzQrzJJc4557860 = hSnzQrzJJc58271337;     hSnzQrzJJc58271337 = hSnzQrzJJc35478358;     hSnzQrzJJc35478358 = hSnzQrzJJc33602454;     hSnzQrzJJc33602454 = hSnzQrzJJc96684384;     hSnzQrzJJc96684384 = hSnzQrzJJc19650822;     hSnzQrzJJc19650822 = hSnzQrzJJc21690042;     hSnzQrzJJc21690042 = hSnzQrzJJc85032799;     hSnzQrzJJc85032799 = hSnzQrzJJc93063199;     hSnzQrzJJc93063199 = hSnzQrzJJc23624942;     hSnzQrzJJc23624942 = hSnzQrzJJc98672568;     hSnzQrzJJc98672568 = hSnzQrzJJc71374800;     hSnzQrzJJc71374800 = hSnzQrzJJc9302949;     hSnzQrzJJc9302949 = hSnzQrzJJc20812963;     hSnzQrzJJc20812963 = hSnzQrzJJc40552236;     hSnzQrzJJc40552236 = hSnzQrzJJc61309554;     hSnzQrzJJc61309554 = hSnzQrzJJc12969776;     hSnzQrzJJc12969776 = hSnzQrzJJc29859016;     hSnzQrzJJc29859016 = hSnzQrzJJc62008280;     hSnzQrzJJc62008280 = hSnzQrzJJc86361049;     hSnzQrzJJc86361049 = hSnzQrzJJc68172581;     hSnzQrzJJc68172581 = hSnzQrzJJc4871906;     hSnzQrzJJc4871906 = hSnzQrzJJc6437417;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void uMwwnOgCFx82741624() {     int HyJiyRXaNu18944371 = -576774018;    int HyJiyRXaNu97698165 = -985753702;    int HyJiyRXaNu56406093 = -901001245;    int HyJiyRXaNu41432937 = -399715772;    int HyJiyRXaNu87725995 = -813836827;    int HyJiyRXaNu53716895 = -40864390;    int HyJiyRXaNu84365546 = -367774716;    int HyJiyRXaNu15165047 = -150691415;    int HyJiyRXaNu79110996 = -762746218;    int HyJiyRXaNu89605105 = -665762168;    int HyJiyRXaNu76930538 = -865131388;    int HyJiyRXaNu35989835 = -416089275;    int HyJiyRXaNu80589975 = -681166202;    int HyJiyRXaNu98943043 = -684443158;    int HyJiyRXaNu22666587 = -92559553;    int HyJiyRXaNu65693171 = 58458467;    int HyJiyRXaNu17865401 = -274086491;    int HyJiyRXaNu43043003 = -218154474;    int HyJiyRXaNu91680541 = -755988865;    int HyJiyRXaNu20269172 = -985538381;    int HyJiyRXaNu75683407 = -316243354;    int HyJiyRXaNu36715535 = 81137518;    int HyJiyRXaNu12988394 = -126279142;    int HyJiyRXaNu88758086 = -667530390;    int HyJiyRXaNu12573734 = -899720986;    int HyJiyRXaNu66503496 = -557818320;    int HyJiyRXaNu94981321 = -587130428;    int HyJiyRXaNu98240623 = -959321831;    int HyJiyRXaNu90066927 = -821171314;    int HyJiyRXaNu53696105 = 51194314;    int HyJiyRXaNu54262349 = -969633066;    int HyJiyRXaNu83290888 = -685009899;    int HyJiyRXaNu62063407 = -58308465;    int HyJiyRXaNu54109511 = -95714249;    int HyJiyRXaNu75473685 = -321331590;    int HyJiyRXaNu99130042 = -588239245;    int HyJiyRXaNu46571422 = -411365918;    int HyJiyRXaNu54595503 = -278823583;    int HyJiyRXaNu80283744 = -591929392;    int HyJiyRXaNu17079481 = -823582939;    int HyJiyRXaNu55415488 = -157916581;    int HyJiyRXaNu99010447 = -403029076;    int HyJiyRXaNu66747481 = -405200605;    int HyJiyRXaNu81361414 = -816673592;    int HyJiyRXaNu50094971 = -109175277;    int HyJiyRXaNu12401517 = -325287756;    int HyJiyRXaNu27775582 = -450676235;    int HyJiyRXaNu32469246 = 67542456;    int HyJiyRXaNu78107837 = -157766766;    int HyJiyRXaNu36045674 = -316675484;    int HyJiyRXaNu50464044 = -963717301;    int HyJiyRXaNu20234285 = -968809910;    int HyJiyRXaNu51810932 = -789352650;    int HyJiyRXaNu86422209 = -508256385;    int HyJiyRXaNu7058217 = 37251877;    int HyJiyRXaNu82228836 = -557911536;    int HyJiyRXaNu84709772 = -759474560;    int HyJiyRXaNu67648006 = -133470856;    int HyJiyRXaNu28859203 = -499994787;    int HyJiyRXaNu21222500 = -156018507;    int HyJiyRXaNu58735573 = -453733963;    int HyJiyRXaNu86124923 = -408452886;    int HyJiyRXaNu25098119 = -329520102;    int HyJiyRXaNu25414892 = -713940533;    int HyJiyRXaNu35342757 = -696129102;    int HyJiyRXaNu93639650 = -80121489;    int HyJiyRXaNu73926427 = -257780811;    int HyJiyRXaNu26480464 = -485451953;    int HyJiyRXaNu23469359 = -263111568;    int HyJiyRXaNu23536544 = -504320309;    int HyJiyRXaNu19121750 = -530175615;    int HyJiyRXaNu63269897 = -995262909;    int HyJiyRXaNu62759259 = -626225082;    int HyJiyRXaNu74601061 = -932405927;    int HyJiyRXaNu64853684 = -727621801;    int HyJiyRXaNu76672959 = -913214279;    int HyJiyRXaNu69968053 = -513661878;    int HyJiyRXaNu31626979 = -309605550;    int HyJiyRXaNu38663116 = -458355113;    int HyJiyRXaNu172218 = -474433230;    int HyJiyRXaNu38727914 = -7142086;    int HyJiyRXaNu62512076 = -554672884;    int HyJiyRXaNu20132786 = -701555065;    int HyJiyRXaNu54021253 = -404495831;    int HyJiyRXaNu3232062 = 14911614;    int HyJiyRXaNu34028064 = 99176843;    int HyJiyRXaNu31479956 = -895657249;    int HyJiyRXaNu75641198 = -550052081;    int HyJiyRXaNu47051295 = -32966127;    int HyJiyRXaNu93244848 = -763420055;    int HyJiyRXaNu14420270 = -828764685;    int HyJiyRXaNu78923415 = -177895063;    int HyJiyRXaNu25736300 = -778828796;    int HyJiyRXaNu59061244 = -335910885;    int HyJiyRXaNu58343908 = -269848976;    int HyJiyRXaNu69290564 = -749463696;    int HyJiyRXaNu73912329 = 26491026;    int HyJiyRXaNu41332590 = -691260073;    int HyJiyRXaNu46018658 = -20544490;    int HyJiyRXaNu56455320 = -576774018;     HyJiyRXaNu18944371 = HyJiyRXaNu97698165;     HyJiyRXaNu97698165 = HyJiyRXaNu56406093;     HyJiyRXaNu56406093 = HyJiyRXaNu41432937;     HyJiyRXaNu41432937 = HyJiyRXaNu87725995;     HyJiyRXaNu87725995 = HyJiyRXaNu53716895;     HyJiyRXaNu53716895 = HyJiyRXaNu84365546;     HyJiyRXaNu84365546 = HyJiyRXaNu15165047;     HyJiyRXaNu15165047 = HyJiyRXaNu79110996;     HyJiyRXaNu79110996 = HyJiyRXaNu89605105;     HyJiyRXaNu89605105 = HyJiyRXaNu76930538;     HyJiyRXaNu76930538 = HyJiyRXaNu35989835;     HyJiyRXaNu35989835 = HyJiyRXaNu80589975;     HyJiyRXaNu80589975 = HyJiyRXaNu98943043;     HyJiyRXaNu98943043 = HyJiyRXaNu22666587;     HyJiyRXaNu22666587 = HyJiyRXaNu65693171;     HyJiyRXaNu65693171 = HyJiyRXaNu17865401;     HyJiyRXaNu17865401 = HyJiyRXaNu43043003;     HyJiyRXaNu43043003 = HyJiyRXaNu91680541;     HyJiyRXaNu91680541 = HyJiyRXaNu20269172;     HyJiyRXaNu20269172 = HyJiyRXaNu75683407;     HyJiyRXaNu75683407 = HyJiyRXaNu36715535;     HyJiyRXaNu36715535 = HyJiyRXaNu12988394;     HyJiyRXaNu12988394 = HyJiyRXaNu88758086;     HyJiyRXaNu88758086 = HyJiyRXaNu12573734;     HyJiyRXaNu12573734 = HyJiyRXaNu66503496;     HyJiyRXaNu66503496 = HyJiyRXaNu94981321;     HyJiyRXaNu94981321 = HyJiyRXaNu98240623;     HyJiyRXaNu98240623 = HyJiyRXaNu90066927;     HyJiyRXaNu90066927 = HyJiyRXaNu53696105;     HyJiyRXaNu53696105 = HyJiyRXaNu54262349;     HyJiyRXaNu54262349 = HyJiyRXaNu83290888;     HyJiyRXaNu83290888 = HyJiyRXaNu62063407;     HyJiyRXaNu62063407 = HyJiyRXaNu54109511;     HyJiyRXaNu54109511 = HyJiyRXaNu75473685;     HyJiyRXaNu75473685 = HyJiyRXaNu99130042;     HyJiyRXaNu99130042 = HyJiyRXaNu46571422;     HyJiyRXaNu46571422 = HyJiyRXaNu54595503;     HyJiyRXaNu54595503 = HyJiyRXaNu80283744;     HyJiyRXaNu80283744 = HyJiyRXaNu17079481;     HyJiyRXaNu17079481 = HyJiyRXaNu55415488;     HyJiyRXaNu55415488 = HyJiyRXaNu99010447;     HyJiyRXaNu99010447 = HyJiyRXaNu66747481;     HyJiyRXaNu66747481 = HyJiyRXaNu81361414;     HyJiyRXaNu81361414 = HyJiyRXaNu50094971;     HyJiyRXaNu50094971 = HyJiyRXaNu12401517;     HyJiyRXaNu12401517 = HyJiyRXaNu27775582;     HyJiyRXaNu27775582 = HyJiyRXaNu32469246;     HyJiyRXaNu32469246 = HyJiyRXaNu78107837;     HyJiyRXaNu78107837 = HyJiyRXaNu36045674;     HyJiyRXaNu36045674 = HyJiyRXaNu50464044;     HyJiyRXaNu50464044 = HyJiyRXaNu20234285;     HyJiyRXaNu20234285 = HyJiyRXaNu51810932;     HyJiyRXaNu51810932 = HyJiyRXaNu86422209;     HyJiyRXaNu86422209 = HyJiyRXaNu7058217;     HyJiyRXaNu7058217 = HyJiyRXaNu82228836;     HyJiyRXaNu82228836 = HyJiyRXaNu84709772;     HyJiyRXaNu84709772 = HyJiyRXaNu67648006;     HyJiyRXaNu67648006 = HyJiyRXaNu28859203;     HyJiyRXaNu28859203 = HyJiyRXaNu21222500;     HyJiyRXaNu21222500 = HyJiyRXaNu58735573;     HyJiyRXaNu58735573 = HyJiyRXaNu86124923;     HyJiyRXaNu86124923 = HyJiyRXaNu25098119;     HyJiyRXaNu25098119 = HyJiyRXaNu25414892;     HyJiyRXaNu25414892 = HyJiyRXaNu35342757;     HyJiyRXaNu35342757 = HyJiyRXaNu93639650;     HyJiyRXaNu93639650 = HyJiyRXaNu73926427;     HyJiyRXaNu73926427 = HyJiyRXaNu26480464;     HyJiyRXaNu26480464 = HyJiyRXaNu23469359;     HyJiyRXaNu23469359 = HyJiyRXaNu23536544;     HyJiyRXaNu23536544 = HyJiyRXaNu19121750;     HyJiyRXaNu19121750 = HyJiyRXaNu63269897;     HyJiyRXaNu63269897 = HyJiyRXaNu62759259;     HyJiyRXaNu62759259 = HyJiyRXaNu74601061;     HyJiyRXaNu74601061 = HyJiyRXaNu64853684;     HyJiyRXaNu64853684 = HyJiyRXaNu76672959;     HyJiyRXaNu76672959 = HyJiyRXaNu69968053;     HyJiyRXaNu69968053 = HyJiyRXaNu31626979;     HyJiyRXaNu31626979 = HyJiyRXaNu38663116;     HyJiyRXaNu38663116 = HyJiyRXaNu172218;     HyJiyRXaNu172218 = HyJiyRXaNu38727914;     HyJiyRXaNu38727914 = HyJiyRXaNu62512076;     HyJiyRXaNu62512076 = HyJiyRXaNu20132786;     HyJiyRXaNu20132786 = HyJiyRXaNu54021253;     HyJiyRXaNu54021253 = HyJiyRXaNu3232062;     HyJiyRXaNu3232062 = HyJiyRXaNu34028064;     HyJiyRXaNu34028064 = HyJiyRXaNu31479956;     HyJiyRXaNu31479956 = HyJiyRXaNu75641198;     HyJiyRXaNu75641198 = HyJiyRXaNu47051295;     HyJiyRXaNu47051295 = HyJiyRXaNu93244848;     HyJiyRXaNu93244848 = HyJiyRXaNu14420270;     HyJiyRXaNu14420270 = HyJiyRXaNu78923415;     HyJiyRXaNu78923415 = HyJiyRXaNu25736300;     HyJiyRXaNu25736300 = HyJiyRXaNu59061244;     HyJiyRXaNu59061244 = HyJiyRXaNu58343908;     HyJiyRXaNu58343908 = HyJiyRXaNu69290564;     HyJiyRXaNu69290564 = HyJiyRXaNu73912329;     HyJiyRXaNu73912329 = HyJiyRXaNu41332590;     HyJiyRXaNu41332590 = HyJiyRXaNu46018658;     HyJiyRXaNu46018658 = HyJiyRXaNu56455320;     HyJiyRXaNu56455320 = HyJiyRXaNu18944371;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void aKkoLzaVUe44588882() {     int IvrpxXhtbG70108453 = -399364360;    int IvrpxXhtbG29064769 = -439304380;    int IvrpxXhtbG23477657 = -463052931;    int IvrpxXhtbG17956657 = -234902389;    int IvrpxXhtbG35250108 = -276036723;    int IvrpxXhtbG22540881 = -50259209;    int IvrpxXhtbG63554571 = -136853597;    int IvrpxXhtbG14399346 = -616232491;    int IvrpxXhtbG12509746 = -368840378;    int IvrpxXhtbG24561384 = -971692086;    int IvrpxXhtbG25918252 = -345459233;    int IvrpxXhtbG20916824 = 61014549;    int IvrpxXhtbG65604444 = -231321407;    int IvrpxXhtbG35906698 = -978644797;    int IvrpxXhtbG80376471 = -932364321;    int IvrpxXhtbG55699804 = -46720138;    int IvrpxXhtbG73314392 = -570340649;    int IvrpxXhtbG8275345 = -547780817;    int IvrpxXhtbG35038254 = -739918847;    int IvrpxXhtbG14665868 = -446441584;    int IvrpxXhtbG57371362 = -950109290;    int IvrpxXhtbG18018014 = -168320224;    int IvrpxXhtbG57394386 = -673421194;    int IvrpxXhtbG35836280 = -266148872;    int IvrpxXhtbG50822702 = -461407123;    int IvrpxXhtbG42055846 = -694925332;    int IvrpxXhtbG29978722 = -19556410;    int IvrpxXhtbG61441749 = -927613285;    int IvrpxXhtbG18499799 = -839829330;    int IvrpxXhtbG36430957 = -542056184;    int IvrpxXhtbG31768297 = -914020363;    int IvrpxXhtbG42394610 = -524423329;    int IvrpxXhtbG89889934 = -55894955;    int IvrpxXhtbG61566491 = -84685925;    int IvrpxXhtbG60641699 = -883517338;    int IvrpxXhtbG51541933 = -603194423;    int IvrpxXhtbG57803560 = -372043186;    int IvrpxXhtbG75658556 = 28484088;    int IvrpxXhtbG97444497 = -21287452;    int IvrpxXhtbG6519722 = -272955263;    int IvrpxXhtbG37573717 = -295980859;    int IvrpxXhtbG72727289 = -514898166;    int IvrpxXhtbG25431280 = 78456378;    int IvrpxXhtbG82179871 = -210469233;    int IvrpxXhtbG18074776 = -460476913;    int IvrpxXhtbG85630129 = -82427502;    int IvrpxXhtbG55010283 = -996894578;    int IvrpxXhtbG24078369 = -927584593;    int IvrpxXhtbG98388866 = 79116919;    int IvrpxXhtbG63711087 = -699746677;    int IvrpxXhtbG83995908 = 60410487;    int IvrpxXhtbG89298701 = -607114017;    int IvrpxXhtbG63406488 = -717203756;    int IvrpxXhtbG34470298 = -570303799;    int IvrpxXhtbG87217520 = -669828236;    int IvrpxXhtbG52090440 = -131044137;    int IvrpxXhtbG71670383 = -765883187;    int IvrpxXhtbG87641376 = -96904059;    int IvrpxXhtbG67133955 = -773495266;    int IvrpxXhtbG93194261 = -581111391;    int IvrpxXhtbG92562158 = 69297201;    int IvrpxXhtbG2112823 = -209240313;    int IvrpxXhtbG95899546 = -776403161;    int IvrpxXhtbG76078789 = -826784194;    int IvrpxXhtbG92793087 = 42328276;    int IvrpxXhtbG83523641 = -821035905;    int IvrpxXhtbG31026889 = -883090497;    int IvrpxXhtbG4037954 = -46635483;    int IvrpxXhtbG75264998 = 4872540;    int IvrpxXhtbG28834539 = -229169898;    int IvrpxXhtbG97896244 = -674676952;    int IvrpxXhtbG97655836 = -498824738;    int IvrpxXhtbG10830847 = -426493366;    int IvrpxXhtbG28518533 = -366963584;    int IvrpxXhtbG77092150 = -50460725;    int IvrpxXhtbG84644073 = -335211125;    int IvrpxXhtbG92586733 = -146776603;    int IvrpxXhtbG75214515 = -362951961;    int IvrpxXhtbG17761505 = -805671959;    int IvrpxXhtbG65192573 = -278979622;    int IvrpxXhtbG87045563 = -698030755;    int IvrpxXhtbG5900354 = -91971817;    int IvrpxXhtbG63052882 = -906730204;    int IvrpxXhtbG54788711 = -40082654;    int IvrpxXhtbG52435048 = -502466671;    int IvrpxXhtbG42469595 = -206906346;    int IvrpxXhtbG78988122 = -807219573;    int IvrpxXhtbG55419636 = -485591157;    int IvrpxXhtbG74348971 = -414857690;    int IvrpxXhtbG8551260 = -652473202;    int IvrpxXhtbG79871549 = -837311237;    int IvrpxXhtbG70162183 = -175139127;    int IvrpxXhtbG8524601 = -198020646;    int IvrpxXhtbG4250237 = -440176061;    int IvrpxXhtbG13957563 = -242252464;    int IvrpxXhtbG35460895 = 13259453;    int IvrpxXhtbG76827742 = -738495005;    int IvrpxXhtbG49352491 = -94759428;    int IvrpxXhtbG89386783 = -152797510;    int IvrpxXhtbG34551134 = -399364360;     IvrpxXhtbG70108453 = IvrpxXhtbG29064769;     IvrpxXhtbG29064769 = IvrpxXhtbG23477657;     IvrpxXhtbG23477657 = IvrpxXhtbG17956657;     IvrpxXhtbG17956657 = IvrpxXhtbG35250108;     IvrpxXhtbG35250108 = IvrpxXhtbG22540881;     IvrpxXhtbG22540881 = IvrpxXhtbG63554571;     IvrpxXhtbG63554571 = IvrpxXhtbG14399346;     IvrpxXhtbG14399346 = IvrpxXhtbG12509746;     IvrpxXhtbG12509746 = IvrpxXhtbG24561384;     IvrpxXhtbG24561384 = IvrpxXhtbG25918252;     IvrpxXhtbG25918252 = IvrpxXhtbG20916824;     IvrpxXhtbG20916824 = IvrpxXhtbG65604444;     IvrpxXhtbG65604444 = IvrpxXhtbG35906698;     IvrpxXhtbG35906698 = IvrpxXhtbG80376471;     IvrpxXhtbG80376471 = IvrpxXhtbG55699804;     IvrpxXhtbG55699804 = IvrpxXhtbG73314392;     IvrpxXhtbG73314392 = IvrpxXhtbG8275345;     IvrpxXhtbG8275345 = IvrpxXhtbG35038254;     IvrpxXhtbG35038254 = IvrpxXhtbG14665868;     IvrpxXhtbG14665868 = IvrpxXhtbG57371362;     IvrpxXhtbG57371362 = IvrpxXhtbG18018014;     IvrpxXhtbG18018014 = IvrpxXhtbG57394386;     IvrpxXhtbG57394386 = IvrpxXhtbG35836280;     IvrpxXhtbG35836280 = IvrpxXhtbG50822702;     IvrpxXhtbG50822702 = IvrpxXhtbG42055846;     IvrpxXhtbG42055846 = IvrpxXhtbG29978722;     IvrpxXhtbG29978722 = IvrpxXhtbG61441749;     IvrpxXhtbG61441749 = IvrpxXhtbG18499799;     IvrpxXhtbG18499799 = IvrpxXhtbG36430957;     IvrpxXhtbG36430957 = IvrpxXhtbG31768297;     IvrpxXhtbG31768297 = IvrpxXhtbG42394610;     IvrpxXhtbG42394610 = IvrpxXhtbG89889934;     IvrpxXhtbG89889934 = IvrpxXhtbG61566491;     IvrpxXhtbG61566491 = IvrpxXhtbG60641699;     IvrpxXhtbG60641699 = IvrpxXhtbG51541933;     IvrpxXhtbG51541933 = IvrpxXhtbG57803560;     IvrpxXhtbG57803560 = IvrpxXhtbG75658556;     IvrpxXhtbG75658556 = IvrpxXhtbG97444497;     IvrpxXhtbG97444497 = IvrpxXhtbG6519722;     IvrpxXhtbG6519722 = IvrpxXhtbG37573717;     IvrpxXhtbG37573717 = IvrpxXhtbG72727289;     IvrpxXhtbG72727289 = IvrpxXhtbG25431280;     IvrpxXhtbG25431280 = IvrpxXhtbG82179871;     IvrpxXhtbG82179871 = IvrpxXhtbG18074776;     IvrpxXhtbG18074776 = IvrpxXhtbG85630129;     IvrpxXhtbG85630129 = IvrpxXhtbG55010283;     IvrpxXhtbG55010283 = IvrpxXhtbG24078369;     IvrpxXhtbG24078369 = IvrpxXhtbG98388866;     IvrpxXhtbG98388866 = IvrpxXhtbG63711087;     IvrpxXhtbG63711087 = IvrpxXhtbG83995908;     IvrpxXhtbG83995908 = IvrpxXhtbG89298701;     IvrpxXhtbG89298701 = IvrpxXhtbG63406488;     IvrpxXhtbG63406488 = IvrpxXhtbG34470298;     IvrpxXhtbG34470298 = IvrpxXhtbG87217520;     IvrpxXhtbG87217520 = IvrpxXhtbG52090440;     IvrpxXhtbG52090440 = IvrpxXhtbG71670383;     IvrpxXhtbG71670383 = IvrpxXhtbG87641376;     IvrpxXhtbG87641376 = IvrpxXhtbG67133955;     IvrpxXhtbG67133955 = IvrpxXhtbG93194261;     IvrpxXhtbG93194261 = IvrpxXhtbG92562158;     IvrpxXhtbG92562158 = IvrpxXhtbG2112823;     IvrpxXhtbG2112823 = IvrpxXhtbG95899546;     IvrpxXhtbG95899546 = IvrpxXhtbG76078789;     IvrpxXhtbG76078789 = IvrpxXhtbG92793087;     IvrpxXhtbG92793087 = IvrpxXhtbG83523641;     IvrpxXhtbG83523641 = IvrpxXhtbG31026889;     IvrpxXhtbG31026889 = IvrpxXhtbG4037954;     IvrpxXhtbG4037954 = IvrpxXhtbG75264998;     IvrpxXhtbG75264998 = IvrpxXhtbG28834539;     IvrpxXhtbG28834539 = IvrpxXhtbG97896244;     IvrpxXhtbG97896244 = IvrpxXhtbG97655836;     IvrpxXhtbG97655836 = IvrpxXhtbG10830847;     IvrpxXhtbG10830847 = IvrpxXhtbG28518533;     IvrpxXhtbG28518533 = IvrpxXhtbG77092150;     IvrpxXhtbG77092150 = IvrpxXhtbG84644073;     IvrpxXhtbG84644073 = IvrpxXhtbG92586733;     IvrpxXhtbG92586733 = IvrpxXhtbG75214515;     IvrpxXhtbG75214515 = IvrpxXhtbG17761505;     IvrpxXhtbG17761505 = IvrpxXhtbG65192573;     IvrpxXhtbG65192573 = IvrpxXhtbG87045563;     IvrpxXhtbG87045563 = IvrpxXhtbG5900354;     IvrpxXhtbG5900354 = IvrpxXhtbG63052882;     IvrpxXhtbG63052882 = IvrpxXhtbG54788711;     IvrpxXhtbG54788711 = IvrpxXhtbG52435048;     IvrpxXhtbG52435048 = IvrpxXhtbG42469595;     IvrpxXhtbG42469595 = IvrpxXhtbG78988122;     IvrpxXhtbG78988122 = IvrpxXhtbG55419636;     IvrpxXhtbG55419636 = IvrpxXhtbG74348971;     IvrpxXhtbG74348971 = IvrpxXhtbG8551260;     IvrpxXhtbG8551260 = IvrpxXhtbG79871549;     IvrpxXhtbG79871549 = IvrpxXhtbG70162183;     IvrpxXhtbG70162183 = IvrpxXhtbG8524601;     IvrpxXhtbG8524601 = IvrpxXhtbG4250237;     IvrpxXhtbG4250237 = IvrpxXhtbG13957563;     IvrpxXhtbG13957563 = IvrpxXhtbG35460895;     IvrpxXhtbG35460895 = IvrpxXhtbG76827742;     IvrpxXhtbG76827742 = IvrpxXhtbG49352491;     IvrpxXhtbG49352491 = IvrpxXhtbG89386783;     IvrpxXhtbG89386783 = IvrpxXhtbG34551134;     IvrpxXhtbG34551134 = IvrpxXhtbG70108453;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void QESPDujqnv20060342() {     int ETSwUNVYQj83794051 = -899459690;    int ETSwUNVYQj54688541 = -163080377;    int ETSwUNVYQj38169683 = -730142155;    int ETSwUNVYQj1635815 = -211992322;    int ETSwUNVYQj82955081 = -235172910;    int ETSwUNVYQj43527597 = -188604498;    int ETSwUNVYQj18878604 = -9794673;    int ETSwUNVYQj5628504 = 91403698;    int ETSwUNVYQj13458109 = 50034374;    int ETSwUNVYQj59737525 = -219229273;    int ETSwUNVYQj63198887 = -931491547;    int ETSwUNVYQj78631672 = -72867103;    int ETSwUNVYQj66157084 = -960356700;    int ETSwUNVYQj11598683 = -817274763;    int ETSwUNVYQj66430869 = -831376679;    int ETSwUNVYQj45936408 = -642951592;    int ETSwUNVYQj52732967 = 19298344;    int ETSwUNVYQj97089149 = -450659616;    int ETSwUNVYQj80056650 = -2883556;    int ETSwUNVYQj14810892 = -592826985;    int ETSwUNVYQj28278046 = 8195341;    int ETSwUNVYQj38346961 = -893151061;    int ETSwUNVYQj92234123 = -404406457;    int ETSwUNVYQj12772723 = -475633933;    int ETSwUNVYQj60943743 = -579796013;    int ETSwUNVYQj78984559 = -716542892;    int ETSwUNVYQj71255899 = -793098238;    int ETSwUNVYQj9470294 = -533040515;    int ETSwUNVYQj49186171 = -332355619;    int ETSwUNVYQj5999731 = -235715722;    int ETSwUNVYQj15262604 = -232523812;    int ETSwUNVYQj77501615 = -476955330;    int ETSwUNVYQj50908644 = -905619830;    int ETSwUNVYQj51897256 = -818383443;    int ETSwUNVYQj4688065 = -835652763;    int ETSwUNVYQj45342462 = -861867205;    int ETSwUNVYQj72782270 = -831917586;    int ETSwUNVYQj37307894 = -503814608;    int ETSwUNVYQj79304404 = -593301819;    int ETSwUNVYQj95816701 = -526469782;    int ETSwUNVYQj77369406 = -808154206;    int ETSwUNVYQj7474908 = 43070943;    int ETSwUNVYQj99127912 = -751930000;    int ETSwUNVYQj14064515 = -19506158;    int ETSwUNVYQj90979698 = -416857731;    int ETSwUNVYQj36863057 = 84635590;    int ETSwUNVYQj90343430 = -518404896;    int ETSwUNVYQj31443149 = -119951192;    int ETSwUNVYQj92725468 = -339950614;    int ETSwUNVYQj42683873 = 1946642;    int ETSwUNVYQj89188301 = -171726288;    int ETSwUNVYQj7803411 = -987982054;    int ETSwUNVYQj83458466 = -988751577;    int ETSwUNVYQj32899156 = -641687490;    int ETSwUNVYQj91782295 = -850088638;    int ETSwUNVYQj45447090 = 93691370;    int ETSwUNVYQj62454418 = -758673921;    int ETSwUNVYQj25396960 = -154508222;    int ETSwUNVYQj40692072 = -632196309;    int ETSwUNVYQj3970522 = -518630019;    int ETSwUNVYQj72271697 = -395506261;    int ETSwUNVYQj9408311 = -476754159;    int ETSwUNVYQj56442332 = -576240684;    int ETSwUNVYQj7458379 = -714249905;    int ETSwUNVYQj44474922 = -986705462;    int ETSwUNVYQj85697271 = -354536217;    int ETSwUNVYQj27723029 = -167247273;    int ETSwUNVYQj14259829 = -41973257;    int ETSwUNVYQj6910618 = -981622000;    int ETSwUNVYQj21088407 = -969509475;    int ETSwUNVYQj73154137 = -811034006;    int ETSwUNVYQj15425074 = -476887049;    int ETSwUNVYQj17784745 = -857357798;    int ETSwUNVYQj84239948 = -476413774;    int ETSwUNVYQj37441485 = -784672780;    int ETSwUNVYQj20803138 = 65124398;    int ETSwUNVYQj39219049 = -41221061;    int ETSwUNVYQj78169609 = -284900300;    int ETSwUNVYQj21793024 = 41223798;    int ETSwUNVYQj24080686 = -564431604;    int ETSwUNVYQj88641129 = -98137996;    int ETSwUNVYQj39812751 = -573147046;    int ETSwUNVYQj16744825 = -93089901;    int ETSwUNVYQj6502298 = -234302262;    int ETSwUNVYQj16811429 = 36010565;    int ETSwUNVYQj7459193 = -244541758;    int ETSwUNVYQj94043149 = -488203754;    int ETSwUNVYQj18009489 = -163932341;    int ETSwUNVYQj60114961 = -968294806;    int ETSwUNVYQj59240975 = -829344133;    int ETSwUNVYQj82888044 = -3193285;    int ETSwUNVYQj47385310 = -577409365;    int ETSwUNVYQj96615822 = -871618299;    int ETSwUNVYQj75333882 = 25328199;    int ETSwUNVYQj23545005 = -30963522;    int ETSwUNVYQj67961096 = -231400047;    int ETSwUNVYQj51032576 = -380688374;    int ETSwUNVYQj91669533 = 62319904;    int ETSwUNVYQj69589593 = -32800696;    int ETSwUNVYQj5282428 = -899459690;     ETSwUNVYQj83794051 = ETSwUNVYQj54688541;     ETSwUNVYQj54688541 = ETSwUNVYQj38169683;     ETSwUNVYQj38169683 = ETSwUNVYQj1635815;     ETSwUNVYQj1635815 = ETSwUNVYQj82955081;     ETSwUNVYQj82955081 = ETSwUNVYQj43527597;     ETSwUNVYQj43527597 = ETSwUNVYQj18878604;     ETSwUNVYQj18878604 = ETSwUNVYQj5628504;     ETSwUNVYQj5628504 = ETSwUNVYQj13458109;     ETSwUNVYQj13458109 = ETSwUNVYQj59737525;     ETSwUNVYQj59737525 = ETSwUNVYQj63198887;     ETSwUNVYQj63198887 = ETSwUNVYQj78631672;     ETSwUNVYQj78631672 = ETSwUNVYQj66157084;     ETSwUNVYQj66157084 = ETSwUNVYQj11598683;     ETSwUNVYQj11598683 = ETSwUNVYQj66430869;     ETSwUNVYQj66430869 = ETSwUNVYQj45936408;     ETSwUNVYQj45936408 = ETSwUNVYQj52732967;     ETSwUNVYQj52732967 = ETSwUNVYQj97089149;     ETSwUNVYQj97089149 = ETSwUNVYQj80056650;     ETSwUNVYQj80056650 = ETSwUNVYQj14810892;     ETSwUNVYQj14810892 = ETSwUNVYQj28278046;     ETSwUNVYQj28278046 = ETSwUNVYQj38346961;     ETSwUNVYQj38346961 = ETSwUNVYQj92234123;     ETSwUNVYQj92234123 = ETSwUNVYQj12772723;     ETSwUNVYQj12772723 = ETSwUNVYQj60943743;     ETSwUNVYQj60943743 = ETSwUNVYQj78984559;     ETSwUNVYQj78984559 = ETSwUNVYQj71255899;     ETSwUNVYQj71255899 = ETSwUNVYQj9470294;     ETSwUNVYQj9470294 = ETSwUNVYQj49186171;     ETSwUNVYQj49186171 = ETSwUNVYQj5999731;     ETSwUNVYQj5999731 = ETSwUNVYQj15262604;     ETSwUNVYQj15262604 = ETSwUNVYQj77501615;     ETSwUNVYQj77501615 = ETSwUNVYQj50908644;     ETSwUNVYQj50908644 = ETSwUNVYQj51897256;     ETSwUNVYQj51897256 = ETSwUNVYQj4688065;     ETSwUNVYQj4688065 = ETSwUNVYQj45342462;     ETSwUNVYQj45342462 = ETSwUNVYQj72782270;     ETSwUNVYQj72782270 = ETSwUNVYQj37307894;     ETSwUNVYQj37307894 = ETSwUNVYQj79304404;     ETSwUNVYQj79304404 = ETSwUNVYQj95816701;     ETSwUNVYQj95816701 = ETSwUNVYQj77369406;     ETSwUNVYQj77369406 = ETSwUNVYQj7474908;     ETSwUNVYQj7474908 = ETSwUNVYQj99127912;     ETSwUNVYQj99127912 = ETSwUNVYQj14064515;     ETSwUNVYQj14064515 = ETSwUNVYQj90979698;     ETSwUNVYQj90979698 = ETSwUNVYQj36863057;     ETSwUNVYQj36863057 = ETSwUNVYQj90343430;     ETSwUNVYQj90343430 = ETSwUNVYQj31443149;     ETSwUNVYQj31443149 = ETSwUNVYQj92725468;     ETSwUNVYQj92725468 = ETSwUNVYQj42683873;     ETSwUNVYQj42683873 = ETSwUNVYQj89188301;     ETSwUNVYQj89188301 = ETSwUNVYQj7803411;     ETSwUNVYQj7803411 = ETSwUNVYQj83458466;     ETSwUNVYQj83458466 = ETSwUNVYQj32899156;     ETSwUNVYQj32899156 = ETSwUNVYQj91782295;     ETSwUNVYQj91782295 = ETSwUNVYQj45447090;     ETSwUNVYQj45447090 = ETSwUNVYQj62454418;     ETSwUNVYQj62454418 = ETSwUNVYQj25396960;     ETSwUNVYQj25396960 = ETSwUNVYQj40692072;     ETSwUNVYQj40692072 = ETSwUNVYQj3970522;     ETSwUNVYQj3970522 = ETSwUNVYQj72271697;     ETSwUNVYQj72271697 = ETSwUNVYQj9408311;     ETSwUNVYQj9408311 = ETSwUNVYQj56442332;     ETSwUNVYQj56442332 = ETSwUNVYQj7458379;     ETSwUNVYQj7458379 = ETSwUNVYQj44474922;     ETSwUNVYQj44474922 = ETSwUNVYQj85697271;     ETSwUNVYQj85697271 = ETSwUNVYQj27723029;     ETSwUNVYQj27723029 = ETSwUNVYQj14259829;     ETSwUNVYQj14259829 = ETSwUNVYQj6910618;     ETSwUNVYQj6910618 = ETSwUNVYQj21088407;     ETSwUNVYQj21088407 = ETSwUNVYQj73154137;     ETSwUNVYQj73154137 = ETSwUNVYQj15425074;     ETSwUNVYQj15425074 = ETSwUNVYQj17784745;     ETSwUNVYQj17784745 = ETSwUNVYQj84239948;     ETSwUNVYQj84239948 = ETSwUNVYQj37441485;     ETSwUNVYQj37441485 = ETSwUNVYQj20803138;     ETSwUNVYQj20803138 = ETSwUNVYQj39219049;     ETSwUNVYQj39219049 = ETSwUNVYQj78169609;     ETSwUNVYQj78169609 = ETSwUNVYQj21793024;     ETSwUNVYQj21793024 = ETSwUNVYQj24080686;     ETSwUNVYQj24080686 = ETSwUNVYQj88641129;     ETSwUNVYQj88641129 = ETSwUNVYQj39812751;     ETSwUNVYQj39812751 = ETSwUNVYQj16744825;     ETSwUNVYQj16744825 = ETSwUNVYQj6502298;     ETSwUNVYQj6502298 = ETSwUNVYQj16811429;     ETSwUNVYQj16811429 = ETSwUNVYQj7459193;     ETSwUNVYQj7459193 = ETSwUNVYQj94043149;     ETSwUNVYQj94043149 = ETSwUNVYQj18009489;     ETSwUNVYQj18009489 = ETSwUNVYQj60114961;     ETSwUNVYQj60114961 = ETSwUNVYQj59240975;     ETSwUNVYQj59240975 = ETSwUNVYQj82888044;     ETSwUNVYQj82888044 = ETSwUNVYQj47385310;     ETSwUNVYQj47385310 = ETSwUNVYQj96615822;     ETSwUNVYQj96615822 = ETSwUNVYQj75333882;     ETSwUNVYQj75333882 = ETSwUNVYQj23545005;     ETSwUNVYQj23545005 = ETSwUNVYQj67961096;     ETSwUNVYQj67961096 = ETSwUNVYQj51032576;     ETSwUNVYQj51032576 = ETSwUNVYQj91669533;     ETSwUNVYQj91669533 = ETSwUNVYQj69589593;     ETSwUNVYQj69589593 = ETSwUNVYQj5282428;     ETSwUNVYQj5282428 = ETSwUNVYQj83794051;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void BQXoMDLWOC39698550() {     int lcpBckCENa10833949 = -114522273;    int lcpBckCENa20676741 = -701837027;    int lcpBckCENa2999911 = 30537235;    int lcpBckCENa84347409 = -454637472;    int lcpBckCENa57791032 = -65753981;    int lcpBckCENa81286469 = -103221915;    int lcpBckCENa74271880 = -884808769;    int lcpBckCENa77740978 = -255805509;    int lcpBckCENa69080691 = -84426554;    int lcpBckCENa33292974 = -974973593;    int lcpBckCENa84432192 = -993340538;    int lcpBckCENa872255 = -993906075;    int lcpBckCENa54945808 = -13028942;    int lcpBckCENa35640920 = -493375360;    int lcpBckCENa94683246 = -356654237;    int lcpBckCENa73600992 = 87022389;    int lcpBckCENa16351273 = -136484947;    int lcpBckCENa51412286 = -790234679;    int lcpBckCENa2665950 = -28292796;    int lcpBckCENa78980171 = -793833698;    int lcpBckCENa83252897 = 71008288;    int lcpBckCENa97988834 = -316859453;    int lcpBckCENa41216878 = 93030069;    int lcpBckCENa1613406 = -158897737;    int lcpBckCENa74347278 = -955942053;    int lcpBckCENa37672021 = -591197382;    int lcpBckCENa12890640 = -80728938;    int lcpBckCENa77481624 = 68211424;    int lcpBckCENa49146020 = -943375192;    int lcpBckCENa3614787 = -365627400;    int lcpBckCENa19612108 = -409485798;    int lcpBckCENa62215381 = 11521346;    int lcpBckCENa70966297 = -666966993;    int lcpBckCENa6012546 = -516801536;    int lcpBckCENa86011095 = -82100926;    int lcpBckCENa85068920 = -620199615;    int lcpBckCENa18911812 = -165205502;    int lcpBckCENa71390653 = -244184771;    int lcpBckCENa37210584 = -729466806;    int lcpBckCENa32957035 = 51639668;    int lcpBckCENa59050095 = -70868005;    int lcpBckCENa29082373 = -370817856;    int lcpBckCENa85749127 = -69748465;    int lcpBckCENa62311008 = -479790583;    int lcpBckCENa89951541 = -201833657;    int lcpBckCENa10403933 = -944394288;    int lcpBckCENa76038988 = -694192688;    int lcpBckCENa43315028 = -831328894;    int lcpBckCENa59192737 = -355338466;    int lcpBckCENa39620637 = -276849132;    int lcpBckCENa26485900 = -78656818;    int lcpBckCENa24673632 = -104403756;    int lcpBckCENa37362960 = -648591766;    int lcpBckCENa3164026 = -671234746;    int lcpBckCENa56445652 = -225926254;    int lcpBckCENa12845114 = -797662820;    int lcpBckCENa79459862 = -694867097;    int lcpBckCENa1386506 = -810565029;    int lcpBckCENa10000132 = -498695419;    int lcpBckCENa20119011 = -474556599;    int lcpBckCENa68395829 = 77507022;    int lcpBckCENa96790255 = -853020193;    int lcpBckCENa28594958 = -312430317;    int lcpBckCENa65465905 = -718799154;    int lcpBckCENa13680867 = -465487796;    int lcpBckCENa22216812 = -904861885;    int lcpBckCENa29905957 = -226939083;    int lcpBckCENa48933263 = -496227407;    int lcpBckCENa49629824 = -311274435;    int lcpBckCENa9614326 = -736454622;    int lcpBckCENa54689181 = -747772109;    int lcpBckCENa44960619 = -892300177;    int lcpBckCENa14201702 = 39232126;    int lcpBckCENa69708915 = 20067536;    int lcpBckCENa19930076 = -622965694;    int lcpBckCENa54170524 = -558173857;    int lcpBckCENa12239708 = -147110988;    int lcpBckCENa78905869 = -427179348;    int lcpBckCENa11661864 = -957064081;    int lcpBckCENa63943346 = 88452234;    int lcpBckCENa61633032 = -897004695;    int lcpBckCENa69575612 = -249400044;    int lcpBckCENa18288887 = -576450110;    int lcpBckCENa9525383 = -566526060;    int lcpBckCENa77128886 = -186970582;    int lcpBckCENa94938475 = -205082043;    int lcpBckCENa24852422 = -339886888;    int lcpBckCENa67802271 = -995732248;    int lcpBckCENa49566893 = -190875283;    int lcpBckCENa73165982 = -284438106;    int lcpBckCENa5609058 = -925332518;    int lcpBckCENa17525307 = -354640474;    int lcpBckCENa61390522 = -745489352;    int lcpBckCENa17091573 = -154910208;    int lcpBckCENa64561205 = 74132645;    int lcpBckCENa62259839 = -217847812;    int lcpBckCENa487416 = 41612460;    int lcpBckCENa20283222 = -350949312;    int lcpBckCENa48630142 = 85697212;    int lcpBckCENa67734730 = -114522273;     lcpBckCENa10833949 = lcpBckCENa20676741;     lcpBckCENa20676741 = lcpBckCENa2999911;     lcpBckCENa2999911 = lcpBckCENa84347409;     lcpBckCENa84347409 = lcpBckCENa57791032;     lcpBckCENa57791032 = lcpBckCENa81286469;     lcpBckCENa81286469 = lcpBckCENa74271880;     lcpBckCENa74271880 = lcpBckCENa77740978;     lcpBckCENa77740978 = lcpBckCENa69080691;     lcpBckCENa69080691 = lcpBckCENa33292974;     lcpBckCENa33292974 = lcpBckCENa84432192;     lcpBckCENa84432192 = lcpBckCENa872255;     lcpBckCENa872255 = lcpBckCENa54945808;     lcpBckCENa54945808 = lcpBckCENa35640920;     lcpBckCENa35640920 = lcpBckCENa94683246;     lcpBckCENa94683246 = lcpBckCENa73600992;     lcpBckCENa73600992 = lcpBckCENa16351273;     lcpBckCENa16351273 = lcpBckCENa51412286;     lcpBckCENa51412286 = lcpBckCENa2665950;     lcpBckCENa2665950 = lcpBckCENa78980171;     lcpBckCENa78980171 = lcpBckCENa83252897;     lcpBckCENa83252897 = lcpBckCENa97988834;     lcpBckCENa97988834 = lcpBckCENa41216878;     lcpBckCENa41216878 = lcpBckCENa1613406;     lcpBckCENa1613406 = lcpBckCENa74347278;     lcpBckCENa74347278 = lcpBckCENa37672021;     lcpBckCENa37672021 = lcpBckCENa12890640;     lcpBckCENa12890640 = lcpBckCENa77481624;     lcpBckCENa77481624 = lcpBckCENa49146020;     lcpBckCENa49146020 = lcpBckCENa3614787;     lcpBckCENa3614787 = lcpBckCENa19612108;     lcpBckCENa19612108 = lcpBckCENa62215381;     lcpBckCENa62215381 = lcpBckCENa70966297;     lcpBckCENa70966297 = lcpBckCENa6012546;     lcpBckCENa6012546 = lcpBckCENa86011095;     lcpBckCENa86011095 = lcpBckCENa85068920;     lcpBckCENa85068920 = lcpBckCENa18911812;     lcpBckCENa18911812 = lcpBckCENa71390653;     lcpBckCENa71390653 = lcpBckCENa37210584;     lcpBckCENa37210584 = lcpBckCENa32957035;     lcpBckCENa32957035 = lcpBckCENa59050095;     lcpBckCENa59050095 = lcpBckCENa29082373;     lcpBckCENa29082373 = lcpBckCENa85749127;     lcpBckCENa85749127 = lcpBckCENa62311008;     lcpBckCENa62311008 = lcpBckCENa89951541;     lcpBckCENa89951541 = lcpBckCENa10403933;     lcpBckCENa10403933 = lcpBckCENa76038988;     lcpBckCENa76038988 = lcpBckCENa43315028;     lcpBckCENa43315028 = lcpBckCENa59192737;     lcpBckCENa59192737 = lcpBckCENa39620637;     lcpBckCENa39620637 = lcpBckCENa26485900;     lcpBckCENa26485900 = lcpBckCENa24673632;     lcpBckCENa24673632 = lcpBckCENa37362960;     lcpBckCENa37362960 = lcpBckCENa3164026;     lcpBckCENa3164026 = lcpBckCENa56445652;     lcpBckCENa56445652 = lcpBckCENa12845114;     lcpBckCENa12845114 = lcpBckCENa79459862;     lcpBckCENa79459862 = lcpBckCENa1386506;     lcpBckCENa1386506 = lcpBckCENa10000132;     lcpBckCENa10000132 = lcpBckCENa20119011;     lcpBckCENa20119011 = lcpBckCENa68395829;     lcpBckCENa68395829 = lcpBckCENa96790255;     lcpBckCENa96790255 = lcpBckCENa28594958;     lcpBckCENa28594958 = lcpBckCENa65465905;     lcpBckCENa65465905 = lcpBckCENa13680867;     lcpBckCENa13680867 = lcpBckCENa22216812;     lcpBckCENa22216812 = lcpBckCENa29905957;     lcpBckCENa29905957 = lcpBckCENa48933263;     lcpBckCENa48933263 = lcpBckCENa49629824;     lcpBckCENa49629824 = lcpBckCENa9614326;     lcpBckCENa9614326 = lcpBckCENa54689181;     lcpBckCENa54689181 = lcpBckCENa44960619;     lcpBckCENa44960619 = lcpBckCENa14201702;     lcpBckCENa14201702 = lcpBckCENa69708915;     lcpBckCENa69708915 = lcpBckCENa19930076;     lcpBckCENa19930076 = lcpBckCENa54170524;     lcpBckCENa54170524 = lcpBckCENa12239708;     lcpBckCENa12239708 = lcpBckCENa78905869;     lcpBckCENa78905869 = lcpBckCENa11661864;     lcpBckCENa11661864 = lcpBckCENa63943346;     lcpBckCENa63943346 = lcpBckCENa61633032;     lcpBckCENa61633032 = lcpBckCENa69575612;     lcpBckCENa69575612 = lcpBckCENa18288887;     lcpBckCENa18288887 = lcpBckCENa9525383;     lcpBckCENa9525383 = lcpBckCENa77128886;     lcpBckCENa77128886 = lcpBckCENa94938475;     lcpBckCENa94938475 = lcpBckCENa24852422;     lcpBckCENa24852422 = lcpBckCENa67802271;     lcpBckCENa67802271 = lcpBckCENa49566893;     lcpBckCENa49566893 = lcpBckCENa73165982;     lcpBckCENa73165982 = lcpBckCENa5609058;     lcpBckCENa5609058 = lcpBckCENa17525307;     lcpBckCENa17525307 = lcpBckCENa61390522;     lcpBckCENa61390522 = lcpBckCENa17091573;     lcpBckCENa17091573 = lcpBckCENa64561205;     lcpBckCENa64561205 = lcpBckCENa62259839;     lcpBckCENa62259839 = lcpBckCENa487416;     lcpBckCENa487416 = lcpBckCENa20283222;     lcpBckCENa20283222 = lcpBckCENa48630142;     lcpBckCENa48630142 = lcpBckCENa67734730;     lcpBckCENa67734730 = lcpBckCENa10833949;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void MqPMefYREl22039217() {     int oItcWCVAWS52410024 = -692701061;    int oItcWCVAWS77322098 = -291988415;    int oItcWCVAWS56428571 = -885962762;    int oItcWCVAWS83645545 = -466537174;    int oItcWCVAWS82971789 = -692002697;    int oItcWCVAWS8926544 = -630066045;    int oItcWCVAWS45418253 = -868499480;    int oItcWCVAWS89632429 = -186913562;    int oItcWCVAWS35240792 = -340790626;    int oItcWCVAWS89425345 = -968636069;    int oItcWCVAWS82724217 = -672785854;    int oItcWCVAWS33263445 = -202433049;    int oItcWCVAWS79389572 = 95067464;    int oItcWCVAWS71925460 = 98022662;    int oItcWCVAWS48620190 = -450541418;    int oItcWCVAWS98647687 = -621788761;    int oItcWCVAWS66023211 = -180004613;    int oItcWCVAWS48225630 = -529185391;    int oItcWCVAWS65046121 = -750625314;    int oItcWCVAWS53367554 = -477297683;    int oItcWCVAWS84892953 = -541753856;    int oItcWCVAWS87931383 = -311425463;    int oItcWCVAWS47333049 = -391119602;    int oItcWCVAWS79398724 = -892027329;    int oItcWCVAWS26064880 = -253123284;    int oItcWCVAWS73091867 = -158429512;    int oItcWCVAWS71770992 = -887675281;    int oItcWCVAWS31317175 = -167489704;    int oItcWCVAWS61946490 = -639852699;    int oItcWCVAWS77763834 = -217605438;    int oItcWCVAWS30437889 = -874787223;    int oItcWCVAWS97649021 = -570896884;    int oItcWCVAWS92895256 = -707176341;    int oItcWCVAWS30591536 = -333037115;    int oItcWCVAWS13294202 = -671934282;    int oItcWCVAWS5355678 = 51208971;    int oItcWCVAWS49585563 = 16462588;    int oItcWCVAWS56696269 = 1653639;    int oItcWCVAWS41211399 = -374266579;    int oItcWCVAWS84730504 = -987062101;    int oItcWCVAWS98170926 = 94659187;    int oItcWCVAWS50597957 = -235505425;    int oItcWCVAWS53199484 = -803733835;    int oItcWCVAWS89850086 = -3465931;    int oItcWCVAWS1920466 = -790242973;    int oItcWCVAWS68304456 = -968534037;    int oItcWCVAWS13162726 = -196954586;    int oItcWCVAWS68998280 = 92248980;    int oItcWCVAWS91761132 = -104812334;    int oItcWCVAWS77061879 = -854886756;    int oItcWCVAWS42957302 = -895227047;    int oItcWCVAWS18968824 = -118782422;    int oItcWCVAWS54232566 = -196426908;    int oItcWCVAWS15124753 = -83213391;    int oItcWCVAWS37146263 = -172948182;    int oItcWCVAWS64478640 = -281275598;    int oItcWCVAWS29989049 = -900868814;    int oItcWCVAWS77029846 = -993935433;    int oItcWCVAWS57580665 = -113413890;    int oItcWCVAWS9879922 = -433573186;    int oItcWCVAWS37155552 = -742390765;    int oItcWCVAWS14101078 = -601009777;    int oItcWCVAWS27685940 = -547060863;    int oItcWCVAWS57476958 = -23185189;    int oItcWCVAWS58987457 = 6151154;    int oItcWCVAWS85075196 = -1888971;    int oItcWCVAWS40368189 = -495256709;    int oItcWCVAWS48798036 = -571895422;    int oItcWCVAWS58631259 = -230043056;    int oItcWCVAWS43264512 = -401750390;    int oItcWCVAWS49062124 = -538251349;    int oItcWCVAWS9326942 = -81658252;    int oItcWCVAWS7014232 = -54918812;    int oItcWCVAWS80315617 = -763563214;    int oItcWCVAWS55196628 = -471956871;    int oItcWCVAWS34294997 = -206248432;    int oItcWCVAWS34731900 = -507691629;    int oItcWCVAWS57482962 = -287653671;    int oItcWCVAWS77478259 = -1784357;    int oItcWCVAWS57760423 = -284589248;    int oItcWCVAWS59929142 = -961474927;    int oItcWCVAWS2772712 = -879924262;    int oItcWCVAWS39556042 = 37322630;    int oItcWCVAWS84884611 = -784965944;    int oItcWCVAWS34806532 = -322378391;    int oItcWCVAWS11469065 = -656004801;    int oItcWCVAWS43416456 = -274469976;    int oItcWCVAWS77770503 = -523962950;    int oItcWCVAWS93445272 = -60088933;    int oItcWCVAWS48815561 = -290658684;    int oItcWCVAWS75366628 = -47922215;    int oItcWCVAWS72555716 = 10398020;    int oItcWCVAWS99115603 = -884932472;    int oItcWCVAWS31331477 = -940693394;    int oItcWCVAWS47574953 = -144671337;    int oItcWCVAWS84069849 = -304331037;    int oItcWCVAWS22912017 = -688444562;    int oItcWCVAWS95722525 = -680548647;    int oItcWCVAWS30862630 = 90382914;    int oItcWCVAWS16845270 = -692701061;     oItcWCVAWS52410024 = oItcWCVAWS77322098;     oItcWCVAWS77322098 = oItcWCVAWS56428571;     oItcWCVAWS56428571 = oItcWCVAWS83645545;     oItcWCVAWS83645545 = oItcWCVAWS82971789;     oItcWCVAWS82971789 = oItcWCVAWS8926544;     oItcWCVAWS8926544 = oItcWCVAWS45418253;     oItcWCVAWS45418253 = oItcWCVAWS89632429;     oItcWCVAWS89632429 = oItcWCVAWS35240792;     oItcWCVAWS35240792 = oItcWCVAWS89425345;     oItcWCVAWS89425345 = oItcWCVAWS82724217;     oItcWCVAWS82724217 = oItcWCVAWS33263445;     oItcWCVAWS33263445 = oItcWCVAWS79389572;     oItcWCVAWS79389572 = oItcWCVAWS71925460;     oItcWCVAWS71925460 = oItcWCVAWS48620190;     oItcWCVAWS48620190 = oItcWCVAWS98647687;     oItcWCVAWS98647687 = oItcWCVAWS66023211;     oItcWCVAWS66023211 = oItcWCVAWS48225630;     oItcWCVAWS48225630 = oItcWCVAWS65046121;     oItcWCVAWS65046121 = oItcWCVAWS53367554;     oItcWCVAWS53367554 = oItcWCVAWS84892953;     oItcWCVAWS84892953 = oItcWCVAWS87931383;     oItcWCVAWS87931383 = oItcWCVAWS47333049;     oItcWCVAWS47333049 = oItcWCVAWS79398724;     oItcWCVAWS79398724 = oItcWCVAWS26064880;     oItcWCVAWS26064880 = oItcWCVAWS73091867;     oItcWCVAWS73091867 = oItcWCVAWS71770992;     oItcWCVAWS71770992 = oItcWCVAWS31317175;     oItcWCVAWS31317175 = oItcWCVAWS61946490;     oItcWCVAWS61946490 = oItcWCVAWS77763834;     oItcWCVAWS77763834 = oItcWCVAWS30437889;     oItcWCVAWS30437889 = oItcWCVAWS97649021;     oItcWCVAWS97649021 = oItcWCVAWS92895256;     oItcWCVAWS92895256 = oItcWCVAWS30591536;     oItcWCVAWS30591536 = oItcWCVAWS13294202;     oItcWCVAWS13294202 = oItcWCVAWS5355678;     oItcWCVAWS5355678 = oItcWCVAWS49585563;     oItcWCVAWS49585563 = oItcWCVAWS56696269;     oItcWCVAWS56696269 = oItcWCVAWS41211399;     oItcWCVAWS41211399 = oItcWCVAWS84730504;     oItcWCVAWS84730504 = oItcWCVAWS98170926;     oItcWCVAWS98170926 = oItcWCVAWS50597957;     oItcWCVAWS50597957 = oItcWCVAWS53199484;     oItcWCVAWS53199484 = oItcWCVAWS89850086;     oItcWCVAWS89850086 = oItcWCVAWS1920466;     oItcWCVAWS1920466 = oItcWCVAWS68304456;     oItcWCVAWS68304456 = oItcWCVAWS13162726;     oItcWCVAWS13162726 = oItcWCVAWS68998280;     oItcWCVAWS68998280 = oItcWCVAWS91761132;     oItcWCVAWS91761132 = oItcWCVAWS77061879;     oItcWCVAWS77061879 = oItcWCVAWS42957302;     oItcWCVAWS42957302 = oItcWCVAWS18968824;     oItcWCVAWS18968824 = oItcWCVAWS54232566;     oItcWCVAWS54232566 = oItcWCVAWS15124753;     oItcWCVAWS15124753 = oItcWCVAWS37146263;     oItcWCVAWS37146263 = oItcWCVAWS64478640;     oItcWCVAWS64478640 = oItcWCVAWS29989049;     oItcWCVAWS29989049 = oItcWCVAWS77029846;     oItcWCVAWS77029846 = oItcWCVAWS57580665;     oItcWCVAWS57580665 = oItcWCVAWS9879922;     oItcWCVAWS9879922 = oItcWCVAWS37155552;     oItcWCVAWS37155552 = oItcWCVAWS14101078;     oItcWCVAWS14101078 = oItcWCVAWS27685940;     oItcWCVAWS27685940 = oItcWCVAWS57476958;     oItcWCVAWS57476958 = oItcWCVAWS58987457;     oItcWCVAWS58987457 = oItcWCVAWS85075196;     oItcWCVAWS85075196 = oItcWCVAWS40368189;     oItcWCVAWS40368189 = oItcWCVAWS48798036;     oItcWCVAWS48798036 = oItcWCVAWS58631259;     oItcWCVAWS58631259 = oItcWCVAWS43264512;     oItcWCVAWS43264512 = oItcWCVAWS49062124;     oItcWCVAWS49062124 = oItcWCVAWS9326942;     oItcWCVAWS9326942 = oItcWCVAWS7014232;     oItcWCVAWS7014232 = oItcWCVAWS80315617;     oItcWCVAWS80315617 = oItcWCVAWS55196628;     oItcWCVAWS55196628 = oItcWCVAWS34294997;     oItcWCVAWS34294997 = oItcWCVAWS34731900;     oItcWCVAWS34731900 = oItcWCVAWS57482962;     oItcWCVAWS57482962 = oItcWCVAWS77478259;     oItcWCVAWS77478259 = oItcWCVAWS57760423;     oItcWCVAWS57760423 = oItcWCVAWS59929142;     oItcWCVAWS59929142 = oItcWCVAWS2772712;     oItcWCVAWS2772712 = oItcWCVAWS39556042;     oItcWCVAWS39556042 = oItcWCVAWS84884611;     oItcWCVAWS84884611 = oItcWCVAWS34806532;     oItcWCVAWS34806532 = oItcWCVAWS11469065;     oItcWCVAWS11469065 = oItcWCVAWS43416456;     oItcWCVAWS43416456 = oItcWCVAWS77770503;     oItcWCVAWS77770503 = oItcWCVAWS93445272;     oItcWCVAWS93445272 = oItcWCVAWS48815561;     oItcWCVAWS48815561 = oItcWCVAWS75366628;     oItcWCVAWS75366628 = oItcWCVAWS72555716;     oItcWCVAWS72555716 = oItcWCVAWS99115603;     oItcWCVAWS99115603 = oItcWCVAWS31331477;     oItcWCVAWS31331477 = oItcWCVAWS47574953;     oItcWCVAWS47574953 = oItcWCVAWS84069849;     oItcWCVAWS84069849 = oItcWCVAWS22912017;     oItcWCVAWS22912017 = oItcWCVAWS95722525;     oItcWCVAWS95722525 = oItcWCVAWS30862630;     oItcWCVAWS30862630 = oItcWCVAWS16845270;     oItcWCVAWS16845270 = oItcWCVAWS52410024;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void fZOjJrHmKM35468612() {     int eVolGDvskW42237706 = -899673300;    int eVolGDvskW95438106 = -990430297;    int eVolGDvskW63683296 = -819360601;    int eVolGDvskW78028000 = -303249393;    int eVolGDvskW49108819 = -347311403;    int eVolGDvskW81294128 = -396748573;    int eVolGDvskW79882453 = -438051529;    int eVolGDvskW21160505 = -502596696;    int eVolGDvskW15583145 = -233598128;    int eVolGDvskW70039620 = -794266304;    int eVolGDvskW26364755 = -309452842;    int eVolGDvskW83881612 = -46935247;    int eVolGDvskW80358370 = -230972817;    int eVolGDvskW57130722 = -374204871;    int eVolGDvskW38886093 = -992126594;    int eVolGDvskW61096204 = -84507257;    int eVolGDvskW71430144 = -594658728;    int eVolGDvskW5357119 = -599702851;    int eVolGDvskW8708984 = 18991818;    int eVolGDvskW52172890 = -574542422;    int eVolGDvskW124506 = -492640580;    int eVolGDvskW32047010 = -52494232;    int eVolGDvskW25856500 = 15052491;    int eVolGDvskW51834010 = -415406015;    int eVolGDvskW63252001 = -458037785;    int eVolGDvskW83954454 = -296463720;    int eVolGDvskW32265873 = -733812333;    int eVolGDvskW57830550 = -137794123;    int eVolGDvskW25353782 = -478571934;    int eVolGDvskW34107538 = -58545427;    int eVolGDvskW70870218 = -681392651;    int eVolGDvskW89500646 = -513184445;    int eVolGDvskW87635752 = -568892234;    int eVolGDvskW61712489 = -242038993;    int eVolGDvskW7088255 = -463585844;    int eVolGDvskW29599204 = -300745106;    int eVolGDvskW54493823 = -456821335;    int eVolGDvskW81003632 = -759520946;    int eVolGDvskW46064565 = -999111790;    int eVolGDvskW55167344 = -626011575;    int eVolGDvskW44319007 = -896542630;    int eVolGDvskW83483462 = -499257537;    int eVolGDvskW84633328 = -555203182;    int eVolGDvskW42917143 = -915681489;    int eVolGDvskW9896286 = -624674009;    int eVolGDvskW5366470 = -192871186;    int eVolGDvskW19515855 = -199937275;    int eVolGDvskW66464230 = -897291162;    int eVolGDvskW72627853 = -117861196;    int eVolGDvskW65937708 = -747962772;    int eVolGDvskW45267551 = -60403134;    int eVolGDvskW10378779 = -435853025;    int eVolGDvskW98760122 = -884256878;    int eVolGDvskW77526780 = -944232426;    int eVolGDvskW35344107 = -704005465;    int eVolGDvskW10190696 = -747179068;    int eVolGDvskW69581606 = -905482788;    int eVolGDvskW11849287 = -303954586;    int eVolGDvskW14775999 = -845211609;    int eVolGDvskW65154364 = 49152316;    int eVolGDvskW49028255 = -662936240;    int eVolGDvskW22051903 = -200257407;    int eVolGDvskW95806723 = 75975238;    int eVolGDvskW81475606 = -75052701;    int eVolGDvskW99169401 = -12873654;    int eVolGDvskW36864108 = -796268398;    int eVolGDvskW96245859 = -478043013;    int eVolGDvskW18645882 = -988933825;    int eVolGDvskW50042467 = -910619027;    int eVolGDvskW9286890 = -591381489;    int eVolGDvskW6602381 = -627685923;    int eVolGDvskW90426512 = -835137783;    int eVolGDvskW59292553 = -600591061;    int eVolGDvskW53541640 = -354996608;    int eVolGDvskW7853883 = -677999792;    int eVolGDvskW16641043 = -993383044;    int eVolGDvskW47413681 = -497291051;    int eVolGDvskW82939356 = -69266021;    int eVolGDvskW41937724 = -790732007;    int eVolGDvskW57885532 = -165166599;    int eVolGDvskW64438600 = 3473555;    int eVolGDvskW65801642 = -836521172;    int eVolGDvskW85202696 = 80067073;    int eVolGDvskW59416073 = -730609162;    int eVolGDvskW88839986 = -998142294;    int eVolGDvskW60491440 = -145539626;    int eVolGDvskW90740524 = -628927568;    int eVolGDvskW10108972 = -624659809;    int eVolGDvskW26368383 = -538033528;    int eVolGDvskW96897559 = -716406777;    int eVolGDvskW60017597 = -395262318;    int eVolGDvskW42644537 = -52866749;    int eVolGDvskW66227633 = -914309338;    int eVolGDvskW80910201 = -948264107;    int eVolGDvskW6139089 = -963075336;    int eVolGDvskW22267104 = -596285224;    int eVolGDvskW87676738 = -475232775;    int eVolGDvskW3157722 = -380150481;    int eVolGDvskW43747741 = -802807836;    int eVolGDvskW73032178 = -899673300;     eVolGDvskW42237706 = eVolGDvskW95438106;     eVolGDvskW95438106 = eVolGDvskW63683296;     eVolGDvskW63683296 = eVolGDvskW78028000;     eVolGDvskW78028000 = eVolGDvskW49108819;     eVolGDvskW49108819 = eVolGDvskW81294128;     eVolGDvskW81294128 = eVolGDvskW79882453;     eVolGDvskW79882453 = eVolGDvskW21160505;     eVolGDvskW21160505 = eVolGDvskW15583145;     eVolGDvskW15583145 = eVolGDvskW70039620;     eVolGDvskW70039620 = eVolGDvskW26364755;     eVolGDvskW26364755 = eVolGDvskW83881612;     eVolGDvskW83881612 = eVolGDvskW80358370;     eVolGDvskW80358370 = eVolGDvskW57130722;     eVolGDvskW57130722 = eVolGDvskW38886093;     eVolGDvskW38886093 = eVolGDvskW61096204;     eVolGDvskW61096204 = eVolGDvskW71430144;     eVolGDvskW71430144 = eVolGDvskW5357119;     eVolGDvskW5357119 = eVolGDvskW8708984;     eVolGDvskW8708984 = eVolGDvskW52172890;     eVolGDvskW52172890 = eVolGDvskW124506;     eVolGDvskW124506 = eVolGDvskW32047010;     eVolGDvskW32047010 = eVolGDvskW25856500;     eVolGDvskW25856500 = eVolGDvskW51834010;     eVolGDvskW51834010 = eVolGDvskW63252001;     eVolGDvskW63252001 = eVolGDvskW83954454;     eVolGDvskW83954454 = eVolGDvskW32265873;     eVolGDvskW32265873 = eVolGDvskW57830550;     eVolGDvskW57830550 = eVolGDvskW25353782;     eVolGDvskW25353782 = eVolGDvskW34107538;     eVolGDvskW34107538 = eVolGDvskW70870218;     eVolGDvskW70870218 = eVolGDvskW89500646;     eVolGDvskW89500646 = eVolGDvskW87635752;     eVolGDvskW87635752 = eVolGDvskW61712489;     eVolGDvskW61712489 = eVolGDvskW7088255;     eVolGDvskW7088255 = eVolGDvskW29599204;     eVolGDvskW29599204 = eVolGDvskW54493823;     eVolGDvskW54493823 = eVolGDvskW81003632;     eVolGDvskW81003632 = eVolGDvskW46064565;     eVolGDvskW46064565 = eVolGDvskW55167344;     eVolGDvskW55167344 = eVolGDvskW44319007;     eVolGDvskW44319007 = eVolGDvskW83483462;     eVolGDvskW83483462 = eVolGDvskW84633328;     eVolGDvskW84633328 = eVolGDvskW42917143;     eVolGDvskW42917143 = eVolGDvskW9896286;     eVolGDvskW9896286 = eVolGDvskW5366470;     eVolGDvskW5366470 = eVolGDvskW19515855;     eVolGDvskW19515855 = eVolGDvskW66464230;     eVolGDvskW66464230 = eVolGDvskW72627853;     eVolGDvskW72627853 = eVolGDvskW65937708;     eVolGDvskW65937708 = eVolGDvskW45267551;     eVolGDvskW45267551 = eVolGDvskW10378779;     eVolGDvskW10378779 = eVolGDvskW98760122;     eVolGDvskW98760122 = eVolGDvskW77526780;     eVolGDvskW77526780 = eVolGDvskW35344107;     eVolGDvskW35344107 = eVolGDvskW10190696;     eVolGDvskW10190696 = eVolGDvskW69581606;     eVolGDvskW69581606 = eVolGDvskW11849287;     eVolGDvskW11849287 = eVolGDvskW14775999;     eVolGDvskW14775999 = eVolGDvskW65154364;     eVolGDvskW65154364 = eVolGDvskW49028255;     eVolGDvskW49028255 = eVolGDvskW22051903;     eVolGDvskW22051903 = eVolGDvskW95806723;     eVolGDvskW95806723 = eVolGDvskW81475606;     eVolGDvskW81475606 = eVolGDvskW99169401;     eVolGDvskW99169401 = eVolGDvskW36864108;     eVolGDvskW36864108 = eVolGDvskW96245859;     eVolGDvskW96245859 = eVolGDvskW18645882;     eVolGDvskW18645882 = eVolGDvskW50042467;     eVolGDvskW50042467 = eVolGDvskW9286890;     eVolGDvskW9286890 = eVolGDvskW6602381;     eVolGDvskW6602381 = eVolGDvskW90426512;     eVolGDvskW90426512 = eVolGDvskW59292553;     eVolGDvskW59292553 = eVolGDvskW53541640;     eVolGDvskW53541640 = eVolGDvskW7853883;     eVolGDvskW7853883 = eVolGDvskW16641043;     eVolGDvskW16641043 = eVolGDvskW47413681;     eVolGDvskW47413681 = eVolGDvskW82939356;     eVolGDvskW82939356 = eVolGDvskW41937724;     eVolGDvskW41937724 = eVolGDvskW57885532;     eVolGDvskW57885532 = eVolGDvskW64438600;     eVolGDvskW64438600 = eVolGDvskW65801642;     eVolGDvskW65801642 = eVolGDvskW85202696;     eVolGDvskW85202696 = eVolGDvskW59416073;     eVolGDvskW59416073 = eVolGDvskW88839986;     eVolGDvskW88839986 = eVolGDvskW60491440;     eVolGDvskW60491440 = eVolGDvskW90740524;     eVolGDvskW90740524 = eVolGDvskW10108972;     eVolGDvskW10108972 = eVolGDvskW26368383;     eVolGDvskW26368383 = eVolGDvskW96897559;     eVolGDvskW96897559 = eVolGDvskW60017597;     eVolGDvskW60017597 = eVolGDvskW42644537;     eVolGDvskW42644537 = eVolGDvskW66227633;     eVolGDvskW66227633 = eVolGDvskW80910201;     eVolGDvskW80910201 = eVolGDvskW6139089;     eVolGDvskW6139089 = eVolGDvskW22267104;     eVolGDvskW22267104 = eVolGDvskW87676738;     eVolGDvskW87676738 = eVolGDvskW3157722;     eVolGDvskW3157722 = eVolGDvskW43747741;     eVolGDvskW43747741 = eVolGDvskW73032178;     eVolGDvskW73032178 = eVolGDvskW42237706;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void wMCUtnKwgY29091083() {     long xzFtsSebhp47059607 = -228509004;    long xzFtsSebhp13939069 = -983195070;    long xzFtsSebhp93722168 = -764603403;    long xzFtsSebhp28285207 = -7826268;    long xzFtsSebhp32460332 = -108666042;    long xzFtsSebhp24329093 = -447947236;    long xzFtsSebhp36461911 = -107638993;    long xzFtsSebhp8533700 = 87987153;    long xzFtsSebhp78741579 = -888040426;    long xzFtsSebhp70112978 = -447255635;    long xzFtsSebhp83336980 = -773836350;    long xzFtsSebhp32491584 = -819923352;    long xzFtsSebhp34538902 = -720073392;    long xzFtsSebhp79070712 = -634080018;    long xzFtsSebhp83324839 = -396832185;    long xzFtsSebhp23810652 = -470375622;    long xzFtsSebhp28035859 = 14843528;    long xzFtsSebhp80268115 = -541923419;    long xzFtsSebhp99240857 = -820018778;    long xzFtsSebhp63563642 = -32577262;    long xzFtsSebhp85078172 = -6411212;    long xzFtsSebhp22227017 = -907146097;    long xzFtsSebhp86005397 = -298340661;    long xzFtsSebhp22457253 = -74825780;    long xzFtsSebhp77427777 = -103490759;    long xzFtsSebhp53155609 = -600992479;    long xzFtsSebhp83376773 = -844238375;    long xzFtsSebhp26423513 = -395053639;    long xzFtsSebhp46165154 = -272303322;    long xzFtsSebhp29117777 = -458985451;    long xzFtsSebhp45634221 = -287010589;    long xzFtsSebhp27070021 = -604645676;    long xzFtsSebhp42791327 = -322405590;    long xzFtsSebhp7382300 = -720118292;    long xzFtsSebhp9898278 = -477979260;    long xzFtsSebhp64878835 = -747620791;    long xzFtsSebhp79401078 = -214545469;    long xzFtsSebhp82366569 = -696594875;    long xzFtsSebhp52288858 = -563356539;    long xzFtsSebhp37019467 = -86172161;    long xzFtsSebhp12209450 = -390517422;    long xzFtsSebhp91314749 = -262639384;    long xzFtsSebhp17954759 = -218110661;    long xzFtsSebhp74442331 = -855681082;    long xzFtsSebhp76640210 = -290441087;    long xzFtsSebhp59835801 = -773679845;    long xzFtsSebhp28684323 = -90428821;    long xzFtsSebhp90572125 = 80680566;    long xzFtsSebhp8643617 = -800342339;    long xzFtsSebhp25439934 = -472885756;    long xzFtsSebhp95855903 = -890961968;    long xzFtsSebhp9102986 = -39668343;    long xzFtsSebhp61129314 = -428340707;    long xzFtsSebhp61532335 = -317823419;    long xzFtsSebhp44012911 = -669483032;    long xzFtsSebhp24832590 = -321362908;    long xzFtsSebhp27933671 = -584854409;    long xzFtsSebhp71264916 = -589777623;    long xzFtsSebhp50857429 = -904335510;    long xzFtsSebhp79304723 = -507673563;    long xzFtsSebhp40952319 = -603708861;    long xzFtsSebhp10038399 = -712585354;    long xzFtsSebhp62368546 = -639709525;    long xzFtsSebhp49623802 = -329054976;    long xzFtsSebhp24478757 = -60245046;    long xzFtsSebhp56266960 = -69190674;    long xzFtsSebhp89700256 = -397517762;    long xzFtsSebhp27156602 = -999955100;    long xzFtsSebhp69172435 = -56100759;    long xzFtsSebhp18446004 = -649211394;    long xzFtsSebhp44409574 = -155830153;    long xzFtsSebhp45669289 = -288561597;    long xzFtsSebhp27979258 = -978566881;    long xzFtsSebhp62221391 = -633846618;    long xzFtsSebhp51354192 = -642059840;    long xzFtsSebhp93763422 = -743771828;    long xzFtsSebhp4272259 = -589035437;    long xzFtsSebhp11563067 = -442659580;    long xzFtsSebhp45817042 = -784384694;    long xzFtsSebhp17591976 = -329810915;    long xzFtsSebhp24471286 = -410563659;    long xzFtsSebhp92804648 = -824918942;    long xzFtsSebhp17779897 = -594711301;    long xzFtsSebhp20725220 = -799417567;    long xzFtsSebhp33261873 = -568023484;    long xzFtsSebhp36531235 = -147342246;    long xzFtsSebhp65940706 = -76304970;    long xzFtsSebhp81258992 = 95417828;    long xzFtsSebhp63369389 = 49364740;    long xzFtsSebhp85065687 = -56616353;    long xzFtsSebhp36945164 = -62766383;    long xzFtsSebhp8136163 = -624767846;    long xzFtsSebhp31509141 = -792259365;    long xzFtsSebhp72984134 = 44317024;    long xzFtsSebhp96067147 = -482463300;    long xzFtsSebhp2171052 = -677932068;    long xzFtsSebhp28946204 = -622929859;    long xzFtsSebhp68330956 = -889055686;    long xzFtsSebhp49963575 = -695436036;    long xzFtsSebhp20373251 = -228509004;     xzFtsSebhp47059607 = xzFtsSebhp13939069;     xzFtsSebhp13939069 = xzFtsSebhp93722168;     xzFtsSebhp93722168 = xzFtsSebhp28285207;     xzFtsSebhp28285207 = xzFtsSebhp32460332;     xzFtsSebhp32460332 = xzFtsSebhp24329093;     xzFtsSebhp24329093 = xzFtsSebhp36461911;     xzFtsSebhp36461911 = xzFtsSebhp8533700;     xzFtsSebhp8533700 = xzFtsSebhp78741579;     xzFtsSebhp78741579 = xzFtsSebhp70112978;     xzFtsSebhp70112978 = xzFtsSebhp83336980;     xzFtsSebhp83336980 = xzFtsSebhp32491584;     xzFtsSebhp32491584 = xzFtsSebhp34538902;     xzFtsSebhp34538902 = xzFtsSebhp79070712;     xzFtsSebhp79070712 = xzFtsSebhp83324839;     xzFtsSebhp83324839 = xzFtsSebhp23810652;     xzFtsSebhp23810652 = xzFtsSebhp28035859;     xzFtsSebhp28035859 = xzFtsSebhp80268115;     xzFtsSebhp80268115 = xzFtsSebhp99240857;     xzFtsSebhp99240857 = xzFtsSebhp63563642;     xzFtsSebhp63563642 = xzFtsSebhp85078172;     xzFtsSebhp85078172 = xzFtsSebhp22227017;     xzFtsSebhp22227017 = xzFtsSebhp86005397;     xzFtsSebhp86005397 = xzFtsSebhp22457253;     xzFtsSebhp22457253 = xzFtsSebhp77427777;     xzFtsSebhp77427777 = xzFtsSebhp53155609;     xzFtsSebhp53155609 = xzFtsSebhp83376773;     xzFtsSebhp83376773 = xzFtsSebhp26423513;     xzFtsSebhp26423513 = xzFtsSebhp46165154;     xzFtsSebhp46165154 = xzFtsSebhp29117777;     xzFtsSebhp29117777 = xzFtsSebhp45634221;     xzFtsSebhp45634221 = xzFtsSebhp27070021;     xzFtsSebhp27070021 = xzFtsSebhp42791327;     xzFtsSebhp42791327 = xzFtsSebhp7382300;     xzFtsSebhp7382300 = xzFtsSebhp9898278;     xzFtsSebhp9898278 = xzFtsSebhp64878835;     xzFtsSebhp64878835 = xzFtsSebhp79401078;     xzFtsSebhp79401078 = xzFtsSebhp82366569;     xzFtsSebhp82366569 = xzFtsSebhp52288858;     xzFtsSebhp52288858 = xzFtsSebhp37019467;     xzFtsSebhp37019467 = xzFtsSebhp12209450;     xzFtsSebhp12209450 = xzFtsSebhp91314749;     xzFtsSebhp91314749 = xzFtsSebhp17954759;     xzFtsSebhp17954759 = xzFtsSebhp74442331;     xzFtsSebhp74442331 = xzFtsSebhp76640210;     xzFtsSebhp76640210 = xzFtsSebhp59835801;     xzFtsSebhp59835801 = xzFtsSebhp28684323;     xzFtsSebhp28684323 = xzFtsSebhp90572125;     xzFtsSebhp90572125 = xzFtsSebhp8643617;     xzFtsSebhp8643617 = xzFtsSebhp25439934;     xzFtsSebhp25439934 = xzFtsSebhp95855903;     xzFtsSebhp95855903 = xzFtsSebhp9102986;     xzFtsSebhp9102986 = xzFtsSebhp61129314;     xzFtsSebhp61129314 = xzFtsSebhp61532335;     xzFtsSebhp61532335 = xzFtsSebhp44012911;     xzFtsSebhp44012911 = xzFtsSebhp24832590;     xzFtsSebhp24832590 = xzFtsSebhp27933671;     xzFtsSebhp27933671 = xzFtsSebhp71264916;     xzFtsSebhp71264916 = xzFtsSebhp50857429;     xzFtsSebhp50857429 = xzFtsSebhp79304723;     xzFtsSebhp79304723 = xzFtsSebhp40952319;     xzFtsSebhp40952319 = xzFtsSebhp10038399;     xzFtsSebhp10038399 = xzFtsSebhp62368546;     xzFtsSebhp62368546 = xzFtsSebhp49623802;     xzFtsSebhp49623802 = xzFtsSebhp24478757;     xzFtsSebhp24478757 = xzFtsSebhp56266960;     xzFtsSebhp56266960 = xzFtsSebhp89700256;     xzFtsSebhp89700256 = xzFtsSebhp27156602;     xzFtsSebhp27156602 = xzFtsSebhp69172435;     xzFtsSebhp69172435 = xzFtsSebhp18446004;     xzFtsSebhp18446004 = xzFtsSebhp44409574;     xzFtsSebhp44409574 = xzFtsSebhp45669289;     xzFtsSebhp45669289 = xzFtsSebhp27979258;     xzFtsSebhp27979258 = xzFtsSebhp62221391;     xzFtsSebhp62221391 = xzFtsSebhp51354192;     xzFtsSebhp51354192 = xzFtsSebhp93763422;     xzFtsSebhp93763422 = xzFtsSebhp4272259;     xzFtsSebhp4272259 = xzFtsSebhp11563067;     xzFtsSebhp11563067 = xzFtsSebhp45817042;     xzFtsSebhp45817042 = xzFtsSebhp17591976;     xzFtsSebhp17591976 = xzFtsSebhp24471286;     xzFtsSebhp24471286 = xzFtsSebhp92804648;     xzFtsSebhp92804648 = xzFtsSebhp17779897;     xzFtsSebhp17779897 = xzFtsSebhp20725220;     xzFtsSebhp20725220 = xzFtsSebhp33261873;     xzFtsSebhp33261873 = xzFtsSebhp36531235;     xzFtsSebhp36531235 = xzFtsSebhp65940706;     xzFtsSebhp65940706 = xzFtsSebhp81258992;     xzFtsSebhp81258992 = xzFtsSebhp63369389;     xzFtsSebhp63369389 = xzFtsSebhp85065687;     xzFtsSebhp85065687 = xzFtsSebhp36945164;     xzFtsSebhp36945164 = xzFtsSebhp8136163;     xzFtsSebhp8136163 = xzFtsSebhp31509141;     xzFtsSebhp31509141 = xzFtsSebhp72984134;     xzFtsSebhp72984134 = xzFtsSebhp96067147;     xzFtsSebhp96067147 = xzFtsSebhp2171052;     xzFtsSebhp2171052 = xzFtsSebhp28946204;     xzFtsSebhp28946204 = xzFtsSebhp68330956;     xzFtsSebhp68330956 = xzFtsSebhp49963575;     xzFtsSebhp49963575 = xzFtsSebhp20373251;     xzFtsSebhp20373251 = xzFtsSebhp47059607;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void xlPMeJIvGE45242648() {     long YkVedsmVma79034731 = -207324522;    long YkVedsmVma73007814 = -795137416;    long YkVedsmVma36134350 = -749808937;    long YkVedsmVma20517479 = -937520715;    long YkVedsmVma52977940 = -635674222;    long YkVedsmVma80396120 = -891106302;    long YkVedsmVma36660303 = -815014469;    long YkVedsmVma71510405 = -917042513;    long YkVedsmVma43143359 = -121966551;    long YkVedsmVma40700469 = -502264410;    long YkVedsmVma71574528 = -571343280;    long YkVedsmVma40930331 = -285037848;    long YkVedsmVma62117788 = -997042323;    long YkVedsmVma22364579 = -947388437;    long YkVedsmVma23833058 = -770227484;    long YkVedsmVma33026503 = -248410619;    long YkVedsmVma83636263 = -515170784;    long YkVedsmVma54663529 = -484341741;    long YkVedsmVma21500029 = -216718367;    long YkVedsmVma62089238 = -62650932;    long YkVedsmVma66009178 = -19002312;    long YkVedsmVma77402165 = -566804142;    long YkVedsmVma27588542 = -537413635;    long YkVedsmVma18249914 = -604307527;    long YkVedsmVma99499390 = 10445210;    long YkVedsmVma81591106 = -514761585;    long YkVedsmVma6583242 = -327304507;    long YkVedsmVma41700538 = 83901582;    long YkVedsmVma68690116 = -938740950;    long YkVedsmVma46860760 = -20553777;    long YkVedsmVma56605193 = -947412612;    long YkVedsmVma8281294 = -513712230;    long YkVedsmVma29727566 = -809126227;    long YkVedsmVma49648976 = -116981239;    long YkVedsmVma44012551 = -514088074;    long YkVedsmVma38696838 = -649379932;    long YkVedsmVma53399178 = -89838778;    long YkVedsmVma71750108 = -502751085;    long YkVedsmVma13756928 = -748960857;    long YkVedsmVma94871951 = -833066746;    long YkVedsmVma84004218 = -97286558;    long YkVedsmVma32024398 = -267729596;    long YkVedsmVma14738393 = 12001108;    long YkVedsmVma47165829 = -723165024;    long YkVedsmVma634358 = -962476886;    long YkVedsmVma83264172 = -688908938;    long YkVedsmVma31092684 = -612295519;    long YkVedsmVma1096671 = -494559349;    long YkVedsmVma90816155 = -763701484;    long YkVedsmVma12747851 = -419939583;    long YkVedsmVma21785583 = -505340228;    long YkVedsmVma57723468 = -94413066;    long YkVedsmVma34169667 = -480267901;    long YkVedsmVma57906242 = -143572997;    long YkVedsmVma79233470 = -470245332;    long YkVedsmVma1632566 = -640520380;    long YkVedsmVma45419273 = -157723782;    long YkVedsmVma17884436 = -45501410;    long YkVedsmVma21018088 = -847965926;    long YkVedsmVma71386833 = -20912638;    long YkVedsmVma73812879 = -463801796;    long YkVedsmVma94959765 = -798916051;    long YkVedsmVma2820290 = -978301563;    long YkVedsmVma96282598 = -1412775;    long YkVedsmVma84095276 = -554851798;    long YkVedsmVma63293234 = 42368950;    long YkVedsmVma11202766 = -475911621;    long YkVedsmVma12468812 = -780061084;    long YkVedsmVma78352028 = -333300363;    long YkVedsmVma85136220 = -20847552;    long YkVedsmVma79627325 = -58571841;    long YkVedsmVma11886156 = 87580301;    long YkVedsmVma40906602 = -735380885;    long YkVedsmVma26628077 = -383651621;    long YkVedsmVma78085019 = -965364375;    long YkVedsmVma33984780 = -751272716;    long YkVedsmVma62663773 = -478805251;    long YkVedsmVma80422713 = -814248611;    long YkVedsmVma17615557 = -641830642;    long YkVedsmVma16235219 = -300645853;    long YkVedsmVma50498423 = -902466066;    long YkVedsmVma5486572 = -832745159;    long YkVedsmVma50884382 = -152396935;    long YkVedsmVma55942266 = -418801368;    long YkVedsmVma25075178 = -515213549;    long YkVedsmVma98881724 = -752999547;    long YkVedsmVma74111626 = 66555671;    long YkVedsmVma71821323 = -565553231;    long YkVedsmVma70415506 = -646735908;    long YkVedsmVma42379985 = -873567695;    long YkVedsmVma93277565 = -391656151;    long YkVedsmVma35514742 = 55662632;    long YkVedsmVma50732020 = -654785160;    long YkVedsmVma42370094 = -628048220;    long YkVedsmVma21059073 = -269264951;    long YkVedsmVma89044453 = -298370508;    long YkVedsmVma29204109 = -289428034;    long YkVedsmVma18455794 = -986586117;    long YkVedsmVma63070552 = -68313226;    long YkVedsmVma37341123 = -207324522;     YkVedsmVma79034731 = YkVedsmVma73007814;     YkVedsmVma73007814 = YkVedsmVma36134350;     YkVedsmVma36134350 = YkVedsmVma20517479;     YkVedsmVma20517479 = YkVedsmVma52977940;     YkVedsmVma52977940 = YkVedsmVma80396120;     YkVedsmVma80396120 = YkVedsmVma36660303;     YkVedsmVma36660303 = YkVedsmVma71510405;     YkVedsmVma71510405 = YkVedsmVma43143359;     YkVedsmVma43143359 = YkVedsmVma40700469;     YkVedsmVma40700469 = YkVedsmVma71574528;     YkVedsmVma71574528 = YkVedsmVma40930331;     YkVedsmVma40930331 = YkVedsmVma62117788;     YkVedsmVma62117788 = YkVedsmVma22364579;     YkVedsmVma22364579 = YkVedsmVma23833058;     YkVedsmVma23833058 = YkVedsmVma33026503;     YkVedsmVma33026503 = YkVedsmVma83636263;     YkVedsmVma83636263 = YkVedsmVma54663529;     YkVedsmVma54663529 = YkVedsmVma21500029;     YkVedsmVma21500029 = YkVedsmVma62089238;     YkVedsmVma62089238 = YkVedsmVma66009178;     YkVedsmVma66009178 = YkVedsmVma77402165;     YkVedsmVma77402165 = YkVedsmVma27588542;     YkVedsmVma27588542 = YkVedsmVma18249914;     YkVedsmVma18249914 = YkVedsmVma99499390;     YkVedsmVma99499390 = YkVedsmVma81591106;     YkVedsmVma81591106 = YkVedsmVma6583242;     YkVedsmVma6583242 = YkVedsmVma41700538;     YkVedsmVma41700538 = YkVedsmVma68690116;     YkVedsmVma68690116 = YkVedsmVma46860760;     YkVedsmVma46860760 = YkVedsmVma56605193;     YkVedsmVma56605193 = YkVedsmVma8281294;     YkVedsmVma8281294 = YkVedsmVma29727566;     YkVedsmVma29727566 = YkVedsmVma49648976;     YkVedsmVma49648976 = YkVedsmVma44012551;     YkVedsmVma44012551 = YkVedsmVma38696838;     YkVedsmVma38696838 = YkVedsmVma53399178;     YkVedsmVma53399178 = YkVedsmVma71750108;     YkVedsmVma71750108 = YkVedsmVma13756928;     YkVedsmVma13756928 = YkVedsmVma94871951;     YkVedsmVma94871951 = YkVedsmVma84004218;     YkVedsmVma84004218 = YkVedsmVma32024398;     YkVedsmVma32024398 = YkVedsmVma14738393;     YkVedsmVma14738393 = YkVedsmVma47165829;     YkVedsmVma47165829 = YkVedsmVma634358;     YkVedsmVma634358 = YkVedsmVma83264172;     YkVedsmVma83264172 = YkVedsmVma31092684;     YkVedsmVma31092684 = YkVedsmVma1096671;     YkVedsmVma1096671 = YkVedsmVma90816155;     YkVedsmVma90816155 = YkVedsmVma12747851;     YkVedsmVma12747851 = YkVedsmVma21785583;     YkVedsmVma21785583 = YkVedsmVma57723468;     YkVedsmVma57723468 = YkVedsmVma34169667;     YkVedsmVma34169667 = YkVedsmVma57906242;     YkVedsmVma57906242 = YkVedsmVma79233470;     YkVedsmVma79233470 = YkVedsmVma1632566;     YkVedsmVma1632566 = YkVedsmVma45419273;     YkVedsmVma45419273 = YkVedsmVma17884436;     YkVedsmVma17884436 = YkVedsmVma21018088;     YkVedsmVma21018088 = YkVedsmVma71386833;     YkVedsmVma71386833 = YkVedsmVma73812879;     YkVedsmVma73812879 = YkVedsmVma94959765;     YkVedsmVma94959765 = YkVedsmVma2820290;     YkVedsmVma2820290 = YkVedsmVma96282598;     YkVedsmVma96282598 = YkVedsmVma84095276;     YkVedsmVma84095276 = YkVedsmVma63293234;     YkVedsmVma63293234 = YkVedsmVma11202766;     YkVedsmVma11202766 = YkVedsmVma12468812;     YkVedsmVma12468812 = YkVedsmVma78352028;     YkVedsmVma78352028 = YkVedsmVma85136220;     YkVedsmVma85136220 = YkVedsmVma79627325;     YkVedsmVma79627325 = YkVedsmVma11886156;     YkVedsmVma11886156 = YkVedsmVma40906602;     YkVedsmVma40906602 = YkVedsmVma26628077;     YkVedsmVma26628077 = YkVedsmVma78085019;     YkVedsmVma78085019 = YkVedsmVma33984780;     YkVedsmVma33984780 = YkVedsmVma62663773;     YkVedsmVma62663773 = YkVedsmVma80422713;     YkVedsmVma80422713 = YkVedsmVma17615557;     YkVedsmVma17615557 = YkVedsmVma16235219;     YkVedsmVma16235219 = YkVedsmVma50498423;     YkVedsmVma50498423 = YkVedsmVma5486572;     YkVedsmVma5486572 = YkVedsmVma50884382;     YkVedsmVma50884382 = YkVedsmVma55942266;     YkVedsmVma55942266 = YkVedsmVma25075178;     YkVedsmVma25075178 = YkVedsmVma98881724;     YkVedsmVma98881724 = YkVedsmVma74111626;     YkVedsmVma74111626 = YkVedsmVma71821323;     YkVedsmVma71821323 = YkVedsmVma70415506;     YkVedsmVma70415506 = YkVedsmVma42379985;     YkVedsmVma42379985 = YkVedsmVma93277565;     YkVedsmVma93277565 = YkVedsmVma35514742;     YkVedsmVma35514742 = YkVedsmVma50732020;     YkVedsmVma50732020 = YkVedsmVma42370094;     YkVedsmVma42370094 = YkVedsmVma21059073;     YkVedsmVma21059073 = YkVedsmVma89044453;     YkVedsmVma89044453 = YkVedsmVma29204109;     YkVedsmVma29204109 = YkVedsmVma18455794;     YkVedsmVma18455794 = YkVedsmVma63070552;     YkVedsmVma63070552 = YkVedsmVma37341123;     YkVedsmVma37341123 = YkVedsmVma79034731;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void hZYPkZiojF12646154() {     long TIfSIqNuRn4334325 = -35525377;    long TIfSIqNuRn27251268 = -188940654;    long TIfSIqNuRn78149127 = -434616624;    long TIfSIqNuRn16963568 = -954302346;    long TIfSIqNuRn57720034 = -559871130;    long TIfSIqNuRn19375713 = -421271101;    long TIfSIqNuRn44687238 = -820219318;    long TIfSIqNuRn26741940 = -368605153;    long TIfSIqNuRn59522988 = 24186679;    long TIfSIqNuRn42938429 = -718967901;    long TIfSIqNuRn12755589 = -91073854;    long TIfSIqNuRn63533292 = -522704092;    long TIfSIqNuRn37615404 = -731778160;    long TIfSIqNuRn53022263 = -705673276;    long TIfSIqNuRn81949260 = -789811970;    long TIfSIqNuRn29887226 = -881349420;    long TIfSIqNuRn33173613 = -717570312;    long TIfSIqNuRn65554143 = -934144026;    long TIfSIqNuRn24856681 = -727700123;    long TIfSIqNuRn10584266 = -462407835;    long TIfSIqNuRn34988744 = -206230977;    long TIfSIqNuRn68346785 = -474525439;    long TIfSIqNuRn2880579 = 49041958;    long TIfSIqNuRn97177928 = -876669773;    long TIfSIqNuRn87819085 = -465066783;    long TIfSIqNuRn70003711 = -524960742;    long TIfSIqNuRn87055533 = -478126273;    long TIfSIqNuRn38135288 = 61758965;    long TIfSIqNuRn53408728 = -59414358;    long TIfSIqNuRn56558135 = -545138189;    long TIfSIqNuRn48795397 = -531812058;    long TIfSIqNuRn68508222 = -545327683;    long TIfSIqNuRn65781226 = -414549666;    long TIfSIqNuRn9952682 = -337313466;    long TIfSIqNuRn38898982 = -838212038;    long TIfSIqNuRn28844828 = 43632177;    long TIfSIqNuRn83836519 = -228511984;    long TIfSIqNuRn7437515 = -156055893;    long TIfSIqNuRn78373462 = -699319512;    long TIfSIqNuRn85834537 = -718415394;    long TIfSIqNuRn87892571 = -681799493;    long TIfSIqNuRn82879708 = -838442835;    long TIfSIqNuRn14988896 = -374388516;    long TIfSIqNuRn21900427 = -925784105;    long TIfSIqNuRn40590532 = -776900280;    long TIfSIqNuRn85431577 = -328080378;    long TIfSIqNuRn1395391 = -136703324;    long TIfSIqNuRn65521770 = -433103372;    long TIfSIqNuRn57258764 = -212959503;    long TIfSIqNuRn86062422 = -529992643;    long TIfSIqNuRn78347816 = -387682858;    long TIfSIqNuRn3524380 = -960844519;    long TIfSIqNuRn96421675 = -40035409;    long TIfSIqNuRn15799575 = -132260829;    long TIfSIqNuRn77657409 = -733994205;    long TIfSIqNuRn35987540 = -560999939;    long TIfSIqNuRn24370689 = -137982612;    long TIfSIqNuRn80971199 = -557946852;    long TIfSIqNuRn29144483 = -389235563;    long TIfSIqNuRn87716323 = 65089612;    long TIfSIqNuRn32320180 = -943144828;    long TIfSIqNuRn6551951 = -781978284;    long TIfSIqNuRn73333212 = -209190795;    long TIfSIqNuRn2964853 = -430675132;    long TIfSIqNuRn94143032 = -87155844;    long TIfSIqNuRn44247367 = -545746171;    long TIfSIqNuRn97752066 = -8154426;    long TIfSIqNuRn27662723 = -294464695;    long TIfSIqNuRn14123282 = -867461239;    long TIfSIqNuRn53104432 = -733444148;    long TIfSIqNuRn46050707 = -552837437;    long TIfSIqNuRn25736098 = -461514420;    long TIfSIqNuRn87180681 = -134824515;    long TIfSIqNuRn39022144 = 90715271;    long TIfSIqNuRn22691695 = -780608342;    long TIfSIqNuRn52109036 = -367788143;    long TIfSIqNuRn53357890 = -136923;    long TIfSIqNuRn80980152 = -25173938;    long TIfSIqNuRn56587396 = 230506;    long TIfSIqNuRn2387508 = -36986406;    long TIfSIqNuRn68608320 = -288257419;    long TIfSIqNuRn21533763 = 54977098;    long TIfSIqNuRn80876524 = -725281532;    long TIfSIqNuRn67346305 = -529421716;    long TIfSIqNuRn78210318 = -57455332;    long TIfSIqNuRn45271017 = -570967540;    long TIfSIqNuRn72086546 = -405292275;    long TIfSIqNuRn49981651 = -182288837;    long TIfSIqNuRn32295272 = -603319261;    long TIfSIqNuRn2911443 = -177212099;    long TIfSIqNuRn4474140 = -818385211;    long TIfSIqNuRn2865320 = -670565133;    long TIfSIqNuRn78293032 = -766820330;    long TIfSIqNuRn90657138 = -664409124;    long TIfSIqNuRn53514358 = -775270567;    long TIfSIqNuRn81340621 = -899821210;    long TIfSIqNuRn9546496 = -529252040;    long TIfSIqNuRn12024043 = -943713384;    long TIfSIqNuRn27757395 = -738628262;    long TIfSIqNuRn96343165 = -35525377;     TIfSIqNuRn4334325 = TIfSIqNuRn27251268;     TIfSIqNuRn27251268 = TIfSIqNuRn78149127;     TIfSIqNuRn78149127 = TIfSIqNuRn16963568;     TIfSIqNuRn16963568 = TIfSIqNuRn57720034;     TIfSIqNuRn57720034 = TIfSIqNuRn19375713;     TIfSIqNuRn19375713 = TIfSIqNuRn44687238;     TIfSIqNuRn44687238 = TIfSIqNuRn26741940;     TIfSIqNuRn26741940 = TIfSIqNuRn59522988;     TIfSIqNuRn59522988 = TIfSIqNuRn42938429;     TIfSIqNuRn42938429 = TIfSIqNuRn12755589;     TIfSIqNuRn12755589 = TIfSIqNuRn63533292;     TIfSIqNuRn63533292 = TIfSIqNuRn37615404;     TIfSIqNuRn37615404 = TIfSIqNuRn53022263;     TIfSIqNuRn53022263 = TIfSIqNuRn81949260;     TIfSIqNuRn81949260 = TIfSIqNuRn29887226;     TIfSIqNuRn29887226 = TIfSIqNuRn33173613;     TIfSIqNuRn33173613 = TIfSIqNuRn65554143;     TIfSIqNuRn65554143 = TIfSIqNuRn24856681;     TIfSIqNuRn24856681 = TIfSIqNuRn10584266;     TIfSIqNuRn10584266 = TIfSIqNuRn34988744;     TIfSIqNuRn34988744 = TIfSIqNuRn68346785;     TIfSIqNuRn68346785 = TIfSIqNuRn2880579;     TIfSIqNuRn2880579 = TIfSIqNuRn97177928;     TIfSIqNuRn97177928 = TIfSIqNuRn87819085;     TIfSIqNuRn87819085 = TIfSIqNuRn70003711;     TIfSIqNuRn70003711 = TIfSIqNuRn87055533;     TIfSIqNuRn87055533 = TIfSIqNuRn38135288;     TIfSIqNuRn38135288 = TIfSIqNuRn53408728;     TIfSIqNuRn53408728 = TIfSIqNuRn56558135;     TIfSIqNuRn56558135 = TIfSIqNuRn48795397;     TIfSIqNuRn48795397 = TIfSIqNuRn68508222;     TIfSIqNuRn68508222 = TIfSIqNuRn65781226;     TIfSIqNuRn65781226 = TIfSIqNuRn9952682;     TIfSIqNuRn9952682 = TIfSIqNuRn38898982;     TIfSIqNuRn38898982 = TIfSIqNuRn28844828;     TIfSIqNuRn28844828 = TIfSIqNuRn83836519;     TIfSIqNuRn83836519 = TIfSIqNuRn7437515;     TIfSIqNuRn7437515 = TIfSIqNuRn78373462;     TIfSIqNuRn78373462 = TIfSIqNuRn85834537;     TIfSIqNuRn85834537 = TIfSIqNuRn87892571;     TIfSIqNuRn87892571 = TIfSIqNuRn82879708;     TIfSIqNuRn82879708 = TIfSIqNuRn14988896;     TIfSIqNuRn14988896 = TIfSIqNuRn21900427;     TIfSIqNuRn21900427 = TIfSIqNuRn40590532;     TIfSIqNuRn40590532 = TIfSIqNuRn85431577;     TIfSIqNuRn85431577 = TIfSIqNuRn1395391;     TIfSIqNuRn1395391 = TIfSIqNuRn65521770;     TIfSIqNuRn65521770 = TIfSIqNuRn57258764;     TIfSIqNuRn57258764 = TIfSIqNuRn86062422;     TIfSIqNuRn86062422 = TIfSIqNuRn78347816;     TIfSIqNuRn78347816 = TIfSIqNuRn3524380;     TIfSIqNuRn3524380 = TIfSIqNuRn96421675;     TIfSIqNuRn96421675 = TIfSIqNuRn15799575;     TIfSIqNuRn15799575 = TIfSIqNuRn77657409;     TIfSIqNuRn77657409 = TIfSIqNuRn35987540;     TIfSIqNuRn35987540 = TIfSIqNuRn24370689;     TIfSIqNuRn24370689 = TIfSIqNuRn80971199;     TIfSIqNuRn80971199 = TIfSIqNuRn29144483;     TIfSIqNuRn29144483 = TIfSIqNuRn87716323;     TIfSIqNuRn87716323 = TIfSIqNuRn32320180;     TIfSIqNuRn32320180 = TIfSIqNuRn6551951;     TIfSIqNuRn6551951 = TIfSIqNuRn73333212;     TIfSIqNuRn73333212 = TIfSIqNuRn2964853;     TIfSIqNuRn2964853 = TIfSIqNuRn94143032;     TIfSIqNuRn94143032 = TIfSIqNuRn44247367;     TIfSIqNuRn44247367 = TIfSIqNuRn97752066;     TIfSIqNuRn97752066 = TIfSIqNuRn27662723;     TIfSIqNuRn27662723 = TIfSIqNuRn14123282;     TIfSIqNuRn14123282 = TIfSIqNuRn53104432;     TIfSIqNuRn53104432 = TIfSIqNuRn46050707;     TIfSIqNuRn46050707 = TIfSIqNuRn25736098;     TIfSIqNuRn25736098 = TIfSIqNuRn87180681;     TIfSIqNuRn87180681 = TIfSIqNuRn39022144;     TIfSIqNuRn39022144 = TIfSIqNuRn22691695;     TIfSIqNuRn22691695 = TIfSIqNuRn52109036;     TIfSIqNuRn52109036 = TIfSIqNuRn53357890;     TIfSIqNuRn53357890 = TIfSIqNuRn80980152;     TIfSIqNuRn80980152 = TIfSIqNuRn56587396;     TIfSIqNuRn56587396 = TIfSIqNuRn2387508;     TIfSIqNuRn2387508 = TIfSIqNuRn68608320;     TIfSIqNuRn68608320 = TIfSIqNuRn21533763;     TIfSIqNuRn21533763 = TIfSIqNuRn80876524;     TIfSIqNuRn80876524 = TIfSIqNuRn67346305;     TIfSIqNuRn67346305 = TIfSIqNuRn78210318;     TIfSIqNuRn78210318 = TIfSIqNuRn45271017;     TIfSIqNuRn45271017 = TIfSIqNuRn72086546;     TIfSIqNuRn72086546 = TIfSIqNuRn49981651;     TIfSIqNuRn49981651 = TIfSIqNuRn32295272;     TIfSIqNuRn32295272 = TIfSIqNuRn2911443;     TIfSIqNuRn2911443 = TIfSIqNuRn4474140;     TIfSIqNuRn4474140 = TIfSIqNuRn2865320;     TIfSIqNuRn2865320 = TIfSIqNuRn78293032;     TIfSIqNuRn78293032 = TIfSIqNuRn90657138;     TIfSIqNuRn90657138 = TIfSIqNuRn53514358;     TIfSIqNuRn53514358 = TIfSIqNuRn81340621;     TIfSIqNuRn81340621 = TIfSIqNuRn9546496;     TIfSIqNuRn9546496 = TIfSIqNuRn12024043;     TIfSIqNuRn12024043 = TIfSIqNuRn27757395;     TIfSIqNuRn27757395 = TIfSIqNuRn96343165;     TIfSIqNuRn96343165 = TIfSIqNuRn4334325;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void xmtYtcyBqq34353966() {     long mafdZyfSGF10444960 = -19951407;    long mafdZyfSGF9196864 = 58864440;    long mafdZyfSGF95504523 = -542578158;    long mafdZyfSGF29118210 = -965591806;    long mafdZyfSGF35455625 = -448876323;    long mafdZyfSGF45598347 = -385200148;    long mafdZyfSGF73723540 = -663720762;    long mafdZyfSGF45715881 = -359656383;    long mafdZyfSGF6905648 = -557492056;    long mafdZyfSGF80807602 = -684750250;    long mafdZyfSGF93186484 = 72016488;    long mafdZyfSGF9648012 = -702588657;    long mafdZyfSGF55677437 = -93327724;    long mafdZyfSGF90010160 = -483064896;    long mafdZyfSGF22863796 = -342986989;    long mafdZyfSGF45957167 = -87144614;    long mafdZyfSGF82862375 = -53729995;    long mafdZyfSGF85607829 = -996738291;    long mafdZyfSGF7114793 = -651451487;    long mafdZyfSGF63208193 = -331335205;    long mafdZyfSGF3211362 = -872184806;    long mafdZyfSGF33164075 = -892447038;    long mafdZyfSGF75349767 = -156433371;    long mafdZyfSGF24820411 = -979895283;    long mafdZyfSGF59961425 = -164956669;    long mafdZyfSGF11299464 = -311821994;    long mafdZyfSGF55736893 = -679588189;    long mafdZyfSGF86645938 = -613136977;    long mafdZyfSGF32219430 = -927867377;    long mafdZyfSGF1263642 = -38040430;    long mafdZyfSGF74450625 = -832226231;    long mafdZyfSGF50842701 = -646596260;    long mafdZyfSGF60944598 = -509107253;    long mafdZyfSGF5066083 = 34463037;    long mafdZyfSGF82731672 = -636259068;    long mafdZyfSGF40398931 = -250159677;    long mafdZyfSGF77039821 = -281801232;    long mafdZyfSGF11445407 = 77175419;    long mafdZyfSGF87297312 = -305924425;    long mafdZyfSGF45209368 = -801286303;    long mafdZyfSGF81417462 = -835017286;    long mafdZyfSGF727826 = -202377195;    long mafdZyfSGF53339234 = 85676646;    long mafdZyfSGF68540065 = -502091486;    long mafdZyfSGF36561050 = -912057835;    long mafdZyfSGF37798741 = -125341165;    long mafdZyfSGF46871758 = -736759484;    long mafdZyfSGF48862292 = 48239739;    long mafdZyfSGF85592882 = -962460352;    long mafdZyfSGF19019498 = -204028337;    long mafdZyfSGF27307865 = -908531536;    long mafdZyfSGF28881357 = -43716587;    long mafdZyfSGF20118481 = -823879005;    long mafdZyfSGF22018726 = -984650826;    long mafdZyfSGF31142604 = -91425265;    long mafdZyfSGF77280885 = -127504370;    long mafdZyfSGF33847097 = -784702189;    long mafdZyfSGF70684113 = -562682876;    long mafdZyfSGF69156784 = -700635138;    long mafdZyfSGF24156162 = -37054329;    long mafdZyfSGF89861454 = -705611959;    long mafdZyfSGF87077601 = 49416214;    long mafdZyfSGF13496452 = -431789006;    long mafdZyfSGF5642006 = -419451626;    long mafdZyfSGF6356978 = -852524020;    long mafdZyfSGF42343783 = -281387253;    long mafdZyfSGF48703414 = -93481405;    long mafdZyfSGF50611354 = -27790761;    long mafdZyfSGF7278489 = -846805828;    long mafdZyfSGF82464864 = 7172688;    long mafdZyfSGF68917345 = -805343383;    long mafdZyfSGF71416968 = -30905414;    long mafdZyfSGF98310516 = -590813867;    long mafdZyfSGF61905425 = -850165184;    long mafdZyfSGF81790731 = -496317920;    long mafdZyfSGF2483536 = -569807612;    long mafdZyfSGF79824841 = -878123685;    long mafdZyfSGF6809702 = -654341886;    long mafdZyfSGF88259360 = 32162552;    long mafdZyfSGF22162684 = 60384496;    long mafdZyfSGF64427706 = -575062511;    long mafdZyfSGF6874601 = -627827929;    long mafdZyfSGF1053056 = -650676625;    long mafdZyfSGF13199933 = -623839041;    long mafdZyfSGF73955777 = -129508894;    long mafdZyfSGF45569268 = -688509644;    long mafdZyfSGF30724220 = -822717256;    long mafdZyfSGF38925872 = -524456427;    long mafdZyfSGF73923478 = -874111699;    long mafdZyfSGF5450787 = -408754699;    long mafdZyfSGF6551835 = -465457488;    long mafdZyfSGF6355709 = -719118356;    long mafdZyfSGF42288622 = -222189444;    long mafdZyfSGF63141151 = -168870096;    long mafdZyfSGF55347914 = 4325656;    long mafdZyfSGF94339860 = -784433500;    long mafdZyfSGF87231374 = -770588189;    long mafdZyfSGF47697228 = -494871728;    long mafdZyfSGF62183088 = -649567467;    long mafdZyfSGF94217266 = -19951407;     mafdZyfSGF10444960 = mafdZyfSGF9196864;     mafdZyfSGF9196864 = mafdZyfSGF95504523;     mafdZyfSGF95504523 = mafdZyfSGF29118210;     mafdZyfSGF29118210 = mafdZyfSGF35455625;     mafdZyfSGF35455625 = mafdZyfSGF45598347;     mafdZyfSGF45598347 = mafdZyfSGF73723540;     mafdZyfSGF73723540 = mafdZyfSGF45715881;     mafdZyfSGF45715881 = mafdZyfSGF6905648;     mafdZyfSGF6905648 = mafdZyfSGF80807602;     mafdZyfSGF80807602 = mafdZyfSGF93186484;     mafdZyfSGF93186484 = mafdZyfSGF9648012;     mafdZyfSGF9648012 = mafdZyfSGF55677437;     mafdZyfSGF55677437 = mafdZyfSGF90010160;     mafdZyfSGF90010160 = mafdZyfSGF22863796;     mafdZyfSGF22863796 = mafdZyfSGF45957167;     mafdZyfSGF45957167 = mafdZyfSGF82862375;     mafdZyfSGF82862375 = mafdZyfSGF85607829;     mafdZyfSGF85607829 = mafdZyfSGF7114793;     mafdZyfSGF7114793 = mafdZyfSGF63208193;     mafdZyfSGF63208193 = mafdZyfSGF3211362;     mafdZyfSGF3211362 = mafdZyfSGF33164075;     mafdZyfSGF33164075 = mafdZyfSGF75349767;     mafdZyfSGF75349767 = mafdZyfSGF24820411;     mafdZyfSGF24820411 = mafdZyfSGF59961425;     mafdZyfSGF59961425 = mafdZyfSGF11299464;     mafdZyfSGF11299464 = mafdZyfSGF55736893;     mafdZyfSGF55736893 = mafdZyfSGF86645938;     mafdZyfSGF86645938 = mafdZyfSGF32219430;     mafdZyfSGF32219430 = mafdZyfSGF1263642;     mafdZyfSGF1263642 = mafdZyfSGF74450625;     mafdZyfSGF74450625 = mafdZyfSGF50842701;     mafdZyfSGF50842701 = mafdZyfSGF60944598;     mafdZyfSGF60944598 = mafdZyfSGF5066083;     mafdZyfSGF5066083 = mafdZyfSGF82731672;     mafdZyfSGF82731672 = mafdZyfSGF40398931;     mafdZyfSGF40398931 = mafdZyfSGF77039821;     mafdZyfSGF77039821 = mafdZyfSGF11445407;     mafdZyfSGF11445407 = mafdZyfSGF87297312;     mafdZyfSGF87297312 = mafdZyfSGF45209368;     mafdZyfSGF45209368 = mafdZyfSGF81417462;     mafdZyfSGF81417462 = mafdZyfSGF727826;     mafdZyfSGF727826 = mafdZyfSGF53339234;     mafdZyfSGF53339234 = mafdZyfSGF68540065;     mafdZyfSGF68540065 = mafdZyfSGF36561050;     mafdZyfSGF36561050 = mafdZyfSGF37798741;     mafdZyfSGF37798741 = mafdZyfSGF46871758;     mafdZyfSGF46871758 = mafdZyfSGF48862292;     mafdZyfSGF48862292 = mafdZyfSGF85592882;     mafdZyfSGF85592882 = mafdZyfSGF19019498;     mafdZyfSGF19019498 = mafdZyfSGF27307865;     mafdZyfSGF27307865 = mafdZyfSGF28881357;     mafdZyfSGF28881357 = mafdZyfSGF20118481;     mafdZyfSGF20118481 = mafdZyfSGF22018726;     mafdZyfSGF22018726 = mafdZyfSGF31142604;     mafdZyfSGF31142604 = mafdZyfSGF77280885;     mafdZyfSGF77280885 = mafdZyfSGF33847097;     mafdZyfSGF33847097 = mafdZyfSGF70684113;     mafdZyfSGF70684113 = mafdZyfSGF69156784;     mafdZyfSGF69156784 = mafdZyfSGF24156162;     mafdZyfSGF24156162 = mafdZyfSGF89861454;     mafdZyfSGF89861454 = mafdZyfSGF87077601;     mafdZyfSGF87077601 = mafdZyfSGF13496452;     mafdZyfSGF13496452 = mafdZyfSGF5642006;     mafdZyfSGF5642006 = mafdZyfSGF6356978;     mafdZyfSGF6356978 = mafdZyfSGF42343783;     mafdZyfSGF42343783 = mafdZyfSGF48703414;     mafdZyfSGF48703414 = mafdZyfSGF50611354;     mafdZyfSGF50611354 = mafdZyfSGF7278489;     mafdZyfSGF7278489 = mafdZyfSGF82464864;     mafdZyfSGF82464864 = mafdZyfSGF68917345;     mafdZyfSGF68917345 = mafdZyfSGF71416968;     mafdZyfSGF71416968 = mafdZyfSGF98310516;     mafdZyfSGF98310516 = mafdZyfSGF61905425;     mafdZyfSGF61905425 = mafdZyfSGF81790731;     mafdZyfSGF81790731 = mafdZyfSGF2483536;     mafdZyfSGF2483536 = mafdZyfSGF79824841;     mafdZyfSGF79824841 = mafdZyfSGF6809702;     mafdZyfSGF6809702 = mafdZyfSGF88259360;     mafdZyfSGF88259360 = mafdZyfSGF22162684;     mafdZyfSGF22162684 = mafdZyfSGF64427706;     mafdZyfSGF64427706 = mafdZyfSGF6874601;     mafdZyfSGF6874601 = mafdZyfSGF1053056;     mafdZyfSGF1053056 = mafdZyfSGF13199933;     mafdZyfSGF13199933 = mafdZyfSGF73955777;     mafdZyfSGF73955777 = mafdZyfSGF45569268;     mafdZyfSGF45569268 = mafdZyfSGF30724220;     mafdZyfSGF30724220 = mafdZyfSGF38925872;     mafdZyfSGF38925872 = mafdZyfSGF73923478;     mafdZyfSGF73923478 = mafdZyfSGF5450787;     mafdZyfSGF5450787 = mafdZyfSGF6551835;     mafdZyfSGF6551835 = mafdZyfSGF6355709;     mafdZyfSGF6355709 = mafdZyfSGF42288622;     mafdZyfSGF42288622 = mafdZyfSGF63141151;     mafdZyfSGF63141151 = mafdZyfSGF55347914;     mafdZyfSGF55347914 = mafdZyfSGF94339860;     mafdZyfSGF94339860 = mafdZyfSGF87231374;     mafdZyfSGF87231374 = mafdZyfSGF47697228;     mafdZyfSGF47697228 = mafdZyfSGF62183088;     mafdZyfSGF62183088 = mafdZyfSGF94217266;     mafdZyfSGF94217266 = mafdZyfSGF10444960;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void tKNyTpKKeJ56061778() {     long nxaHaRYzal16555596 = -4377438;    long nxaHaRYzal91142459 = -793330466;    long nxaHaRYzal12859920 = -650539693;    long nxaHaRYzal41272851 = -976881267;    long nxaHaRYzal13191216 = -337881516;    long nxaHaRYzal71820982 = -349129195;    long nxaHaRYzal2759842 = -507222207;    long nxaHaRYzal64689823 = -350707613;    long nxaHaRYzal54288307 = -39170792;    long nxaHaRYzal18676775 = -650532598;    long nxaHaRYzal73617380 = -864893171;    long nxaHaRYzal55762731 = -882473221;    long nxaHaRYzal73739469 = -554877287;    long nxaHaRYzal26998057 = -260456515;    long nxaHaRYzal63778331 = -996162007;    long nxaHaRYzal62027108 = -392939808;    long nxaHaRYzal32551138 = -489889678;    long nxaHaRYzal5661515 = 40667444;    long nxaHaRYzal89372904 = -575202850;    long nxaHaRYzal15832122 = -200262576;    long nxaHaRYzal71433979 = -438138635;    long nxaHaRYzal97981364 = -210368638;    long nxaHaRYzal47818955 = -361908700;    long nxaHaRYzal52462892 = 16879207;    long nxaHaRYzal32103765 = -964846555;    long nxaHaRYzal52595216 = -98683246;    long nxaHaRYzal24418253 = -881050105;    long nxaHaRYzal35156588 = -188032919;    long nxaHaRYzal11030133 = -696320397;    long nxaHaRYzal45969148 = -630942671;    long nxaHaRYzal105854 = -32640403;    long nxaHaRYzal33177181 = -747864837;    long nxaHaRYzal56107969 = -603664839;    long nxaHaRYzal179485 = -693760461;    long nxaHaRYzal26564362 = -434306098;    long nxaHaRYzal51953034 = -543951531;    long nxaHaRYzal70243124 = -335090480;    long nxaHaRYzal15453299 = -789593270;    long nxaHaRYzal96221162 = 87470662;    long nxaHaRYzal4584199 = -884157212;    long nxaHaRYzal74942354 = -988235078;    long nxaHaRYzal18575944 = -666311555;    long nxaHaRYzal91689572 = -554258192;    long nxaHaRYzal15179704 = -78398868;    long nxaHaRYzal32531567 = 52784609;    long nxaHaRYzal90165904 = 77398048;    long nxaHaRYzal92348124 = -236815644;    long nxaHaRYzal32202814 = -570417149;    long nxaHaRYzal13927001 = -611961202;    long nxaHaRYzal51976574 = -978064031;    long nxaHaRYzal76267912 = -329380215;    long nxaHaRYzal54238333 = -226588655;    long nxaHaRYzal43815287 = -507722601;    long nxaHaRYzal28237877 = -737040822;    long nxaHaRYzal84627799 = -548856325;    long nxaHaRYzal18574231 = -794008800;    long nxaHaRYzal43323504 = -331421766;    long nxaHaRYzal60397027 = -567418900;    long nxaHaRYzal9169087 = 87965288;    long nxaHaRYzal60596000 = -139198271;    long nxaHaRYzal47402729 = -468079090;    long nxaHaRYzal67603253 = -219189288;    long nxaHaRYzal53659690 = -654387217;    long nxaHaRYzal8319159 = -408228121;    long nxaHaRYzal18570922 = -517892196;    long nxaHaRYzal40440200 = -17028334;    long nxaHaRYzal99654761 = -178808383;    long nxaHaRYzal73559985 = -861116826;    long nxaHaRYzal433696 = -826150418;    long nxaHaRYzal11825298 = -352210477;    long nxaHaRYzal91783984 = 42150671;    long nxaHaRYzal17097840 = -700296408;    long nxaHaRYzal9440353 = 53196782;    long nxaHaRYzal84788706 = -691045639;    long nxaHaRYzal40889767 = -212027498;    long nxaHaRYzal52858035 = -771827080;    long nxaHaRYzal6291793 = -656110447;    long nxaHaRYzal32639252 = -183509833;    long nxaHaRYzal19931326 = 64094598;    long nxaHaRYzal41937861 = -942244603;    long nxaHaRYzal60247091 = -861867602;    long nxaHaRYzal92215439 = -210632956;    long nxaHaRYzal21229588 = -576071717;    long nxaHaRYzal59053559 = -718256366;    long nxaHaRYzal69701236 = -201562457;    long nxaHaRYzal45867520 = -806051748;    long nxaHaRYzal89361893 = -140142237;    long nxaHaRYzal27870093 = -866624017;    long nxaHaRYzal15551685 = -44904136;    long nxaHaRYzal7990131 = -640297298;    long nxaHaRYzal8629530 = -112529765;    long nxaHaRYzal9846098 = -767671580;    long nxaHaRYzal6284213 = -777558558;    long nxaHaRYzal35625163 = -773331068;    long nxaHaRYzal57181469 = -316078122;    long nxaHaRYzal7339101 = -669045791;    long nxaHaRYzal64916253 = 88075661;    long nxaHaRYzal83370413 = -46030071;    long nxaHaRYzal96608782 = -560506673;    long nxaHaRYzal92091367 = -4377438;     nxaHaRYzal16555596 = nxaHaRYzal91142459;     nxaHaRYzal91142459 = nxaHaRYzal12859920;     nxaHaRYzal12859920 = nxaHaRYzal41272851;     nxaHaRYzal41272851 = nxaHaRYzal13191216;     nxaHaRYzal13191216 = nxaHaRYzal71820982;     nxaHaRYzal71820982 = nxaHaRYzal2759842;     nxaHaRYzal2759842 = nxaHaRYzal64689823;     nxaHaRYzal64689823 = nxaHaRYzal54288307;     nxaHaRYzal54288307 = nxaHaRYzal18676775;     nxaHaRYzal18676775 = nxaHaRYzal73617380;     nxaHaRYzal73617380 = nxaHaRYzal55762731;     nxaHaRYzal55762731 = nxaHaRYzal73739469;     nxaHaRYzal73739469 = nxaHaRYzal26998057;     nxaHaRYzal26998057 = nxaHaRYzal63778331;     nxaHaRYzal63778331 = nxaHaRYzal62027108;     nxaHaRYzal62027108 = nxaHaRYzal32551138;     nxaHaRYzal32551138 = nxaHaRYzal5661515;     nxaHaRYzal5661515 = nxaHaRYzal89372904;     nxaHaRYzal89372904 = nxaHaRYzal15832122;     nxaHaRYzal15832122 = nxaHaRYzal71433979;     nxaHaRYzal71433979 = nxaHaRYzal97981364;     nxaHaRYzal97981364 = nxaHaRYzal47818955;     nxaHaRYzal47818955 = nxaHaRYzal52462892;     nxaHaRYzal52462892 = nxaHaRYzal32103765;     nxaHaRYzal32103765 = nxaHaRYzal52595216;     nxaHaRYzal52595216 = nxaHaRYzal24418253;     nxaHaRYzal24418253 = nxaHaRYzal35156588;     nxaHaRYzal35156588 = nxaHaRYzal11030133;     nxaHaRYzal11030133 = nxaHaRYzal45969148;     nxaHaRYzal45969148 = nxaHaRYzal105854;     nxaHaRYzal105854 = nxaHaRYzal33177181;     nxaHaRYzal33177181 = nxaHaRYzal56107969;     nxaHaRYzal56107969 = nxaHaRYzal179485;     nxaHaRYzal179485 = nxaHaRYzal26564362;     nxaHaRYzal26564362 = nxaHaRYzal51953034;     nxaHaRYzal51953034 = nxaHaRYzal70243124;     nxaHaRYzal70243124 = nxaHaRYzal15453299;     nxaHaRYzal15453299 = nxaHaRYzal96221162;     nxaHaRYzal96221162 = nxaHaRYzal4584199;     nxaHaRYzal4584199 = nxaHaRYzal74942354;     nxaHaRYzal74942354 = nxaHaRYzal18575944;     nxaHaRYzal18575944 = nxaHaRYzal91689572;     nxaHaRYzal91689572 = nxaHaRYzal15179704;     nxaHaRYzal15179704 = nxaHaRYzal32531567;     nxaHaRYzal32531567 = nxaHaRYzal90165904;     nxaHaRYzal90165904 = nxaHaRYzal92348124;     nxaHaRYzal92348124 = nxaHaRYzal32202814;     nxaHaRYzal32202814 = nxaHaRYzal13927001;     nxaHaRYzal13927001 = nxaHaRYzal51976574;     nxaHaRYzal51976574 = nxaHaRYzal76267912;     nxaHaRYzal76267912 = nxaHaRYzal54238333;     nxaHaRYzal54238333 = nxaHaRYzal43815287;     nxaHaRYzal43815287 = nxaHaRYzal28237877;     nxaHaRYzal28237877 = nxaHaRYzal84627799;     nxaHaRYzal84627799 = nxaHaRYzal18574231;     nxaHaRYzal18574231 = nxaHaRYzal43323504;     nxaHaRYzal43323504 = nxaHaRYzal60397027;     nxaHaRYzal60397027 = nxaHaRYzal9169087;     nxaHaRYzal9169087 = nxaHaRYzal60596000;     nxaHaRYzal60596000 = nxaHaRYzal47402729;     nxaHaRYzal47402729 = nxaHaRYzal67603253;     nxaHaRYzal67603253 = nxaHaRYzal53659690;     nxaHaRYzal53659690 = nxaHaRYzal8319159;     nxaHaRYzal8319159 = nxaHaRYzal18570922;     nxaHaRYzal18570922 = nxaHaRYzal40440200;     nxaHaRYzal40440200 = nxaHaRYzal99654761;     nxaHaRYzal99654761 = nxaHaRYzal73559985;     nxaHaRYzal73559985 = nxaHaRYzal433696;     nxaHaRYzal433696 = nxaHaRYzal11825298;     nxaHaRYzal11825298 = nxaHaRYzal91783984;     nxaHaRYzal91783984 = nxaHaRYzal17097840;     nxaHaRYzal17097840 = nxaHaRYzal9440353;     nxaHaRYzal9440353 = nxaHaRYzal84788706;     nxaHaRYzal84788706 = nxaHaRYzal40889767;     nxaHaRYzal40889767 = nxaHaRYzal52858035;     nxaHaRYzal52858035 = nxaHaRYzal6291793;     nxaHaRYzal6291793 = nxaHaRYzal32639252;     nxaHaRYzal32639252 = nxaHaRYzal19931326;     nxaHaRYzal19931326 = nxaHaRYzal41937861;     nxaHaRYzal41937861 = nxaHaRYzal60247091;     nxaHaRYzal60247091 = nxaHaRYzal92215439;     nxaHaRYzal92215439 = nxaHaRYzal21229588;     nxaHaRYzal21229588 = nxaHaRYzal59053559;     nxaHaRYzal59053559 = nxaHaRYzal69701236;     nxaHaRYzal69701236 = nxaHaRYzal45867520;     nxaHaRYzal45867520 = nxaHaRYzal89361893;     nxaHaRYzal89361893 = nxaHaRYzal27870093;     nxaHaRYzal27870093 = nxaHaRYzal15551685;     nxaHaRYzal15551685 = nxaHaRYzal7990131;     nxaHaRYzal7990131 = nxaHaRYzal8629530;     nxaHaRYzal8629530 = nxaHaRYzal9846098;     nxaHaRYzal9846098 = nxaHaRYzal6284213;     nxaHaRYzal6284213 = nxaHaRYzal35625163;     nxaHaRYzal35625163 = nxaHaRYzal57181469;     nxaHaRYzal57181469 = nxaHaRYzal7339101;     nxaHaRYzal7339101 = nxaHaRYzal64916253;     nxaHaRYzal64916253 = nxaHaRYzal83370413;     nxaHaRYzal83370413 = nxaHaRYzal96608782;     nxaHaRYzal96608782 = nxaHaRYzal92091367;     nxaHaRYzal92091367 = nxaHaRYzal16555596;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void GAlbDsmcPF56503881() {     long ekOExAAjnu51735351 = 98702049;    long ekOExAAjnu23688532 = -869612409;    long ekOExAAjnu58068786 = -241424305;    long ekOExAAjnu79140504 = -986950245;    long ekOExAAjnu96036472 = -952399660;    long ekOExAAjnu95208737 = -287228074;    long ekOExAAjnu47576003 = -70345116;    long ekOExAAjnu97828743 = -461645197;    long ekOExAAjnu64116084 = -171478853;    long ekOExAAjnu20019551 = -560554693;    long ekOExAAjnu18326017 = 83268485;    long ekOExAAjnu29324508 = -805072968;    long ekOExAAjnu79038038 = 44281211;    long ekOExAAjnu65392668 = -775427419;    long ekOExAAjnu78648052 = -567912699;    long ekOExAAjnu60143542 = -992703089;    long ekOExAAjnu82273548 = -611329394;    long ekOExAAjnu72195883 = -669213927;    long ekOExAAjnu11386896 = -1791904;    long ekOExAAjnu24929138 = -440116717;    long ekOExAAjnu72821719 = -110475834;    long ekOExAAjnu12548136 = -375001416;    long ekOExAAjnu52994177 = -10035345;    long ekOExAAjnu79819701 = 73461860;    long ekOExAAjnu45095581 = -370153751;    long ekOExAAjnu5642779 = -324802740;    long ekOExAAjnu12701628 = -971543165;    long ekOExAAjnu73017438 = -641318489;    long ekOExAAjnu21861300 = -608724441;    long ekOExAAjnu31787573 = -505693319;    long ekOExAAjnu55419975 = -3280071;    long ekOExAAjnu9313338 = -986834109;    long ekOExAAjnu97740165 = -806918902;    long ekOExAAjnu36361707 = 54040203;    long ekOExAAjnu3496221 = -848780476;    long ekOExAAjnu46041828 = -568144265;    long ekOExAAjnu88505528 = -858294403;    long ekOExAAjnu56865743 = -581576154;    long ekOExAAjnu14991084 = -542744530;    long ekOExAAjnu79161750 = -155366401;    long ekOExAAjnu77275365 = -678942839;    long ekOExAAjnu29089130 = -128739498;    long ekOExAAjnu71839874 = 93908034;    long ekOExAAjnu20463 = -859970316;    long ekOExAAjnu96505271 = -275869428;    long ekOExAAjnu31466347 = -366104816;    long ekOExAAjnu54529749 = -831460327;    long ekOExAAjnu30857874 = -973543564;    long ekOExAAjnu33792566 = -61516013;    long ekOExAAjnu75965317 = 55904133;    long ekOExAAjnu90205252 = -258785793;    long ekOExAAjnu41718881 = -746447527;    long ekOExAAjnu81166491 = -463583105;    long ekOExAAjnu22973877 = -70253522;    long ekOExAAjnu83682162 = -927105649;    long ekOExAAjnu39187215 = -526296536;    long ekOExAAjnu70694354 = -759577065;    long ekOExAAjnu78249084 = -214886166;    long ekOExAAjnu34044923 = -516796495;    long ekOExAAjnu90393693 = -527596921;    long ekOExAAjnu82507109 = -315684909;    long ekOExAAjnu74558564 = -429026628;    long ekOExAAjnu75967444 = -852920757;    long ekOExAAjnu32328511 = -665785535;    long ekOExAAjnu64599575 = -457274623;    long ekOExAAjnu9012680 = 70102593;    long ekOExAAjnu31584343 = -998154066;    long ekOExAAjnu42676332 = 90241007;    long ekOExAAjnu61896447 = -926646943;    long ekOExAAjnu32606224 = -999768434;    long ekOExAAjnu71638013 = -34408686;    long ekOExAAjnu25407805 = 70246759;    long ekOExAAjnu57204800 = -26469397;    long ekOExAAjnu32225146 = -846425504;    long ekOExAAjnu47653772 = -761173879;    long ekOExAAjnu43732589 = -981736336;    long ekOExAAjnu40708262 = -368909450;    long ekOExAAjnu52973715 = -150065029;    long ekOExAAjnu83314429 = -650668713;    long ekOExAAjnu13629234 = 95951065;    long ekOExAAjnu51113030 = -493342414;    long ekOExAAjnu81843754 = -997999602;    long ekOExAAjnu39224873 = -479802476;    long ekOExAAjnu45895983 = -564628574;    long ekOExAAjnu41582321 = -146907526;    long ekOExAAjnu13701095 = -256832544;    long ekOExAAjnu28146846 = -423251004;    long ekOExAAjnu74766289 = -636665381;    long ekOExAAjnu52679545 = -18854148;    long ekOExAAjnu64309005 = -222483941;    long ekOExAAjnu75347474 = -808567201;    long ekOExAAjnu10256445 = -543408238;    long ekOExAAjnu22820820 = 35220340;    long ekOExAAjnu24597390 = 84852390;    long ekOExAAjnu96654640 = -839681492;    long ekOExAAjnu2716802 = -149916212;    long ekOExAAjnu53121686 = -275818742;    long ekOExAAjnu39511363 = -240306432;    long ekOExAAjnu35420888 = -302695694;    long ekOExAAjnu87492592 = 98702049;     ekOExAAjnu51735351 = ekOExAAjnu23688532;     ekOExAAjnu23688532 = ekOExAAjnu58068786;     ekOExAAjnu58068786 = ekOExAAjnu79140504;     ekOExAAjnu79140504 = ekOExAAjnu96036472;     ekOExAAjnu96036472 = ekOExAAjnu95208737;     ekOExAAjnu95208737 = ekOExAAjnu47576003;     ekOExAAjnu47576003 = ekOExAAjnu97828743;     ekOExAAjnu97828743 = ekOExAAjnu64116084;     ekOExAAjnu64116084 = ekOExAAjnu20019551;     ekOExAAjnu20019551 = ekOExAAjnu18326017;     ekOExAAjnu18326017 = ekOExAAjnu29324508;     ekOExAAjnu29324508 = ekOExAAjnu79038038;     ekOExAAjnu79038038 = ekOExAAjnu65392668;     ekOExAAjnu65392668 = ekOExAAjnu78648052;     ekOExAAjnu78648052 = ekOExAAjnu60143542;     ekOExAAjnu60143542 = ekOExAAjnu82273548;     ekOExAAjnu82273548 = ekOExAAjnu72195883;     ekOExAAjnu72195883 = ekOExAAjnu11386896;     ekOExAAjnu11386896 = ekOExAAjnu24929138;     ekOExAAjnu24929138 = ekOExAAjnu72821719;     ekOExAAjnu72821719 = ekOExAAjnu12548136;     ekOExAAjnu12548136 = ekOExAAjnu52994177;     ekOExAAjnu52994177 = ekOExAAjnu79819701;     ekOExAAjnu79819701 = ekOExAAjnu45095581;     ekOExAAjnu45095581 = ekOExAAjnu5642779;     ekOExAAjnu5642779 = ekOExAAjnu12701628;     ekOExAAjnu12701628 = ekOExAAjnu73017438;     ekOExAAjnu73017438 = ekOExAAjnu21861300;     ekOExAAjnu21861300 = ekOExAAjnu31787573;     ekOExAAjnu31787573 = ekOExAAjnu55419975;     ekOExAAjnu55419975 = ekOExAAjnu9313338;     ekOExAAjnu9313338 = ekOExAAjnu97740165;     ekOExAAjnu97740165 = ekOExAAjnu36361707;     ekOExAAjnu36361707 = ekOExAAjnu3496221;     ekOExAAjnu3496221 = ekOExAAjnu46041828;     ekOExAAjnu46041828 = ekOExAAjnu88505528;     ekOExAAjnu88505528 = ekOExAAjnu56865743;     ekOExAAjnu56865743 = ekOExAAjnu14991084;     ekOExAAjnu14991084 = ekOExAAjnu79161750;     ekOExAAjnu79161750 = ekOExAAjnu77275365;     ekOExAAjnu77275365 = ekOExAAjnu29089130;     ekOExAAjnu29089130 = ekOExAAjnu71839874;     ekOExAAjnu71839874 = ekOExAAjnu20463;     ekOExAAjnu20463 = ekOExAAjnu96505271;     ekOExAAjnu96505271 = ekOExAAjnu31466347;     ekOExAAjnu31466347 = ekOExAAjnu54529749;     ekOExAAjnu54529749 = ekOExAAjnu30857874;     ekOExAAjnu30857874 = ekOExAAjnu33792566;     ekOExAAjnu33792566 = ekOExAAjnu75965317;     ekOExAAjnu75965317 = ekOExAAjnu90205252;     ekOExAAjnu90205252 = ekOExAAjnu41718881;     ekOExAAjnu41718881 = ekOExAAjnu81166491;     ekOExAAjnu81166491 = ekOExAAjnu22973877;     ekOExAAjnu22973877 = ekOExAAjnu83682162;     ekOExAAjnu83682162 = ekOExAAjnu39187215;     ekOExAAjnu39187215 = ekOExAAjnu70694354;     ekOExAAjnu70694354 = ekOExAAjnu78249084;     ekOExAAjnu78249084 = ekOExAAjnu34044923;     ekOExAAjnu34044923 = ekOExAAjnu90393693;     ekOExAAjnu90393693 = ekOExAAjnu82507109;     ekOExAAjnu82507109 = ekOExAAjnu74558564;     ekOExAAjnu74558564 = ekOExAAjnu75967444;     ekOExAAjnu75967444 = ekOExAAjnu32328511;     ekOExAAjnu32328511 = ekOExAAjnu64599575;     ekOExAAjnu64599575 = ekOExAAjnu9012680;     ekOExAAjnu9012680 = ekOExAAjnu31584343;     ekOExAAjnu31584343 = ekOExAAjnu42676332;     ekOExAAjnu42676332 = ekOExAAjnu61896447;     ekOExAAjnu61896447 = ekOExAAjnu32606224;     ekOExAAjnu32606224 = ekOExAAjnu71638013;     ekOExAAjnu71638013 = ekOExAAjnu25407805;     ekOExAAjnu25407805 = ekOExAAjnu57204800;     ekOExAAjnu57204800 = ekOExAAjnu32225146;     ekOExAAjnu32225146 = ekOExAAjnu47653772;     ekOExAAjnu47653772 = ekOExAAjnu43732589;     ekOExAAjnu43732589 = ekOExAAjnu40708262;     ekOExAAjnu40708262 = ekOExAAjnu52973715;     ekOExAAjnu52973715 = ekOExAAjnu83314429;     ekOExAAjnu83314429 = ekOExAAjnu13629234;     ekOExAAjnu13629234 = ekOExAAjnu51113030;     ekOExAAjnu51113030 = ekOExAAjnu81843754;     ekOExAAjnu81843754 = ekOExAAjnu39224873;     ekOExAAjnu39224873 = ekOExAAjnu45895983;     ekOExAAjnu45895983 = ekOExAAjnu41582321;     ekOExAAjnu41582321 = ekOExAAjnu13701095;     ekOExAAjnu13701095 = ekOExAAjnu28146846;     ekOExAAjnu28146846 = ekOExAAjnu74766289;     ekOExAAjnu74766289 = ekOExAAjnu52679545;     ekOExAAjnu52679545 = ekOExAAjnu64309005;     ekOExAAjnu64309005 = ekOExAAjnu75347474;     ekOExAAjnu75347474 = ekOExAAjnu10256445;     ekOExAAjnu10256445 = ekOExAAjnu22820820;     ekOExAAjnu22820820 = ekOExAAjnu24597390;     ekOExAAjnu24597390 = ekOExAAjnu96654640;     ekOExAAjnu96654640 = ekOExAAjnu2716802;     ekOExAAjnu2716802 = ekOExAAjnu53121686;     ekOExAAjnu53121686 = ekOExAAjnu39511363;     ekOExAAjnu39511363 = ekOExAAjnu35420888;     ekOExAAjnu35420888 = ekOExAAjnu87492592;     ekOExAAjnu87492592 = ekOExAAjnu51735351;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void wAQPnHlrZI19209952() {     float fiollTTadt35651982 = -433611603;    float fiollTTadt25186394 = 66285157;    float fiollTTadt38088517 = -364167877;    float fiollTTadt32941893 = -489332528;    float fiollTTadt39798407 = -338038089;    float fiollTTadt68548319 = -390287279;    float fiollTTadt76855764 = -536932254;    float fiollTTadt44813571 = -672351714;    float fiollTTadt89040169 = 67054025;    float fiollTTadt59730537 = -701633850;    float fiollTTadt18695158 = -103350439;    float fiollTTadt61544938 = -560811981;    float fiollTTadt29857472 = -902091979;    float fiollTTadt24805997 = -850033942;    float fiollTTadt83609555 = -393010434;    float fiollTTadt29604358 = -790635420;    float fiollTTadt85974315 = -305822572;    float fiollTTadt76337821 = 29085661;    float fiollTTadt65950616 = -540791889;    float fiollTTadt68655465 = -210457754;    float fiollTTadt77376729 = -41164633;    float fiollTTadt83530127 = -480589967;    float fiollTTadt86873502 = -441123487;    float fiollTTadt27862721 = -788258071;    float fiollTTadt68115831 = -399547783;    float fiollTTadt50484077 = 21909914;    float fiollTTadt26642400 = -792244105;    float fiollTTadt30057328 = -734723728;    float fiollTTadt8789208 = -590179417;    float fiollTTadt86369992 = -560787221;    float fiollTTadt17810398 = -31277449;    float fiollTTadt95982535 = -336077772;    float fiollTTadt96111743 = -429979421;    float fiollTTadt10441869 = 72500384;    float fiollTTadt78839292 = 96732212;    float fiollTTadt83667940 = -590817096;    float fiollTTadt23464627 = -284231596;    float fiollTTadt15956738 = -590062098;    float fiollTTadt70768063 = -94779584;    float fiollTTadt35300059 = -939548880;    float fiollTTadt87762733 = -691488461;    float fiollTTadt62667703 = -936644807;    float fiollTTadt12921870 = -766698919;    float fiollTTadt88486794 = -543671035;    float fiollTTadt26537654 = -502757744;    float fiollTTadt16923049 = -940282479;    float fiollTTadt16350617 = -952280887;    float fiollTTadt3769625 = -587528608;    float fiollTTadt46365930 = -710998500;    float fiollTTadt66318087 = -182029039;    float fiollTTadt25446006 = -143570161;    float fiollTTadt47666826 = -636008921;    float fiollTTadt60436765 = -246439502;    float fiollTTadt77897643 = -177309041;    float fiollTTadt41833222 = -816760020;    float fiollTTadt52121854 = -953021637;    float fiollTTadt38312892 = -492591357;    float fiollTTadt10225796 = -575909806;    float fiollTTadt64826061 = 10215254;    float fiollTTadt89314329 = -259948003;    float fiollTTadt41905919 = -598043175;    float fiollTTadt46798437 = -802208527;    float fiollTTadt36024363 = 17827702;    float fiollTTadt2670178 = -372158754;    float fiollTTadt41920139 = -570356401;    float fiollTTadt22712623 = -767272667;    float fiollTTadt65433194 = -30832561;    float fiollTTadt19415603 = -874592364;    float fiollTTadt45966704 = -846766154;    float fiollTTadt99941614 = -802193338;    float fiollTTadt6139732 = -406403825;    float fiollTTadt70017577 = -715760474;    float fiollTTadt5569759 = -876134755;    float fiollTTadt30650557 = -601243009;    float fiollTTadt80892731 = -518969294;    float fiollTTadt14709027 = -104519826;    float fiollTTadt70608258 = -713891049;    float fiollTTadt98386707 = -897452453;    float fiollTTadt1325067 = -185500328;    float fiollTTadt51192783 = -459265304;    float fiollTTadt34133460 = -25809200;    float fiollTTadt22872776 = -104715497;    float fiollTTadt83691397 = 76274771;    float fiollTTadt42471121 = -308150379;    float fiollTTadt60923986 = -317217060;    float fiollTTadt70143571 = -395268528;    float fiollTTadt35545771 = 10361730;    float fiollTTadt18214101 = -152670380;    float fiollTTadt68608647 = -110739597;    float fiollTTadt26717438 = 49753848;    float fiollTTadt45355049 = 1774260;    float fiollTTadt13238831 = -708321790;    float fiollTTadt51130677 = -500277353;    float fiollTTadt81453733 = -834831581;    float fiollTTadt93394140 = -241505706;    float fiollTTadt40964297 = -889279935;    float fiollTTadt26643340 = -854472510;    float fiollTTadt10251692 = -294540165;    float fiollTTadt46566655 = -973314634;    float fiollTTadt3825032 = -433611603;     fiollTTadt35651982 = fiollTTadt25186394;     fiollTTadt25186394 = fiollTTadt38088517;     fiollTTadt38088517 = fiollTTadt32941893;     fiollTTadt32941893 = fiollTTadt39798407;     fiollTTadt39798407 = fiollTTadt68548319;     fiollTTadt68548319 = fiollTTadt76855764;     fiollTTadt76855764 = fiollTTadt44813571;     fiollTTadt44813571 = fiollTTadt89040169;     fiollTTadt89040169 = fiollTTadt59730537;     fiollTTadt59730537 = fiollTTadt18695158;     fiollTTadt18695158 = fiollTTadt61544938;     fiollTTadt61544938 = fiollTTadt29857472;     fiollTTadt29857472 = fiollTTadt24805997;     fiollTTadt24805997 = fiollTTadt83609555;     fiollTTadt83609555 = fiollTTadt29604358;     fiollTTadt29604358 = fiollTTadt85974315;     fiollTTadt85974315 = fiollTTadt76337821;     fiollTTadt76337821 = fiollTTadt65950616;     fiollTTadt65950616 = fiollTTadt68655465;     fiollTTadt68655465 = fiollTTadt77376729;     fiollTTadt77376729 = fiollTTadt83530127;     fiollTTadt83530127 = fiollTTadt86873502;     fiollTTadt86873502 = fiollTTadt27862721;     fiollTTadt27862721 = fiollTTadt68115831;     fiollTTadt68115831 = fiollTTadt50484077;     fiollTTadt50484077 = fiollTTadt26642400;     fiollTTadt26642400 = fiollTTadt30057328;     fiollTTadt30057328 = fiollTTadt8789208;     fiollTTadt8789208 = fiollTTadt86369992;     fiollTTadt86369992 = fiollTTadt17810398;     fiollTTadt17810398 = fiollTTadt95982535;     fiollTTadt95982535 = fiollTTadt96111743;     fiollTTadt96111743 = fiollTTadt10441869;     fiollTTadt10441869 = fiollTTadt78839292;     fiollTTadt78839292 = fiollTTadt83667940;     fiollTTadt83667940 = fiollTTadt23464627;     fiollTTadt23464627 = fiollTTadt15956738;     fiollTTadt15956738 = fiollTTadt70768063;     fiollTTadt70768063 = fiollTTadt35300059;     fiollTTadt35300059 = fiollTTadt87762733;     fiollTTadt87762733 = fiollTTadt62667703;     fiollTTadt62667703 = fiollTTadt12921870;     fiollTTadt12921870 = fiollTTadt88486794;     fiollTTadt88486794 = fiollTTadt26537654;     fiollTTadt26537654 = fiollTTadt16923049;     fiollTTadt16923049 = fiollTTadt16350617;     fiollTTadt16350617 = fiollTTadt3769625;     fiollTTadt3769625 = fiollTTadt46365930;     fiollTTadt46365930 = fiollTTadt66318087;     fiollTTadt66318087 = fiollTTadt25446006;     fiollTTadt25446006 = fiollTTadt47666826;     fiollTTadt47666826 = fiollTTadt60436765;     fiollTTadt60436765 = fiollTTadt77897643;     fiollTTadt77897643 = fiollTTadt41833222;     fiollTTadt41833222 = fiollTTadt52121854;     fiollTTadt52121854 = fiollTTadt38312892;     fiollTTadt38312892 = fiollTTadt10225796;     fiollTTadt10225796 = fiollTTadt64826061;     fiollTTadt64826061 = fiollTTadt89314329;     fiollTTadt89314329 = fiollTTadt41905919;     fiollTTadt41905919 = fiollTTadt46798437;     fiollTTadt46798437 = fiollTTadt36024363;     fiollTTadt36024363 = fiollTTadt2670178;     fiollTTadt2670178 = fiollTTadt41920139;     fiollTTadt41920139 = fiollTTadt22712623;     fiollTTadt22712623 = fiollTTadt65433194;     fiollTTadt65433194 = fiollTTadt19415603;     fiollTTadt19415603 = fiollTTadt45966704;     fiollTTadt45966704 = fiollTTadt99941614;     fiollTTadt99941614 = fiollTTadt6139732;     fiollTTadt6139732 = fiollTTadt70017577;     fiollTTadt70017577 = fiollTTadt5569759;     fiollTTadt5569759 = fiollTTadt30650557;     fiollTTadt30650557 = fiollTTadt80892731;     fiollTTadt80892731 = fiollTTadt14709027;     fiollTTadt14709027 = fiollTTadt70608258;     fiollTTadt70608258 = fiollTTadt98386707;     fiollTTadt98386707 = fiollTTadt1325067;     fiollTTadt1325067 = fiollTTadt51192783;     fiollTTadt51192783 = fiollTTadt34133460;     fiollTTadt34133460 = fiollTTadt22872776;     fiollTTadt22872776 = fiollTTadt83691397;     fiollTTadt83691397 = fiollTTadt42471121;     fiollTTadt42471121 = fiollTTadt60923986;     fiollTTadt60923986 = fiollTTadt70143571;     fiollTTadt70143571 = fiollTTadt35545771;     fiollTTadt35545771 = fiollTTadt18214101;     fiollTTadt18214101 = fiollTTadt68608647;     fiollTTadt68608647 = fiollTTadt26717438;     fiollTTadt26717438 = fiollTTadt45355049;     fiollTTadt45355049 = fiollTTadt13238831;     fiollTTadt13238831 = fiollTTadt51130677;     fiollTTadt51130677 = fiollTTadt81453733;     fiollTTadt81453733 = fiollTTadt93394140;     fiollTTadt93394140 = fiollTTadt40964297;     fiollTTadt40964297 = fiollTTadt26643340;     fiollTTadt26643340 = fiollTTadt10251692;     fiollTTadt10251692 = fiollTTadt46566655;     fiollTTadt46566655 = fiollTTadt3825032;     fiollTTadt3825032 = fiollTTadt35651982;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void zyulYfTdgz86171353() {     float EMATJBoVLM25771819 = -364891945;    float EMATJBoVLM46883775 = -351236139;    float EMATJBoVLM34894428 = -458090951;    float EMATJBoVLM91520327 = -496045180;    float EMATJBoVLM61695245 = -747716852;    float EMATJBoVLM84140156 = 17646802;    float EMATJBoVLM40066539 = -979014194;    float EMATJBoVLM66906184 = -12976770;    float EMATJBoVLM95592021 = -754484683;    float EMATJBoVLM60625721 = 91684754;    float EMATJBoVLM15167583 = -571242668;    float EMATJBoVLM10586123 = -875878479;    float EMATJBoVLM56519 = -135986314;    float EMATJBoVLM17069071 = -93347878;    float EMATJBoVLM26856036 = -840844228;    float EMATJBoVLM28348648 = -823810941;    float EMATJBoVLM85789255 = -386782383;    float EMATJBoVLM20694067 = -810835253;    float EMATJBoVLM47293277 = -525184591;    float EMATJBoVLM8053477 = -370360515;    float EMATJBoVLM44968556 = -556056099;    float EMATJBoVLM59907975 = -223678486;    float EMATJBoVLM56990317 = -206541250;    float EMATJBoVLM79433926 = -17202969;    float EMATJBoVLM43443709 = -369752580;    float EMATJBoVLM85849119 = -862169749;    float EMATJBoVLM18831317 = -852572811;    float EMATJBoVLM88631228 = -303580774;    float EMATJBoVLM82676652 = -898448780;    float EMATJBoVLM10248942 = -110620986;    float EMATJBoVLM54686479 = -745037227;    float EMATJBoVLM80073307 = -128723953;    float EMATJBoVLM90533207 = -932148796;    float EMATJBoVLM34563351 = -895632506;    float EMATJBoVLM96793865 = -912917374;    float EMATJBoVLM79727137 = -973612253;    float EMATJBoVLM35639563 = -999700878;    float EMATJBoVLM10231701 = -451384021;    float EMATJBoVLM16614677 = -514923046;    float EMATJBoVLM51685094 = -453688339;    float EMATJBoVLM89318074 = -485293635;    float EMATJBoVLM3009827 = -944930103;    float EMATJBoVLM33022071 = -701254768;    float EMATJBoVLM78380633 = 35281333;    float EMATJBoVLM2520124 = 11472899;    float EMATJBoVLM77790011 = -135951056;    float EMATJBoVLM24471700 = -982044009;    float EMATJBoVLM69539665 = -122946218;    float EMATJBoVLM92942973 = -710701707;    float EMATJBoVLM15643916 = -226050262;    float EMATJBoVLM68070900 = -96507213;    float EMATJBoVLM5987191 = -982581502;    float EMATJBoVLM85337568 = -950346505;    float EMATJBoVLM41054976 = -832784174;    float EMATJBoVLM41202798 = -702259569;    float EMATJBoVLM65863844 = -41213460;    float EMATJBoVLM89893458 = -44694889;    float EMATJBoVLM55460501 = -340887983;    float EMATJBoVLM48076619 = -26292601;    float EMATJBoVLM75846125 = -885547103;    float EMATJBoVLM65308839 = -129780388;    float EMATJBoVLM51435311 = -575433420;    float EMATJBoVLM84229532 = -114527991;    float EMATJBoVLM85343079 = -543863697;    float EMATJBoVLM5939242 = -163278019;    float EMATJBoVLM35094276 = -342518716;    float EMATJBoVLM20052915 = -943729683;    float EMATJBoVLM65493167 = -240353808;    float EMATJBoVLM20275206 = -180430505;    float EMATJBoVLM47128899 = -867231976;    float EMATJBoVLM92709084 = -824110063;    float EMATJBoVLM75557554 = -935398362;    float EMATJBoVLM4079391 = -195912207;    float EMATJBoVLM95608183 = 28503747;    float EMATJBoVLM18735402 = -885066880;    float EMATJBoVLM41958729 = -611125997;    float EMATJBoVLM26885905 = -522423718;    float EMATJBoVLM78609683 = -141822584;    float EMATJBoVLM76913802 = 71324131;    float EMATJBoVLM65653698 = -133801525;    float EMATJBoVLM61377419 = -880125741;    float EMATJBoVLM49291652 = -629626594;    float EMATJBoVLM95688254 = -592879067;    float EMATJBoVLM67032736 = -572398518;    float EMATJBoVLM42178042 = 85886227;    float EMATJBoVLM48699288 = -762455726;    float EMATJBoVLM94735738 = -178377448;    float EMATJBoVLM49478232 = 635377;    float EMATJBoVLM93360553 = -93372938;    float EMATJBoVLM30930021 = -771703914;    float EMATJBoVLM89833678 = -828917364;    float EMATJBoVLM80179061 = -558812896;    float EMATJBoVLM62155082 = -325091421;    float EMATJBoVLM40768551 = -629375943;    float EMATJBoVLM86376254 = -223907952;    float EMATJBoVLM37882764 = -909860215;    float EMATJBoVLM18780295 = -730402112;    float EMATJBoVLM47678991 = -57391072;    float EMATJBoVLM72441392 = -801440648;    float EMATJBoVLM67425848 = -364891945;     EMATJBoVLM25771819 = EMATJBoVLM46883775;     EMATJBoVLM46883775 = EMATJBoVLM34894428;     EMATJBoVLM34894428 = EMATJBoVLM91520327;     EMATJBoVLM91520327 = EMATJBoVLM61695245;     EMATJBoVLM61695245 = EMATJBoVLM84140156;     EMATJBoVLM84140156 = EMATJBoVLM40066539;     EMATJBoVLM40066539 = EMATJBoVLM66906184;     EMATJBoVLM66906184 = EMATJBoVLM95592021;     EMATJBoVLM95592021 = EMATJBoVLM60625721;     EMATJBoVLM60625721 = EMATJBoVLM15167583;     EMATJBoVLM15167583 = EMATJBoVLM10586123;     EMATJBoVLM10586123 = EMATJBoVLM56519;     EMATJBoVLM56519 = EMATJBoVLM17069071;     EMATJBoVLM17069071 = EMATJBoVLM26856036;     EMATJBoVLM26856036 = EMATJBoVLM28348648;     EMATJBoVLM28348648 = EMATJBoVLM85789255;     EMATJBoVLM85789255 = EMATJBoVLM20694067;     EMATJBoVLM20694067 = EMATJBoVLM47293277;     EMATJBoVLM47293277 = EMATJBoVLM8053477;     EMATJBoVLM8053477 = EMATJBoVLM44968556;     EMATJBoVLM44968556 = EMATJBoVLM59907975;     EMATJBoVLM59907975 = EMATJBoVLM56990317;     EMATJBoVLM56990317 = EMATJBoVLM79433926;     EMATJBoVLM79433926 = EMATJBoVLM43443709;     EMATJBoVLM43443709 = EMATJBoVLM85849119;     EMATJBoVLM85849119 = EMATJBoVLM18831317;     EMATJBoVLM18831317 = EMATJBoVLM88631228;     EMATJBoVLM88631228 = EMATJBoVLM82676652;     EMATJBoVLM82676652 = EMATJBoVLM10248942;     EMATJBoVLM10248942 = EMATJBoVLM54686479;     EMATJBoVLM54686479 = EMATJBoVLM80073307;     EMATJBoVLM80073307 = EMATJBoVLM90533207;     EMATJBoVLM90533207 = EMATJBoVLM34563351;     EMATJBoVLM34563351 = EMATJBoVLM96793865;     EMATJBoVLM96793865 = EMATJBoVLM79727137;     EMATJBoVLM79727137 = EMATJBoVLM35639563;     EMATJBoVLM35639563 = EMATJBoVLM10231701;     EMATJBoVLM10231701 = EMATJBoVLM16614677;     EMATJBoVLM16614677 = EMATJBoVLM51685094;     EMATJBoVLM51685094 = EMATJBoVLM89318074;     EMATJBoVLM89318074 = EMATJBoVLM3009827;     EMATJBoVLM3009827 = EMATJBoVLM33022071;     EMATJBoVLM33022071 = EMATJBoVLM78380633;     EMATJBoVLM78380633 = EMATJBoVLM2520124;     EMATJBoVLM2520124 = EMATJBoVLM77790011;     EMATJBoVLM77790011 = EMATJBoVLM24471700;     EMATJBoVLM24471700 = EMATJBoVLM69539665;     EMATJBoVLM69539665 = EMATJBoVLM92942973;     EMATJBoVLM92942973 = EMATJBoVLM15643916;     EMATJBoVLM15643916 = EMATJBoVLM68070900;     EMATJBoVLM68070900 = EMATJBoVLM5987191;     EMATJBoVLM5987191 = EMATJBoVLM85337568;     EMATJBoVLM85337568 = EMATJBoVLM41054976;     EMATJBoVLM41054976 = EMATJBoVLM41202798;     EMATJBoVLM41202798 = EMATJBoVLM65863844;     EMATJBoVLM65863844 = EMATJBoVLM89893458;     EMATJBoVLM89893458 = EMATJBoVLM55460501;     EMATJBoVLM55460501 = EMATJBoVLM48076619;     EMATJBoVLM48076619 = EMATJBoVLM75846125;     EMATJBoVLM75846125 = EMATJBoVLM65308839;     EMATJBoVLM65308839 = EMATJBoVLM51435311;     EMATJBoVLM51435311 = EMATJBoVLM84229532;     EMATJBoVLM84229532 = EMATJBoVLM85343079;     EMATJBoVLM85343079 = EMATJBoVLM5939242;     EMATJBoVLM5939242 = EMATJBoVLM35094276;     EMATJBoVLM35094276 = EMATJBoVLM20052915;     EMATJBoVLM20052915 = EMATJBoVLM65493167;     EMATJBoVLM65493167 = EMATJBoVLM20275206;     EMATJBoVLM20275206 = EMATJBoVLM47128899;     EMATJBoVLM47128899 = EMATJBoVLM92709084;     EMATJBoVLM92709084 = EMATJBoVLM75557554;     EMATJBoVLM75557554 = EMATJBoVLM4079391;     EMATJBoVLM4079391 = EMATJBoVLM95608183;     EMATJBoVLM95608183 = EMATJBoVLM18735402;     EMATJBoVLM18735402 = EMATJBoVLM41958729;     EMATJBoVLM41958729 = EMATJBoVLM26885905;     EMATJBoVLM26885905 = EMATJBoVLM78609683;     EMATJBoVLM78609683 = EMATJBoVLM76913802;     EMATJBoVLM76913802 = EMATJBoVLM65653698;     EMATJBoVLM65653698 = EMATJBoVLM61377419;     EMATJBoVLM61377419 = EMATJBoVLM49291652;     EMATJBoVLM49291652 = EMATJBoVLM95688254;     EMATJBoVLM95688254 = EMATJBoVLM67032736;     EMATJBoVLM67032736 = EMATJBoVLM42178042;     EMATJBoVLM42178042 = EMATJBoVLM48699288;     EMATJBoVLM48699288 = EMATJBoVLM94735738;     EMATJBoVLM94735738 = EMATJBoVLM49478232;     EMATJBoVLM49478232 = EMATJBoVLM93360553;     EMATJBoVLM93360553 = EMATJBoVLM30930021;     EMATJBoVLM30930021 = EMATJBoVLM89833678;     EMATJBoVLM89833678 = EMATJBoVLM80179061;     EMATJBoVLM80179061 = EMATJBoVLM62155082;     EMATJBoVLM62155082 = EMATJBoVLM40768551;     EMATJBoVLM40768551 = EMATJBoVLM86376254;     EMATJBoVLM86376254 = EMATJBoVLM37882764;     EMATJBoVLM37882764 = EMATJBoVLM18780295;     EMATJBoVLM18780295 = EMATJBoVLM47678991;     EMATJBoVLM47678991 = EMATJBoVLM72441392;     EMATJBoVLM72441392 = EMATJBoVLM67425848;     EMATJBoVLM67425848 = EMATJBoVLM25771819;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ThSReFxsto22816328() {     float PrQXYXakEp48158937 = 704091;    float PrQXYXakEp31231275 = -299779193;    float PrQXYXakEp63663706 = -697744795;    float PrQXYXakEp6527017 = -502452712;    float PrQXYXakEp59869499 = -238773854;    float PrQXYXakEp99023272 = -942961576;    float PrQXYXakEp32222278 = -801001500;    float PrQXYXakEp42540043 = -483573415;    float PrQXYXakEp92755152 = -638680722;    float PrQXYXakEp52389305 = -751056579;    float PrQXYXakEp52709442 = -567867069;    float PrQXYXakEp66489072 = -26623772;    float PrQXYXakEp67064699 = -754703633;    float PrQXYXakEp59683823 = -621056635;    float PrQXYXakEp63591313 = -468321942;    float PrQXYXakEp72604560 = -105478483;    float PrQXYXakEp35612607 = -664062203;    float PrQXYXakEp26670484 = -162577943;    float PrQXYXakEp88574908 = -660286717;    float PrQXYXakEp86569759 = -622994969;    float PrQXYXakEp45851663 = -547543407;    float PrQXYXakEp23723194 = -728444799;    float PrQXYXakEp60283640 = -382621842;    float PrQXYXakEp5933714 = -581195826;    float PrQXYXakEp78983956 = 8688295;    float PrQXYXakEp74152113 = -206063973;    float PrQXYXakEp65920737 = -610159304;    float PrQXYXakEp94542678 = -92035228;    float PrQXYXakEp89569213 = -142705899;    float PrQXYXakEp19406122 = -30916853;    float PrQXYXakEp98977284 = -826353379;    float PrQXYXakEp37614498 = -780795308;    float PrQXYXakEp71571878 = -361492291;    float PrQXYXakEp93952038 = -119759356;    float PrQXYXakEp73023229 = -976673796;    float PrQXYXakEp21420006 = -189007629;    float PrQXYXakEp29079275 = -732648830;    float PrQXYXakEp63857802 = -319009493;    float PrQXYXakEp64922808 = -915969077;    float PrQXYXakEp71870808 = -589912369;    float PrQXYXakEp18075446 = -988471301;    float PrQXYXakEp91518218 = -702838794;    float PrQXYXakEp38572263 = -588785352;    float PrQXYXakEp77824753 = 37917684;    float PrQXYXakEp70503390 = -897670579;    float PrQXYXakEp85890292 = -318180151;    float PrQXYXakEp36769098 = -460454262;    float PrQXYXakEp14138340 = -979481208;    float PrQXYXakEp87402878 = -660418406;    float PrQXYXakEp12727662 = -368070521;    float PrQXYXakEp76940116 = -451583490;    float PrQXYXakEp79838448 = -313400784;    float PrQXYXakEp63651971 = -622257736;    float PrQXYXakEp1341522 = -8464983;    float PrQXYXakEp76964665 = -842963684;    float PrQXYXakEp24435743 = -270851110;    float PrQXYXakEp70947635 = -917157352;    float PrQXYXakEp57729993 = -16548970;    float PrQXYXakEp27543060 = -411141008;    float PrQXYXakEp85717385 = 67290119;    float PrQXYXakEp33102536 = -232802273;    float PrQXYXakEp37679600 = -608966273;    float PrQXYXakEp52970830 = -240867516;    float PrQXYXakEp73349031 = -507763870;    float PrQXYXakEp53412021 = -924703200;    float PrQXYXakEp15094945 = -787071762;    float PrQXYXakEp94917193 = -665131481;    float PrQXYXakEp73112660 = -534944277;    float PrQXYXakEp86660593 = -644382839;    float PrQXYXakEp42171307 = -179314313;    float PrQXYXakEp43525285 = -372829654;    float PrQXYXakEp71754805 = -245052710;    float PrQXYXakEp61747675 = -246608866;    float PrQXYXakEp16704100 = 29625652;    float PrQXYXakEp68494314 = -634523668;    float PrQXYXakEp54333445 = -844704614;    float PrQXYXakEp85150931 = -39659447;    float PrQXYXakEp82458887 = -320539527;    float PrQXYXakEp35430323 = -683525248;    float PrQXYXakEp93093663 = -673131554;    float PrQXYXakEp37383016 = -745609712;    float PrQXYXakEp51782398 = -630678096;    float PrQXYXakEp7139800 = -431616823;    float PrQXYXakEp76841552 = -774635378;    float PrQXYXakEp42466005 = -579333363;    float PrQXYXakEp19138837 = -412952596;    float PrQXYXakEp73962526 = -58537573;    float PrQXYXakEp70230357 = -253027309;    float PrQXYXakEp16987374 = -276795673;    float PrQXYXakEp48587487 = -605822686;    float PrQXYXakEp50472371 = -271850278;    float PrQXYXakEp71349282 = -616099861;    float PrQXYXakEp36314742 = -907868486;    float PrQXYXakEp79205423 = -883259197;    float PrQXYXakEp38768273 = -257110096;    float PrQXYXakEp80395846 = -279505029;    float PrQXYXakEp38547389 = -361971278;    float PrQXYXakEp65223232 = 18978517;    float PrQXYXakEp24412732 = -37379116;    float PrQXYXakEp55408446 = 704091;     PrQXYXakEp48158937 = PrQXYXakEp31231275;     PrQXYXakEp31231275 = PrQXYXakEp63663706;     PrQXYXakEp63663706 = PrQXYXakEp6527017;     PrQXYXakEp6527017 = PrQXYXakEp59869499;     PrQXYXakEp59869499 = PrQXYXakEp99023272;     PrQXYXakEp99023272 = PrQXYXakEp32222278;     PrQXYXakEp32222278 = PrQXYXakEp42540043;     PrQXYXakEp42540043 = PrQXYXakEp92755152;     PrQXYXakEp92755152 = PrQXYXakEp52389305;     PrQXYXakEp52389305 = PrQXYXakEp52709442;     PrQXYXakEp52709442 = PrQXYXakEp66489072;     PrQXYXakEp66489072 = PrQXYXakEp67064699;     PrQXYXakEp67064699 = PrQXYXakEp59683823;     PrQXYXakEp59683823 = PrQXYXakEp63591313;     PrQXYXakEp63591313 = PrQXYXakEp72604560;     PrQXYXakEp72604560 = PrQXYXakEp35612607;     PrQXYXakEp35612607 = PrQXYXakEp26670484;     PrQXYXakEp26670484 = PrQXYXakEp88574908;     PrQXYXakEp88574908 = PrQXYXakEp86569759;     PrQXYXakEp86569759 = PrQXYXakEp45851663;     PrQXYXakEp45851663 = PrQXYXakEp23723194;     PrQXYXakEp23723194 = PrQXYXakEp60283640;     PrQXYXakEp60283640 = PrQXYXakEp5933714;     PrQXYXakEp5933714 = PrQXYXakEp78983956;     PrQXYXakEp78983956 = PrQXYXakEp74152113;     PrQXYXakEp74152113 = PrQXYXakEp65920737;     PrQXYXakEp65920737 = PrQXYXakEp94542678;     PrQXYXakEp94542678 = PrQXYXakEp89569213;     PrQXYXakEp89569213 = PrQXYXakEp19406122;     PrQXYXakEp19406122 = PrQXYXakEp98977284;     PrQXYXakEp98977284 = PrQXYXakEp37614498;     PrQXYXakEp37614498 = PrQXYXakEp71571878;     PrQXYXakEp71571878 = PrQXYXakEp93952038;     PrQXYXakEp93952038 = PrQXYXakEp73023229;     PrQXYXakEp73023229 = PrQXYXakEp21420006;     PrQXYXakEp21420006 = PrQXYXakEp29079275;     PrQXYXakEp29079275 = PrQXYXakEp63857802;     PrQXYXakEp63857802 = PrQXYXakEp64922808;     PrQXYXakEp64922808 = PrQXYXakEp71870808;     PrQXYXakEp71870808 = PrQXYXakEp18075446;     PrQXYXakEp18075446 = PrQXYXakEp91518218;     PrQXYXakEp91518218 = PrQXYXakEp38572263;     PrQXYXakEp38572263 = PrQXYXakEp77824753;     PrQXYXakEp77824753 = PrQXYXakEp70503390;     PrQXYXakEp70503390 = PrQXYXakEp85890292;     PrQXYXakEp85890292 = PrQXYXakEp36769098;     PrQXYXakEp36769098 = PrQXYXakEp14138340;     PrQXYXakEp14138340 = PrQXYXakEp87402878;     PrQXYXakEp87402878 = PrQXYXakEp12727662;     PrQXYXakEp12727662 = PrQXYXakEp76940116;     PrQXYXakEp76940116 = PrQXYXakEp79838448;     PrQXYXakEp79838448 = PrQXYXakEp63651971;     PrQXYXakEp63651971 = PrQXYXakEp1341522;     PrQXYXakEp1341522 = PrQXYXakEp76964665;     PrQXYXakEp76964665 = PrQXYXakEp24435743;     PrQXYXakEp24435743 = PrQXYXakEp70947635;     PrQXYXakEp70947635 = PrQXYXakEp57729993;     PrQXYXakEp57729993 = PrQXYXakEp27543060;     PrQXYXakEp27543060 = PrQXYXakEp85717385;     PrQXYXakEp85717385 = PrQXYXakEp33102536;     PrQXYXakEp33102536 = PrQXYXakEp37679600;     PrQXYXakEp37679600 = PrQXYXakEp52970830;     PrQXYXakEp52970830 = PrQXYXakEp73349031;     PrQXYXakEp73349031 = PrQXYXakEp53412021;     PrQXYXakEp53412021 = PrQXYXakEp15094945;     PrQXYXakEp15094945 = PrQXYXakEp94917193;     PrQXYXakEp94917193 = PrQXYXakEp73112660;     PrQXYXakEp73112660 = PrQXYXakEp86660593;     PrQXYXakEp86660593 = PrQXYXakEp42171307;     PrQXYXakEp42171307 = PrQXYXakEp43525285;     PrQXYXakEp43525285 = PrQXYXakEp71754805;     PrQXYXakEp71754805 = PrQXYXakEp61747675;     PrQXYXakEp61747675 = PrQXYXakEp16704100;     PrQXYXakEp16704100 = PrQXYXakEp68494314;     PrQXYXakEp68494314 = PrQXYXakEp54333445;     PrQXYXakEp54333445 = PrQXYXakEp85150931;     PrQXYXakEp85150931 = PrQXYXakEp82458887;     PrQXYXakEp82458887 = PrQXYXakEp35430323;     PrQXYXakEp35430323 = PrQXYXakEp93093663;     PrQXYXakEp93093663 = PrQXYXakEp37383016;     PrQXYXakEp37383016 = PrQXYXakEp51782398;     PrQXYXakEp51782398 = PrQXYXakEp7139800;     PrQXYXakEp7139800 = PrQXYXakEp76841552;     PrQXYXakEp76841552 = PrQXYXakEp42466005;     PrQXYXakEp42466005 = PrQXYXakEp19138837;     PrQXYXakEp19138837 = PrQXYXakEp73962526;     PrQXYXakEp73962526 = PrQXYXakEp70230357;     PrQXYXakEp70230357 = PrQXYXakEp16987374;     PrQXYXakEp16987374 = PrQXYXakEp48587487;     PrQXYXakEp48587487 = PrQXYXakEp50472371;     PrQXYXakEp50472371 = PrQXYXakEp71349282;     PrQXYXakEp71349282 = PrQXYXakEp36314742;     PrQXYXakEp36314742 = PrQXYXakEp79205423;     PrQXYXakEp79205423 = PrQXYXakEp38768273;     PrQXYXakEp38768273 = PrQXYXakEp80395846;     PrQXYXakEp80395846 = PrQXYXakEp38547389;     PrQXYXakEp38547389 = PrQXYXakEp65223232;     PrQXYXakEp65223232 = PrQXYXakEp24412732;     PrQXYXakEp24412732 = PrQXYXakEp55408446;     PrQXYXakEp55408446 = PrQXYXakEp48158937;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void unpOZrQJVK50080388() {     float fZOyeDlKUs28405083 = 10667548;    float fZOyeDlKUs36053722 = 7773341;    float fZOyeDlKUs55962316 = -928462331;    float fZOyeDlKUs38604027 = -695337186;    float fZOyeDlKUs94823072 = -589776059;    float fZOyeDlKUs95401514 = -427660604;    float fZOyeDlKUs90096489 = -880628912;    float fZOyeDlKUs17511221 = -560646209;    float fZOyeDlKUs23118692 = -368112067;    float fZOyeDlKUs57540159 = -627612501;    float fZOyeDlKUs25333686 = -444179456;    float fZOyeDlKUs50279764 = -921278405;    float fZOyeDlKUs75609877 = -300833829;    float fZOyeDlKUs90365750 = -962531455;    float fZOyeDlKUs4912166 = -301276679;    float fZOyeDlKUs95528591 = -939033874;    float fZOyeDlKUs79389727 = 93632744;    float fZOyeDlKUs92382441 = -345348150;    float fZOyeDlKUs30831960 = -11089855;    float fZOyeDlKUs93292018 = -330776039;    float fZOyeDlKUs1365893 = -766859966;    float fZOyeDlKUs98182623 = -804629953;    float fZOyeDlKUs63638873 = -554499526;    float fZOyeDlKUs65426016 = -258165100;    float fZOyeDlKUs1197022 = -605027446;    float fZOyeDlKUs28308121 = -966017371;    float fZOyeDlKUs80076988 = -430017005;    float fZOyeDlKUs76286953 = -820782333;    float fZOyeDlKUs24665656 = -113174310;    float fZOyeDlKUs91074151 = -555153009;    float fZOyeDlKUs39316769 = -766779702;    float fZOyeDlKUs21072184 = 25734091;    float fZOyeDlKUs74962383 = -63886826;    float fZOyeDlKUs41912165 = 20656595;    float fZOyeDlKUs26574337 = -536659042;    float fZOyeDlKUs70710209 = -874832196;    float fZOyeDlKUs41487781 = -963934016;    float fZOyeDlKUs82490048 = -46390660;    float fZOyeDlKUs21302439 = 56425415;    float fZOyeDlKUs32767984 = -8759601;    float fZOyeDlKUs33330460 = -488137751;    float fZOyeDlKUs86504805 = -525617302;    float fZOyeDlKUs18489305 = -998766797;    float fZOyeDlKUs98380533 = -347213137;    float fZOyeDlKUs38450278 = -495949892;    float fZOyeDlKUs67196248 = 2527368;    float fZOyeDlKUs25313471 = -38699884;    float fZOyeDlKUs70294838 = -541555071;    float fZOyeDlKUs61898576 = 3939040;    float fZOyeDlKUs91333896 = -869088083;    float fZOyeDlKUs48930533 = -778902587;    float fZOyeDlKUs81931920 = -624400199;    float fZOyeDlKUs38005230 = 61982267;    float fZOyeDlKUs17405917 = -787495397;    float fZOyeDlKUs48714496 = -857063505;    float fZOyeDlKUs30222459 = -184702499;    float fZOyeDlKUs72414848 = -437727133;    float fZOyeDlKUs90536299 = -570297232;    float fZOyeDlKUs37407005 = 9690259;    float fZOyeDlKUs66514951 = -623758688;    float fZOyeDlKUs15324526 = -997643600;    float fZOyeDlKUs13809537 = 40153420;    float fZOyeDlKUs92845564 = -347471900;    float fZOyeDlKUs32044540 = -812959059;    float fZOyeDlKUs18223391 = -860832800;    float fZOyeDlKUs4261503 = -369913548;    float fZOyeDlKUs75317380 = -757391579;    float fZOyeDlKUs33697713 = -221490424;    float fZOyeDlKUs63791414 = -325872413;    float fZOyeDlKUs34201956 = -426444484;    float fZOyeDlKUs54040811 = -975099858;    float fZOyeDlKUs96899679 = -859976596;    float fZOyeDlKUs71080003 = -301773565;    float fZOyeDlKUs98063975 = 97669745;    float fZOyeDlKUs59961559 = -842638289;    float fZOyeDlKUs14861087 = -141242664;    float fZOyeDlKUs79693318 = -805863156;    float fZOyeDlKUs65258340 = -107286390;    float fZOyeDlKUs26975739 = -762215208;    float fZOyeDlKUs34000774 = -507554814;    float fZOyeDlKUs2994650 = -827317488;    float fZOyeDlKUs9782151 = -888461934;    float fZOyeDlKUs14388378 = -724721373;    float fZOyeDlKUs33331760 = -244086228;    float fZOyeDlKUs42143618 = -776250422;    float fZOyeDlKUs57384849 = -42379504;    float fZOyeDlKUs83066953 = 63751824;    float fZOyeDlKUs57556467 = -276391429;    float fZOyeDlKUs93197669 = -122279900;    float fZOyeDlKUs96351877 = -251956544;    float fZOyeDlKUs98295360 = -337105063;    float fZOyeDlKUs50951481 = -293636785;    float fZOyeDlKUs45083043 = 43919080;    float fZOyeDlKUs54787487 = -319815897;    float fZOyeDlKUs17443459 = -11116002;    float fZOyeDlKUs19520924 = -428291171;    float fZOyeDlKUs93659241 = -78145403;    float fZOyeDlKUs86444764 = -85807739;    float fZOyeDlKUs80157142 = -486380337;    float fZOyeDlKUs34188776 = 10667548;     fZOyeDlKUs28405083 = fZOyeDlKUs36053722;     fZOyeDlKUs36053722 = fZOyeDlKUs55962316;     fZOyeDlKUs55962316 = fZOyeDlKUs38604027;     fZOyeDlKUs38604027 = fZOyeDlKUs94823072;     fZOyeDlKUs94823072 = fZOyeDlKUs95401514;     fZOyeDlKUs95401514 = fZOyeDlKUs90096489;     fZOyeDlKUs90096489 = fZOyeDlKUs17511221;     fZOyeDlKUs17511221 = fZOyeDlKUs23118692;     fZOyeDlKUs23118692 = fZOyeDlKUs57540159;     fZOyeDlKUs57540159 = fZOyeDlKUs25333686;     fZOyeDlKUs25333686 = fZOyeDlKUs50279764;     fZOyeDlKUs50279764 = fZOyeDlKUs75609877;     fZOyeDlKUs75609877 = fZOyeDlKUs90365750;     fZOyeDlKUs90365750 = fZOyeDlKUs4912166;     fZOyeDlKUs4912166 = fZOyeDlKUs95528591;     fZOyeDlKUs95528591 = fZOyeDlKUs79389727;     fZOyeDlKUs79389727 = fZOyeDlKUs92382441;     fZOyeDlKUs92382441 = fZOyeDlKUs30831960;     fZOyeDlKUs30831960 = fZOyeDlKUs93292018;     fZOyeDlKUs93292018 = fZOyeDlKUs1365893;     fZOyeDlKUs1365893 = fZOyeDlKUs98182623;     fZOyeDlKUs98182623 = fZOyeDlKUs63638873;     fZOyeDlKUs63638873 = fZOyeDlKUs65426016;     fZOyeDlKUs65426016 = fZOyeDlKUs1197022;     fZOyeDlKUs1197022 = fZOyeDlKUs28308121;     fZOyeDlKUs28308121 = fZOyeDlKUs80076988;     fZOyeDlKUs80076988 = fZOyeDlKUs76286953;     fZOyeDlKUs76286953 = fZOyeDlKUs24665656;     fZOyeDlKUs24665656 = fZOyeDlKUs91074151;     fZOyeDlKUs91074151 = fZOyeDlKUs39316769;     fZOyeDlKUs39316769 = fZOyeDlKUs21072184;     fZOyeDlKUs21072184 = fZOyeDlKUs74962383;     fZOyeDlKUs74962383 = fZOyeDlKUs41912165;     fZOyeDlKUs41912165 = fZOyeDlKUs26574337;     fZOyeDlKUs26574337 = fZOyeDlKUs70710209;     fZOyeDlKUs70710209 = fZOyeDlKUs41487781;     fZOyeDlKUs41487781 = fZOyeDlKUs82490048;     fZOyeDlKUs82490048 = fZOyeDlKUs21302439;     fZOyeDlKUs21302439 = fZOyeDlKUs32767984;     fZOyeDlKUs32767984 = fZOyeDlKUs33330460;     fZOyeDlKUs33330460 = fZOyeDlKUs86504805;     fZOyeDlKUs86504805 = fZOyeDlKUs18489305;     fZOyeDlKUs18489305 = fZOyeDlKUs98380533;     fZOyeDlKUs98380533 = fZOyeDlKUs38450278;     fZOyeDlKUs38450278 = fZOyeDlKUs67196248;     fZOyeDlKUs67196248 = fZOyeDlKUs25313471;     fZOyeDlKUs25313471 = fZOyeDlKUs70294838;     fZOyeDlKUs70294838 = fZOyeDlKUs61898576;     fZOyeDlKUs61898576 = fZOyeDlKUs91333896;     fZOyeDlKUs91333896 = fZOyeDlKUs48930533;     fZOyeDlKUs48930533 = fZOyeDlKUs81931920;     fZOyeDlKUs81931920 = fZOyeDlKUs38005230;     fZOyeDlKUs38005230 = fZOyeDlKUs17405917;     fZOyeDlKUs17405917 = fZOyeDlKUs48714496;     fZOyeDlKUs48714496 = fZOyeDlKUs30222459;     fZOyeDlKUs30222459 = fZOyeDlKUs72414848;     fZOyeDlKUs72414848 = fZOyeDlKUs90536299;     fZOyeDlKUs90536299 = fZOyeDlKUs37407005;     fZOyeDlKUs37407005 = fZOyeDlKUs66514951;     fZOyeDlKUs66514951 = fZOyeDlKUs15324526;     fZOyeDlKUs15324526 = fZOyeDlKUs13809537;     fZOyeDlKUs13809537 = fZOyeDlKUs92845564;     fZOyeDlKUs92845564 = fZOyeDlKUs32044540;     fZOyeDlKUs32044540 = fZOyeDlKUs18223391;     fZOyeDlKUs18223391 = fZOyeDlKUs4261503;     fZOyeDlKUs4261503 = fZOyeDlKUs75317380;     fZOyeDlKUs75317380 = fZOyeDlKUs33697713;     fZOyeDlKUs33697713 = fZOyeDlKUs63791414;     fZOyeDlKUs63791414 = fZOyeDlKUs34201956;     fZOyeDlKUs34201956 = fZOyeDlKUs54040811;     fZOyeDlKUs54040811 = fZOyeDlKUs96899679;     fZOyeDlKUs96899679 = fZOyeDlKUs71080003;     fZOyeDlKUs71080003 = fZOyeDlKUs98063975;     fZOyeDlKUs98063975 = fZOyeDlKUs59961559;     fZOyeDlKUs59961559 = fZOyeDlKUs14861087;     fZOyeDlKUs14861087 = fZOyeDlKUs79693318;     fZOyeDlKUs79693318 = fZOyeDlKUs65258340;     fZOyeDlKUs65258340 = fZOyeDlKUs26975739;     fZOyeDlKUs26975739 = fZOyeDlKUs34000774;     fZOyeDlKUs34000774 = fZOyeDlKUs2994650;     fZOyeDlKUs2994650 = fZOyeDlKUs9782151;     fZOyeDlKUs9782151 = fZOyeDlKUs14388378;     fZOyeDlKUs14388378 = fZOyeDlKUs33331760;     fZOyeDlKUs33331760 = fZOyeDlKUs42143618;     fZOyeDlKUs42143618 = fZOyeDlKUs57384849;     fZOyeDlKUs57384849 = fZOyeDlKUs83066953;     fZOyeDlKUs83066953 = fZOyeDlKUs57556467;     fZOyeDlKUs57556467 = fZOyeDlKUs93197669;     fZOyeDlKUs93197669 = fZOyeDlKUs96351877;     fZOyeDlKUs96351877 = fZOyeDlKUs98295360;     fZOyeDlKUs98295360 = fZOyeDlKUs50951481;     fZOyeDlKUs50951481 = fZOyeDlKUs45083043;     fZOyeDlKUs45083043 = fZOyeDlKUs54787487;     fZOyeDlKUs54787487 = fZOyeDlKUs17443459;     fZOyeDlKUs17443459 = fZOyeDlKUs19520924;     fZOyeDlKUs19520924 = fZOyeDlKUs93659241;     fZOyeDlKUs93659241 = fZOyeDlKUs86444764;     fZOyeDlKUs86444764 = fZOyeDlKUs80157142;     fZOyeDlKUs80157142 = fZOyeDlKUs34188776;     fZOyeDlKUs34188776 = fZOyeDlKUs28405083;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ahUPxoZPRO41801970() {     float HcsRAZoOjc12122130 = -211878660;    float HcsRAZoOjc72224133 = -938473635;    float HcsRAZoOjc45861646 = -753898636;    float HcsRAZoOjc20831841 = -520759945;    float HcsRAZoOjc83224510 = -356079572;    float HcsRAZoOjc41546464 = -230414085;    float HcsRAZoOjc95524388 = -606679517;    float HcsRAZoOjc30065354 = -885278112;    float HcsRAZoOjc56078384 = -779240834;    float HcsRAZoOjc285262 = -487460388;    float HcsRAZoOjc88543326 = -243936786;    float HcsRAZoOjc54783212 = -585896039;    float HcsRAZoOjc58516643 = -165324547;    float HcsRAZoOjc38583115 = -557367369;    float HcsRAZoOjc54263533 = -189686836;    float HcsRAZoOjc41907167 = -95957176;    float HcsRAZoOjc35107898 = -984861688;    float HcsRAZoOjc29460245 = -353271345;    float HcsRAZoOjc92236710 = -417721360;    float HcsRAZoOjc39473426 = -559093408;    float HcsRAZoOjc48374826 = -51792860;    float HcsRAZoOjc77480960 = -127777123;    float HcsRAZoOjc69693135 = 57147895;    float HcsRAZoOjc10218820 = -778318276;    float HcsRAZoOjc66241804 = -10052060;    float HcsRAZoOjc97874955 = -217190327;    float HcsRAZoOjc71890510 = -74692141;    float HcsRAZoOjc54289678 = -116190809;    float HcsRAZoOjc9262245 = -183440525;    float HcsRAZoOjc2712349 = -903190757;    float HcsRAZoOjc54093870 = -272970957;    float HcsRAZoOjc30589329 = -915284893;    float HcsRAZoOjc74539508 = -931045134;    float HcsRAZoOjc77919716 = -260121785;    float HcsRAZoOjc76535700 = -530263575;    float HcsRAZoOjc83399632 = -932994419;    float HcsRAZoOjc53192738 = -283928691;    float HcsRAZoOjc2789519 = 59203444;    float HcsRAZoOjc17231755 = -961814882;    float HcsRAZoOjc43829993 = -664838167;    float HcsRAZoOjc85953648 = -226121776;    float HcsRAZoOjc1542194 = -325435054;    float HcsRAZoOjc11572812 = -110301306;    float HcsRAZoOjc4807951 = -583121313;    float HcsRAZoOjc50455581 = -195223372;    float HcsRAZoOjc51891098 = -524548995;    float HcsRAZoOjc86190232 = -541626413;    float HcsRAZoOjc84420266 = -912438325;    float HcsRAZoOjc14431179 = -359608972;    float HcsRAZoOjc47252649 = 11871596;    float HcsRAZoOjc2280735 = -523229996;    float HcsRAZoOjc47984897 = -758598733;    float HcsRAZoOjc58835980 = -942004108;    float HcsRAZoOjc73588793 = -796124436;    float HcsRAZoOjc93427143 = -930689728;    float HcsRAZoOjc34641169 = 15898462;    float HcsRAZoOjc2530999 = -895621531;    float HcsRAZoOjc35642826 = -975580361;    float HcsRAZoOjc54590036 = -410707885;    float HcsRAZoOjc85349555 = -38889245;    float HcsRAZoOjc69655954 = -55721944;    float HcsRAZoOjc41234710 = -390488709;    float HcsRAZoOjc20803110 = -601837588;    float HcsRAZoOjc53366035 = -876050077;    float HcsRAZoOjc46191391 = -114489432;    float HcsRAZoOjc57953998 = -328651894;    float HcsRAZoOjc80243703 = -654850905;    float HcsRAZoOjc80596927 = -905202762;    float HcsRAZoOjc62047415 = 72896205;    float HcsRAZoOjc70863900 = -256692417;    float HcsRAZoOjc88714428 = -812028485;    float HcsRAZoOjc32318379 = -944065133;    float HcsRAZoOjc12228490 = -391456463;    float HcsRAZoOjc48406718 = -752883194;    float HcsRAZoOjc53519778 = -232971632;    float HcsRAZoOjc46832633 = -726357807;    float HcsRAZoOjc65908149 = 82524183;    float HcsRAZoOjc64885184 = -359730793;    float HcsRAZoOjc59763239 = -483094904;    float HcsRAZoOjc14350706 = -485503066;    float HcsRAZoOjc11684723 = -675563915;    float HcsRAZoOjc87470243 = -162253816;    float HcsRAZoOjc39858500 = -756581838;    float HcsRAZoOjc62009595 = -95312121;    float HcsRAZoOjc431614 = -279960762;    float HcsRAZoOjc6108974 = -514372224;    float HcsRAZoOjc71753348 = -973280786;    float HcsRAZoOjc950715 = -34920698;    float HcsRAZoOjc84492572 = -329432058;    float HcsRAZoOjc41894531 = -446162037;    float HcsRAZoOjc80868633 = 62627111;    float HcsRAZoOjc17549913 = -308348331;    float HcsRAZoOjc48199482 = -530088671;    float HcsRAZoOjc31882200 = -822925638;    float HcsRAZoOjc74174038 = -509116223;    float HcsRAZoOjc44718938 = -835633068;    float HcsRAZoOjc80739084 = -723597466;    float HcsRAZoOjc58206776 = -234251229;    float HcsRAZoOjc58616560 = -368631882;    float HcsRAZoOjc92501583 = -211878660;     HcsRAZoOjc12122130 = HcsRAZoOjc72224133;     HcsRAZoOjc72224133 = HcsRAZoOjc45861646;     HcsRAZoOjc45861646 = HcsRAZoOjc20831841;     HcsRAZoOjc20831841 = HcsRAZoOjc83224510;     HcsRAZoOjc83224510 = HcsRAZoOjc41546464;     HcsRAZoOjc41546464 = HcsRAZoOjc95524388;     HcsRAZoOjc95524388 = HcsRAZoOjc30065354;     HcsRAZoOjc30065354 = HcsRAZoOjc56078384;     HcsRAZoOjc56078384 = HcsRAZoOjc285262;     HcsRAZoOjc285262 = HcsRAZoOjc88543326;     HcsRAZoOjc88543326 = HcsRAZoOjc54783212;     HcsRAZoOjc54783212 = HcsRAZoOjc58516643;     HcsRAZoOjc58516643 = HcsRAZoOjc38583115;     HcsRAZoOjc38583115 = HcsRAZoOjc54263533;     HcsRAZoOjc54263533 = HcsRAZoOjc41907167;     HcsRAZoOjc41907167 = HcsRAZoOjc35107898;     HcsRAZoOjc35107898 = HcsRAZoOjc29460245;     HcsRAZoOjc29460245 = HcsRAZoOjc92236710;     HcsRAZoOjc92236710 = HcsRAZoOjc39473426;     HcsRAZoOjc39473426 = HcsRAZoOjc48374826;     HcsRAZoOjc48374826 = HcsRAZoOjc77480960;     HcsRAZoOjc77480960 = HcsRAZoOjc69693135;     HcsRAZoOjc69693135 = HcsRAZoOjc10218820;     HcsRAZoOjc10218820 = HcsRAZoOjc66241804;     HcsRAZoOjc66241804 = HcsRAZoOjc97874955;     HcsRAZoOjc97874955 = HcsRAZoOjc71890510;     HcsRAZoOjc71890510 = HcsRAZoOjc54289678;     HcsRAZoOjc54289678 = HcsRAZoOjc9262245;     HcsRAZoOjc9262245 = HcsRAZoOjc2712349;     HcsRAZoOjc2712349 = HcsRAZoOjc54093870;     HcsRAZoOjc54093870 = HcsRAZoOjc30589329;     HcsRAZoOjc30589329 = HcsRAZoOjc74539508;     HcsRAZoOjc74539508 = HcsRAZoOjc77919716;     HcsRAZoOjc77919716 = HcsRAZoOjc76535700;     HcsRAZoOjc76535700 = HcsRAZoOjc83399632;     HcsRAZoOjc83399632 = HcsRAZoOjc53192738;     HcsRAZoOjc53192738 = HcsRAZoOjc2789519;     HcsRAZoOjc2789519 = HcsRAZoOjc17231755;     HcsRAZoOjc17231755 = HcsRAZoOjc43829993;     HcsRAZoOjc43829993 = HcsRAZoOjc85953648;     HcsRAZoOjc85953648 = HcsRAZoOjc1542194;     HcsRAZoOjc1542194 = HcsRAZoOjc11572812;     HcsRAZoOjc11572812 = HcsRAZoOjc4807951;     HcsRAZoOjc4807951 = HcsRAZoOjc50455581;     HcsRAZoOjc50455581 = HcsRAZoOjc51891098;     HcsRAZoOjc51891098 = HcsRAZoOjc86190232;     HcsRAZoOjc86190232 = HcsRAZoOjc84420266;     HcsRAZoOjc84420266 = HcsRAZoOjc14431179;     HcsRAZoOjc14431179 = HcsRAZoOjc47252649;     HcsRAZoOjc47252649 = HcsRAZoOjc2280735;     HcsRAZoOjc2280735 = HcsRAZoOjc47984897;     HcsRAZoOjc47984897 = HcsRAZoOjc58835980;     HcsRAZoOjc58835980 = HcsRAZoOjc73588793;     HcsRAZoOjc73588793 = HcsRAZoOjc93427143;     HcsRAZoOjc93427143 = HcsRAZoOjc34641169;     HcsRAZoOjc34641169 = HcsRAZoOjc2530999;     HcsRAZoOjc2530999 = HcsRAZoOjc35642826;     HcsRAZoOjc35642826 = HcsRAZoOjc54590036;     HcsRAZoOjc54590036 = HcsRAZoOjc85349555;     HcsRAZoOjc85349555 = HcsRAZoOjc69655954;     HcsRAZoOjc69655954 = HcsRAZoOjc41234710;     HcsRAZoOjc41234710 = HcsRAZoOjc20803110;     HcsRAZoOjc20803110 = HcsRAZoOjc53366035;     HcsRAZoOjc53366035 = HcsRAZoOjc46191391;     HcsRAZoOjc46191391 = HcsRAZoOjc57953998;     HcsRAZoOjc57953998 = HcsRAZoOjc80243703;     HcsRAZoOjc80243703 = HcsRAZoOjc80596927;     HcsRAZoOjc80596927 = HcsRAZoOjc62047415;     HcsRAZoOjc62047415 = HcsRAZoOjc70863900;     HcsRAZoOjc70863900 = HcsRAZoOjc88714428;     HcsRAZoOjc88714428 = HcsRAZoOjc32318379;     HcsRAZoOjc32318379 = HcsRAZoOjc12228490;     HcsRAZoOjc12228490 = HcsRAZoOjc48406718;     HcsRAZoOjc48406718 = HcsRAZoOjc53519778;     HcsRAZoOjc53519778 = HcsRAZoOjc46832633;     HcsRAZoOjc46832633 = HcsRAZoOjc65908149;     HcsRAZoOjc65908149 = HcsRAZoOjc64885184;     HcsRAZoOjc64885184 = HcsRAZoOjc59763239;     HcsRAZoOjc59763239 = HcsRAZoOjc14350706;     HcsRAZoOjc14350706 = HcsRAZoOjc11684723;     HcsRAZoOjc11684723 = HcsRAZoOjc87470243;     HcsRAZoOjc87470243 = HcsRAZoOjc39858500;     HcsRAZoOjc39858500 = HcsRAZoOjc62009595;     HcsRAZoOjc62009595 = HcsRAZoOjc431614;     HcsRAZoOjc431614 = HcsRAZoOjc6108974;     HcsRAZoOjc6108974 = HcsRAZoOjc71753348;     HcsRAZoOjc71753348 = HcsRAZoOjc950715;     HcsRAZoOjc950715 = HcsRAZoOjc84492572;     HcsRAZoOjc84492572 = HcsRAZoOjc41894531;     HcsRAZoOjc41894531 = HcsRAZoOjc80868633;     HcsRAZoOjc80868633 = HcsRAZoOjc17549913;     HcsRAZoOjc17549913 = HcsRAZoOjc48199482;     HcsRAZoOjc48199482 = HcsRAZoOjc31882200;     HcsRAZoOjc31882200 = HcsRAZoOjc74174038;     HcsRAZoOjc74174038 = HcsRAZoOjc44718938;     HcsRAZoOjc44718938 = HcsRAZoOjc80739084;     HcsRAZoOjc80739084 = HcsRAZoOjc58206776;     HcsRAZoOjc58206776 = HcsRAZoOjc58616560;     HcsRAZoOjc58616560 = HcsRAZoOjc92501583;     HcsRAZoOjc92501583 = HcsRAZoOjc12122130;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void DrmfQALDoG20648167() {     float cLfpcZJuOO31031875 = -586297099;    float cLfpcZJuOO63795984 = -775812304;    float cLfpcZJuOO78343417 = -255962325;    float cLfpcZJuOO70767586 = -715170022;    float cLfpcZJuOO36791002 = -900190587;    float cLfpcZJuOO41468305 = -572400821;    float cLfpcZJuOO8673777 = -486780098;    float cLfpcZJuOO37330307 = -812492965;    float cLfpcZJuOO33385526 = -795385522;    float cLfpcZJuOO51094112 = -983716627;    float cLfpcZJuOO55820394 = -276588316;    float cLfpcZJuOO4265083 = -702156694;    float cLfpcZJuOO83016150 = -487339818;    float cLfpcZJuOO17506651 = 23131917;    float cLfpcZJuOO28140404 = -824421981;    float cLfpcZJuOO37273082 = -287052458;    float cLfpcZJuOO28842959 = -345566698;    float cLfpcZJuOO87071349 = -276932668;    float cLfpcZJuOO34798913 = -114977386;    float cLfpcZJuOO50604324 = -903216015;    float cLfpcZJuOO37432652 = -688130206;    float cLfpcZJuOO14753538 = -795573304;    float cLfpcZJuOO7165826 = -261415644;    float cLfpcZJuOO95068214 = -380047753;    float cLfpcZJuOO87393024 = -166996164;    float cLfpcZJuOO87341199 = -978070921;    float cLfpcZJuOO11544243 = -308260911;    float cLfpcZJuOO99346203 = -846950879;    float cLfpcZJuOO79333106 = 26029845;    float cLfpcZJuOO47989231 = -675116406;    float cLfpcZJuOO57359737 = -75615410;    float cLfpcZJuOO46794917 = -211629625;    float cLfpcZJuOO44843983 = -497569072;    float cLfpcZJuOO49543816 = -39736036;    float cLfpcZJuOO38712846 = -419714636;    float cLfpcZJuOO4521471 = -855817885;    float cLfpcZJuOO59277366 = 72179467;    float cLfpcZJuOO24666075 = -736659978;    float cLfpcZJuOO61303798 = -84907540;    float cLfpcZJuOO85723767 = -273262549;    float cLfpcZJuOO65198512 = -578925765;    float cLfpcZJuOO55697445 = -300096584;    float cLfpcZJuOO64239899 = -755409080;    float cLfpcZJuOO77612330 = -286672050;    float cLfpcZJuOO58398484 = -376632085;    float cLfpcZJuOO97030454 = -771038880;    float cLfpcZJuOO53853034 = -676636381;    float cLfpcZJuOO46433593 = -468925281;    float cLfpcZJuOO49512567 = 54815926;    float cLfpcZJuOO87069299 = 849211;    float cLfpcZJuOO43049537 = 60147032;    float cLfpcZJuOO72423906 = -648364643;    float cLfpcZJuOO66121239 = 82257030;    float cLfpcZJuOO4007128 = -174126472;    float cLfpcZJuOO83215514 = -768766719;    float cLfpcZJuOO16278337 = -790723796;    float cLfpcZJuOO56630159 = -414396660;    float cLfpcZJuOO83275202 = -875914572;    float cLfpcZJuOO83374562 = -448173858;    float cLfpcZJuOO49449803 = -922119666;    float cLfpcZJuOO29924063 = -164139911;    float cLfpcZJuOO9327573 = -639829219;    float cLfpcZJuOO57997200 = -738522811;    float cLfpcZJuOO85396295 = -20269116;    float cLfpcZJuOO93734374 = -808101217;    float cLfpcZJuOO9025477 = 35041309;    float cLfpcZJuOO59421100 = -104587622;    float cLfpcZJuOO33472335 = -347603783;    float cLfpcZJuOO78793804 = -557153448;    float cLfpcZJuOO23618933 = -968604097;    float cLfpcZJuOO77995716 = -259231925;    float cLfpcZJuOO4176885 = -608906721;    float cLfpcZJuOO25767552 = -92025129;    float cLfpcZJuOO49075145 = -841714837;    float cLfpcZJuOO85405811 = -224290251;    float cLfpcZJuOO81735207 = -288033623;    float cLfpcZJuOO50513638 = 59835776;    float cLfpcZJuOO29553495 = -974743595;    float cLfpcZJuOO36669731 = 96584331;    float cLfpcZJuOO90362569 = -395957285;    float cLfpcZJuOO33488165 = -201434541;    float cLfpcZJuOO65110649 = -839335631;    float cLfpcZJuOO49833636 = -801766806;    float cLfpcZJuOO92263806 = -974819366;    float cLfpcZJuOO4939694 = -635263438;    float cLfpcZJuOO84935830 = -427250768;    float cLfpcZJuOO80673677 = -193886656;    float cLfpcZJuOO40836855 = -223442601;    float cLfpcZJuOO66328302 = -270969318;    float cLfpcZJuOO22434509 = -628990840;    float cLfpcZJuOO47891312 = -341421225;    float cLfpcZJuOO76002164 = -51905961;    float cLfpcZJuOO41291513 = -188486120;    float cLfpcZJuOO11853995 = -162787875;    float cLfpcZJuOO55799705 = -9122639;    float cLfpcZJuOO55870939 = -939096546;    float cLfpcZJuOO97700244 = -561573774;    float cLfpcZJuOO78843604 = -635139964;    float cLfpcZJuOO83877955 = -478570834;    float cLfpcZJuOO49373007 = -586297099;     cLfpcZJuOO31031875 = cLfpcZJuOO63795984;     cLfpcZJuOO63795984 = cLfpcZJuOO78343417;     cLfpcZJuOO78343417 = cLfpcZJuOO70767586;     cLfpcZJuOO70767586 = cLfpcZJuOO36791002;     cLfpcZJuOO36791002 = cLfpcZJuOO41468305;     cLfpcZJuOO41468305 = cLfpcZJuOO8673777;     cLfpcZJuOO8673777 = cLfpcZJuOO37330307;     cLfpcZJuOO37330307 = cLfpcZJuOO33385526;     cLfpcZJuOO33385526 = cLfpcZJuOO51094112;     cLfpcZJuOO51094112 = cLfpcZJuOO55820394;     cLfpcZJuOO55820394 = cLfpcZJuOO4265083;     cLfpcZJuOO4265083 = cLfpcZJuOO83016150;     cLfpcZJuOO83016150 = cLfpcZJuOO17506651;     cLfpcZJuOO17506651 = cLfpcZJuOO28140404;     cLfpcZJuOO28140404 = cLfpcZJuOO37273082;     cLfpcZJuOO37273082 = cLfpcZJuOO28842959;     cLfpcZJuOO28842959 = cLfpcZJuOO87071349;     cLfpcZJuOO87071349 = cLfpcZJuOO34798913;     cLfpcZJuOO34798913 = cLfpcZJuOO50604324;     cLfpcZJuOO50604324 = cLfpcZJuOO37432652;     cLfpcZJuOO37432652 = cLfpcZJuOO14753538;     cLfpcZJuOO14753538 = cLfpcZJuOO7165826;     cLfpcZJuOO7165826 = cLfpcZJuOO95068214;     cLfpcZJuOO95068214 = cLfpcZJuOO87393024;     cLfpcZJuOO87393024 = cLfpcZJuOO87341199;     cLfpcZJuOO87341199 = cLfpcZJuOO11544243;     cLfpcZJuOO11544243 = cLfpcZJuOO99346203;     cLfpcZJuOO99346203 = cLfpcZJuOO79333106;     cLfpcZJuOO79333106 = cLfpcZJuOO47989231;     cLfpcZJuOO47989231 = cLfpcZJuOO57359737;     cLfpcZJuOO57359737 = cLfpcZJuOO46794917;     cLfpcZJuOO46794917 = cLfpcZJuOO44843983;     cLfpcZJuOO44843983 = cLfpcZJuOO49543816;     cLfpcZJuOO49543816 = cLfpcZJuOO38712846;     cLfpcZJuOO38712846 = cLfpcZJuOO4521471;     cLfpcZJuOO4521471 = cLfpcZJuOO59277366;     cLfpcZJuOO59277366 = cLfpcZJuOO24666075;     cLfpcZJuOO24666075 = cLfpcZJuOO61303798;     cLfpcZJuOO61303798 = cLfpcZJuOO85723767;     cLfpcZJuOO85723767 = cLfpcZJuOO65198512;     cLfpcZJuOO65198512 = cLfpcZJuOO55697445;     cLfpcZJuOO55697445 = cLfpcZJuOO64239899;     cLfpcZJuOO64239899 = cLfpcZJuOO77612330;     cLfpcZJuOO77612330 = cLfpcZJuOO58398484;     cLfpcZJuOO58398484 = cLfpcZJuOO97030454;     cLfpcZJuOO97030454 = cLfpcZJuOO53853034;     cLfpcZJuOO53853034 = cLfpcZJuOO46433593;     cLfpcZJuOO46433593 = cLfpcZJuOO49512567;     cLfpcZJuOO49512567 = cLfpcZJuOO87069299;     cLfpcZJuOO87069299 = cLfpcZJuOO43049537;     cLfpcZJuOO43049537 = cLfpcZJuOO72423906;     cLfpcZJuOO72423906 = cLfpcZJuOO66121239;     cLfpcZJuOO66121239 = cLfpcZJuOO4007128;     cLfpcZJuOO4007128 = cLfpcZJuOO83215514;     cLfpcZJuOO83215514 = cLfpcZJuOO16278337;     cLfpcZJuOO16278337 = cLfpcZJuOO56630159;     cLfpcZJuOO56630159 = cLfpcZJuOO83275202;     cLfpcZJuOO83275202 = cLfpcZJuOO83374562;     cLfpcZJuOO83374562 = cLfpcZJuOO49449803;     cLfpcZJuOO49449803 = cLfpcZJuOO29924063;     cLfpcZJuOO29924063 = cLfpcZJuOO9327573;     cLfpcZJuOO9327573 = cLfpcZJuOO57997200;     cLfpcZJuOO57997200 = cLfpcZJuOO85396295;     cLfpcZJuOO85396295 = cLfpcZJuOO93734374;     cLfpcZJuOO93734374 = cLfpcZJuOO9025477;     cLfpcZJuOO9025477 = cLfpcZJuOO59421100;     cLfpcZJuOO59421100 = cLfpcZJuOO33472335;     cLfpcZJuOO33472335 = cLfpcZJuOO78793804;     cLfpcZJuOO78793804 = cLfpcZJuOO23618933;     cLfpcZJuOO23618933 = cLfpcZJuOO77995716;     cLfpcZJuOO77995716 = cLfpcZJuOO4176885;     cLfpcZJuOO4176885 = cLfpcZJuOO25767552;     cLfpcZJuOO25767552 = cLfpcZJuOO49075145;     cLfpcZJuOO49075145 = cLfpcZJuOO85405811;     cLfpcZJuOO85405811 = cLfpcZJuOO81735207;     cLfpcZJuOO81735207 = cLfpcZJuOO50513638;     cLfpcZJuOO50513638 = cLfpcZJuOO29553495;     cLfpcZJuOO29553495 = cLfpcZJuOO36669731;     cLfpcZJuOO36669731 = cLfpcZJuOO90362569;     cLfpcZJuOO90362569 = cLfpcZJuOO33488165;     cLfpcZJuOO33488165 = cLfpcZJuOO65110649;     cLfpcZJuOO65110649 = cLfpcZJuOO49833636;     cLfpcZJuOO49833636 = cLfpcZJuOO92263806;     cLfpcZJuOO92263806 = cLfpcZJuOO4939694;     cLfpcZJuOO4939694 = cLfpcZJuOO84935830;     cLfpcZJuOO84935830 = cLfpcZJuOO80673677;     cLfpcZJuOO80673677 = cLfpcZJuOO40836855;     cLfpcZJuOO40836855 = cLfpcZJuOO66328302;     cLfpcZJuOO66328302 = cLfpcZJuOO22434509;     cLfpcZJuOO22434509 = cLfpcZJuOO47891312;     cLfpcZJuOO47891312 = cLfpcZJuOO76002164;     cLfpcZJuOO76002164 = cLfpcZJuOO41291513;     cLfpcZJuOO41291513 = cLfpcZJuOO11853995;     cLfpcZJuOO11853995 = cLfpcZJuOO55799705;     cLfpcZJuOO55799705 = cLfpcZJuOO55870939;     cLfpcZJuOO55870939 = cLfpcZJuOO97700244;     cLfpcZJuOO97700244 = cLfpcZJuOO78843604;     cLfpcZJuOO78843604 = cLfpcZJuOO83877955;     cLfpcZJuOO83877955 = cLfpcZJuOO49373007;     cLfpcZJuOO49373007 = cLfpcZJuOO31031875;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void zNhbHrUQlk87609568() {     float JUTvgvilKI21151712 = -517577442;    float JUTvgvilKI85493365 = -93333600;    float JUTvgvilKI75149328 = -349885400;    float JUTvgvilKI29346022 = -721882674;    float JUTvgvilKI58687839 = -209869350;    float JUTvgvilKI57060141 = -164466741;    float JUTvgvilKI71884551 = -928862038;    float JUTvgvilKI59422921 = -153118021;    float JUTvgvilKI39937377 = -516924229;    float JUTvgvilKI51989296 = -190398023;    float JUTvgvilKI52292818 = -744480545;    float JUTvgvilKI53306267 = 82776809;    float JUTvgvilKI53215197 = -821234153;    float JUTvgvilKI9769724 = -320182019;    float JUTvgvilKI71386884 = -172255776;    float JUTvgvilKI36017372 = -320227978;    float JUTvgvilKI28657899 = -426526509;    float JUTvgvilKI31427595 = -16853582;    float JUTvgvilKI16141574 = -99370088;    float JUTvgvilKI90002335 = 36881224;    float JUTvgvilKI5024479 = -103021672;    float JUTvgvilKI91131385 = -538661822;    float JUTvgvilKI77282640 = -26833408;    float JUTvgvilKI46639421 = -708992651;    float JUTvgvilKI62720901 = -137200962;    float JUTvgvilKI22706241 = -762150585;    float JUTvgvilKI3733159 = -368589618;    float JUTvgvilKI57920104 = -415807926;    float JUTvgvilKI53220551 = -282239518;    float JUTvgvilKI71868180 = -224950171;    float JUTvgvilKI94235818 = -789375188;    float JUTvgvilKI30885689 = -4275807;    float JUTvgvilKI39265447 = -999738448;    float JUTvgvilKI73665298 = 92131073;    float JUTvgvilKI56667418 = -329364221;    float JUTvgvilKI580667 = -138613041;    float JUTvgvilKI71452302 = -643289815;    float JUTvgvilKI18941038 = -597981901;    float JUTvgvilKI7150412 = -505051002;    float JUTvgvilKI2108802 = -887402008;    float JUTvgvilKI66753853 = -372730939;    float JUTvgvilKI96039569 = -308381879;    float JUTvgvilKI84340100 = -689964930;    float JUTvgvilKI67506170 = -807719683;    float JUTvgvilKI34380954 = -962401443;    float JUTvgvilKI57897416 = 33292544;    float JUTvgvilKI61974117 = -706399503;    float JUTvgvilKI12203633 = -4342890;    float JUTvgvilKI96089610 = 55112719;    float JUTvgvilKI36395128 = -43172013;    float JUTvgvilKI85674430 = -992790021;    float JUTvgvilKI30744271 = -994937224;    float JUTvgvilKI91022043 = -621649973;    float JUTvgvilKI67164461 = -829601605;    float JUTvgvilKI82585089 = -654266268;    float JUTvgvilKI30020326 = -978915620;    float JUTvgvilKI8210726 = 33499807;    float JUTvgvilKI28509908 = -640892749;    float JUTvgvilKI66625120 = -484681713;    float JUTvgvilKI35981599 = -447718766;    float JUTvgvilKI53326983 = -795877124;    float JUTvgvilKI13964447 = -413054112;    float JUTvgvilKI6202370 = -870878504;    float JUTvgvilKI68069197 = -191974059;    float JUTvgvilKI57753477 = -401022835;    float JUTvgvilKI21407130 = -640204739;    float JUTvgvilKI14040820 = 82515256;    float JUTvgvilKI79549899 = -813365227;    float JUTvgvilKI53102306 = -990817799;    float JUTvgvilKI70806217 = 66357264;    float JUTvgvilKI64565069 = -676938163;    float JUTvgvilKI9716862 = -828544609;    float JUTvgvilKI24277184 = -511802581;    float JUTvgvilKI14032772 = -211968081;    float JUTvgvilKI23248482 = -590387838;    float JUTvgvilKI8984910 = -794639793;    float JUTvgvilKI6791285 = -848696893;    float JUTvgvilKI9776471 = -219113725;    float JUTvgvilKI12258467 = -746591209;    float JUTvgvilKI4823486 = -70493506;    float JUTvgvilKI60732124 = 44248918;    float JUTvgvilKI91529526 = -264246728;    float JUTvgvilKI61830493 = -370920645;    float JUTvgvilKI16825423 = -139067506;    float JUTvgvilKI86193750 = -232160151;    float JUTvgvilKI63491548 = -794437965;    float JUTvgvilKI39863646 = -382625834;    float JUTvgvilKI72100985 = -70136843;    float JUTvgvilKI91080208 = -253602659;    float JUTvgvilKI26647092 = -350448602;    float JUTvgvilKI92369941 = -72112849;    float JUTvgvilKI42942395 = 97602933;    float JUTvgvilKI52315917 = -13300188;    float JUTvgvilKI71168813 = 42667763;    float JUTvgvilKI48781819 = 8475115;    float JUTvgvilKI52789406 = -959676827;    float JUTvgvilKI89837199 = -437503376;    float JUTvgvilKI16270904 = -397990871;    float JUTvgvilKI9752693 = -306696848;    float JUTvgvilKI12973824 = -517577442;     JUTvgvilKI21151712 = JUTvgvilKI85493365;     JUTvgvilKI85493365 = JUTvgvilKI75149328;     JUTvgvilKI75149328 = JUTvgvilKI29346022;     JUTvgvilKI29346022 = JUTvgvilKI58687839;     JUTvgvilKI58687839 = JUTvgvilKI57060141;     JUTvgvilKI57060141 = JUTvgvilKI71884551;     JUTvgvilKI71884551 = JUTvgvilKI59422921;     JUTvgvilKI59422921 = JUTvgvilKI39937377;     JUTvgvilKI39937377 = JUTvgvilKI51989296;     JUTvgvilKI51989296 = JUTvgvilKI52292818;     JUTvgvilKI52292818 = JUTvgvilKI53306267;     JUTvgvilKI53306267 = JUTvgvilKI53215197;     JUTvgvilKI53215197 = JUTvgvilKI9769724;     JUTvgvilKI9769724 = JUTvgvilKI71386884;     JUTvgvilKI71386884 = JUTvgvilKI36017372;     JUTvgvilKI36017372 = JUTvgvilKI28657899;     JUTvgvilKI28657899 = JUTvgvilKI31427595;     JUTvgvilKI31427595 = JUTvgvilKI16141574;     JUTvgvilKI16141574 = JUTvgvilKI90002335;     JUTvgvilKI90002335 = JUTvgvilKI5024479;     JUTvgvilKI5024479 = JUTvgvilKI91131385;     JUTvgvilKI91131385 = JUTvgvilKI77282640;     JUTvgvilKI77282640 = JUTvgvilKI46639421;     JUTvgvilKI46639421 = JUTvgvilKI62720901;     JUTvgvilKI62720901 = JUTvgvilKI22706241;     JUTvgvilKI22706241 = JUTvgvilKI3733159;     JUTvgvilKI3733159 = JUTvgvilKI57920104;     JUTvgvilKI57920104 = JUTvgvilKI53220551;     JUTvgvilKI53220551 = JUTvgvilKI71868180;     JUTvgvilKI71868180 = JUTvgvilKI94235818;     JUTvgvilKI94235818 = JUTvgvilKI30885689;     JUTvgvilKI30885689 = JUTvgvilKI39265447;     JUTvgvilKI39265447 = JUTvgvilKI73665298;     JUTvgvilKI73665298 = JUTvgvilKI56667418;     JUTvgvilKI56667418 = JUTvgvilKI580667;     JUTvgvilKI580667 = JUTvgvilKI71452302;     JUTvgvilKI71452302 = JUTvgvilKI18941038;     JUTvgvilKI18941038 = JUTvgvilKI7150412;     JUTvgvilKI7150412 = JUTvgvilKI2108802;     JUTvgvilKI2108802 = JUTvgvilKI66753853;     JUTvgvilKI66753853 = JUTvgvilKI96039569;     JUTvgvilKI96039569 = JUTvgvilKI84340100;     JUTvgvilKI84340100 = JUTvgvilKI67506170;     JUTvgvilKI67506170 = JUTvgvilKI34380954;     JUTvgvilKI34380954 = JUTvgvilKI57897416;     JUTvgvilKI57897416 = JUTvgvilKI61974117;     JUTvgvilKI61974117 = JUTvgvilKI12203633;     JUTvgvilKI12203633 = JUTvgvilKI96089610;     JUTvgvilKI96089610 = JUTvgvilKI36395128;     JUTvgvilKI36395128 = JUTvgvilKI85674430;     JUTvgvilKI85674430 = JUTvgvilKI30744271;     JUTvgvilKI30744271 = JUTvgvilKI91022043;     JUTvgvilKI91022043 = JUTvgvilKI67164461;     JUTvgvilKI67164461 = JUTvgvilKI82585089;     JUTvgvilKI82585089 = JUTvgvilKI30020326;     JUTvgvilKI30020326 = JUTvgvilKI8210726;     JUTvgvilKI8210726 = JUTvgvilKI28509908;     JUTvgvilKI28509908 = JUTvgvilKI66625120;     JUTvgvilKI66625120 = JUTvgvilKI35981599;     JUTvgvilKI35981599 = JUTvgvilKI53326983;     JUTvgvilKI53326983 = JUTvgvilKI13964447;     JUTvgvilKI13964447 = JUTvgvilKI6202370;     JUTvgvilKI6202370 = JUTvgvilKI68069197;     JUTvgvilKI68069197 = JUTvgvilKI57753477;     JUTvgvilKI57753477 = JUTvgvilKI21407130;     JUTvgvilKI21407130 = JUTvgvilKI14040820;     JUTvgvilKI14040820 = JUTvgvilKI79549899;     JUTvgvilKI79549899 = JUTvgvilKI53102306;     JUTvgvilKI53102306 = JUTvgvilKI70806217;     JUTvgvilKI70806217 = JUTvgvilKI64565069;     JUTvgvilKI64565069 = JUTvgvilKI9716862;     JUTvgvilKI9716862 = JUTvgvilKI24277184;     JUTvgvilKI24277184 = JUTvgvilKI14032772;     JUTvgvilKI14032772 = JUTvgvilKI23248482;     JUTvgvilKI23248482 = JUTvgvilKI8984910;     JUTvgvilKI8984910 = JUTvgvilKI6791285;     JUTvgvilKI6791285 = JUTvgvilKI9776471;     JUTvgvilKI9776471 = JUTvgvilKI12258467;     JUTvgvilKI12258467 = JUTvgvilKI4823486;     JUTvgvilKI4823486 = JUTvgvilKI60732124;     JUTvgvilKI60732124 = JUTvgvilKI91529526;     JUTvgvilKI91529526 = JUTvgvilKI61830493;     JUTvgvilKI61830493 = JUTvgvilKI16825423;     JUTvgvilKI16825423 = JUTvgvilKI86193750;     JUTvgvilKI86193750 = JUTvgvilKI63491548;     JUTvgvilKI63491548 = JUTvgvilKI39863646;     JUTvgvilKI39863646 = JUTvgvilKI72100985;     JUTvgvilKI72100985 = JUTvgvilKI91080208;     JUTvgvilKI91080208 = JUTvgvilKI26647092;     JUTvgvilKI26647092 = JUTvgvilKI92369941;     JUTvgvilKI92369941 = JUTvgvilKI42942395;     JUTvgvilKI42942395 = JUTvgvilKI52315917;     JUTvgvilKI52315917 = JUTvgvilKI71168813;     JUTvgvilKI71168813 = JUTvgvilKI48781819;     JUTvgvilKI48781819 = JUTvgvilKI52789406;     JUTvgvilKI52789406 = JUTvgvilKI89837199;     JUTvgvilKI89837199 = JUTvgvilKI16270904;     JUTvgvilKI16270904 = JUTvgvilKI9752693;     JUTvgvilKI9752693 = JUTvgvilKI12973824;     JUTvgvilKI12973824 = JUTvgvilKI21151712;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void YPpfAQFcdl94710415() {     float fJpwGbGact56324996 = -287022096;    float fJpwGbGact56611754 = -212210668;    float fJpwGbGact21671407 = -997898625;    float fJpwGbGact52293535 = -552492483;    float fJpwGbGact50373198 = -192742816;    float fJpwGbGact15253329 = -901998432;    float fJpwGbGact85248048 = -196521414;    float fJpwGbGact61775892 = 31767078;    float fJpwGbGact32505319 = -362878361;    float fJpwGbGact49971585 = -837226989;    float fJpwGbGact17322061 = -855790962;    float fJpwGbGact41159721 = -675301301;    float fJpwGbGact90366680 = -243734130;    float fJpwGbGact2008555 = -80305974;    float fJpwGbGact31428715 = -806719320;    float fJpwGbGact8698353 = -152786910;    float fJpwGbGact34233068 = -367580796;    float fJpwGbGact20962497 = -23806575;    float fJpwGbGact58583835 = -143941409;    float fJpwGbGact71173115 = -814997368;    float fJpwGbGact86081643 = -585825245;    float fJpwGbGact83994423 = -113286483;    float fJpwGbGact19336259 = -133917894;    float fJpwGbGact17646338 = -533330521;    float fJpwGbGact4155408 = 30797990;    float fJpwGbGact92327880 = -896476008;    float fJpwGbGact62238115 = -759882391;    float fJpwGbGact31184479 = -378060484;    float fJpwGbGact76730165 = -840713877;    float fJpwGbGact33776476 = -875132192;    float fJpwGbGact82962620 = -47108090;    float fJpwGbGact91745703 = -635066840;    float fJpwGbGact66350066 = -304936727;    float fJpwGbGact10130359 = -136749995;    float fJpwGbGact15957315 = 96847476;    float fJpwGbGact37497651 = -242571522;    float fJpwGbGact1656076 = -166147117;    float fJpwGbGact30271161 = -385227465;    float fJpwGbGact61233929 = -747947611;    float fJpwGbGact48559246 = -868042883;    float fJpwGbGact56942532 = -151382598;    float fJpwGbGact92250416 = 35398095;    float fJpwGbGact24773762 = -600928958;    float fJpwGbGact11578827 = -46255574;    float fJpwGbGact82372710 = -664314881;    float fJpwGbGact39625828 = -222254991;    float fJpwGbGact51853534 = -682324808;    float fJpwGbGact86242274 = 83769339;    float fJpwGbGact34613565 = -58205954;    float fJpwGbGact80429294 = -796228734;    float fJpwGbGact12871141 = -500750606;    float fJpwGbGact32772076 = -796941844;    float fJpwGbGact3821597 = -469564485;    float fJpwGbGact72150731 = -694734156;    float fJpwGbGact8628773 = -789414870;    float fJpwGbGact72330573 = -73735613;    float fJpwGbGact37275496 = 21707226;    float fJpwGbGact4025070 = -364568105;    float fJpwGbGact48138128 = -483290473;    float fJpwGbGact58045317 = -296266809;    float fJpwGbGact53015214 = -42116042;    float fJpwGbGact54063569 = -818460931;    float fJpwGbGact85045727 = -127519045;    float fJpwGbGact98728843 = -487746169;    float fJpwGbGact67008965 = -690118899;    float fJpwGbGact25576358 = -120724122;    float fJpwGbGact74809654 = -270364574;    float fJpwGbGact80236322 = -6984135;    float fJpwGbGact86051239 = -77153451;    float fJpwGbGact93931063 = -464147799;    float fJpwGbGact7042278 = -986639793;    float fJpwGbGact3961907 = -982353332;    float fJpwGbGact59728567 = -275858965;    float fJpwGbGact10024590 = -275898526;    float fJpwGbGact14230583 = -563614771;    float fJpwGbGact93831226 = -521223341;    float fJpwGbGact59220661 = -512357526;    float fJpwGbGact7757432 = 12337680;    float fJpwGbGact35273627 = -869015641;    float fJpwGbGact64529580 = -746947020;    float fJpwGbGact40474347 = -114151200;    float fJpwGbGact75995841 = -743651731;    float fJpwGbGact96570913 = -219854530;    float fJpwGbGact96300870 = 55514857;    float fJpwGbGact20905335 = -274381586;    float fJpwGbGact50190544 = -250166247;    float fJpwGbGact87924106 = -65502355;    float fJpwGbGact94199334 = -610202572;    float fJpwGbGact1501586 = -347335126;    float fJpwGbGact43626742 = -829416911;    float fJpwGbGact222156 = -164278748;    float fJpwGbGact97631005 = -801579013;    float fJpwGbGact82133033 = -901936992;    float fJpwGbGact3188612 = -351680802;    float fJpwGbGact95544032 = -725926842;    float fJpwGbGact2878964 = -332921668;    float fJpwGbGact7204690 = -837082860;    float fJpwGbGact26044919 = -13182790;    float fJpwGbGact44569862 = -356136676;    float fJpwGbGact56796353 = -287022096;     fJpwGbGact56324996 = fJpwGbGact56611754;     fJpwGbGact56611754 = fJpwGbGact21671407;     fJpwGbGact21671407 = fJpwGbGact52293535;     fJpwGbGact52293535 = fJpwGbGact50373198;     fJpwGbGact50373198 = fJpwGbGact15253329;     fJpwGbGact15253329 = fJpwGbGact85248048;     fJpwGbGact85248048 = fJpwGbGact61775892;     fJpwGbGact61775892 = fJpwGbGact32505319;     fJpwGbGact32505319 = fJpwGbGact49971585;     fJpwGbGact49971585 = fJpwGbGact17322061;     fJpwGbGact17322061 = fJpwGbGact41159721;     fJpwGbGact41159721 = fJpwGbGact90366680;     fJpwGbGact90366680 = fJpwGbGact2008555;     fJpwGbGact2008555 = fJpwGbGact31428715;     fJpwGbGact31428715 = fJpwGbGact8698353;     fJpwGbGact8698353 = fJpwGbGact34233068;     fJpwGbGact34233068 = fJpwGbGact20962497;     fJpwGbGact20962497 = fJpwGbGact58583835;     fJpwGbGact58583835 = fJpwGbGact71173115;     fJpwGbGact71173115 = fJpwGbGact86081643;     fJpwGbGact86081643 = fJpwGbGact83994423;     fJpwGbGact83994423 = fJpwGbGact19336259;     fJpwGbGact19336259 = fJpwGbGact17646338;     fJpwGbGact17646338 = fJpwGbGact4155408;     fJpwGbGact4155408 = fJpwGbGact92327880;     fJpwGbGact92327880 = fJpwGbGact62238115;     fJpwGbGact62238115 = fJpwGbGact31184479;     fJpwGbGact31184479 = fJpwGbGact76730165;     fJpwGbGact76730165 = fJpwGbGact33776476;     fJpwGbGact33776476 = fJpwGbGact82962620;     fJpwGbGact82962620 = fJpwGbGact91745703;     fJpwGbGact91745703 = fJpwGbGact66350066;     fJpwGbGact66350066 = fJpwGbGact10130359;     fJpwGbGact10130359 = fJpwGbGact15957315;     fJpwGbGact15957315 = fJpwGbGact37497651;     fJpwGbGact37497651 = fJpwGbGact1656076;     fJpwGbGact1656076 = fJpwGbGact30271161;     fJpwGbGact30271161 = fJpwGbGact61233929;     fJpwGbGact61233929 = fJpwGbGact48559246;     fJpwGbGact48559246 = fJpwGbGact56942532;     fJpwGbGact56942532 = fJpwGbGact92250416;     fJpwGbGact92250416 = fJpwGbGact24773762;     fJpwGbGact24773762 = fJpwGbGact11578827;     fJpwGbGact11578827 = fJpwGbGact82372710;     fJpwGbGact82372710 = fJpwGbGact39625828;     fJpwGbGact39625828 = fJpwGbGact51853534;     fJpwGbGact51853534 = fJpwGbGact86242274;     fJpwGbGact86242274 = fJpwGbGact34613565;     fJpwGbGact34613565 = fJpwGbGact80429294;     fJpwGbGact80429294 = fJpwGbGact12871141;     fJpwGbGact12871141 = fJpwGbGact32772076;     fJpwGbGact32772076 = fJpwGbGact3821597;     fJpwGbGact3821597 = fJpwGbGact72150731;     fJpwGbGact72150731 = fJpwGbGact8628773;     fJpwGbGact8628773 = fJpwGbGact72330573;     fJpwGbGact72330573 = fJpwGbGact37275496;     fJpwGbGact37275496 = fJpwGbGact4025070;     fJpwGbGact4025070 = fJpwGbGact48138128;     fJpwGbGact48138128 = fJpwGbGact58045317;     fJpwGbGact58045317 = fJpwGbGact53015214;     fJpwGbGact53015214 = fJpwGbGact54063569;     fJpwGbGact54063569 = fJpwGbGact85045727;     fJpwGbGact85045727 = fJpwGbGact98728843;     fJpwGbGact98728843 = fJpwGbGact67008965;     fJpwGbGact67008965 = fJpwGbGact25576358;     fJpwGbGact25576358 = fJpwGbGact74809654;     fJpwGbGact74809654 = fJpwGbGact80236322;     fJpwGbGact80236322 = fJpwGbGact86051239;     fJpwGbGact86051239 = fJpwGbGact93931063;     fJpwGbGact93931063 = fJpwGbGact7042278;     fJpwGbGact7042278 = fJpwGbGact3961907;     fJpwGbGact3961907 = fJpwGbGact59728567;     fJpwGbGact59728567 = fJpwGbGact10024590;     fJpwGbGact10024590 = fJpwGbGact14230583;     fJpwGbGact14230583 = fJpwGbGact93831226;     fJpwGbGact93831226 = fJpwGbGact59220661;     fJpwGbGact59220661 = fJpwGbGact7757432;     fJpwGbGact7757432 = fJpwGbGact35273627;     fJpwGbGact35273627 = fJpwGbGact64529580;     fJpwGbGact64529580 = fJpwGbGact40474347;     fJpwGbGact40474347 = fJpwGbGact75995841;     fJpwGbGact75995841 = fJpwGbGact96570913;     fJpwGbGact96570913 = fJpwGbGact96300870;     fJpwGbGact96300870 = fJpwGbGact20905335;     fJpwGbGact20905335 = fJpwGbGact50190544;     fJpwGbGact50190544 = fJpwGbGact87924106;     fJpwGbGact87924106 = fJpwGbGact94199334;     fJpwGbGact94199334 = fJpwGbGact1501586;     fJpwGbGact1501586 = fJpwGbGact43626742;     fJpwGbGact43626742 = fJpwGbGact222156;     fJpwGbGact222156 = fJpwGbGact97631005;     fJpwGbGact97631005 = fJpwGbGact82133033;     fJpwGbGact82133033 = fJpwGbGact3188612;     fJpwGbGact3188612 = fJpwGbGact95544032;     fJpwGbGact95544032 = fJpwGbGact2878964;     fJpwGbGact2878964 = fJpwGbGact7204690;     fJpwGbGact7204690 = fJpwGbGact26044919;     fJpwGbGact26044919 = fJpwGbGact44569862;     fJpwGbGact44569862 = fJpwGbGact56796353;     fJpwGbGact56796353 = fJpwGbGact56324996;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void pHXoOOEaTg73556612() {     float zVFrpMkOtR75234741 = -661440535;    float zVFrpMkOtR48183605 = -49549337;    float zVFrpMkOtR54153178 = -499962315;    float zVFrpMkOtR2229282 = -746902560;    float zVFrpMkOtR3939690 = -736853831;    float zVFrpMkOtR15175170 = -143985169;    float zVFrpMkOtR98397436 = -76621995;    float zVFrpMkOtR69040845 = -995447774;    float zVFrpMkOtR9812461 = -379023048;    float zVFrpMkOtR780436 = -233483228;    float zVFrpMkOtR84599127 = -888442491;    float zVFrpMkOtR90641591 = -791561956;    float zVFrpMkOtR14866188 = -565749401;    float zVFrpMkOtR80932090 = -599806689;    float zVFrpMkOtR5305586 = -341454465;    float zVFrpMkOtR4064269 = -343882192;    float zVFrpMkOtR27968129 = -828285806;    float zVFrpMkOtR78573601 = 52532102;    float zVFrpMkOtR1146038 = -941197434;    float zVFrpMkOtR82304013 = -59119975;    float zVFrpMkOtR75139469 = -122162591;    float zVFrpMkOtR21267000 = -781082665;    float zVFrpMkOtR56808950 = -452481434;    float zVFrpMkOtR2495733 = -135059999;    float zVFrpMkOtR25306628 = -126146115;    float zVFrpMkOtR81794124 = -557356602;    float zVFrpMkOtR1891849 = -993451161;    float zVFrpMkOtR76241004 = -8820554;    float zVFrpMkOtR46801027 = -631243507;    float zVFrpMkOtR79053357 = -647057840;    float zVFrpMkOtR86228486 = -949752544;    float zVFrpMkOtR7951292 = 68588428;    float zVFrpMkOtR36654541 = -971460666;    float zVFrpMkOtR81754458 = 83635754;    float zVFrpMkOtR78134461 = -892603585;    float zVFrpMkOtR58619489 = -165394987;    float zVFrpMkOtR7740703 = -910038959;    float zVFrpMkOtR52147717 = -81090887;    float zVFrpMkOtR5305972 = -971040269;    float zVFrpMkOtR90453020 = -476467265;    float zVFrpMkOtR36187397 = -504186587;    float zVFrpMkOtR46405668 = 60736565;    float zVFrpMkOtR77440850 = -146036733;    float zVFrpMkOtR84383207 = -849806312;    float zVFrpMkOtR90315613 = -845723594;    float zVFrpMkOtR84765183 = -468744876;    float zVFrpMkOtR19516336 = -817334776;    float zVFrpMkOtR48255600 = -572717616;    float zVFrpMkOtR69694954 = -743781056;    float zVFrpMkOtR20245945 = -807251119;    float zVFrpMkOtR53639942 = 82626422;    float zVFrpMkOtR57211085 = -686707754;    float zVFrpMkOtR11106856 = -545303348;    float zVFrpMkOtR2569067 = -72736192;    float zVFrpMkOtR98417143 = -627491861;    float zVFrpMkOtR53967741 = -880357871;    float zVFrpMkOtR91374655 = -597067904;    float zVFrpMkOtR51657446 = -264902317;    float zVFrpMkOtR76922654 = -520756446;    float zVFrpMkOtR22145565 = -79497230;    float zVFrpMkOtR13283322 = -150534008;    float zVFrpMkOtR22156432 = 32198559;    float zVFrpMkOtR22239819 = -264204268;    float zVFrpMkOtR30759103 = -731965209;    float zVFrpMkOtR14551950 = -283730685;    float zVFrpMkOtR76647836 = -857030920;    float zVFrpMkOtR53987050 = -820101290;    float zVFrpMkOtR33111730 = -549385156;    float zVFrpMkOtR2797629 = -707203104;    float zVFrpMkOtR46686096 = -76059479;    float zVFrpMkOtR96323565 = -433843233;    float zVFrpMkOtR75820412 = -647194920;    float zVFrpMkOtR73267629 = 23572370;    float zVFrpMkOtR10693017 = -364730170;    float zVFrpMkOtR46116616 = -554933389;    float zVFrpMkOtR28733801 = -82899156;    float zVFrpMkOtR43826150 = -535045932;    float zVFrpMkOtR72425742 = -602675122;    float zVFrpMkOtR12180119 = -289336405;    float zVFrpMkOtR40541444 = -657401239;    float zVFrpMkOtR62277789 = -740021826;    float zVFrpMkOtR53636248 = -320733545;    float zVFrpMkOtR6546051 = -265039499;    float zVFrpMkOtR26555082 = -823992388;    float zVFrpMkOtR25413415 = -629684262;    float zVFrpMkOtR29017402 = -163044790;    float zVFrpMkOtR96844435 = -386108225;    float zVFrpMkOtR34085475 = -798724475;    float zVFrpMkOtR83337314 = -288872386;    float zVFrpMkOtR24166720 = 87754286;    float zVFrpMkOtR67244833 = -568327084;    float zVFrpMkOtR56083257 = -545136643;    float zVFrpMkOtR75225063 = -560334441;    float zVFrpMkOtR83160407 = -791543039;    float zVFrpMkOtR77169699 = -225933257;    float zVFrpMkOtR14030966 = -436385146;    float zVFrpMkOtR24165850 = -675059167;    float zVFrpMkOtR46681747 = -414071525;    float zVFrpMkOtR69831257 = -466075628;    float zVFrpMkOtR13667778 = -661440535;     zVFrpMkOtR75234741 = zVFrpMkOtR48183605;     zVFrpMkOtR48183605 = zVFrpMkOtR54153178;     zVFrpMkOtR54153178 = zVFrpMkOtR2229282;     zVFrpMkOtR2229282 = zVFrpMkOtR3939690;     zVFrpMkOtR3939690 = zVFrpMkOtR15175170;     zVFrpMkOtR15175170 = zVFrpMkOtR98397436;     zVFrpMkOtR98397436 = zVFrpMkOtR69040845;     zVFrpMkOtR69040845 = zVFrpMkOtR9812461;     zVFrpMkOtR9812461 = zVFrpMkOtR780436;     zVFrpMkOtR780436 = zVFrpMkOtR84599127;     zVFrpMkOtR84599127 = zVFrpMkOtR90641591;     zVFrpMkOtR90641591 = zVFrpMkOtR14866188;     zVFrpMkOtR14866188 = zVFrpMkOtR80932090;     zVFrpMkOtR80932090 = zVFrpMkOtR5305586;     zVFrpMkOtR5305586 = zVFrpMkOtR4064269;     zVFrpMkOtR4064269 = zVFrpMkOtR27968129;     zVFrpMkOtR27968129 = zVFrpMkOtR78573601;     zVFrpMkOtR78573601 = zVFrpMkOtR1146038;     zVFrpMkOtR1146038 = zVFrpMkOtR82304013;     zVFrpMkOtR82304013 = zVFrpMkOtR75139469;     zVFrpMkOtR75139469 = zVFrpMkOtR21267000;     zVFrpMkOtR21267000 = zVFrpMkOtR56808950;     zVFrpMkOtR56808950 = zVFrpMkOtR2495733;     zVFrpMkOtR2495733 = zVFrpMkOtR25306628;     zVFrpMkOtR25306628 = zVFrpMkOtR81794124;     zVFrpMkOtR81794124 = zVFrpMkOtR1891849;     zVFrpMkOtR1891849 = zVFrpMkOtR76241004;     zVFrpMkOtR76241004 = zVFrpMkOtR46801027;     zVFrpMkOtR46801027 = zVFrpMkOtR79053357;     zVFrpMkOtR79053357 = zVFrpMkOtR86228486;     zVFrpMkOtR86228486 = zVFrpMkOtR7951292;     zVFrpMkOtR7951292 = zVFrpMkOtR36654541;     zVFrpMkOtR36654541 = zVFrpMkOtR81754458;     zVFrpMkOtR81754458 = zVFrpMkOtR78134461;     zVFrpMkOtR78134461 = zVFrpMkOtR58619489;     zVFrpMkOtR58619489 = zVFrpMkOtR7740703;     zVFrpMkOtR7740703 = zVFrpMkOtR52147717;     zVFrpMkOtR52147717 = zVFrpMkOtR5305972;     zVFrpMkOtR5305972 = zVFrpMkOtR90453020;     zVFrpMkOtR90453020 = zVFrpMkOtR36187397;     zVFrpMkOtR36187397 = zVFrpMkOtR46405668;     zVFrpMkOtR46405668 = zVFrpMkOtR77440850;     zVFrpMkOtR77440850 = zVFrpMkOtR84383207;     zVFrpMkOtR84383207 = zVFrpMkOtR90315613;     zVFrpMkOtR90315613 = zVFrpMkOtR84765183;     zVFrpMkOtR84765183 = zVFrpMkOtR19516336;     zVFrpMkOtR19516336 = zVFrpMkOtR48255600;     zVFrpMkOtR48255600 = zVFrpMkOtR69694954;     zVFrpMkOtR69694954 = zVFrpMkOtR20245945;     zVFrpMkOtR20245945 = zVFrpMkOtR53639942;     zVFrpMkOtR53639942 = zVFrpMkOtR57211085;     zVFrpMkOtR57211085 = zVFrpMkOtR11106856;     zVFrpMkOtR11106856 = zVFrpMkOtR2569067;     zVFrpMkOtR2569067 = zVFrpMkOtR98417143;     zVFrpMkOtR98417143 = zVFrpMkOtR53967741;     zVFrpMkOtR53967741 = zVFrpMkOtR91374655;     zVFrpMkOtR91374655 = zVFrpMkOtR51657446;     zVFrpMkOtR51657446 = zVFrpMkOtR76922654;     zVFrpMkOtR76922654 = zVFrpMkOtR22145565;     zVFrpMkOtR22145565 = zVFrpMkOtR13283322;     zVFrpMkOtR13283322 = zVFrpMkOtR22156432;     zVFrpMkOtR22156432 = zVFrpMkOtR22239819;     zVFrpMkOtR22239819 = zVFrpMkOtR30759103;     zVFrpMkOtR30759103 = zVFrpMkOtR14551950;     zVFrpMkOtR14551950 = zVFrpMkOtR76647836;     zVFrpMkOtR76647836 = zVFrpMkOtR53987050;     zVFrpMkOtR53987050 = zVFrpMkOtR33111730;     zVFrpMkOtR33111730 = zVFrpMkOtR2797629;     zVFrpMkOtR2797629 = zVFrpMkOtR46686096;     zVFrpMkOtR46686096 = zVFrpMkOtR96323565;     zVFrpMkOtR96323565 = zVFrpMkOtR75820412;     zVFrpMkOtR75820412 = zVFrpMkOtR73267629;     zVFrpMkOtR73267629 = zVFrpMkOtR10693017;     zVFrpMkOtR10693017 = zVFrpMkOtR46116616;     zVFrpMkOtR46116616 = zVFrpMkOtR28733801;     zVFrpMkOtR28733801 = zVFrpMkOtR43826150;     zVFrpMkOtR43826150 = zVFrpMkOtR72425742;     zVFrpMkOtR72425742 = zVFrpMkOtR12180119;     zVFrpMkOtR12180119 = zVFrpMkOtR40541444;     zVFrpMkOtR40541444 = zVFrpMkOtR62277789;     zVFrpMkOtR62277789 = zVFrpMkOtR53636248;     zVFrpMkOtR53636248 = zVFrpMkOtR6546051;     zVFrpMkOtR6546051 = zVFrpMkOtR26555082;     zVFrpMkOtR26555082 = zVFrpMkOtR25413415;     zVFrpMkOtR25413415 = zVFrpMkOtR29017402;     zVFrpMkOtR29017402 = zVFrpMkOtR96844435;     zVFrpMkOtR96844435 = zVFrpMkOtR34085475;     zVFrpMkOtR34085475 = zVFrpMkOtR83337314;     zVFrpMkOtR83337314 = zVFrpMkOtR24166720;     zVFrpMkOtR24166720 = zVFrpMkOtR67244833;     zVFrpMkOtR67244833 = zVFrpMkOtR56083257;     zVFrpMkOtR56083257 = zVFrpMkOtR75225063;     zVFrpMkOtR75225063 = zVFrpMkOtR83160407;     zVFrpMkOtR83160407 = zVFrpMkOtR77169699;     zVFrpMkOtR77169699 = zVFrpMkOtR14030966;     zVFrpMkOtR14030966 = zVFrpMkOtR24165850;     zVFrpMkOtR24165850 = zVFrpMkOtR46681747;     zVFrpMkOtR46681747 = zVFrpMkOtR69831257;     zVFrpMkOtR69831257 = zVFrpMkOtR13667778;     zVFrpMkOtR13667778 = zVFrpMkOtR75234741;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void NyobVKQFIy83379630() {     float CgkehvPktk52555469 = -202728469;    float CgkehvPktk60254731 = -381926869;    float CgkehvPktk35832713 = -99783235;    float CgkehvPktk23026613 = -570494596;    float CgkehvPktk50005627 = -491426772;    float CgkehvPktk57067801 = -457993399;    float CgkehvPktk77495124 = -482104798;    float CgkehvPktk2842448 = -399909208;    float CgkehvPktk86439830 = -666095804;    float CgkehvPktk88735942 = -9690734;    float CgkehvPktk94225380 = -60592850;    float CgkehvPktk36315625 = -70252363;    float CgkehvPktk78627759 = 60821972;    float CgkehvPktk31259526 = -201011530;    float CgkehvPktk15589731 = -807728133;    float CgkehvPktk23512584 = -491757624;    float CgkehvPktk83736770 = -884700290;    float CgkehvPktk85372428 = -926321754;    float CgkehvPktk22184608 = -52085475;    float CgkehvPktk63195054 = -843827500;    float CgkehvPktk21896087 = -666670540;    float CgkehvPktk25189560 = -274296602;    float CgkehvPktk61922262 = -104810986;    float CgkehvPktk96860025 = -965500929;    float CgkehvPktk51625625 = -739296694;    float CgkehvPktk68988675 = -467416922;    float CgkehvPktk23108392 = 78326986;    float CgkehvPktk38269030 = -621813473;    float CgkehvPktk29428312 = -917436259;    float CgkehvPktk2360933 = 82131802;    float CgkehvPktk45493930 = 38717959;    float CgkehvPktk58170954 = -528981598;    float CgkehvPktk55934902 = -901663689;    float CgkehvPktk29365242 = -733106383;    float CgkehvPktk77744577 = -710849140;    float CgkehvPktk45110950 = -919158532;    float CgkehvPktk7034314 = -934905648;    float CgkehvPktk28554016 = -13318076;    float CgkehvPktk16004393 = -774695986;    float CgkehvPktk24319111 = -465053251;    float CgkehvPktk52022765 = -98405565;    float CgkehvPktk50440658 = -436821560;    float CgkehvPktk83224301 = -75419646;    float CgkehvPktk48112305 = -143610588;    float CgkehvPktk54325698 = -285241794;    float CgkehvPktk52859953 = -315184355;    float CgkehvPktk5450984 = -212144090;    float CgkehvPktk35352836 = -70305159;    float CgkehvPktk9524727 = -807410011;    float CgkehvPktk62712199 = -514285653;    float CgkehvPktk4456082 = -974536337;    float CgkehvPktk16449417 = -226386494;    float CgkehvPktk52419205 = -857315084;    float CgkehvPktk41527216 = -2599285;    float CgkehvPktk61483543 = -32345479;    float CgkehvPktk27365909 = -928431868;    float CgkehvPktk98332469 = -177115884;    float CgkehvPktk38972688 = -134282306;    float CgkehvPktk71400987 = -831197902;    float CgkehvPktk81016951 = 75990150;    float CgkehvPktk33959409 = -436320386;    float CgkehvPktk39226095 = -860291326;    float CgkehvPktk73414135 = -482472949;    float CgkehvPktk84078898 = -648227606;    float CgkehvPktk43242013 = 51591307;    float CgkehvPktk36054427 = -531611252;    float CgkehvPktk80380722 = -168588674;    float CgkehvPktk49262518 = -206071645;    float CgkehvPktk53514948 = -490162390;    float CgkehvPktk70478781 = -888569602;    float CgkehvPktk16478270 = -556851977;    float CgkehvPktk55182754 = -771382214;    float CgkehvPktk69368035 = -51625769;    float CgkehvPktk97865496 = -587032224;    float CgkehvPktk11172289 = -645421936;    float CgkehvPktk71455428 = -129848980;    float CgkehvPktk41965259 = -98876956;    float CgkehvPktk13809957 = -961200399;    float CgkehvPktk42534327 = -580259136;    float CgkehvPktk98765672 = -324112340;    float CgkehvPktk63537691 = -155272833;    float CgkehvPktk87755556 = -851367855;    float CgkehvPktk28744303 = -814403462;    float CgkehvPktk66716113 = -303150607;    float CgkehvPktk97904850 = 56668138;    float CgkehvPktk29044513 = -734895548;    float CgkehvPktk5751749 = -671666514;    float CgkehvPktk14407687 = -799064404;    float CgkehvPktk67881698 = -600760905;    float CgkehvPktk50378669 = -782417273;    float CgkehvPktk46778480 = -642042649;    float CgkehvPktk68061626 = -700623342;    float CgkehvPktk57153028 = -182120174;    float CgkehvPktk34987442 = -750686136;    float CgkehvPktk90359702 = 71267134;    float CgkehvPktk12796671 = -238114239;    float CgkehvPktk77026523 = -954348612;    float CgkehvPktk99145403 = -427192040;    float CgkehvPktk4870293 = -95201896;    float CgkehvPktk18271271 = -202728469;     CgkehvPktk52555469 = CgkehvPktk60254731;     CgkehvPktk60254731 = CgkehvPktk35832713;     CgkehvPktk35832713 = CgkehvPktk23026613;     CgkehvPktk23026613 = CgkehvPktk50005627;     CgkehvPktk50005627 = CgkehvPktk57067801;     CgkehvPktk57067801 = CgkehvPktk77495124;     CgkehvPktk77495124 = CgkehvPktk2842448;     CgkehvPktk2842448 = CgkehvPktk86439830;     CgkehvPktk86439830 = CgkehvPktk88735942;     CgkehvPktk88735942 = CgkehvPktk94225380;     CgkehvPktk94225380 = CgkehvPktk36315625;     CgkehvPktk36315625 = CgkehvPktk78627759;     CgkehvPktk78627759 = CgkehvPktk31259526;     CgkehvPktk31259526 = CgkehvPktk15589731;     CgkehvPktk15589731 = CgkehvPktk23512584;     CgkehvPktk23512584 = CgkehvPktk83736770;     CgkehvPktk83736770 = CgkehvPktk85372428;     CgkehvPktk85372428 = CgkehvPktk22184608;     CgkehvPktk22184608 = CgkehvPktk63195054;     CgkehvPktk63195054 = CgkehvPktk21896087;     CgkehvPktk21896087 = CgkehvPktk25189560;     CgkehvPktk25189560 = CgkehvPktk61922262;     CgkehvPktk61922262 = CgkehvPktk96860025;     CgkehvPktk96860025 = CgkehvPktk51625625;     CgkehvPktk51625625 = CgkehvPktk68988675;     CgkehvPktk68988675 = CgkehvPktk23108392;     CgkehvPktk23108392 = CgkehvPktk38269030;     CgkehvPktk38269030 = CgkehvPktk29428312;     CgkehvPktk29428312 = CgkehvPktk2360933;     CgkehvPktk2360933 = CgkehvPktk45493930;     CgkehvPktk45493930 = CgkehvPktk58170954;     CgkehvPktk58170954 = CgkehvPktk55934902;     CgkehvPktk55934902 = CgkehvPktk29365242;     CgkehvPktk29365242 = CgkehvPktk77744577;     CgkehvPktk77744577 = CgkehvPktk45110950;     CgkehvPktk45110950 = CgkehvPktk7034314;     CgkehvPktk7034314 = CgkehvPktk28554016;     CgkehvPktk28554016 = CgkehvPktk16004393;     CgkehvPktk16004393 = CgkehvPktk24319111;     CgkehvPktk24319111 = CgkehvPktk52022765;     CgkehvPktk52022765 = CgkehvPktk50440658;     CgkehvPktk50440658 = CgkehvPktk83224301;     CgkehvPktk83224301 = CgkehvPktk48112305;     CgkehvPktk48112305 = CgkehvPktk54325698;     CgkehvPktk54325698 = CgkehvPktk52859953;     CgkehvPktk52859953 = CgkehvPktk5450984;     CgkehvPktk5450984 = CgkehvPktk35352836;     CgkehvPktk35352836 = CgkehvPktk9524727;     CgkehvPktk9524727 = CgkehvPktk62712199;     CgkehvPktk62712199 = CgkehvPktk4456082;     CgkehvPktk4456082 = CgkehvPktk16449417;     CgkehvPktk16449417 = CgkehvPktk52419205;     CgkehvPktk52419205 = CgkehvPktk41527216;     CgkehvPktk41527216 = CgkehvPktk61483543;     CgkehvPktk61483543 = CgkehvPktk27365909;     CgkehvPktk27365909 = CgkehvPktk98332469;     CgkehvPktk98332469 = CgkehvPktk38972688;     CgkehvPktk38972688 = CgkehvPktk71400987;     CgkehvPktk71400987 = CgkehvPktk81016951;     CgkehvPktk81016951 = CgkehvPktk33959409;     CgkehvPktk33959409 = CgkehvPktk39226095;     CgkehvPktk39226095 = CgkehvPktk73414135;     CgkehvPktk73414135 = CgkehvPktk84078898;     CgkehvPktk84078898 = CgkehvPktk43242013;     CgkehvPktk43242013 = CgkehvPktk36054427;     CgkehvPktk36054427 = CgkehvPktk80380722;     CgkehvPktk80380722 = CgkehvPktk49262518;     CgkehvPktk49262518 = CgkehvPktk53514948;     CgkehvPktk53514948 = CgkehvPktk70478781;     CgkehvPktk70478781 = CgkehvPktk16478270;     CgkehvPktk16478270 = CgkehvPktk55182754;     CgkehvPktk55182754 = CgkehvPktk69368035;     CgkehvPktk69368035 = CgkehvPktk97865496;     CgkehvPktk97865496 = CgkehvPktk11172289;     CgkehvPktk11172289 = CgkehvPktk71455428;     CgkehvPktk71455428 = CgkehvPktk41965259;     CgkehvPktk41965259 = CgkehvPktk13809957;     CgkehvPktk13809957 = CgkehvPktk42534327;     CgkehvPktk42534327 = CgkehvPktk98765672;     CgkehvPktk98765672 = CgkehvPktk63537691;     CgkehvPktk63537691 = CgkehvPktk87755556;     CgkehvPktk87755556 = CgkehvPktk28744303;     CgkehvPktk28744303 = CgkehvPktk66716113;     CgkehvPktk66716113 = CgkehvPktk97904850;     CgkehvPktk97904850 = CgkehvPktk29044513;     CgkehvPktk29044513 = CgkehvPktk5751749;     CgkehvPktk5751749 = CgkehvPktk14407687;     CgkehvPktk14407687 = CgkehvPktk67881698;     CgkehvPktk67881698 = CgkehvPktk50378669;     CgkehvPktk50378669 = CgkehvPktk46778480;     CgkehvPktk46778480 = CgkehvPktk68061626;     CgkehvPktk68061626 = CgkehvPktk57153028;     CgkehvPktk57153028 = CgkehvPktk34987442;     CgkehvPktk34987442 = CgkehvPktk90359702;     CgkehvPktk90359702 = CgkehvPktk12796671;     CgkehvPktk12796671 = CgkehvPktk77026523;     CgkehvPktk77026523 = CgkehvPktk99145403;     CgkehvPktk99145403 = CgkehvPktk4870293;     CgkehvPktk4870293 = CgkehvPktk18271271;     CgkehvPktk18271271 = CgkehvPktk52555469;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void kXtfmJDUaK71606742() {     float zEzEUNaZaD13606186 = -221514328;    float zEzEUNaZaD31351637 = -475361127;    float zEzEUNaZaD4785154 = -710783232;    float zEzEUNaZaD55892036 = -578427730;    float zEzEUNaZaD66792798 = -175592583;    float zEzEUNaZaD75494517 = -75889486;    float zEzEUNaZaD24926039 = -104565272;    float zEzEUNaZaD10770082 = -720647910;    float zEzEUNaZaD30546564 = -837005185;    float zEzEUNaZaD26157523 = -372132384;    float zEzEUNaZaD26420064 = -213556393;    float zEzEUNaZaD57909752 = -642603679;    float zEzEUNaZaD61590268 = -233780424;    float zEzEUNaZaD22115886 = -906746181;    float zEzEUNaZaD84881026 = -136986254;    float zEzEUNaZaD40210380 = -230965058;    float zEzEUNaZaD83518063 = -180380067;    float zEzEUNaZaD83247991 = -18955561;    float zEzEUNaZaD63771389 = -533640487;    float zEzEUNaZaD46119976 = -632803490;    float zEzEUNaZaD56322791 = 24821364;    float zEzEUNaZaD51817926 = -270673942;    float zEzEUNaZaD99333043 = -427577434;    float zEzEUNaZaD48716904 = -354253991;    float zEzEUNaZaD86104025 = 95915819;    float zEzEUNaZaD92601906 = -912238342;    float zEzEUNaZaD95695293 = -92970576;    float zEzEUNaZaD7492730 = -412280891;    float zEzEUNaZaD71295292 = 18245403;    float zEzEUNaZaD85126963 = -185853557;    float zEzEUNaZaD52711117 = 95183675;    float zEzEUNaZaD48460047 = -183927085;    float zEzEUNaZaD3887542 = -195136587;    float zEzEUNaZaD12417902 = -977263436;    float zEzEUNaZaD62599981 = -4071377;    float zEzEUNaZaD58635454 = -471552807;    float zEzEUNaZaD94150148 = -80460254;    float zEzEUNaZaD85424426 = -949425803;    float zEzEUNaZaD52004937 = -171229168;    float zEzEUNaZaD25501424 = -790854430;    float zEzEUNaZaD44769986 = -354720770;    float zEzEUNaZaD98117714 = -346613273;    float zEzEUNaZaD61524539 = -198076559;    float zEzEUNaZaD99805024 = -559394154;    float zEzEUNaZaD62304980 = -677514671;    float zEzEUNaZaD24793635 = 35389146;    float zEzEUNaZaD96866809 = -247318689;    float zEzEUNaZaD85808337 = -921253243;    float zEzEUNaZaD64570323 = 92940743;    float zEzEUNaZaD21006361 = -166310735;    float zEzEUNaZaD82103683 = -418916489;    float zEzEUNaZaD12646212 = -235972271;    float zEzEUNaZaD63665609 = -189205179;    float zEzEUNaZaD16167701 = 22748285;    float zEzEUNaZaD15283951 = 2973235;    float zEzEUNaZaD61788260 = -950840386;    float zEzEUNaZaD32018594 = 52216306;    float zEzEUNaZaD56068249 = -256529242;    float zEzEUNaZaD69788010 = -574343549;    float zEzEUNaZaD74190892 = -263354241;    float zEzEUNaZaD79799223 = -982918910;    float zEzEUNaZaD17433310 = -692284382;    float zEzEUNaZaD39474790 = -638893314;    float zEzEUNaZaD45419600 = -551151629;    float zEzEUNaZaD73446406 = -367316060;    float zEzEUNaZaD77960016 = 70370691;    float zEzEUNaZaD54022210 = -347467092;    float zEzEUNaZaD49172366 = -256516988;    float zEzEUNaZaD59515904 = -802674805;    float zEzEUNaZaD26245572 = -665433447;    float zEzEUNaZaD46060232 = -50504804;    float zEzEUNaZaD98093636 = -230954264;    float zEzEUNaZaD31243055 = -847726394;    float zEzEUNaZaD38269965 = -742786058;    float zEzEUNaZaD1349990 = -178082720;    float zEzEUNaZaD58205077 = -628565363;    float zEzEUNaZaD90293386 = 27402617;    float zEzEUNaZaD99528018 = -868183280;    float zEzEUNaZaD86411924 = -676739320;    float zEzEUNaZaD61310390 = -939473328;    float zEzEUNaZaD95735096 = -564919654;    float zEzEUNaZaD9886956 = -171717334;    float zEzEUNaZaD42922406 = -405221635;    float zEzEUNaZaD50288932 = -815443863;    float zEzEUNaZaD3023281 = -766937068;    float zEzEUNaZaD40064905 = -668844054;    float zEzEUNaZaD84794438 = -994721906;    float zEzEUNaZaD87719841 = -117884873;    float zEzEUNaZaD97133951 = -880236672;    float zEzEUNaZaD811722 = -53230991;    float zEzEUNaZaD26616861 = -423769113;    float zEzEUNaZaD38081899 = -823931012;    float zEzEUNaZaD15636416 = -275082255;    float zEzEUNaZaD77814044 = -907874927;    float zEzEUNaZaD45702201 = -807935520;    float zEzEUNaZaD27336677 = -662436389;    float zEzEUNaZaD58642924 = -707719960;    float zEzEUNaZaD16104940 = -646924930;    float zEzEUNaZaD26358618 = -92078094;    float zEzEUNaZaD84344963 = -221514328;     zEzEUNaZaD13606186 = zEzEUNaZaD31351637;     zEzEUNaZaD31351637 = zEzEUNaZaD4785154;     zEzEUNaZaD4785154 = zEzEUNaZaD55892036;     zEzEUNaZaD55892036 = zEzEUNaZaD66792798;     zEzEUNaZaD66792798 = zEzEUNaZaD75494517;     zEzEUNaZaD75494517 = zEzEUNaZaD24926039;     zEzEUNaZaD24926039 = zEzEUNaZaD10770082;     zEzEUNaZaD10770082 = zEzEUNaZaD30546564;     zEzEUNaZaD30546564 = zEzEUNaZaD26157523;     zEzEUNaZaD26157523 = zEzEUNaZaD26420064;     zEzEUNaZaD26420064 = zEzEUNaZaD57909752;     zEzEUNaZaD57909752 = zEzEUNaZaD61590268;     zEzEUNaZaD61590268 = zEzEUNaZaD22115886;     zEzEUNaZaD22115886 = zEzEUNaZaD84881026;     zEzEUNaZaD84881026 = zEzEUNaZaD40210380;     zEzEUNaZaD40210380 = zEzEUNaZaD83518063;     zEzEUNaZaD83518063 = zEzEUNaZaD83247991;     zEzEUNaZaD83247991 = zEzEUNaZaD63771389;     zEzEUNaZaD63771389 = zEzEUNaZaD46119976;     zEzEUNaZaD46119976 = zEzEUNaZaD56322791;     zEzEUNaZaD56322791 = zEzEUNaZaD51817926;     zEzEUNaZaD51817926 = zEzEUNaZaD99333043;     zEzEUNaZaD99333043 = zEzEUNaZaD48716904;     zEzEUNaZaD48716904 = zEzEUNaZaD86104025;     zEzEUNaZaD86104025 = zEzEUNaZaD92601906;     zEzEUNaZaD92601906 = zEzEUNaZaD95695293;     zEzEUNaZaD95695293 = zEzEUNaZaD7492730;     zEzEUNaZaD7492730 = zEzEUNaZaD71295292;     zEzEUNaZaD71295292 = zEzEUNaZaD85126963;     zEzEUNaZaD85126963 = zEzEUNaZaD52711117;     zEzEUNaZaD52711117 = zEzEUNaZaD48460047;     zEzEUNaZaD48460047 = zEzEUNaZaD3887542;     zEzEUNaZaD3887542 = zEzEUNaZaD12417902;     zEzEUNaZaD12417902 = zEzEUNaZaD62599981;     zEzEUNaZaD62599981 = zEzEUNaZaD58635454;     zEzEUNaZaD58635454 = zEzEUNaZaD94150148;     zEzEUNaZaD94150148 = zEzEUNaZaD85424426;     zEzEUNaZaD85424426 = zEzEUNaZaD52004937;     zEzEUNaZaD52004937 = zEzEUNaZaD25501424;     zEzEUNaZaD25501424 = zEzEUNaZaD44769986;     zEzEUNaZaD44769986 = zEzEUNaZaD98117714;     zEzEUNaZaD98117714 = zEzEUNaZaD61524539;     zEzEUNaZaD61524539 = zEzEUNaZaD99805024;     zEzEUNaZaD99805024 = zEzEUNaZaD62304980;     zEzEUNaZaD62304980 = zEzEUNaZaD24793635;     zEzEUNaZaD24793635 = zEzEUNaZaD96866809;     zEzEUNaZaD96866809 = zEzEUNaZaD85808337;     zEzEUNaZaD85808337 = zEzEUNaZaD64570323;     zEzEUNaZaD64570323 = zEzEUNaZaD21006361;     zEzEUNaZaD21006361 = zEzEUNaZaD82103683;     zEzEUNaZaD82103683 = zEzEUNaZaD12646212;     zEzEUNaZaD12646212 = zEzEUNaZaD63665609;     zEzEUNaZaD63665609 = zEzEUNaZaD16167701;     zEzEUNaZaD16167701 = zEzEUNaZaD15283951;     zEzEUNaZaD15283951 = zEzEUNaZaD61788260;     zEzEUNaZaD61788260 = zEzEUNaZaD32018594;     zEzEUNaZaD32018594 = zEzEUNaZaD56068249;     zEzEUNaZaD56068249 = zEzEUNaZaD69788010;     zEzEUNaZaD69788010 = zEzEUNaZaD74190892;     zEzEUNaZaD74190892 = zEzEUNaZaD79799223;     zEzEUNaZaD79799223 = zEzEUNaZaD17433310;     zEzEUNaZaD17433310 = zEzEUNaZaD39474790;     zEzEUNaZaD39474790 = zEzEUNaZaD45419600;     zEzEUNaZaD45419600 = zEzEUNaZaD73446406;     zEzEUNaZaD73446406 = zEzEUNaZaD77960016;     zEzEUNaZaD77960016 = zEzEUNaZaD54022210;     zEzEUNaZaD54022210 = zEzEUNaZaD49172366;     zEzEUNaZaD49172366 = zEzEUNaZaD59515904;     zEzEUNaZaD59515904 = zEzEUNaZaD26245572;     zEzEUNaZaD26245572 = zEzEUNaZaD46060232;     zEzEUNaZaD46060232 = zEzEUNaZaD98093636;     zEzEUNaZaD98093636 = zEzEUNaZaD31243055;     zEzEUNaZaD31243055 = zEzEUNaZaD38269965;     zEzEUNaZaD38269965 = zEzEUNaZaD1349990;     zEzEUNaZaD1349990 = zEzEUNaZaD58205077;     zEzEUNaZaD58205077 = zEzEUNaZaD90293386;     zEzEUNaZaD90293386 = zEzEUNaZaD99528018;     zEzEUNaZaD99528018 = zEzEUNaZaD86411924;     zEzEUNaZaD86411924 = zEzEUNaZaD61310390;     zEzEUNaZaD61310390 = zEzEUNaZaD95735096;     zEzEUNaZaD95735096 = zEzEUNaZaD9886956;     zEzEUNaZaD9886956 = zEzEUNaZaD42922406;     zEzEUNaZaD42922406 = zEzEUNaZaD50288932;     zEzEUNaZaD50288932 = zEzEUNaZaD3023281;     zEzEUNaZaD3023281 = zEzEUNaZaD40064905;     zEzEUNaZaD40064905 = zEzEUNaZaD84794438;     zEzEUNaZaD84794438 = zEzEUNaZaD87719841;     zEzEUNaZaD87719841 = zEzEUNaZaD97133951;     zEzEUNaZaD97133951 = zEzEUNaZaD811722;     zEzEUNaZaD811722 = zEzEUNaZaD26616861;     zEzEUNaZaD26616861 = zEzEUNaZaD38081899;     zEzEUNaZaD38081899 = zEzEUNaZaD15636416;     zEzEUNaZaD15636416 = zEzEUNaZaD77814044;     zEzEUNaZaD77814044 = zEzEUNaZaD45702201;     zEzEUNaZaD45702201 = zEzEUNaZaD27336677;     zEzEUNaZaD27336677 = zEzEUNaZaD58642924;     zEzEUNaZaD58642924 = zEzEUNaZaD16104940;     zEzEUNaZaD16104940 = zEzEUNaZaD26358618;     zEzEUNaZaD26358618 = zEzEUNaZaD84344963;     zEzEUNaZaD84344963 = zEzEUNaZaD13606186;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void YWlxJKkkcb83169167() {     float ZmGPzEpylo24658521 = 2830848;    float ZmGPzEpylo67805463 = -558146604;    float ZmGPzEpylo98409290 = -507501076;    float ZmGPzEpylo92487494 = -356225657;    float ZmGPzEpylo81369944 = -292669564;    float ZmGPzEpylo85219875 = -868927370;    float ZmGPzEpylo30220120 = -75891630;    float ZmGPzEpylo51394204 = -565342283;    float ZmGPzEpylo3968257 = -804503050;    float ZmGPzEpylo64419226 = -372317;    float ZmGPzEpylo53534596 = -926651919;    float ZmGPzEpylo75930960 = -731085403;    float ZmGPzEpylo86589549 = -797968201;    float ZmGPzEpylo24511191 = -976192570;    float ZmGPzEpylo92879294 = -575566162;    float ZmGPzEpylo63267039 = -711973579;    float ZmGPzEpylo69336166 = -71156202;    float ZmGPzEpylo373421 = -387321464;    float ZmGPzEpylo25251103 = -310699933;    float ZmGPzEpylo61026457 = -818773367;    float ZmGPzEpylo70832139 = 93929861;    float ZmGPzEpylo33872225 = -414553311;    float ZmGPzEpylo27524225 = -910604420;    float ZmGPzEpylo39661257 = -322776921;    float ZmGPzEpylo38471754 = -887198206;    float ZmGPzEpylo87071618 = -830008280;    float ZmGPzEpylo75726799 = -189068210;    float ZmGPzEpylo67865548 = -600506563;    float ZmGPzEpylo59992660 = -259555356;    float ZmGPzEpylo73870528 = -534981072;    float ZmGPzEpylo51575135 = -301577300;    float ZmGPzEpylo42568176 = -290917131;    float ZmGPzEpylo80477075 = -813123432;    float ZmGPzEpylo95399853 = -427250055;    float ZmGPzEpylo76865875 = -332465133;    float ZmGPzEpylo61452912 = -829005646;    float ZmGPzEpylo3280641 = -576101516;    float ZmGPzEpylo74815417 = -786717861;    float ZmGPzEpylo29177081 = -214591996;    float ZmGPzEpylo33715514 = -389297688;    float ZmGPzEpylo40553290 = -864050001;    float ZmGPzEpylo49370355 = -207956965;    float ZmGPzEpylo49753937 = -730950909;    float ZmGPzEpylo11689769 = 14063392;    float ZmGPzEpylo99279749 = -126472698;    float ZmGPzEpylo86620325 = 63973815;    float ZmGPzEpylo31358187 = -712173132;    float ZmGPzEpylo92417944 = -795010988;    float ZmGPzEpylo89951322 = 59232463;    float ZmGPzEpylo24289166 = 78420404;    float ZmGPzEpylo6436443 = 31342110;    float ZmGPzEpylo55206192 = -975021612;    float ZmGPzEpylo31049926 = -373081771;    float ZmGPzEpylo38245617 = -93924182;    float ZmGPzEpylo12337029 = -22483231;    float ZmGPzEpylo90786295 = -582615841;    float ZmGPzEpylo40281238 = -647542184;    float ZmGPzEpylo58748034 = -84724156;    float ZmGPzEpylo54015741 = -469027452;    float ZmGPzEpylo94298326 = -462661284;    float ZmGPzEpylo9493076 = -579859160;    float ZmGPzEpylo62354571 = -475385067;    float ZmGPzEpylo91401543 = -205786928;    float ZmGPzEpylo30097729 = -169521978;    float ZmGPzEpylo12844092 = -698795018;    float ZmGPzEpylo10966420 = -535734789;    float ZmGPzEpylo95453884 = -917961972;    float ZmGPzEpylo91189696 = -270718146;    float ZmGPzEpylo47645315 = -543727437;    float ZmGPzEpylo31426383 = -746560516;    float ZmGPzEpylo59986399 = -35872063;    float ZmGPzEpylo94520748 = -284438341;    float ZmGPzEpylo71196340 = -72729468;    float ZmGPzEpylo91535588 = -921402246;    float ZmGPzEpylo20473167 = -954723367;    float ZmGPzEpylo21461784 = -698113174;    float ZmGPzEpylo84118288 = -683602403;    float ZmGPzEpylo15834457 = -824667813;    float ZmGPzEpylo40381507 = -96304224;    float ZmGPzEpylo51851429 = -851172021;    float ZmGPzEpylo55713432 = -17835149;    float ZmGPzEpylo83308855 = -394057223;    float ZmGPzEpylo77914225 = -559739026;    float ZmGPzEpylo35703495 = -237975761;    float ZmGPzEpylo67434086 = -466323183;    float ZmGPzEpylo96368942 = -326555688;    float ZmGPzEpylo11518251 = -917835360;    float ZmGPzEpylo42231458 = -619199250;    float ZmGPzEpylo83062825 = -304766825;    float ZmGPzEpylo86079580 = -749849293;    float ZmGPzEpylo21171674 = -81463462;    float ZmGPzEpylo44532606 = -391377361;    float ZmGPzEpylo20799677 = -217690409;    float ZmGPzEpylo34878755 = -751930712;    float ZmGPzEpylo24222439 = -809438528;    float ZmGPzEpylo78198719 = -288664934;    float ZmGPzEpylo57968811 = 97829962;    float ZmGPzEpylo19656209 = -461428931;    float ZmGPzEpylo98845677 = -287141591;    float ZmGPzEpylo88313330 = 2830848;     ZmGPzEpylo24658521 = ZmGPzEpylo67805463;     ZmGPzEpylo67805463 = ZmGPzEpylo98409290;     ZmGPzEpylo98409290 = ZmGPzEpylo92487494;     ZmGPzEpylo92487494 = ZmGPzEpylo81369944;     ZmGPzEpylo81369944 = ZmGPzEpylo85219875;     ZmGPzEpylo85219875 = ZmGPzEpylo30220120;     ZmGPzEpylo30220120 = ZmGPzEpylo51394204;     ZmGPzEpylo51394204 = ZmGPzEpylo3968257;     ZmGPzEpylo3968257 = ZmGPzEpylo64419226;     ZmGPzEpylo64419226 = ZmGPzEpylo53534596;     ZmGPzEpylo53534596 = ZmGPzEpylo75930960;     ZmGPzEpylo75930960 = ZmGPzEpylo86589549;     ZmGPzEpylo86589549 = ZmGPzEpylo24511191;     ZmGPzEpylo24511191 = ZmGPzEpylo92879294;     ZmGPzEpylo92879294 = ZmGPzEpylo63267039;     ZmGPzEpylo63267039 = ZmGPzEpylo69336166;     ZmGPzEpylo69336166 = ZmGPzEpylo373421;     ZmGPzEpylo373421 = ZmGPzEpylo25251103;     ZmGPzEpylo25251103 = ZmGPzEpylo61026457;     ZmGPzEpylo61026457 = ZmGPzEpylo70832139;     ZmGPzEpylo70832139 = ZmGPzEpylo33872225;     ZmGPzEpylo33872225 = ZmGPzEpylo27524225;     ZmGPzEpylo27524225 = ZmGPzEpylo39661257;     ZmGPzEpylo39661257 = ZmGPzEpylo38471754;     ZmGPzEpylo38471754 = ZmGPzEpylo87071618;     ZmGPzEpylo87071618 = ZmGPzEpylo75726799;     ZmGPzEpylo75726799 = ZmGPzEpylo67865548;     ZmGPzEpylo67865548 = ZmGPzEpylo59992660;     ZmGPzEpylo59992660 = ZmGPzEpylo73870528;     ZmGPzEpylo73870528 = ZmGPzEpylo51575135;     ZmGPzEpylo51575135 = ZmGPzEpylo42568176;     ZmGPzEpylo42568176 = ZmGPzEpylo80477075;     ZmGPzEpylo80477075 = ZmGPzEpylo95399853;     ZmGPzEpylo95399853 = ZmGPzEpylo76865875;     ZmGPzEpylo76865875 = ZmGPzEpylo61452912;     ZmGPzEpylo61452912 = ZmGPzEpylo3280641;     ZmGPzEpylo3280641 = ZmGPzEpylo74815417;     ZmGPzEpylo74815417 = ZmGPzEpylo29177081;     ZmGPzEpylo29177081 = ZmGPzEpylo33715514;     ZmGPzEpylo33715514 = ZmGPzEpylo40553290;     ZmGPzEpylo40553290 = ZmGPzEpylo49370355;     ZmGPzEpylo49370355 = ZmGPzEpylo49753937;     ZmGPzEpylo49753937 = ZmGPzEpylo11689769;     ZmGPzEpylo11689769 = ZmGPzEpylo99279749;     ZmGPzEpylo99279749 = ZmGPzEpylo86620325;     ZmGPzEpylo86620325 = ZmGPzEpylo31358187;     ZmGPzEpylo31358187 = ZmGPzEpylo92417944;     ZmGPzEpylo92417944 = ZmGPzEpylo89951322;     ZmGPzEpylo89951322 = ZmGPzEpylo24289166;     ZmGPzEpylo24289166 = ZmGPzEpylo6436443;     ZmGPzEpylo6436443 = ZmGPzEpylo55206192;     ZmGPzEpylo55206192 = ZmGPzEpylo31049926;     ZmGPzEpylo31049926 = ZmGPzEpylo38245617;     ZmGPzEpylo38245617 = ZmGPzEpylo12337029;     ZmGPzEpylo12337029 = ZmGPzEpylo90786295;     ZmGPzEpylo90786295 = ZmGPzEpylo40281238;     ZmGPzEpylo40281238 = ZmGPzEpylo58748034;     ZmGPzEpylo58748034 = ZmGPzEpylo54015741;     ZmGPzEpylo54015741 = ZmGPzEpylo94298326;     ZmGPzEpylo94298326 = ZmGPzEpylo9493076;     ZmGPzEpylo9493076 = ZmGPzEpylo62354571;     ZmGPzEpylo62354571 = ZmGPzEpylo91401543;     ZmGPzEpylo91401543 = ZmGPzEpylo30097729;     ZmGPzEpylo30097729 = ZmGPzEpylo12844092;     ZmGPzEpylo12844092 = ZmGPzEpylo10966420;     ZmGPzEpylo10966420 = ZmGPzEpylo95453884;     ZmGPzEpylo95453884 = ZmGPzEpylo91189696;     ZmGPzEpylo91189696 = ZmGPzEpylo47645315;     ZmGPzEpylo47645315 = ZmGPzEpylo31426383;     ZmGPzEpylo31426383 = ZmGPzEpylo59986399;     ZmGPzEpylo59986399 = ZmGPzEpylo94520748;     ZmGPzEpylo94520748 = ZmGPzEpylo71196340;     ZmGPzEpylo71196340 = ZmGPzEpylo91535588;     ZmGPzEpylo91535588 = ZmGPzEpylo20473167;     ZmGPzEpylo20473167 = ZmGPzEpylo21461784;     ZmGPzEpylo21461784 = ZmGPzEpylo84118288;     ZmGPzEpylo84118288 = ZmGPzEpylo15834457;     ZmGPzEpylo15834457 = ZmGPzEpylo40381507;     ZmGPzEpylo40381507 = ZmGPzEpylo51851429;     ZmGPzEpylo51851429 = ZmGPzEpylo55713432;     ZmGPzEpylo55713432 = ZmGPzEpylo83308855;     ZmGPzEpylo83308855 = ZmGPzEpylo77914225;     ZmGPzEpylo77914225 = ZmGPzEpylo35703495;     ZmGPzEpylo35703495 = ZmGPzEpylo67434086;     ZmGPzEpylo67434086 = ZmGPzEpylo96368942;     ZmGPzEpylo96368942 = ZmGPzEpylo11518251;     ZmGPzEpylo11518251 = ZmGPzEpylo42231458;     ZmGPzEpylo42231458 = ZmGPzEpylo83062825;     ZmGPzEpylo83062825 = ZmGPzEpylo86079580;     ZmGPzEpylo86079580 = ZmGPzEpylo21171674;     ZmGPzEpylo21171674 = ZmGPzEpylo44532606;     ZmGPzEpylo44532606 = ZmGPzEpylo20799677;     ZmGPzEpylo20799677 = ZmGPzEpylo34878755;     ZmGPzEpylo34878755 = ZmGPzEpylo24222439;     ZmGPzEpylo24222439 = ZmGPzEpylo78198719;     ZmGPzEpylo78198719 = ZmGPzEpylo57968811;     ZmGPzEpylo57968811 = ZmGPzEpylo19656209;     ZmGPzEpylo19656209 = ZmGPzEpylo98845677;     ZmGPzEpylo98845677 = ZmGPzEpylo88313330;     ZmGPzEpylo88313330 = ZmGPzEpylo24658521;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void rgBIhHnPuF27237359() {     float SAEWhojtgg99956495 = -68501043;    float SAEWhojtgg56691995 = 37401376;    float SAEWhojtgg15752372 = 93409083;    float SAEWhojtgg85203548 = -603142495;    float SAEWhojtgg88322064 = -883955302;    float SAEWhojtgg32900825 = -323950372;    float SAEWhojtgg80383889 = -832230596;    float SAEWhojtgg73929251 = -492949252;    float SAEWhojtgg91032926 = -861761336;    float SAEWhojtgg65817064 = -951277526;    float SAEWhojtgg99795808 = -986250511;    float SAEWhojtgg2106842 = -352621239;    float SAEWhojtgg20050394 = -263118657;    float SAEWhojtgg43629930 = -270765672;    float SAEWhojtgg12288524 = -585828861;    float SAEWhojtgg53768899 = -603111293;    float SAEWhojtgg32836706 = -778459372;    float SAEWhojtgg92014168 = -661391654;    float SAEWhojtgg8714823 = -426177256;    float SAEWhojtgg77539925 = -821536383;    float SAEWhojtgg59729061 = -570915397;    float SAEWhojtgg69390911 = -174772579;    float SAEWhojtgg12035861 = -163888289;    float SAEWhojtgg79501797 = -15369297;    float SAEWhojtgg8902121 = -644383662;    float SAEWhojtgg4627743 = -267258920;    float SAEWhojtgg48754487 = -415089905;    float SAEWhojtgg73151180 = -224890926;    float SAEWhojtgg97880884 = -366746342;    float SAEWhojtgg77590370 = -978423328;    float SAEWhojtgg52118508 = -532750054;    float SAEWhojtgg98976069 = -970488024;    float SAEWhojtgg87893842 = -194032925;    float SAEWhojtgg55774267 = -341752715;    float SAEWhojtgg42341816 = -721417578;    float SAEWhojtgg62307950 = -430934974;    float SAEWhojtgg11703324 = -464688067;    float SAEWhojtgg77982244 = -438838338;    float SAEWhojtgg52622015 = -618121004;    float SAEWhojtgg17646324 = 97995743;    float SAEWhojtgg41405559 = -95548911;    float SAEWhojtgg96650080 = -827118224;    float SAEWhojtgg40075280 = -707123097;    float SAEWhojtgg26232341 = -77796800;    float SAEWhojtgg10240438 = -884210942;    float SAEWhojtgg98894722 = -353208793;    float SAEWhojtgg58585342 = -906901093;    float SAEWhojtgg688940 = -610745350;    float SAEWhojtgg86058528 = -655966522;    float SAEWhojtgg52615094 = 71611123;    float SAEWhojtgg16313519 = -845639272;    float SAEWhojtgg54643918 = -11989502;    float SAEWhojtgg37164022 = -180862781;    float SAEWhojtgg48701518 = 59408023;    float SAEWhojtgg67508297 = -225456923;    float SAEWhojtgg30565585 = -893728464;    float SAEWhojtgg44656134 = -798710336;    float SAEWhojtgg36250574 = -891221620;    float SAEWhojtgg76301428 = -958758834;    float SAEWhojtgg83694322 = -516696383;    float SAEWhojtgg84146338 = -908860467;    float SAEWhojtgg7232709 = -507339670;    float SAEWhojtgg76048367 = -26202910;    float SAEWhojtgg13442556 = -883338009;    float SAEWhojtgg13698556 = -318527472;    float SAEWhojtgg819739 = 84237513;    float SAEWhojtgg14212999 = -58588314;    float SAEWhojtgg64276126 = -921365942;    float SAEWhojtgg1288114 = -549348095;    float SAEWhojtgg49980573 = -54893888;    float SAEWhojtgg42065576 = -38423226;    float SAEWhojtgg54854461 = -239621035;    float SAEWhojtgg39392154 = 56729350;    float SAEWhojtgg91068499 = -424172999;    float SAEWhojtgg36134366 = -625987472;    float SAEWhojtgg63078981 = -743797173;    float SAEWhojtgg29315631 = -467649483;    float SAEWhojtgg85803519 = 13908511;    float SAEWhojtgg69261360 = -131158355;    float SAEWhojtgg10007399 = -191174869;    float SAEWhojtgg46042400 = -360357828;    float SAEWhojtgg48065547 = -804344556;    float SAEWhojtgg87092651 = -568924405;    float SAEWhojtgg45265790 = -338357466;    float SAEWhojtgg61276852 = -32784056;    float SAEWhojtgg97474590 = -420760552;    float SAEWhojtgg61812048 = -689625244;    float SAEWhojtgg39192324 = -153440948;    float SAEWhojtgg88265970 = -16295792;    float SAEWhojtgg11776232 = -827689114;    float SAEWhojtgg17651816 = -632224638;    float SAEWhojtgg75452750 = -573466447;    float SAEWhojtgg1680817 = -480079505;    float SAEWhojtgg68927692 = -1424622;    float SAEWhojtgg33499985 = 6856209;    float SAEWhojtgg34172851 = -588209241;    float SAEWhojtgg20601713 = -700915314;    float SAEWhojtgg26632724 = -823785088;    float SAEWhojtgg12533786 = -759269328;    float SAEWhojtgg9420699 = -68501043;     SAEWhojtgg99956495 = SAEWhojtgg56691995;     SAEWhojtgg56691995 = SAEWhojtgg15752372;     SAEWhojtgg15752372 = SAEWhojtgg85203548;     SAEWhojtgg85203548 = SAEWhojtgg88322064;     SAEWhojtgg88322064 = SAEWhojtgg32900825;     SAEWhojtgg32900825 = SAEWhojtgg80383889;     SAEWhojtgg80383889 = SAEWhojtgg73929251;     SAEWhojtgg73929251 = SAEWhojtgg91032926;     SAEWhojtgg91032926 = SAEWhojtgg65817064;     SAEWhojtgg65817064 = SAEWhojtgg99795808;     SAEWhojtgg99795808 = SAEWhojtgg2106842;     SAEWhojtgg2106842 = SAEWhojtgg20050394;     SAEWhojtgg20050394 = SAEWhojtgg43629930;     SAEWhojtgg43629930 = SAEWhojtgg12288524;     SAEWhojtgg12288524 = SAEWhojtgg53768899;     SAEWhojtgg53768899 = SAEWhojtgg32836706;     SAEWhojtgg32836706 = SAEWhojtgg92014168;     SAEWhojtgg92014168 = SAEWhojtgg8714823;     SAEWhojtgg8714823 = SAEWhojtgg77539925;     SAEWhojtgg77539925 = SAEWhojtgg59729061;     SAEWhojtgg59729061 = SAEWhojtgg69390911;     SAEWhojtgg69390911 = SAEWhojtgg12035861;     SAEWhojtgg12035861 = SAEWhojtgg79501797;     SAEWhojtgg79501797 = SAEWhojtgg8902121;     SAEWhojtgg8902121 = SAEWhojtgg4627743;     SAEWhojtgg4627743 = SAEWhojtgg48754487;     SAEWhojtgg48754487 = SAEWhojtgg73151180;     SAEWhojtgg73151180 = SAEWhojtgg97880884;     SAEWhojtgg97880884 = SAEWhojtgg77590370;     SAEWhojtgg77590370 = SAEWhojtgg52118508;     SAEWhojtgg52118508 = SAEWhojtgg98976069;     SAEWhojtgg98976069 = SAEWhojtgg87893842;     SAEWhojtgg87893842 = SAEWhojtgg55774267;     SAEWhojtgg55774267 = SAEWhojtgg42341816;     SAEWhojtgg42341816 = SAEWhojtgg62307950;     SAEWhojtgg62307950 = SAEWhojtgg11703324;     SAEWhojtgg11703324 = SAEWhojtgg77982244;     SAEWhojtgg77982244 = SAEWhojtgg52622015;     SAEWhojtgg52622015 = SAEWhojtgg17646324;     SAEWhojtgg17646324 = SAEWhojtgg41405559;     SAEWhojtgg41405559 = SAEWhojtgg96650080;     SAEWhojtgg96650080 = SAEWhojtgg40075280;     SAEWhojtgg40075280 = SAEWhojtgg26232341;     SAEWhojtgg26232341 = SAEWhojtgg10240438;     SAEWhojtgg10240438 = SAEWhojtgg98894722;     SAEWhojtgg98894722 = SAEWhojtgg58585342;     SAEWhojtgg58585342 = SAEWhojtgg688940;     SAEWhojtgg688940 = SAEWhojtgg86058528;     SAEWhojtgg86058528 = SAEWhojtgg52615094;     SAEWhojtgg52615094 = SAEWhojtgg16313519;     SAEWhojtgg16313519 = SAEWhojtgg54643918;     SAEWhojtgg54643918 = SAEWhojtgg37164022;     SAEWhojtgg37164022 = SAEWhojtgg48701518;     SAEWhojtgg48701518 = SAEWhojtgg67508297;     SAEWhojtgg67508297 = SAEWhojtgg30565585;     SAEWhojtgg30565585 = SAEWhojtgg44656134;     SAEWhojtgg44656134 = SAEWhojtgg36250574;     SAEWhojtgg36250574 = SAEWhojtgg76301428;     SAEWhojtgg76301428 = SAEWhojtgg83694322;     SAEWhojtgg83694322 = SAEWhojtgg84146338;     SAEWhojtgg84146338 = SAEWhojtgg7232709;     SAEWhojtgg7232709 = SAEWhojtgg76048367;     SAEWhojtgg76048367 = SAEWhojtgg13442556;     SAEWhojtgg13442556 = SAEWhojtgg13698556;     SAEWhojtgg13698556 = SAEWhojtgg819739;     SAEWhojtgg819739 = SAEWhojtgg14212999;     SAEWhojtgg14212999 = SAEWhojtgg64276126;     SAEWhojtgg64276126 = SAEWhojtgg1288114;     SAEWhojtgg1288114 = SAEWhojtgg49980573;     SAEWhojtgg49980573 = SAEWhojtgg42065576;     SAEWhojtgg42065576 = SAEWhojtgg54854461;     SAEWhojtgg54854461 = SAEWhojtgg39392154;     SAEWhojtgg39392154 = SAEWhojtgg91068499;     SAEWhojtgg91068499 = SAEWhojtgg36134366;     SAEWhojtgg36134366 = SAEWhojtgg63078981;     SAEWhojtgg63078981 = SAEWhojtgg29315631;     SAEWhojtgg29315631 = SAEWhojtgg85803519;     SAEWhojtgg85803519 = SAEWhojtgg69261360;     SAEWhojtgg69261360 = SAEWhojtgg10007399;     SAEWhojtgg10007399 = SAEWhojtgg46042400;     SAEWhojtgg46042400 = SAEWhojtgg48065547;     SAEWhojtgg48065547 = SAEWhojtgg87092651;     SAEWhojtgg87092651 = SAEWhojtgg45265790;     SAEWhojtgg45265790 = SAEWhojtgg61276852;     SAEWhojtgg61276852 = SAEWhojtgg97474590;     SAEWhojtgg97474590 = SAEWhojtgg61812048;     SAEWhojtgg61812048 = SAEWhojtgg39192324;     SAEWhojtgg39192324 = SAEWhojtgg88265970;     SAEWhojtgg88265970 = SAEWhojtgg11776232;     SAEWhojtgg11776232 = SAEWhojtgg17651816;     SAEWhojtgg17651816 = SAEWhojtgg75452750;     SAEWhojtgg75452750 = SAEWhojtgg1680817;     SAEWhojtgg1680817 = SAEWhojtgg68927692;     SAEWhojtgg68927692 = SAEWhojtgg33499985;     SAEWhojtgg33499985 = SAEWhojtgg34172851;     SAEWhojtgg34172851 = SAEWhojtgg20601713;     SAEWhojtgg20601713 = SAEWhojtgg26632724;     SAEWhojtgg26632724 = SAEWhojtgg12533786;     SAEWhojtgg12533786 = SAEWhojtgg9420699;     SAEWhojtgg9420699 = SAEWhojtgg99956495;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void XCtiGqdrYC75767127() {     float nulMMMUlUu51133521 = -146043102;    float nulMMMUlUu10913966 = -430959052;    float nulMMMUlUu80197510 = -654385375;    float nulMMMUlUu91567547 = -797247451;    float nulMMMUlUu18165972 = -509444555;    float nulMMMUlUu32113946 = -934479567;    float nulMMMUlUu22478242 = -92236543;    float nulMMMUlUu34735449 = -450135693;    float nulMMMUlUu58951348 = 59436644;    float nulMMMUlUu7494316 = -883593702;    float nulMMMUlUu8142311 = -547634212;    float nulMMMUlUu58450476 = -404560689;    float nulMMMUlUu41359035 = -869956913;    float nulMMMUlUu72905143 = -974661208;    float nulMMMUlUu79654190 = -400207925;    float nulMMMUlUu94646437 = -42698597;    float nulMMMUlUu76580178 = -335484391;    float nulMMMUlUu11245445 = -196874754;    float nulMMMUlUu11215995 = -274142704;    float nulMMMUlUu27789096 = -158390682;    float nulMMMUlUu82078168 = -683848586;    float nulMMMUlUu94100858 = -504246555;    float nulMMMUlUu82685060 = -893114657;    float nulMMMUlUu39279774 = -952146734;    float nulMMMUlUu90265709 = -452682093;    float nulMMMUlUu47031939 = -587954075;    float nulMMMUlUu43308723 = -345916462;    float nulMMMUlUu65545255 = -75248403;    float nulMMMUlUu956862 = -193263728;    float nulMMMUlUu8145483 = -20811078;    float nulMMMUlUu62799098 = -802950881;    float nulMMMUlUu88632076 = -26257930;    float nulMMMUlUu44815523 = -887730983;    float nulMMMUlUu62665572 = -577360925;    float nulMMMUlUu62793754 = -764975476;    float nulMMMUlUu29063461 = -286358659;    float nulMMMUlUu99052726 = -226058578;    float nulMMMUlUu59209938 = -141005309;    float nulMMMUlUu99155575 = -822116232;    float nulMMMUlUu63340778 = -132513209;    float nulMMMUlUu47852454 = -57725392;    float nulMMMUlUu98971599 = -551403150;    float nulMMMUlUu78192359 = -205205605;    float nulMMMUlUu8587002 = -357663554;    float nulMMMUlUu10184137 = -288993775;    float nulMMMUlUu91267398 = -486259198;    float nulMMMUlUu30424458 = -490558192;    float nulMMMUlUu41530901 = -388349687;    float nulMMMUlUu69022779 = -191555114;    float nulMMMUlUu40189661 = -37410297;    float nulMMMUlUu23326644 = -664401469;    float nulMMMUlUu94613819 = 13997887;    float nulMMMUlUu97862880 = -324605870;    float nulMMMUlUu76249064 = -38799689;    float nulMMMUlUu93688959 = -318738480;    float nulMMMUlUu57032662 = -641796548;    float nulMMMUlUu28228906 = -537844396;    float nulMMMUlUu40917736 = -702238642;    float nulMMMUlUu1301838 = -244565359;    float nulMMMUlUu71134033 = -921490481;    float nulMMMUlUu88805222 = -488563105;    float nulMMMUlUu56932986 = 83011860;    float nulMMMUlUu33778587 = -156871966;    float nulMMMUlUu50805866 = -919752279;    float nulMMMUlUu44695217 = 19357179;    float nulMMMUlUu19510234 = -421376282;    float nulMMMUlUu13634954 = -516829707;    float nulMMMUlUu78693462 = -192595988;    float nulMMMUlUu10111389 = -109685732;    float nulMMMUlUu50590729 = -13849266;    float nulMMMUlUu95593711 = -816640019;    float nulMMMUlUu17370241 = -94479082;    float nulMMMUlUu12089869 = -374758522;    float nulMMMUlUu47875216 = -41629495;    float nulMMMUlUu79936642 = -665291;    float nulMMMUlUu83106568 = -32445436;    float nulMMMUlUu15908500 = -199040950;    float nulMMMUlUu74098059 = -435451104;    float nulMMMUlUu29095638 = -563152959;    float nulMMMUlUu98998311 = -966422896;    float nulMMMUlUu16607481 = 2604116;    float nulMMMUlUu1777823 = -957566775;    float nulMMMUlUu96522476 = -883693290;    float nulMMMUlUu60767201 = -55853432;    float nulMMMUlUu84818838 = -356409609;    float nulMMMUlUu68185279 = -716948769;    float nulMMMUlUu90769196 = -701652061;    float nulMMMUlUu68566458 = -748931294;    float nulMMMUlUu68976613 = -158622445;    float nulMMMUlUu5761093 = -23178928;    float nulMMMUlUu834556 = -748514264;    float nulMMMUlUu58134991 = -523819937;    float nulMMMUlUu57908100 = -896439951;    float nulMMMUlUu28021542 = -900625752;    float nulMMMUlUu74535555 = -643950105;    float nulMMMUlUu90919467 = -40737252;    float nulMMMUlUu65193012 = -294531185;    float nulMMMUlUu27386494 = -285453327;    float nulMMMUlUu63891784 = -277020734;    float nulMMMUlUu90673903 = -146043102;     nulMMMUlUu51133521 = nulMMMUlUu10913966;     nulMMMUlUu10913966 = nulMMMUlUu80197510;     nulMMMUlUu80197510 = nulMMMUlUu91567547;     nulMMMUlUu91567547 = nulMMMUlUu18165972;     nulMMMUlUu18165972 = nulMMMUlUu32113946;     nulMMMUlUu32113946 = nulMMMUlUu22478242;     nulMMMUlUu22478242 = nulMMMUlUu34735449;     nulMMMUlUu34735449 = nulMMMUlUu58951348;     nulMMMUlUu58951348 = nulMMMUlUu7494316;     nulMMMUlUu7494316 = nulMMMUlUu8142311;     nulMMMUlUu8142311 = nulMMMUlUu58450476;     nulMMMUlUu58450476 = nulMMMUlUu41359035;     nulMMMUlUu41359035 = nulMMMUlUu72905143;     nulMMMUlUu72905143 = nulMMMUlUu79654190;     nulMMMUlUu79654190 = nulMMMUlUu94646437;     nulMMMUlUu94646437 = nulMMMUlUu76580178;     nulMMMUlUu76580178 = nulMMMUlUu11245445;     nulMMMUlUu11245445 = nulMMMUlUu11215995;     nulMMMUlUu11215995 = nulMMMUlUu27789096;     nulMMMUlUu27789096 = nulMMMUlUu82078168;     nulMMMUlUu82078168 = nulMMMUlUu94100858;     nulMMMUlUu94100858 = nulMMMUlUu82685060;     nulMMMUlUu82685060 = nulMMMUlUu39279774;     nulMMMUlUu39279774 = nulMMMUlUu90265709;     nulMMMUlUu90265709 = nulMMMUlUu47031939;     nulMMMUlUu47031939 = nulMMMUlUu43308723;     nulMMMUlUu43308723 = nulMMMUlUu65545255;     nulMMMUlUu65545255 = nulMMMUlUu956862;     nulMMMUlUu956862 = nulMMMUlUu8145483;     nulMMMUlUu8145483 = nulMMMUlUu62799098;     nulMMMUlUu62799098 = nulMMMUlUu88632076;     nulMMMUlUu88632076 = nulMMMUlUu44815523;     nulMMMUlUu44815523 = nulMMMUlUu62665572;     nulMMMUlUu62665572 = nulMMMUlUu62793754;     nulMMMUlUu62793754 = nulMMMUlUu29063461;     nulMMMUlUu29063461 = nulMMMUlUu99052726;     nulMMMUlUu99052726 = nulMMMUlUu59209938;     nulMMMUlUu59209938 = nulMMMUlUu99155575;     nulMMMUlUu99155575 = nulMMMUlUu63340778;     nulMMMUlUu63340778 = nulMMMUlUu47852454;     nulMMMUlUu47852454 = nulMMMUlUu98971599;     nulMMMUlUu98971599 = nulMMMUlUu78192359;     nulMMMUlUu78192359 = nulMMMUlUu8587002;     nulMMMUlUu8587002 = nulMMMUlUu10184137;     nulMMMUlUu10184137 = nulMMMUlUu91267398;     nulMMMUlUu91267398 = nulMMMUlUu30424458;     nulMMMUlUu30424458 = nulMMMUlUu41530901;     nulMMMUlUu41530901 = nulMMMUlUu69022779;     nulMMMUlUu69022779 = nulMMMUlUu40189661;     nulMMMUlUu40189661 = nulMMMUlUu23326644;     nulMMMUlUu23326644 = nulMMMUlUu94613819;     nulMMMUlUu94613819 = nulMMMUlUu97862880;     nulMMMUlUu97862880 = nulMMMUlUu76249064;     nulMMMUlUu76249064 = nulMMMUlUu93688959;     nulMMMUlUu93688959 = nulMMMUlUu57032662;     nulMMMUlUu57032662 = nulMMMUlUu28228906;     nulMMMUlUu28228906 = nulMMMUlUu40917736;     nulMMMUlUu40917736 = nulMMMUlUu1301838;     nulMMMUlUu1301838 = nulMMMUlUu71134033;     nulMMMUlUu71134033 = nulMMMUlUu88805222;     nulMMMUlUu88805222 = nulMMMUlUu56932986;     nulMMMUlUu56932986 = nulMMMUlUu33778587;     nulMMMUlUu33778587 = nulMMMUlUu50805866;     nulMMMUlUu50805866 = nulMMMUlUu44695217;     nulMMMUlUu44695217 = nulMMMUlUu19510234;     nulMMMUlUu19510234 = nulMMMUlUu13634954;     nulMMMUlUu13634954 = nulMMMUlUu78693462;     nulMMMUlUu78693462 = nulMMMUlUu10111389;     nulMMMUlUu10111389 = nulMMMUlUu50590729;     nulMMMUlUu50590729 = nulMMMUlUu95593711;     nulMMMUlUu95593711 = nulMMMUlUu17370241;     nulMMMUlUu17370241 = nulMMMUlUu12089869;     nulMMMUlUu12089869 = nulMMMUlUu47875216;     nulMMMUlUu47875216 = nulMMMUlUu79936642;     nulMMMUlUu79936642 = nulMMMUlUu83106568;     nulMMMUlUu83106568 = nulMMMUlUu15908500;     nulMMMUlUu15908500 = nulMMMUlUu74098059;     nulMMMUlUu74098059 = nulMMMUlUu29095638;     nulMMMUlUu29095638 = nulMMMUlUu98998311;     nulMMMUlUu98998311 = nulMMMUlUu16607481;     nulMMMUlUu16607481 = nulMMMUlUu1777823;     nulMMMUlUu1777823 = nulMMMUlUu96522476;     nulMMMUlUu96522476 = nulMMMUlUu60767201;     nulMMMUlUu60767201 = nulMMMUlUu84818838;     nulMMMUlUu84818838 = nulMMMUlUu68185279;     nulMMMUlUu68185279 = nulMMMUlUu90769196;     nulMMMUlUu90769196 = nulMMMUlUu68566458;     nulMMMUlUu68566458 = nulMMMUlUu68976613;     nulMMMUlUu68976613 = nulMMMUlUu5761093;     nulMMMUlUu5761093 = nulMMMUlUu834556;     nulMMMUlUu834556 = nulMMMUlUu58134991;     nulMMMUlUu58134991 = nulMMMUlUu57908100;     nulMMMUlUu57908100 = nulMMMUlUu28021542;     nulMMMUlUu28021542 = nulMMMUlUu74535555;     nulMMMUlUu74535555 = nulMMMUlUu90919467;     nulMMMUlUu90919467 = nulMMMUlUu65193012;     nulMMMUlUu65193012 = nulMMMUlUu27386494;     nulMMMUlUu27386494 = nulMMMUlUu63891784;     nulMMMUlUu63891784 = nulMMMUlUu90673903;     nulMMMUlUu90673903 = nulMMMUlUu51133521;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void YikArpkNHt79373504() {     float egDIiajWUd63640475 = -811727408;    float egDIiajWUd16958847 = -797023403;    float egDIiajWUd5772701 = -987962294;    float egDIiajWUd65152671 = -810367635;    float egDIiajWUd38237064 = -410180320;    float egDIiajWUd62588900 = -387153864;    float egDIiajWUd77844755 = -356305789;    float egDIiajWUd32461922 = -261357393;    float egDIiajWUd62666330 = -646298102;    float egDIiajWUd153084 = -933016431;    float egDIiajWUd42156595 = 87849157;    float egDIiajWUd63394609 = -970372480;    float egDIiajWUd78566262 = -722568567;    float egDIiajWUd7782970 = -745683901;    float egDIiajWUd59635948 = -475519433;    float egDIiajWUd37646640 = -457541660;    float egDIiajWUd26218471 = -693724022;    float egDIiajWUd61578106 = -388538359;    float egDIiajWUd33840286 = -393637532;    float egDIiajWUd45703390 = -570927897;    float egDIiajWUd50553102 = -90227360;    float egDIiajWUd34293925 = -752101386;    float egDIiajWUd56095198 = -834613012;    float egDIiajWUd17350767 = -745084489;    float egDIiajWUd1133835 = -44446015;    float egDIiajWUd70699975 = -815927962;    float egDIiajWUd82587060 = -163831661;    float egDIiajWUd30030606 = -532559903;    float egDIiajWUd81736867 = -845790210;    float egDIiajWUd41181612 = -590940709;    float egDIiajWUd43965985 = -498026812;    float egDIiajWUd30264039 = -470975466;    float egDIiajWUd20275658 = -819243853;    float egDIiajWUd46175742 = -769620666;    float egDIiajWUd56977691 = -738381484;    float egDIiajWUd66815526 = -984549192;    float egDIiajWUd4667376 = -674475812;    float egDIiajWUd7111002 = -969952704;    float egDIiajWUd93310320 = -543305726;    float egDIiajWUd99911527 = -882876698;    float egDIiajWUd78165165 = -354708232;    float egDIiajWUd27822115 = -317597136;    float egDIiajWUd3842753 = -27292039;    float egDIiajWUd97924959 = -876074835;    float egDIiajWUd54149873 = -683906611;    float egDIiajWUd60234642 = -964156869;    float egDIiajWUd50842938 = 1268433;    float egDIiajWUd51899615 = -780302288;    float egDIiajWUd10059728 = -140975020;    float egDIiajWUd86599235 = -223451779;    float egDIiajWUd74820753 = -972414798;    float egDIiajWUd26785442 = -763393976;    float egDIiajWUd1078088 = -700424103;    float egDIiajWUd99692942 = -969955631;    float egDIiajWUd28820402 = -344942145;    float egDIiajWUd29346551 = 40373978;    float egDIiajWUd60863649 = -962410391;    float egDIiajWUd88421933 = -142877805;    float egDIiajWUd64018837 = -665921621;    float egDIiajWUd67537088 = -594252358;    float egDIiajWUd80001839 = -123322203;    float egDIiajWUd47814149 = -823745886;    float egDIiajWUd50725054 = -415567184;    float egDIiajWUd21484719 = 44642606;    float egDIiajWUd56187098 = -334989620;    float egDIiajWUd11892556 = -441175377;    float egDIiajWUd43118952 = -51128627;    float egDIiajWUd32390520 = -952947902;    float egDIiajWUd50805278 = 92697583;    float egDIiajWUd92820421 = -490970241;    float egDIiajWUd32979264 = -783065848;    float egDIiajWUd19107469 = -723771318;    float egDIiajWUd68267786 = -845232633;    float egDIiajWUd33928759 = -510760834;    float egDIiajWUd67538225 = -116219666;    float egDIiajWUd22730987 = -772630224;    float egDIiajWUd30451173 = -624809348;    float egDIiajWUd58170238 = -958538177;    float egDIiajWUd63200894 = 38822121;    float egDIiajWUd40899192 = -80289146;    float egDIiajWUd19857037 = -717196396;    float egDIiajWUd30687445 = -383529374;    float egDIiajWUd19970879 = -291584884;    float egDIiajWUd95137632 = -522338431;    float egDIiajWUd66360858 = -618525911;    float egDIiajWUd17180544 = -734632836;    float egDIiajWUd29185952 = -770551363;    float egDIiajWUd20582715 = -849288223;    float egDIiajWUd17355340 = -324678522;    float egDIiajWUd27631141 = -678755463;    float egDIiajWUd5951878 = 77861198;    float egDIiajWUd16245443 = -431598007;    float egDIiajWUd43092165 = -204031084;    float egDIiajWUd25773232 = -949053368;    float egDIiajWUd19909688 = -659554495;    float egDIiajWUd30351017 = -530962347;    float egDIiajWUd77097060 = -902029953;    float egDIiajWUd82358033 = 28065355;    float egDIiajWUd41737861 = -441085216;    float egDIiajWUd42257318 = -811727408;     egDIiajWUd63640475 = egDIiajWUd16958847;     egDIiajWUd16958847 = egDIiajWUd5772701;     egDIiajWUd5772701 = egDIiajWUd65152671;     egDIiajWUd65152671 = egDIiajWUd38237064;     egDIiajWUd38237064 = egDIiajWUd62588900;     egDIiajWUd62588900 = egDIiajWUd77844755;     egDIiajWUd77844755 = egDIiajWUd32461922;     egDIiajWUd32461922 = egDIiajWUd62666330;     egDIiajWUd62666330 = egDIiajWUd153084;     egDIiajWUd153084 = egDIiajWUd42156595;     egDIiajWUd42156595 = egDIiajWUd63394609;     egDIiajWUd63394609 = egDIiajWUd78566262;     egDIiajWUd78566262 = egDIiajWUd7782970;     egDIiajWUd7782970 = egDIiajWUd59635948;     egDIiajWUd59635948 = egDIiajWUd37646640;     egDIiajWUd37646640 = egDIiajWUd26218471;     egDIiajWUd26218471 = egDIiajWUd61578106;     egDIiajWUd61578106 = egDIiajWUd33840286;     egDIiajWUd33840286 = egDIiajWUd45703390;     egDIiajWUd45703390 = egDIiajWUd50553102;     egDIiajWUd50553102 = egDIiajWUd34293925;     egDIiajWUd34293925 = egDIiajWUd56095198;     egDIiajWUd56095198 = egDIiajWUd17350767;     egDIiajWUd17350767 = egDIiajWUd1133835;     egDIiajWUd1133835 = egDIiajWUd70699975;     egDIiajWUd70699975 = egDIiajWUd82587060;     egDIiajWUd82587060 = egDIiajWUd30030606;     egDIiajWUd30030606 = egDIiajWUd81736867;     egDIiajWUd81736867 = egDIiajWUd41181612;     egDIiajWUd41181612 = egDIiajWUd43965985;     egDIiajWUd43965985 = egDIiajWUd30264039;     egDIiajWUd30264039 = egDIiajWUd20275658;     egDIiajWUd20275658 = egDIiajWUd46175742;     egDIiajWUd46175742 = egDIiajWUd56977691;     egDIiajWUd56977691 = egDIiajWUd66815526;     egDIiajWUd66815526 = egDIiajWUd4667376;     egDIiajWUd4667376 = egDIiajWUd7111002;     egDIiajWUd7111002 = egDIiajWUd93310320;     egDIiajWUd93310320 = egDIiajWUd99911527;     egDIiajWUd99911527 = egDIiajWUd78165165;     egDIiajWUd78165165 = egDIiajWUd27822115;     egDIiajWUd27822115 = egDIiajWUd3842753;     egDIiajWUd3842753 = egDIiajWUd97924959;     egDIiajWUd97924959 = egDIiajWUd54149873;     egDIiajWUd54149873 = egDIiajWUd60234642;     egDIiajWUd60234642 = egDIiajWUd50842938;     egDIiajWUd50842938 = egDIiajWUd51899615;     egDIiajWUd51899615 = egDIiajWUd10059728;     egDIiajWUd10059728 = egDIiajWUd86599235;     egDIiajWUd86599235 = egDIiajWUd74820753;     egDIiajWUd74820753 = egDIiajWUd26785442;     egDIiajWUd26785442 = egDIiajWUd1078088;     egDIiajWUd1078088 = egDIiajWUd99692942;     egDIiajWUd99692942 = egDIiajWUd28820402;     egDIiajWUd28820402 = egDIiajWUd29346551;     egDIiajWUd29346551 = egDIiajWUd60863649;     egDIiajWUd60863649 = egDIiajWUd88421933;     egDIiajWUd88421933 = egDIiajWUd64018837;     egDIiajWUd64018837 = egDIiajWUd67537088;     egDIiajWUd67537088 = egDIiajWUd80001839;     egDIiajWUd80001839 = egDIiajWUd47814149;     egDIiajWUd47814149 = egDIiajWUd50725054;     egDIiajWUd50725054 = egDIiajWUd21484719;     egDIiajWUd21484719 = egDIiajWUd56187098;     egDIiajWUd56187098 = egDIiajWUd11892556;     egDIiajWUd11892556 = egDIiajWUd43118952;     egDIiajWUd43118952 = egDIiajWUd32390520;     egDIiajWUd32390520 = egDIiajWUd50805278;     egDIiajWUd50805278 = egDIiajWUd92820421;     egDIiajWUd92820421 = egDIiajWUd32979264;     egDIiajWUd32979264 = egDIiajWUd19107469;     egDIiajWUd19107469 = egDIiajWUd68267786;     egDIiajWUd68267786 = egDIiajWUd33928759;     egDIiajWUd33928759 = egDIiajWUd67538225;     egDIiajWUd67538225 = egDIiajWUd22730987;     egDIiajWUd22730987 = egDIiajWUd30451173;     egDIiajWUd30451173 = egDIiajWUd58170238;     egDIiajWUd58170238 = egDIiajWUd63200894;     egDIiajWUd63200894 = egDIiajWUd40899192;     egDIiajWUd40899192 = egDIiajWUd19857037;     egDIiajWUd19857037 = egDIiajWUd30687445;     egDIiajWUd30687445 = egDIiajWUd19970879;     egDIiajWUd19970879 = egDIiajWUd95137632;     egDIiajWUd95137632 = egDIiajWUd66360858;     egDIiajWUd66360858 = egDIiajWUd17180544;     egDIiajWUd17180544 = egDIiajWUd29185952;     egDIiajWUd29185952 = egDIiajWUd20582715;     egDIiajWUd20582715 = egDIiajWUd17355340;     egDIiajWUd17355340 = egDIiajWUd27631141;     egDIiajWUd27631141 = egDIiajWUd5951878;     egDIiajWUd5951878 = egDIiajWUd16245443;     egDIiajWUd16245443 = egDIiajWUd43092165;     egDIiajWUd43092165 = egDIiajWUd25773232;     egDIiajWUd25773232 = egDIiajWUd19909688;     egDIiajWUd19909688 = egDIiajWUd30351017;     egDIiajWUd30351017 = egDIiajWUd77097060;     egDIiajWUd77097060 = egDIiajWUd82358033;     egDIiajWUd82358033 = egDIiajWUd41737861;     egDIiajWUd41737861 = egDIiajWUd42257318;     egDIiajWUd42257318 = egDIiajWUd63640475;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void bNSlDsHrJH80145804() {     float InDviOqClT44159363 = -143644479;    float InDviOqClT41079616 = -336335657;    float InDviOqClT91562132 = -150590906;    float InDviOqClT16665244 = -634875032;    float InDviOqClT55470752 = -720618547;    float InDviOqClT6607691 = -995534719;    float InDviOqClT70107548 = -422072493;    float InDviOqClT5639790 = -675904062;    float InDviOqClT67459861 = -445398863;    float InDviOqClT15503388 = -201044127;    float InDviOqClT28574542 = -498104687;    float InDviOqClT88483350 = -442026501;    float InDviOqClT51900431 = -341528240;    float InDviOqClT7055370 = -893704278;    float InDviOqClT89453704 = -102861345;    float InDviOqClT20560085 = -659941027;    float InDviOqClT31961876 = -161178480;    float InDviOqClT83516420 = -331926884;    float InDviOqClT75061947 = -152397305;    float InDviOqClT9239615 = 22559657;    float InDviOqClT97435877 = -4947782;    float InDviOqClT75904373 = -160281940;    float InDviOqClT61678985 = -354954078;    float InDviOqClT86929315 = -870381542;    float InDviOqClT46815724 = -603533612;    float InDviOqClT99080667 = -946544600;    float InDviOqClT39102093 = -280156;    float InDviOqClT50045981 = -486760601;    float InDviOqClT65348804 = 75980306;    float InDviOqClT8654498 = -950364762;    float InDviOqClT80987257 = -306887188;    float InDviOqClT60132443 = -690269971;    float InDviOqClT79704400 = -667924519;    float InDviOqClT87984909 = -218380925;    float InDviOqClT81763431 = -94306528;    float InDviOqClT16405969 = -840512076;    float InDviOqClT60166660 = -346906493;    float InDviOqClT5463887 = -883269247;    float InDviOqClT96624188 = -404253733;    float InDviOqClT22375577 = -105208974;    float InDviOqClT12394444 = -20809733;    float InDviOqClT87358303 = -466285075;    float InDviOqClT53276231 = -97750749;    float InDviOqClT33003218 = -640931061;    float InDviOqClT42157567 = -253302451;    float InDviOqClT86629452 = -50914789;    float InDviOqClT24248644 = 52400512;    float InDviOqClT2510947 = -714537686;    float InDviOqClT6240916 = -354563504;    float InDviOqClT85791738 = -736489207;    float InDviOqClT26903924 = -823159882;    float InDviOqClT39431096 = -50332613;    float InDviOqClT82149637 = -808423159;    float InDviOqClT47263456 = -939201697;    float InDviOqClT82709926 = -84182065;    float InDviOqClT68254989 = -983362540;    float InDviOqClT79400631 = -981381579;    float InDviOqClT4632818 = -280209365;    float InDviOqClT69849520 = 68658579;    float InDviOqClT56390084 = -774073947;    float InDviOqClT67505598 = -895254564;    float InDviOqClT20061568 = -935311892;    float InDviOqClT40290985 = -651884368;    float InDviOqClT58805364 = -495034101;    float InDviOqClT34516130 = -894156940;    float InDviOqClT68442098 = -807834716;    float InDviOqClT8778950 = -774101983;    float InDviOqClT63915521 = -23147316;    float InDviOqClT25291939 = -699397751;    float InDviOqClT73047736 = -262349270;    float InDviOqClT60393425 = -213034534;    float InDviOqClT26497990 = -277909234;    float InDviOqClT86892232 = -927673152;    float InDviOqClT52686370 = 52811669;    float InDviOqClT96845170 = -956630611;    float InDviOqClT10077575 = -538662707;    float InDviOqClT22628143 = 37468809;    float InDviOqClT28675768 = -714023017;    float InDviOqClT44771748 = -517079092;    float InDviOqClT60186272 = -452618823;    float InDviOqClT74832024 = -898945113;    float InDviOqClT36591146 = -285742470;    float InDviOqClT43805066 = -32197098;    float InDviOqClT79557065 = -187530488;    float InDviOqClT81750573 = -27204881;    float InDviOqClT41556161 = -156554575;    float InDviOqClT77982806 = -881846813;    float InDviOqClT32440945 = -728722822;    float InDviOqClT5274983 = -34198860;    float InDviOqClT13508443 = -110943989;    float InDviOqClT37005337 = -859130497;    float InDviOqClT55533843 = 33302871;    float InDviOqClT35614367 = -851927826;    float InDviOqClT40234105 = -630179786;    float InDviOqClT54869979 = -209954410;    float InDviOqClT92332876 = -85497841;    float InDviOqClT47067319 = -814400707;    float InDviOqClT94470867 = -602716648;    float InDviOqClT98487087 = -746774122;    float InDviOqClT73715468 = -143644479;     InDviOqClT44159363 = InDviOqClT41079616;     InDviOqClT41079616 = InDviOqClT91562132;     InDviOqClT91562132 = InDviOqClT16665244;     InDviOqClT16665244 = InDviOqClT55470752;     InDviOqClT55470752 = InDviOqClT6607691;     InDviOqClT6607691 = InDviOqClT70107548;     InDviOqClT70107548 = InDviOqClT5639790;     InDviOqClT5639790 = InDviOqClT67459861;     InDviOqClT67459861 = InDviOqClT15503388;     InDviOqClT15503388 = InDviOqClT28574542;     InDviOqClT28574542 = InDviOqClT88483350;     InDviOqClT88483350 = InDviOqClT51900431;     InDviOqClT51900431 = InDviOqClT7055370;     InDviOqClT7055370 = InDviOqClT89453704;     InDviOqClT89453704 = InDviOqClT20560085;     InDviOqClT20560085 = InDviOqClT31961876;     InDviOqClT31961876 = InDviOqClT83516420;     InDviOqClT83516420 = InDviOqClT75061947;     InDviOqClT75061947 = InDviOqClT9239615;     InDviOqClT9239615 = InDviOqClT97435877;     InDviOqClT97435877 = InDviOqClT75904373;     InDviOqClT75904373 = InDviOqClT61678985;     InDviOqClT61678985 = InDviOqClT86929315;     InDviOqClT86929315 = InDviOqClT46815724;     InDviOqClT46815724 = InDviOqClT99080667;     InDviOqClT99080667 = InDviOqClT39102093;     InDviOqClT39102093 = InDviOqClT50045981;     InDviOqClT50045981 = InDviOqClT65348804;     InDviOqClT65348804 = InDviOqClT8654498;     InDviOqClT8654498 = InDviOqClT80987257;     InDviOqClT80987257 = InDviOqClT60132443;     InDviOqClT60132443 = InDviOqClT79704400;     InDviOqClT79704400 = InDviOqClT87984909;     InDviOqClT87984909 = InDviOqClT81763431;     InDviOqClT81763431 = InDviOqClT16405969;     InDviOqClT16405969 = InDviOqClT60166660;     InDviOqClT60166660 = InDviOqClT5463887;     InDviOqClT5463887 = InDviOqClT96624188;     InDviOqClT96624188 = InDviOqClT22375577;     InDviOqClT22375577 = InDviOqClT12394444;     InDviOqClT12394444 = InDviOqClT87358303;     InDviOqClT87358303 = InDviOqClT53276231;     InDviOqClT53276231 = InDviOqClT33003218;     InDviOqClT33003218 = InDviOqClT42157567;     InDviOqClT42157567 = InDviOqClT86629452;     InDviOqClT86629452 = InDviOqClT24248644;     InDviOqClT24248644 = InDviOqClT2510947;     InDviOqClT2510947 = InDviOqClT6240916;     InDviOqClT6240916 = InDviOqClT85791738;     InDviOqClT85791738 = InDviOqClT26903924;     InDviOqClT26903924 = InDviOqClT39431096;     InDviOqClT39431096 = InDviOqClT82149637;     InDviOqClT82149637 = InDviOqClT47263456;     InDviOqClT47263456 = InDviOqClT82709926;     InDviOqClT82709926 = InDviOqClT68254989;     InDviOqClT68254989 = InDviOqClT79400631;     InDviOqClT79400631 = InDviOqClT4632818;     InDviOqClT4632818 = InDviOqClT69849520;     InDviOqClT69849520 = InDviOqClT56390084;     InDviOqClT56390084 = InDviOqClT67505598;     InDviOqClT67505598 = InDviOqClT20061568;     InDviOqClT20061568 = InDviOqClT40290985;     InDviOqClT40290985 = InDviOqClT58805364;     InDviOqClT58805364 = InDviOqClT34516130;     InDviOqClT34516130 = InDviOqClT68442098;     InDviOqClT68442098 = InDviOqClT8778950;     InDviOqClT8778950 = InDviOqClT63915521;     InDviOqClT63915521 = InDviOqClT25291939;     InDviOqClT25291939 = InDviOqClT73047736;     InDviOqClT73047736 = InDviOqClT60393425;     InDviOqClT60393425 = InDviOqClT26497990;     InDviOqClT26497990 = InDviOqClT86892232;     InDviOqClT86892232 = InDviOqClT52686370;     InDviOqClT52686370 = InDviOqClT96845170;     InDviOqClT96845170 = InDviOqClT10077575;     InDviOqClT10077575 = InDviOqClT22628143;     InDviOqClT22628143 = InDviOqClT28675768;     InDviOqClT28675768 = InDviOqClT44771748;     InDviOqClT44771748 = InDviOqClT60186272;     InDviOqClT60186272 = InDviOqClT74832024;     InDviOqClT74832024 = InDviOqClT36591146;     InDviOqClT36591146 = InDviOqClT43805066;     InDviOqClT43805066 = InDviOqClT79557065;     InDviOqClT79557065 = InDviOqClT81750573;     InDviOqClT81750573 = InDviOqClT41556161;     InDviOqClT41556161 = InDviOqClT77982806;     InDviOqClT77982806 = InDviOqClT32440945;     InDviOqClT32440945 = InDviOqClT5274983;     InDviOqClT5274983 = InDviOqClT13508443;     InDviOqClT13508443 = InDviOqClT37005337;     InDviOqClT37005337 = InDviOqClT55533843;     InDviOqClT55533843 = InDviOqClT35614367;     InDviOqClT35614367 = InDviOqClT40234105;     InDviOqClT40234105 = InDviOqClT54869979;     InDviOqClT54869979 = InDviOqClT92332876;     InDviOqClT92332876 = InDviOqClT47067319;     InDviOqClT47067319 = InDviOqClT94470867;     InDviOqClT94470867 = InDviOqClT98487087;     InDviOqClT98487087 = InDviOqClT73715468;     InDviOqClT73715468 = InDviOqClT44159363;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void LCFzCmiGsO19955053() {     float iucolLXHuK43873679 = -546812234;    float iucolLXHuK98925926 = -574661118;    float iucolLXHuK697735 = -32937057;    float iucolLXHuK67389403 = -644333770;    float iucolLXHuK90870841 = -597893168;    float iucolLXHuK28578006 = -370718515;    float iucolLXHuK72813639 = -945006135;    float iucolLXHuK45861200 = -846784822;    float iucolLXHuK58510198 = -903021588;    float iucolLXHuK98582965 = -83186095;    float iucolLXHuK55422049 = -807407374;    float iucolLXHuK75768656 = -235983839;    float iucolLXHuK50817269 = -312015712;    float iucolLXHuK46153337 = -677464824;    float iucolLXHuK91301018 = -233899874;    float iucolLXHuK9699766 = -856688352;    float iucolLXHuK81701109 = -675258214;    float iucolLXHuK73291130 = -265451809;    float iucolLXHuK16953878 = -980405204;    float iucolLXHuK96573175 = -402757870;    float iucolLXHuK65406179 = -830476666;    float iucolLXHuK65345886 = -748270307;    float iucolLXHuK33207224 = -824406380;    float iucolLXHuK64143287 = -183894808;    float iucolLXHuK80232279 = -411549462;    float iucolLXHuK58004136 = -292293217;    float iucolLXHuK37186475 = -585288788;    float iucolLXHuK82581931 = -279240985;    float iucolLXHuK42190204 = 91600749;    float iucolLXHuK65029381 = -466039613;    float iucolLXHuK51130827 = -112639603;    float iucolLXHuK83169439 = -448089590;    float iucolLXHuK94571009 = -925526821;    float iucolLXHuK94701542 = -382568180;    float iucolLXHuK75244874 = -816994580;    float iucolLXHuK1762109 = -729905251;    float iucolLXHuK40958616 = -5067755;    float iucolLXHuK65578607 = -687859229;    float iucolLXHuK20317145 = -996274065;    float iucolLXHuK4554489 = -620587303;    float iucolLXHuK69131515 = -30262478;    float iucolLXHuK94204024 = -527959809;    float iucolLXHuK4326515 = -455533992;    float iucolLXHuK36944537 = -375134543;    float iucolLXHuK90132865 = -128704727;    float iucolLXHuK22396535 = -267538692;    float iucolLXHuK94782896 = -539538433;    float iucolLXHuK58823276 = -459898863;    float iucolLXHuK21872204 = -804145297;    float iucolLXHuK5296316 = -998519113;    float iucolLXHuK73329910 = -456843910;    float iucolLXHuK57973428 = -738684887;    float iucolLXHuK26328042 = -900292118;    float iucolLXHuK36257880 = -612825748;    float iucolLXHuK54548873 = -972840521;    float iucolLXHuK78527792 = -798541927;    float iucolLXHuK65718702 = -750254738;    float iucolLXHuK36554448 = -849042250;    float iucolLXHuK87157124 = -132784308;    float iucolLXHuK32866705 = -205599952;    float iucolLXHuK91391530 = -785429728;    float iucolLXHuK90231708 = -565765151;    float iucolLXHuK3670997 = -838385572;    float iucolLXHuK93480816 = -336981975;    float iucolLXHuK47452138 = -970546493;    float iucolLXHuK72252609 = -259317784;    float iucolLXHuK81197646 = -310457019;    float iucolLXHuK56115726 = -929447533;    float iucolLXHuK70908463 = -860470244;    float iucolLXHuK89538909 = -503994624;    float iucolLXHuK68741149 = -751620597;    float iucolLXHuK16122503 = -987398986;    float iucolLXHuK52973986 = -269177744;    float iucolLXHuK12399390 = -259817902;    float iucolLXHuK27441661 = -272495392;    float iucolLXHuK71202155 = -202516857;    float iucolLXHuK61019372 = -192736315;    float iucolLXHuK96262687 = -349271838;    float iucolLXHuK74010421 = 44809919;    float iucolLXHuK57835744 = -44010771;    float iucolLXHuK63221239 = -752754784;    float iucolLXHuK78363199 = -25389926;    float iucolLXHuK60709727 = -475095689;    float iucolLXHuK36893888 = 90119862;    float iucolLXHuK91699471 = 90804296;    float iucolLXHuK93157398 = -373954716;    float iucolLXHuK56841397 = -547797473;    float iucolLXHuK58313129 = -212701073;    float iucolLXHuK40152669 = -409727659;    float iucolLXHuK96717081 = 81547347;    float iucolLXHuK36043407 = -979650513;    float iucolLXHuK4404169 = -156025506;    float iucolLXHuK78421483 = -455074922;    float iucolLXHuK87450439 = -690674114;    float iucolLXHuK13162958 = -835157575;    float iucolLXHuK78899807 = -464497328;    float iucolLXHuK90533027 = -689574238;    float iucolLXHuK10845699 = -18552017;    float iucolLXHuK89492398 = -404588051;    float iucolLXHuK17880256 = -546812234;     iucolLXHuK43873679 = iucolLXHuK98925926;     iucolLXHuK98925926 = iucolLXHuK697735;     iucolLXHuK697735 = iucolLXHuK67389403;     iucolLXHuK67389403 = iucolLXHuK90870841;     iucolLXHuK90870841 = iucolLXHuK28578006;     iucolLXHuK28578006 = iucolLXHuK72813639;     iucolLXHuK72813639 = iucolLXHuK45861200;     iucolLXHuK45861200 = iucolLXHuK58510198;     iucolLXHuK58510198 = iucolLXHuK98582965;     iucolLXHuK98582965 = iucolLXHuK55422049;     iucolLXHuK55422049 = iucolLXHuK75768656;     iucolLXHuK75768656 = iucolLXHuK50817269;     iucolLXHuK50817269 = iucolLXHuK46153337;     iucolLXHuK46153337 = iucolLXHuK91301018;     iucolLXHuK91301018 = iucolLXHuK9699766;     iucolLXHuK9699766 = iucolLXHuK81701109;     iucolLXHuK81701109 = iucolLXHuK73291130;     iucolLXHuK73291130 = iucolLXHuK16953878;     iucolLXHuK16953878 = iucolLXHuK96573175;     iucolLXHuK96573175 = iucolLXHuK65406179;     iucolLXHuK65406179 = iucolLXHuK65345886;     iucolLXHuK65345886 = iucolLXHuK33207224;     iucolLXHuK33207224 = iucolLXHuK64143287;     iucolLXHuK64143287 = iucolLXHuK80232279;     iucolLXHuK80232279 = iucolLXHuK58004136;     iucolLXHuK58004136 = iucolLXHuK37186475;     iucolLXHuK37186475 = iucolLXHuK82581931;     iucolLXHuK82581931 = iucolLXHuK42190204;     iucolLXHuK42190204 = iucolLXHuK65029381;     iucolLXHuK65029381 = iucolLXHuK51130827;     iucolLXHuK51130827 = iucolLXHuK83169439;     iucolLXHuK83169439 = iucolLXHuK94571009;     iucolLXHuK94571009 = iucolLXHuK94701542;     iucolLXHuK94701542 = iucolLXHuK75244874;     iucolLXHuK75244874 = iucolLXHuK1762109;     iucolLXHuK1762109 = iucolLXHuK40958616;     iucolLXHuK40958616 = iucolLXHuK65578607;     iucolLXHuK65578607 = iucolLXHuK20317145;     iucolLXHuK20317145 = iucolLXHuK4554489;     iucolLXHuK4554489 = iucolLXHuK69131515;     iucolLXHuK69131515 = iucolLXHuK94204024;     iucolLXHuK94204024 = iucolLXHuK4326515;     iucolLXHuK4326515 = iucolLXHuK36944537;     iucolLXHuK36944537 = iucolLXHuK90132865;     iucolLXHuK90132865 = iucolLXHuK22396535;     iucolLXHuK22396535 = iucolLXHuK94782896;     iucolLXHuK94782896 = iucolLXHuK58823276;     iucolLXHuK58823276 = iucolLXHuK21872204;     iucolLXHuK21872204 = iucolLXHuK5296316;     iucolLXHuK5296316 = iucolLXHuK73329910;     iucolLXHuK73329910 = iucolLXHuK57973428;     iucolLXHuK57973428 = iucolLXHuK26328042;     iucolLXHuK26328042 = iucolLXHuK36257880;     iucolLXHuK36257880 = iucolLXHuK54548873;     iucolLXHuK54548873 = iucolLXHuK78527792;     iucolLXHuK78527792 = iucolLXHuK65718702;     iucolLXHuK65718702 = iucolLXHuK36554448;     iucolLXHuK36554448 = iucolLXHuK87157124;     iucolLXHuK87157124 = iucolLXHuK32866705;     iucolLXHuK32866705 = iucolLXHuK91391530;     iucolLXHuK91391530 = iucolLXHuK90231708;     iucolLXHuK90231708 = iucolLXHuK3670997;     iucolLXHuK3670997 = iucolLXHuK93480816;     iucolLXHuK93480816 = iucolLXHuK47452138;     iucolLXHuK47452138 = iucolLXHuK72252609;     iucolLXHuK72252609 = iucolLXHuK81197646;     iucolLXHuK81197646 = iucolLXHuK56115726;     iucolLXHuK56115726 = iucolLXHuK70908463;     iucolLXHuK70908463 = iucolLXHuK89538909;     iucolLXHuK89538909 = iucolLXHuK68741149;     iucolLXHuK68741149 = iucolLXHuK16122503;     iucolLXHuK16122503 = iucolLXHuK52973986;     iucolLXHuK52973986 = iucolLXHuK12399390;     iucolLXHuK12399390 = iucolLXHuK27441661;     iucolLXHuK27441661 = iucolLXHuK71202155;     iucolLXHuK71202155 = iucolLXHuK61019372;     iucolLXHuK61019372 = iucolLXHuK96262687;     iucolLXHuK96262687 = iucolLXHuK74010421;     iucolLXHuK74010421 = iucolLXHuK57835744;     iucolLXHuK57835744 = iucolLXHuK63221239;     iucolLXHuK63221239 = iucolLXHuK78363199;     iucolLXHuK78363199 = iucolLXHuK60709727;     iucolLXHuK60709727 = iucolLXHuK36893888;     iucolLXHuK36893888 = iucolLXHuK91699471;     iucolLXHuK91699471 = iucolLXHuK93157398;     iucolLXHuK93157398 = iucolLXHuK56841397;     iucolLXHuK56841397 = iucolLXHuK58313129;     iucolLXHuK58313129 = iucolLXHuK40152669;     iucolLXHuK40152669 = iucolLXHuK96717081;     iucolLXHuK96717081 = iucolLXHuK36043407;     iucolLXHuK36043407 = iucolLXHuK4404169;     iucolLXHuK4404169 = iucolLXHuK78421483;     iucolLXHuK78421483 = iucolLXHuK87450439;     iucolLXHuK87450439 = iucolLXHuK13162958;     iucolLXHuK13162958 = iucolLXHuK78899807;     iucolLXHuK78899807 = iucolLXHuK90533027;     iucolLXHuK90533027 = iucolLXHuK10845699;     iucolLXHuK10845699 = iucolLXHuK89492398;     iucolLXHuK89492398 = iucolLXHuK17880256;     iucolLXHuK17880256 = iucolLXHuK43873679;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void OneHanzVXC11016241() {     float rQKDJtlcnT36912463 = -799365327;    float rQKDJtlcnT51946944 = -394847472;    float rQKDJtlcnT9435932 = -714885361;    float rQKDJtlcnT22327378 = -840879691;    float rQKDJtlcnT10495417 = -972356516;    float rQKDJtlcnT33460885 = 67091955;    float rQKDJtlcnT83348273 = -765769151;    float rQKDJtlcnT78337439 = -564198556;    float rQKDJtlcnT1538384 = -880564955;    float rQKDJtlcnT13313011 = -127022779;    float rQKDJtlcnT35213069 = -838933704;    float rQKDJtlcnT77218176 = -802492925;    float rQKDJtlcnT97652836 = -840270090;    float rQKDJtlcnT72615123 = 93798209;    float rQKDJtlcnT10756315 = -11127590;    float rQKDJtlcnT86484318 = -808339481;    float rQKDJtlcnT25377288 = -861723164;    float rQKDJtlcnT99561040 = -706360695;    float rQKDJtlcnT39943291 = -722695271;    float rQKDJtlcnT33876168 = -97758628;    float rQKDJtlcnT21425041 = -730643115;    float rQKDJtlcnT90556869 = -484321926;    float rQKDJtlcnT38444356 = -468330117;    float rQKDJtlcnT24492611 = -340288571;    float rQKDJtlcnT79896914 = -809013275;    float rQKDJtlcnT76904711 = -834471885;    float rQKDJtlcnT92536681 = -738053056;    float rQKDJtlcnT96275606 = -572819206;    float rQKDJtlcnT81225252 = -547014587;    float rQKDJtlcnT13358657 = -944730550;    float rQKDJtlcnT2493629 = 57610560;    float rQKDJtlcnT85222091 = -328458107;    float rQKDJtlcnT58555040 = -301831924;    float rQKDJtlcnT19455205 = -270224714;    float rQKDJtlcnT29498475 = -727697782;    float rQKDJtlcnT3448237 = -24527175;    float rQKDJtlcnT78189814 = 73391086;    float rQKDJtlcnT71997196 = -339597808;    float rQKDJtlcnT47158565 = -253048734;    float rQKDJtlcnT19843502 = -274419695;    float rQKDJtlcnT57962170 = -917459023;    float rQKDJtlcnT11195407 = -55257570;    float rQKDJtlcnT58843666 = -329818628;    float rQKDJtlcnT42896956 = -444473164;    float rQKDJtlcnT54070191 = -246494600;    float rQKDJtlcnT36902652 = -208104942;    float rQKDJtlcnT33211497 = -134018485;    float rQKDJtlcnT69036160 = -668564149;    float rQKDJtlcnT21773561 = -739625964;    float rQKDJtlcnT10807548 = -323548251;    float rQKDJtlcnT50388451 = -358492308;    float rQKDJtlcnT73696190 = -38723891;    float rQKDJtlcnT59718102 = -500001390;    float rQKDJtlcnT86771729 = -449388053;    float rQKDJtlcnT89591199 = -124485551;    float rQKDJtlcnT46355594 = -215043402;    float rQKDJtlcnT13502589 = -926517356;    float rQKDJtlcnT84943321 = -274596791;    float rQKDJtlcnT42430464 = 68133584;    float rQKDJtlcnT33590706 = -37884632;    float rQKDJtlcnT40924204 = -194854989;    float rQKDJtlcnT87072667 = -92949946;    float rQKDJtlcnT97112186 = 82816030;    float rQKDJtlcnT88179726 = -935834406;    float rQKDJtlcnT10819382 = -84633339;    float rQKDJtlcnT49990978 = -410475597;    float rQKDJtlcnT18663136 = -400661001;    float rQKDJtlcnT78197631 = -470045376;    float rQKDJtlcnT43116648 = -178504010;    float rQKDJtlcnT7308079 = -986600416;    float rQKDJtlcnT8294504 = -781730567;    float rQKDJtlcnT53380091 = -422125356;    float rQKDJtlcnT52402476 = -353311962;    float rQKDJtlcnT20099790 = -348275577;    float rQKDJtlcnT75913998 = -180299606;    float rQKDJtlcnT10229635 = -575385545;    float rQKDJtlcnT31713203 = -54503298;    float rQKDJtlcnT95547399 = 76143046;    float rQKDJtlcnT70422420 = 6206028;    float rQKDJtlcnT42994263 = -500908333;    float rQKDJtlcnT43693214 = -600453401;    float rQKDJtlcnT23500521 = 30511092;    float rQKDJtlcnT74502045 = -833193242;    float rQKDJtlcnT70417704 = -123466337;    float rQKDJtlcnT62970205 = -486238243;    float rQKDJtlcnT28797439 = -903665550;    float rQKDJtlcnT25503989 = -828456718;    float rQKDJtlcnT71783311 = -852443871;    float rQKDJtlcnT29864006 = -45739164;    float rQKDJtlcnT83142881 = -412654380;    float rQKDJtlcnT89945648 = -98009820;    float rQKDJtlcnT93246493 = -652012124;    float rQKDJtlcnT29566733 = -307731392;    float rQKDJtlcnT13567859 = -115164103;    float rQKDJtlcnT78919297 = 20435294;    float rQKDJtlcnT70889502 = -724509078;    float rQKDJtlcnT14083220 = -38073601;    float rQKDJtlcnT70663940 = -393984223;    float rQKDJtlcnT32077575 = -259839825;    float rQKDJtlcnT4079213 = -799365327;     rQKDJtlcnT36912463 = rQKDJtlcnT51946944;     rQKDJtlcnT51946944 = rQKDJtlcnT9435932;     rQKDJtlcnT9435932 = rQKDJtlcnT22327378;     rQKDJtlcnT22327378 = rQKDJtlcnT10495417;     rQKDJtlcnT10495417 = rQKDJtlcnT33460885;     rQKDJtlcnT33460885 = rQKDJtlcnT83348273;     rQKDJtlcnT83348273 = rQKDJtlcnT78337439;     rQKDJtlcnT78337439 = rQKDJtlcnT1538384;     rQKDJtlcnT1538384 = rQKDJtlcnT13313011;     rQKDJtlcnT13313011 = rQKDJtlcnT35213069;     rQKDJtlcnT35213069 = rQKDJtlcnT77218176;     rQKDJtlcnT77218176 = rQKDJtlcnT97652836;     rQKDJtlcnT97652836 = rQKDJtlcnT72615123;     rQKDJtlcnT72615123 = rQKDJtlcnT10756315;     rQKDJtlcnT10756315 = rQKDJtlcnT86484318;     rQKDJtlcnT86484318 = rQKDJtlcnT25377288;     rQKDJtlcnT25377288 = rQKDJtlcnT99561040;     rQKDJtlcnT99561040 = rQKDJtlcnT39943291;     rQKDJtlcnT39943291 = rQKDJtlcnT33876168;     rQKDJtlcnT33876168 = rQKDJtlcnT21425041;     rQKDJtlcnT21425041 = rQKDJtlcnT90556869;     rQKDJtlcnT90556869 = rQKDJtlcnT38444356;     rQKDJtlcnT38444356 = rQKDJtlcnT24492611;     rQKDJtlcnT24492611 = rQKDJtlcnT79896914;     rQKDJtlcnT79896914 = rQKDJtlcnT76904711;     rQKDJtlcnT76904711 = rQKDJtlcnT92536681;     rQKDJtlcnT92536681 = rQKDJtlcnT96275606;     rQKDJtlcnT96275606 = rQKDJtlcnT81225252;     rQKDJtlcnT81225252 = rQKDJtlcnT13358657;     rQKDJtlcnT13358657 = rQKDJtlcnT2493629;     rQKDJtlcnT2493629 = rQKDJtlcnT85222091;     rQKDJtlcnT85222091 = rQKDJtlcnT58555040;     rQKDJtlcnT58555040 = rQKDJtlcnT19455205;     rQKDJtlcnT19455205 = rQKDJtlcnT29498475;     rQKDJtlcnT29498475 = rQKDJtlcnT3448237;     rQKDJtlcnT3448237 = rQKDJtlcnT78189814;     rQKDJtlcnT78189814 = rQKDJtlcnT71997196;     rQKDJtlcnT71997196 = rQKDJtlcnT47158565;     rQKDJtlcnT47158565 = rQKDJtlcnT19843502;     rQKDJtlcnT19843502 = rQKDJtlcnT57962170;     rQKDJtlcnT57962170 = rQKDJtlcnT11195407;     rQKDJtlcnT11195407 = rQKDJtlcnT58843666;     rQKDJtlcnT58843666 = rQKDJtlcnT42896956;     rQKDJtlcnT42896956 = rQKDJtlcnT54070191;     rQKDJtlcnT54070191 = rQKDJtlcnT36902652;     rQKDJtlcnT36902652 = rQKDJtlcnT33211497;     rQKDJtlcnT33211497 = rQKDJtlcnT69036160;     rQKDJtlcnT69036160 = rQKDJtlcnT21773561;     rQKDJtlcnT21773561 = rQKDJtlcnT10807548;     rQKDJtlcnT10807548 = rQKDJtlcnT50388451;     rQKDJtlcnT50388451 = rQKDJtlcnT73696190;     rQKDJtlcnT73696190 = rQKDJtlcnT59718102;     rQKDJtlcnT59718102 = rQKDJtlcnT86771729;     rQKDJtlcnT86771729 = rQKDJtlcnT89591199;     rQKDJtlcnT89591199 = rQKDJtlcnT46355594;     rQKDJtlcnT46355594 = rQKDJtlcnT13502589;     rQKDJtlcnT13502589 = rQKDJtlcnT84943321;     rQKDJtlcnT84943321 = rQKDJtlcnT42430464;     rQKDJtlcnT42430464 = rQKDJtlcnT33590706;     rQKDJtlcnT33590706 = rQKDJtlcnT40924204;     rQKDJtlcnT40924204 = rQKDJtlcnT87072667;     rQKDJtlcnT87072667 = rQKDJtlcnT97112186;     rQKDJtlcnT97112186 = rQKDJtlcnT88179726;     rQKDJtlcnT88179726 = rQKDJtlcnT10819382;     rQKDJtlcnT10819382 = rQKDJtlcnT49990978;     rQKDJtlcnT49990978 = rQKDJtlcnT18663136;     rQKDJtlcnT18663136 = rQKDJtlcnT78197631;     rQKDJtlcnT78197631 = rQKDJtlcnT43116648;     rQKDJtlcnT43116648 = rQKDJtlcnT7308079;     rQKDJtlcnT7308079 = rQKDJtlcnT8294504;     rQKDJtlcnT8294504 = rQKDJtlcnT53380091;     rQKDJtlcnT53380091 = rQKDJtlcnT52402476;     rQKDJtlcnT52402476 = rQKDJtlcnT20099790;     rQKDJtlcnT20099790 = rQKDJtlcnT75913998;     rQKDJtlcnT75913998 = rQKDJtlcnT10229635;     rQKDJtlcnT10229635 = rQKDJtlcnT31713203;     rQKDJtlcnT31713203 = rQKDJtlcnT95547399;     rQKDJtlcnT95547399 = rQKDJtlcnT70422420;     rQKDJtlcnT70422420 = rQKDJtlcnT42994263;     rQKDJtlcnT42994263 = rQKDJtlcnT43693214;     rQKDJtlcnT43693214 = rQKDJtlcnT23500521;     rQKDJtlcnT23500521 = rQKDJtlcnT74502045;     rQKDJtlcnT74502045 = rQKDJtlcnT70417704;     rQKDJtlcnT70417704 = rQKDJtlcnT62970205;     rQKDJtlcnT62970205 = rQKDJtlcnT28797439;     rQKDJtlcnT28797439 = rQKDJtlcnT25503989;     rQKDJtlcnT25503989 = rQKDJtlcnT71783311;     rQKDJtlcnT71783311 = rQKDJtlcnT29864006;     rQKDJtlcnT29864006 = rQKDJtlcnT83142881;     rQKDJtlcnT83142881 = rQKDJtlcnT89945648;     rQKDJtlcnT89945648 = rQKDJtlcnT93246493;     rQKDJtlcnT93246493 = rQKDJtlcnT29566733;     rQKDJtlcnT29566733 = rQKDJtlcnT13567859;     rQKDJtlcnT13567859 = rQKDJtlcnT78919297;     rQKDJtlcnT78919297 = rQKDJtlcnT70889502;     rQKDJtlcnT70889502 = rQKDJtlcnT14083220;     rQKDJtlcnT14083220 = rQKDJtlcnT70663940;     rQKDJtlcnT70663940 = rQKDJtlcnT32077575;     rQKDJtlcnT32077575 = rQKDJtlcnT4079213;     rQKDJtlcnT4079213 = rQKDJtlcnT36912463;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ADvzvknXoX93687104() {     float eueRQegzHZ23827670 = -812540673;    float eueRQegzHZ166999 = -548029171;    float eueRQegzHZ3445159 = -103129358;    float eueRQegzHZ35270433 = -667217811;    float eueRQegzHZ70064606 = -194525315;    float eueRQegzHZ81731994 = -30034151;    float eueRQegzHZ1941279 = -152103657;    float eueRQegzHZ30267838 = -798915695;    float eueRQegzHZ62664237 = -803721727;    float eueRQegzHZ83452910 = -578690856;    float eueRQegzHZ75214405 = -952494519;    float eueRQegzHZ61136331 = -660074172;    float eueRQegzHZ90132199 = -950291853;    float eueRQegzHZ69777452 = -47853241;    float eueRQegzHZ79641293 = -160605992;    float eueRQegzHZ96328024 = -19786718;    float eueRQegzHZ31070223 = -251257571;    float eueRQegzHZ51778331 = -778818561;    float eueRQegzHZ21531132 = -677198508;    float eueRQegzHZ62702759 = -47880919;    float eueRQegzHZ68560133 = -485788482;    float eueRQegzHZ7543095 = -822435712;    float eueRQegzHZ44969092 = -824694209;    float eueRQegzHZ44499669 = -155297869;    float eueRQegzHZ64304589 = -159974907;    float eueRQegzHZ87657688 = -306201159;    float eueRQegzHZ19648691 = -190954834;    float eueRQegzHZ32265682 = -309435462;    float eueRQegzHZ66806492 = -509317534;    float eueRQegzHZ69162165 = -181381994;    float eueRQegzHZ95026559 = -245911574;    float eueRQegzHZ74387978 = -891201571;    float eueRQegzHZ98280546 = 12532126;    float eueRQegzHZ49661140 = -283021216;    float eueRQegzHZ4635463 = -258981803;    float eueRQegzHZ79236641 = -284888738;    float eueRQegzHZ46100446 = 5832418;    float eueRQegzHZ14243253 = -215093057;    float eueRQegzHZ35703328 = -228581322;    float eueRQegzHZ19503470 = -164244550;    float eueRQegzHZ28979268 = -727325571;    float eueRQegzHZ81733993 = -606205134;    float eueRQegzHZ95577200 = -682428934;    float eueRQegzHZ20673534 = -51433290;    float eueRQegzHZ90073103 = -75645719;    float eueRQegzHZ79897541 = 24500253;    float eueRQegzHZ81559316 = -91003622;    float eueRQegzHZ46675685 = -376095259;    float eueRQegzHZ30657579 = -153133505;    float eueRQegzHZ23452550 = -248591467;    float eueRQegzHZ5005684 = 3597958;    float eueRQegzHZ93156489 = 79817677;    float eueRQegzHZ20308054 = -199975083;    float eueRQegzHZ51566970 = -497400065;    float eueRQegzHZ25126972 = -532498076;    float eueRQegzHZ16284575 = -990104962;    float eueRQegzHZ55197907 = -723334962;    float eueRQegzHZ58945489 = -947831489;    float eueRQegzHZ70965844 = -407242905;    float eueRQegzHZ82406918 = -888324157;    float eueRQegzHZ62083304 = -839079318;    float eueRQegzHZ69675596 = -842668196;    float eueRQegzHZ63461346 = -189598161;    float eueRQegzHZ93502072 = -522339734;    float eueRQegzHZ88426350 = -232779282;    float eueRQegzHZ826427 = 38707051;    float eueRQegzHZ62855784 = -572606299;    float eueRQegzHZ40471059 = -567270638;    float eueRQegzHZ65141990 = -788871439;    float eueRQegzHZ404653 = -875717254;    float eueRQegzHZ50227579 = 74380864;    float eueRQegzHZ16826970 = 63835486;    float eueRQegzHZ16075004 = -450237240;    float eueRQegzHZ2027663 = -412953959;    float eueRQegzHZ33723491 = -320555348;    float eueRQegzHZ86826140 = -879583348;    float eueRQegzHZ11965895 = -40006778;    float eueRQegzHZ24295559 = -673260920;    float eueRQegzHZ54426566 = 20347849;    float eueRQegzHZ84407047 = -84475160;    float eueRQegzHZ6098372 = -115197538;    float eueRQegzHZ72973005 = -814859576;    float eueRQegzHZ1608103 = -56301957;    float eueRQegzHZ43353942 = -160726068;    float eueRQegzHZ64156482 = -84979952;    float eueRQegzHZ1870071 = -225729252;    float eueRQegzHZ54079925 = -591226489;    float eueRQegzHZ46713576 = -490067809;    float eueRQegzHZ24534169 = -750523141;    float eueRQegzHZ88350887 = -268876841;    float eueRQegzHZ24038735 = -561553777;    float eueRQegzHZ87154957 = -46336094;    float eueRQegzHZ43277409 = -807850153;    float eueRQegzHZ53296409 = -340257165;    float eueRQegzHZ57420165 = -325165233;    float eueRQegzHZ59303672 = -884657376;    float eueRQegzHZ18272647 = -316606974;    float eueRQegzHZ2075129 = -60089200;    float eueRQegzHZ32247184 = -818654008;    float eueRQegzHZ89246676 = -812540673;     eueRQegzHZ23827670 = eueRQegzHZ166999;     eueRQegzHZ166999 = eueRQegzHZ3445159;     eueRQegzHZ3445159 = eueRQegzHZ35270433;     eueRQegzHZ35270433 = eueRQegzHZ70064606;     eueRQegzHZ70064606 = eueRQegzHZ81731994;     eueRQegzHZ81731994 = eueRQegzHZ1941279;     eueRQegzHZ1941279 = eueRQegzHZ30267838;     eueRQegzHZ30267838 = eueRQegzHZ62664237;     eueRQegzHZ62664237 = eueRQegzHZ83452910;     eueRQegzHZ83452910 = eueRQegzHZ75214405;     eueRQegzHZ75214405 = eueRQegzHZ61136331;     eueRQegzHZ61136331 = eueRQegzHZ90132199;     eueRQegzHZ90132199 = eueRQegzHZ69777452;     eueRQegzHZ69777452 = eueRQegzHZ79641293;     eueRQegzHZ79641293 = eueRQegzHZ96328024;     eueRQegzHZ96328024 = eueRQegzHZ31070223;     eueRQegzHZ31070223 = eueRQegzHZ51778331;     eueRQegzHZ51778331 = eueRQegzHZ21531132;     eueRQegzHZ21531132 = eueRQegzHZ62702759;     eueRQegzHZ62702759 = eueRQegzHZ68560133;     eueRQegzHZ68560133 = eueRQegzHZ7543095;     eueRQegzHZ7543095 = eueRQegzHZ44969092;     eueRQegzHZ44969092 = eueRQegzHZ44499669;     eueRQegzHZ44499669 = eueRQegzHZ64304589;     eueRQegzHZ64304589 = eueRQegzHZ87657688;     eueRQegzHZ87657688 = eueRQegzHZ19648691;     eueRQegzHZ19648691 = eueRQegzHZ32265682;     eueRQegzHZ32265682 = eueRQegzHZ66806492;     eueRQegzHZ66806492 = eueRQegzHZ69162165;     eueRQegzHZ69162165 = eueRQegzHZ95026559;     eueRQegzHZ95026559 = eueRQegzHZ74387978;     eueRQegzHZ74387978 = eueRQegzHZ98280546;     eueRQegzHZ98280546 = eueRQegzHZ49661140;     eueRQegzHZ49661140 = eueRQegzHZ4635463;     eueRQegzHZ4635463 = eueRQegzHZ79236641;     eueRQegzHZ79236641 = eueRQegzHZ46100446;     eueRQegzHZ46100446 = eueRQegzHZ14243253;     eueRQegzHZ14243253 = eueRQegzHZ35703328;     eueRQegzHZ35703328 = eueRQegzHZ19503470;     eueRQegzHZ19503470 = eueRQegzHZ28979268;     eueRQegzHZ28979268 = eueRQegzHZ81733993;     eueRQegzHZ81733993 = eueRQegzHZ95577200;     eueRQegzHZ95577200 = eueRQegzHZ20673534;     eueRQegzHZ20673534 = eueRQegzHZ90073103;     eueRQegzHZ90073103 = eueRQegzHZ79897541;     eueRQegzHZ79897541 = eueRQegzHZ81559316;     eueRQegzHZ81559316 = eueRQegzHZ46675685;     eueRQegzHZ46675685 = eueRQegzHZ30657579;     eueRQegzHZ30657579 = eueRQegzHZ23452550;     eueRQegzHZ23452550 = eueRQegzHZ5005684;     eueRQegzHZ5005684 = eueRQegzHZ93156489;     eueRQegzHZ93156489 = eueRQegzHZ20308054;     eueRQegzHZ20308054 = eueRQegzHZ51566970;     eueRQegzHZ51566970 = eueRQegzHZ25126972;     eueRQegzHZ25126972 = eueRQegzHZ16284575;     eueRQegzHZ16284575 = eueRQegzHZ55197907;     eueRQegzHZ55197907 = eueRQegzHZ58945489;     eueRQegzHZ58945489 = eueRQegzHZ70965844;     eueRQegzHZ70965844 = eueRQegzHZ82406918;     eueRQegzHZ82406918 = eueRQegzHZ62083304;     eueRQegzHZ62083304 = eueRQegzHZ69675596;     eueRQegzHZ69675596 = eueRQegzHZ63461346;     eueRQegzHZ63461346 = eueRQegzHZ93502072;     eueRQegzHZ93502072 = eueRQegzHZ88426350;     eueRQegzHZ88426350 = eueRQegzHZ826427;     eueRQegzHZ826427 = eueRQegzHZ62855784;     eueRQegzHZ62855784 = eueRQegzHZ40471059;     eueRQegzHZ40471059 = eueRQegzHZ65141990;     eueRQegzHZ65141990 = eueRQegzHZ404653;     eueRQegzHZ404653 = eueRQegzHZ50227579;     eueRQegzHZ50227579 = eueRQegzHZ16826970;     eueRQegzHZ16826970 = eueRQegzHZ16075004;     eueRQegzHZ16075004 = eueRQegzHZ2027663;     eueRQegzHZ2027663 = eueRQegzHZ33723491;     eueRQegzHZ33723491 = eueRQegzHZ86826140;     eueRQegzHZ86826140 = eueRQegzHZ11965895;     eueRQegzHZ11965895 = eueRQegzHZ24295559;     eueRQegzHZ24295559 = eueRQegzHZ54426566;     eueRQegzHZ54426566 = eueRQegzHZ84407047;     eueRQegzHZ84407047 = eueRQegzHZ6098372;     eueRQegzHZ6098372 = eueRQegzHZ72973005;     eueRQegzHZ72973005 = eueRQegzHZ1608103;     eueRQegzHZ1608103 = eueRQegzHZ43353942;     eueRQegzHZ43353942 = eueRQegzHZ64156482;     eueRQegzHZ64156482 = eueRQegzHZ1870071;     eueRQegzHZ1870071 = eueRQegzHZ54079925;     eueRQegzHZ54079925 = eueRQegzHZ46713576;     eueRQegzHZ46713576 = eueRQegzHZ24534169;     eueRQegzHZ24534169 = eueRQegzHZ88350887;     eueRQegzHZ88350887 = eueRQegzHZ24038735;     eueRQegzHZ24038735 = eueRQegzHZ87154957;     eueRQegzHZ87154957 = eueRQegzHZ43277409;     eueRQegzHZ43277409 = eueRQegzHZ53296409;     eueRQegzHZ53296409 = eueRQegzHZ57420165;     eueRQegzHZ57420165 = eueRQegzHZ59303672;     eueRQegzHZ59303672 = eueRQegzHZ18272647;     eueRQegzHZ18272647 = eueRQegzHZ2075129;     eueRQegzHZ2075129 = eueRQegzHZ32247184;     eueRQegzHZ32247184 = eueRQegzHZ89246676;     eueRQegzHZ89246676 = eueRQegzHZ23827670;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void jFRApkfzWL72863498() {     float lUPbNMqror88076546 = -621955670;    float lUPbNMqror83313547 = -948398151;    float lUPbNMqror76507495 = -276937047;    float lUPbNMqror98851098 = -676066307;    float lUPbNMqror58019529 = -434556412;    float lUPbNMqror2284871 = 57697137;    float lUPbNMqror62537298 = -534848032;    float lUPbNMqror77571738 = 70260368;    float lUPbNMqror34937133 = -486659115;    float lUPbNMqror48269289 = -432952696;    float lUPbNMqror84200782 = -319261549;    float lUPbNMqror62145165 = -325389101;    float lUPbNMqror82667305 = -390425295;    float lUPbNMqror9578777 = -200403430;    float lUPbNMqror68466200 = -850932358;    float lUPbNMqror76490951 = -913518086;    float lUPbNMqror80826280 = -57977322;    float lUPbNMqror64793382 = 64012961;    float lUPbNMqror83301002 = -706625252;    float lUPbNMqror28272864 = -658661831;    float lUPbNMqror3112996 = -264509050;    float lUPbNMqror71859349 = -733779668;    float lUPbNMqror82850348 = 84527830;    float lUPbNMqror71570804 = 61092947;    float lUPbNMqror18145883 = -370699412;    float lUPbNMqror52457061 = -971578897;    float lUPbNMqror27534081 = -170479038;    float lUPbNMqror59476732 = -541110660;    float lUPbNMqror9658124 = -565672603;    float lUPbNMqror96093508 = -437981047;    float lUPbNMqror79999576 = -986776737;    float lUPbNMqror44325813 = -167871537;    float lUPbNMqror86381567 = -299418414;    float lUPbNMqror26912185 = -259196389;    float lUPbNMqror14666490 = -189883529;    float lUPbNMqror55860127 = -39482353;    float lUPbNMqror89421953 = -987286182;    float lUPbNMqror93060249 = -32290138;    float lUPbNMqror64319318 = -782406794;    float lUPbNMqror9283742 = -823792019;    float lUPbNMqror40120400 = 44476699;    float lUPbNMqror84912247 = -167126660;    float lUPbNMqror17527466 = -946161645;    float lUPbNMqror43715413 = -938268805;    float lUPbNMqror22049995 = -597796236;    float lUPbNMqror10131264 = 34755312;    float lUPbNMqror60446198 = -680236828;    float lUPbNMqror60645283 = -563691198;    float lUPbNMqror42054590 = -502742279;    float lUPbNMqror38472961 = -706619443;    float lUPbNMqror83920315 = -434364520;    float lUPbNMqror42760607 = -777027998;    float lUPbNMqror71313658 = -427852496;    float lUPbNMqror34819818 = -511435468;    float lUPbNMqror69750503 = -831565663;    float lUPbNMqror16217197 = -888176003;    float lUPbNMqror463199 = -932925982;    float lUPbNMqror4936692 = -238029994;    float lUPbNMqror80705215 = -205366895;    float lUPbNMqror5562468 = -462977516;    float lUPbNMqror74750790 = -771823826;    float lUPbNMqror3060567 = -993737373;    float lUPbNMqror67913614 = -364067029;    float lUPbNMqror38843624 = 51321932;    float lUPbNMqror68269712 = -446175960;    float lUPbNMqror39874969 = -51390013;    float lUPbNMqror75763597 = 74029313;    float lUPbNMqror55755121 = -31228906;    float lUPbNMqror94912287 = 89480099;    float lUPbNMqror12606073 = -711450005;    float lUPbNMqror87068998 = -926231905;    float lUPbNMqror87766030 = 74312815;    float lUPbNMqror474065 = -153580245;    float lUPbNMqror74017261 = -882833234;    float lUPbNMqror88152464 = -603138531;    float lUPbNMqror18200748 = 2617609;    float lUPbNMqror54331883 = -787618024;    float lUPbNMqror39134935 = 22796635;    float lUPbNMqror49520809 = -341110817;    float lUPbNMqror8014619 = -305454724;    float lUPbNMqror92010863 = -191342069;    float lUPbNMqror66888797 = -606787840;    float lUPbNMqror17422142 = 61631619;    float lUPbNMqror71185163 = -859053160;    float lUPbNMqror12173193 = 96383472;    float lUPbNMqror37238970 = -109748739;    float lUPbNMqror73012155 = -740019041;    float lUPbNMqror51561749 = -787982947;    float lUPbNMqror57161682 = -427630727;    float lUPbNMqror98449292 = -301707527;    float lUPbNMqror55396928 = -106556372;    float lUPbNMqror84485261 = -649256188;    float lUPbNMqror12355034 = -826923243;    float lUPbNMqror58756851 = -219429279;    float lUPbNMqror34532952 = 48031806;    float lUPbNMqror37059833 = 38214072;    float lUPbNMqror16998633 = -803059631;    float lUPbNMqror78683841 = -897483578;    float lUPbNMqror75445700 = -392092845;    float lUPbNMqror82175026 = -621955670;     lUPbNMqror88076546 = lUPbNMqror83313547;     lUPbNMqror83313547 = lUPbNMqror76507495;     lUPbNMqror76507495 = lUPbNMqror98851098;     lUPbNMqror98851098 = lUPbNMqror58019529;     lUPbNMqror58019529 = lUPbNMqror2284871;     lUPbNMqror2284871 = lUPbNMqror62537298;     lUPbNMqror62537298 = lUPbNMqror77571738;     lUPbNMqror77571738 = lUPbNMqror34937133;     lUPbNMqror34937133 = lUPbNMqror48269289;     lUPbNMqror48269289 = lUPbNMqror84200782;     lUPbNMqror84200782 = lUPbNMqror62145165;     lUPbNMqror62145165 = lUPbNMqror82667305;     lUPbNMqror82667305 = lUPbNMqror9578777;     lUPbNMqror9578777 = lUPbNMqror68466200;     lUPbNMqror68466200 = lUPbNMqror76490951;     lUPbNMqror76490951 = lUPbNMqror80826280;     lUPbNMqror80826280 = lUPbNMqror64793382;     lUPbNMqror64793382 = lUPbNMqror83301002;     lUPbNMqror83301002 = lUPbNMqror28272864;     lUPbNMqror28272864 = lUPbNMqror3112996;     lUPbNMqror3112996 = lUPbNMqror71859349;     lUPbNMqror71859349 = lUPbNMqror82850348;     lUPbNMqror82850348 = lUPbNMqror71570804;     lUPbNMqror71570804 = lUPbNMqror18145883;     lUPbNMqror18145883 = lUPbNMqror52457061;     lUPbNMqror52457061 = lUPbNMqror27534081;     lUPbNMqror27534081 = lUPbNMqror59476732;     lUPbNMqror59476732 = lUPbNMqror9658124;     lUPbNMqror9658124 = lUPbNMqror96093508;     lUPbNMqror96093508 = lUPbNMqror79999576;     lUPbNMqror79999576 = lUPbNMqror44325813;     lUPbNMqror44325813 = lUPbNMqror86381567;     lUPbNMqror86381567 = lUPbNMqror26912185;     lUPbNMqror26912185 = lUPbNMqror14666490;     lUPbNMqror14666490 = lUPbNMqror55860127;     lUPbNMqror55860127 = lUPbNMqror89421953;     lUPbNMqror89421953 = lUPbNMqror93060249;     lUPbNMqror93060249 = lUPbNMqror64319318;     lUPbNMqror64319318 = lUPbNMqror9283742;     lUPbNMqror9283742 = lUPbNMqror40120400;     lUPbNMqror40120400 = lUPbNMqror84912247;     lUPbNMqror84912247 = lUPbNMqror17527466;     lUPbNMqror17527466 = lUPbNMqror43715413;     lUPbNMqror43715413 = lUPbNMqror22049995;     lUPbNMqror22049995 = lUPbNMqror10131264;     lUPbNMqror10131264 = lUPbNMqror60446198;     lUPbNMqror60446198 = lUPbNMqror60645283;     lUPbNMqror60645283 = lUPbNMqror42054590;     lUPbNMqror42054590 = lUPbNMqror38472961;     lUPbNMqror38472961 = lUPbNMqror83920315;     lUPbNMqror83920315 = lUPbNMqror42760607;     lUPbNMqror42760607 = lUPbNMqror71313658;     lUPbNMqror71313658 = lUPbNMqror34819818;     lUPbNMqror34819818 = lUPbNMqror69750503;     lUPbNMqror69750503 = lUPbNMqror16217197;     lUPbNMqror16217197 = lUPbNMqror463199;     lUPbNMqror463199 = lUPbNMqror4936692;     lUPbNMqror4936692 = lUPbNMqror80705215;     lUPbNMqror80705215 = lUPbNMqror5562468;     lUPbNMqror5562468 = lUPbNMqror74750790;     lUPbNMqror74750790 = lUPbNMqror3060567;     lUPbNMqror3060567 = lUPbNMqror67913614;     lUPbNMqror67913614 = lUPbNMqror38843624;     lUPbNMqror38843624 = lUPbNMqror68269712;     lUPbNMqror68269712 = lUPbNMqror39874969;     lUPbNMqror39874969 = lUPbNMqror75763597;     lUPbNMqror75763597 = lUPbNMqror55755121;     lUPbNMqror55755121 = lUPbNMqror94912287;     lUPbNMqror94912287 = lUPbNMqror12606073;     lUPbNMqror12606073 = lUPbNMqror87068998;     lUPbNMqror87068998 = lUPbNMqror87766030;     lUPbNMqror87766030 = lUPbNMqror474065;     lUPbNMqror474065 = lUPbNMqror74017261;     lUPbNMqror74017261 = lUPbNMqror88152464;     lUPbNMqror88152464 = lUPbNMqror18200748;     lUPbNMqror18200748 = lUPbNMqror54331883;     lUPbNMqror54331883 = lUPbNMqror39134935;     lUPbNMqror39134935 = lUPbNMqror49520809;     lUPbNMqror49520809 = lUPbNMqror8014619;     lUPbNMqror8014619 = lUPbNMqror92010863;     lUPbNMqror92010863 = lUPbNMqror66888797;     lUPbNMqror66888797 = lUPbNMqror17422142;     lUPbNMqror17422142 = lUPbNMqror71185163;     lUPbNMqror71185163 = lUPbNMqror12173193;     lUPbNMqror12173193 = lUPbNMqror37238970;     lUPbNMqror37238970 = lUPbNMqror73012155;     lUPbNMqror73012155 = lUPbNMqror51561749;     lUPbNMqror51561749 = lUPbNMqror57161682;     lUPbNMqror57161682 = lUPbNMqror98449292;     lUPbNMqror98449292 = lUPbNMqror55396928;     lUPbNMqror55396928 = lUPbNMqror84485261;     lUPbNMqror84485261 = lUPbNMqror12355034;     lUPbNMqror12355034 = lUPbNMqror58756851;     lUPbNMqror58756851 = lUPbNMqror34532952;     lUPbNMqror34532952 = lUPbNMqror37059833;     lUPbNMqror37059833 = lUPbNMqror16998633;     lUPbNMqror16998633 = lUPbNMqror78683841;     lUPbNMqror78683841 = lUPbNMqror75445700;     lUPbNMqror75445700 = lUPbNMqror82175026;     lUPbNMqror82175026 = lUPbNMqror88076546;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void IVQnQFVDFo45823250() {     float EIAsnsxnmI87511649 = -455767039;    float EIAsnsxnmI60433851 = -282453949;    float EIAsnsxnmI93465487 = -84500735;    float EIAsnsxnmI15219556 = -874442951;    float EIAsnsxnmI19979606 = -820750333;    float EIAsnsxnmI11420070 = -93237643;    float EIAsnsxnmI99402144 = -776178850;    float EIAsnsxnmI88800508 = -567323836;    float EIAsnsxnmI34297641 = -588258493;    float EIAsnsxnmI17788930 = -560429761;    float EIAsnsxnmI17575192 = -978394851;    float EIAsnsxnmI22424099 = -177825414;    float EIAsnsxnmI48648068 = -309741764;    float EIAsnsxnmI33930492 = -522771470;    float EIAsnsxnmI26988719 = -50296564;    float EIAsnsxnmI80205764 = -974217084;    float EIAsnsxnmI24451988 = -166522220;    float EIAsnsxnmI21342270 = -505965265;    float EIAsnsxnmI46656595 = -644658784;    float EIAsnsxnmI30866223 = -897272433;    float EIAsnsxnmI59384173 = -5100445;    float EIAsnsxnmI72446108 = -299764519;    float EIAsnsxnmI89028429 = -395418933;    float EIAsnsxnmI82348639 = -885013061;    float EIAsnsxnmI56536302 = -660037260;    float EIAsnsxnmI53729921 = -854870201;    float EIAsnsxnmI53481264 = 60303410;    float EIAsnsxnmI89145107 = -617104439;    float EIAsnsxnmI50662476 = -988361402;    float EIAsnsxnmI32753407 = -893899375;    float EIAsnsxnmI86874036 = -211188332;    float EIAsnsxnmI5675949 = -391689013;    float EIAsnsxnmI30662362 = -612678802;    float EIAsnsxnmI40062615 = -710889167;    float EIAsnsxnmI19271338 = -275945709;    float EIAsnsxnmI83744218 = -838502957;    float EIAsnsxnmI39064497 = -203955327;    float EIAsnsxnmI43372011 = -746207423;    float EIAsnsxnmI76391633 = -153766043;    float EIAsnsxnmI1768674 = -45116991;    float EIAsnsxnmI65738874 = -986484892;    float EIAsnsxnmI12906028 = -96684047;    float EIAsnsxnmI59344672 = -2597876;    float EIAsnsxnmI92366152 = -849711325;    float EIAsnsxnmI33982540 = -975341388;    float EIAsnsxnmI41237461 = -586447823;    float EIAsnsxnmI73816912 = -282834095;    float EIAsnsxnmI97886360 = -545652196;    float EIAsnsxnmI54658778 = -738142003;    float EIAsnsxnmI57436692 = -543654369;    float EIAsnsxnmI63512918 = -123177568;    float EIAsnsxnmI65298013 = -671586797;    float EIAsnsxnmI84222119 = -719536405;    float EIAsnsxnmI2558395 = -426763718;    float EIAsnsxnmI86439077 = -651983297;    float EIAsnsxnmI15065541 = -56002520;    float EIAsnsxnmI71405421 = -887035017;    float EIAsnsxnmI11116849 = -199487674;    float EIAsnsxnmI58683253 = -114405692;    float EIAsnsxnmI66249685 = -965880132;    float EIAsnsxnmI57938805 = -53541054;    float EIAsnsxnmI10257037 = -59074411;    float EIAsnsxnmI38138033 = -578962434;    float EIAsnsxnmI1544235 = -694359119;    float EIAsnsxnmI30914893 = -249241429;    float EIAsnsxnmI11899244 = -486705839;    float EIAsnsxnmI91761737 = -565146612;    float EIAsnsxnmI8585453 = -598852598;    float EIAsnsxnmI14659155 = -146825761;    float EIAsnsxnmI43244500 = -211793607;    float EIAsnsxnmI41141267 = -670261758;    float EIAsnsxnmI81079977 = -420314798;    float EIAsnsxnmI44950636 = -252199223;    float EIAsnsxnmI44887922 = -499541794;    float EIAsnsxnmI65127349 = -910787541;    float EIAsnsxnmI46478146 = -908416398;    float EIAsnsxnmI13101437 = -197166644;    float EIAsnsxnmI96662277 = -545707608;    float EIAsnsxnmI48366099 = -909671674;    float EIAsnsxnmI15298842 = 26410562;    float EIAsnsxnmI79913008 = -472036106;    float EIAsnsxnmI55594904 = -394044394;    float EIAsnsxnmI34486330 = -878962436;    float EIAsnsxnmI93225784 = -344707033;    float EIAsnsxnmI69240488 = -670721807;    float EIAsnsxnmI21576024 = -539601536;    float EIAsnsxnmI21453829 = -672152608;    float EIAsnsxnmI28103967 = -85915084;    float EIAsnsxnmI53623538 = 41094130;    float EIAsnsxnmI4205797 = -119943190;    float EIAsnsxnmI12338797 = -951467940;    float EIAsnsxnmI27947649 = 95532347;    float EIAsnsxnmI84688757 = -531801732;    float EIAsnsxnmI10141949 = -187885911;    float EIAsnsxnmI43829868 = -991575937;    float EIAsnsxnmI55481837 = -827410482;    float EIAsnsxnmI74767994 = -517721613;    float EIAsnsxnmI57800437 = -308238758;    float EIAsnsxnmI61451259 = -500469896;    float EIAsnsxnmI22083297 = -455767039;     EIAsnsxnmI87511649 = EIAsnsxnmI60433851;     EIAsnsxnmI60433851 = EIAsnsxnmI93465487;     EIAsnsxnmI93465487 = EIAsnsxnmI15219556;     EIAsnsxnmI15219556 = EIAsnsxnmI19979606;     EIAsnsxnmI19979606 = EIAsnsxnmI11420070;     EIAsnsxnmI11420070 = EIAsnsxnmI99402144;     EIAsnsxnmI99402144 = EIAsnsxnmI88800508;     EIAsnsxnmI88800508 = EIAsnsxnmI34297641;     EIAsnsxnmI34297641 = EIAsnsxnmI17788930;     EIAsnsxnmI17788930 = EIAsnsxnmI17575192;     EIAsnsxnmI17575192 = EIAsnsxnmI22424099;     EIAsnsxnmI22424099 = EIAsnsxnmI48648068;     EIAsnsxnmI48648068 = EIAsnsxnmI33930492;     EIAsnsxnmI33930492 = EIAsnsxnmI26988719;     EIAsnsxnmI26988719 = EIAsnsxnmI80205764;     EIAsnsxnmI80205764 = EIAsnsxnmI24451988;     EIAsnsxnmI24451988 = EIAsnsxnmI21342270;     EIAsnsxnmI21342270 = EIAsnsxnmI46656595;     EIAsnsxnmI46656595 = EIAsnsxnmI30866223;     EIAsnsxnmI30866223 = EIAsnsxnmI59384173;     EIAsnsxnmI59384173 = EIAsnsxnmI72446108;     EIAsnsxnmI72446108 = EIAsnsxnmI89028429;     EIAsnsxnmI89028429 = EIAsnsxnmI82348639;     EIAsnsxnmI82348639 = EIAsnsxnmI56536302;     EIAsnsxnmI56536302 = EIAsnsxnmI53729921;     EIAsnsxnmI53729921 = EIAsnsxnmI53481264;     EIAsnsxnmI53481264 = EIAsnsxnmI89145107;     EIAsnsxnmI89145107 = EIAsnsxnmI50662476;     EIAsnsxnmI50662476 = EIAsnsxnmI32753407;     EIAsnsxnmI32753407 = EIAsnsxnmI86874036;     EIAsnsxnmI86874036 = EIAsnsxnmI5675949;     EIAsnsxnmI5675949 = EIAsnsxnmI30662362;     EIAsnsxnmI30662362 = EIAsnsxnmI40062615;     EIAsnsxnmI40062615 = EIAsnsxnmI19271338;     EIAsnsxnmI19271338 = EIAsnsxnmI83744218;     EIAsnsxnmI83744218 = EIAsnsxnmI39064497;     EIAsnsxnmI39064497 = EIAsnsxnmI43372011;     EIAsnsxnmI43372011 = EIAsnsxnmI76391633;     EIAsnsxnmI76391633 = EIAsnsxnmI1768674;     EIAsnsxnmI1768674 = EIAsnsxnmI65738874;     EIAsnsxnmI65738874 = EIAsnsxnmI12906028;     EIAsnsxnmI12906028 = EIAsnsxnmI59344672;     EIAsnsxnmI59344672 = EIAsnsxnmI92366152;     EIAsnsxnmI92366152 = EIAsnsxnmI33982540;     EIAsnsxnmI33982540 = EIAsnsxnmI41237461;     EIAsnsxnmI41237461 = EIAsnsxnmI73816912;     EIAsnsxnmI73816912 = EIAsnsxnmI97886360;     EIAsnsxnmI97886360 = EIAsnsxnmI54658778;     EIAsnsxnmI54658778 = EIAsnsxnmI57436692;     EIAsnsxnmI57436692 = EIAsnsxnmI63512918;     EIAsnsxnmI63512918 = EIAsnsxnmI65298013;     EIAsnsxnmI65298013 = EIAsnsxnmI84222119;     EIAsnsxnmI84222119 = EIAsnsxnmI2558395;     EIAsnsxnmI2558395 = EIAsnsxnmI86439077;     EIAsnsxnmI86439077 = EIAsnsxnmI15065541;     EIAsnsxnmI15065541 = EIAsnsxnmI71405421;     EIAsnsxnmI71405421 = EIAsnsxnmI11116849;     EIAsnsxnmI11116849 = EIAsnsxnmI58683253;     EIAsnsxnmI58683253 = EIAsnsxnmI66249685;     EIAsnsxnmI66249685 = EIAsnsxnmI57938805;     EIAsnsxnmI57938805 = EIAsnsxnmI10257037;     EIAsnsxnmI10257037 = EIAsnsxnmI38138033;     EIAsnsxnmI38138033 = EIAsnsxnmI1544235;     EIAsnsxnmI1544235 = EIAsnsxnmI30914893;     EIAsnsxnmI30914893 = EIAsnsxnmI11899244;     EIAsnsxnmI11899244 = EIAsnsxnmI91761737;     EIAsnsxnmI91761737 = EIAsnsxnmI8585453;     EIAsnsxnmI8585453 = EIAsnsxnmI14659155;     EIAsnsxnmI14659155 = EIAsnsxnmI43244500;     EIAsnsxnmI43244500 = EIAsnsxnmI41141267;     EIAsnsxnmI41141267 = EIAsnsxnmI81079977;     EIAsnsxnmI81079977 = EIAsnsxnmI44950636;     EIAsnsxnmI44950636 = EIAsnsxnmI44887922;     EIAsnsxnmI44887922 = EIAsnsxnmI65127349;     EIAsnsxnmI65127349 = EIAsnsxnmI46478146;     EIAsnsxnmI46478146 = EIAsnsxnmI13101437;     EIAsnsxnmI13101437 = EIAsnsxnmI96662277;     EIAsnsxnmI96662277 = EIAsnsxnmI48366099;     EIAsnsxnmI48366099 = EIAsnsxnmI15298842;     EIAsnsxnmI15298842 = EIAsnsxnmI79913008;     EIAsnsxnmI79913008 = EIAsnsxnmI55594904;     EIAsnsxnmI55594904 = EIAsnsxnmI34486330;     EIAsnsxnmI34486330 = EIAsnsxnmI93225784;     EIAsnsxnmI93225784 = EIAsnsxnmI69240488;     EIAsnsxnmI69240488 = EIAsnsxnmI21576024;     EIAsnsxnmI21576024 = EIAsnsxnmI21453829;     EIAsnsxnmI21453829 = EIAsnsxnmI28103967;     EIAsnsxnmI28103967 = EIAsnsxnmI53623538;     EIAsnsxnmI53623538 = EIAsnsxnmI4205797;     EIAsnsxnmI4205797 = EIAsnsxnmI12338797;     EIAsnsxnmI12338797 = EIAsnsxnmI27947649;     EIAsnsxnmI27947649 = EIAsnsxnmI84688757;     EIAsnsxnmI84688757 = EIAsnsxnmI10141949;     EIAsnsxnmI10141949 = EIAsnsxnmI43829868;     EIAsnsxnmI43829868 = EIAsnsxnmI55481837;     EIAsnsxnmI55481837 = EIAsnsxnmI74767994;     EIAsnsxnmI74767994 = EIAsnsxnmI57800437;     EIAsnsxnmI57800437 = EIAsnsxnmI61451259;     EIAsnsxnmI61451259 = EIAsnsxnmI22083297;     EIAsnsxnmI22083297 = EIAsnsxnmI87511649;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void CxnhRDceZK16279124() {     float vSSErBNjHf297817 = -590807730;    float vSSErBNjHf47204739 = -452787963;    float vSSErBNjHf11218287 = -492860117;    float vSSErBNjHf23160381 = -698645228;    float vSSErBNjHf13490710 = -212566798;    float vSSErBNjHf54730140 = -970160957;    float vSSErBNjHf20609903 = -221850920;    float vSSErBNjHf15519622 = 88157908;    float vSSErBNjHf29702452 = -550016586;    float vSSErBNjHf24007635 = -364517393;    float vSSErBNjHf45062574 = 6919134;    float vSSErBNjHf54374604 = -685158230;    float vSSErBNjHf18791371 = -213524421;    float vSSErBNjHf83554570 = -855186668;    float vSSErBNjHf50295271 = 42717605;    float vSSErBNjHf8630834 = -425108473;    float vSSErBNjHf80203805 = -930296687;    float vSSErBNjHf4900755 = -61175568;    float vSSErBNjHf47817226 = -554127979;    float vSSErBNjHf33520720 = -396516572;    float vSSErBNjHf39558230 = -496416709;    float vSSErBNjHf1493928 = -469622867;    float vSSErBNjHf27788725 = -326422827;    float vSSErBNjHf26855769 = -145358074;    float vSSErBNjHf62430562 = -870479185;    float vSSErBNjHf35048566 = -545301400;    float vSSErBNjHf64896800 = -573402870;    float vSSErBNjHf56498032 = -790902544;    float vSSErBNjHf67279529 = -102578642;    float vSSErBNjHf85504521 = -523785530;    float vSSErBNjHf31310033 = -487605082;    float vSSErBNjHf8994772 = -370408691;    float vSSErBNjHf76708310 = -488533587;    float vSSErBNjHf17138988 = -615643385;    float vSSErBNjHf2331870 = -885977590;    float vSSErBNjHf78968333 = -627066061;    float vSSErBNjHf75828558 = 6135323;    float vSSErBNjHf1076034 = -665827515;    float vSSErBNjHf82167019 = 4383380;    float vSSErBNjHf28033403 = -989533836;    float vSSErBNjHf27170183 = -261958886;    float vSSErBNjHf20608483 = 5004619;    float vSSErBNjHf94228142 = -26031321;    float vSSErBNjHf36994690 = -90883568;    float vSSErBNjHf13991030 = -868111348;    float vSSErBNjHf14865591 = -659766263;    float vSSErBNjHf51398932 = -780349148;    float vSSErBNjHf27326327 = -701004975;    float vSSErBNjHf98722826 = -901743978;    float vSSErBNjHf4387113 = -54690832;    float vSSErBNjHf81840412 = -376061877;    float vSSErBNjHf93474560 = -42772135;    float vSSErBNjHf18707270 = -895539688;    float vSSErBNjHf47258120 = -16215460;    float vSSErBNjHf76720893 = -646427784;    float vSSErBNjHf98803888 = -21184864;    float vSSErBNjHf19416014 = -26365136;    float vSSErBNjHf84362518 = -247502043;    float vSSErBNjHf60729819 = -828166044;    float vSSErBNjHf78442144 = -667265398;    float vSSErBNjHf89833339 = -296758087;    float vSSErBNjHf64111870 = -430948377;    float vSSErBNjHf48240092 = -809263451;    float vSSErBNjHf44197930 = 73768944;    float vSSErBNjHf92697602 = -876912312;    float vSSErBNjHf36067802 = -622672176;    float vSSErBNjHf77666293 = -96624644;    float vSSErBNjHf1652383 = -597881037;    float vSSErBNjHf81222701 = -969209079;    float vSSErBNjHf71326938 = -330216334;    float vSSErBNjHf32802276 = -331243797;    float vSSErBNjHf79127771 = -164469173;    float vSSErBNjHf22733735 = 34441052;    float vSSErBNjHf19783823 = -564594144;    float vSSErBNjHf6350538 = -34557687;    float vSSErBNjHf18949747 = -401421328;    float vSSErBNjHf7265786 = -343591547;    float vSSErBNjHf90794034 = -135539260;    float vSSErBNjHf12864739 = -277246726;    float vSSErBNjHf47564971 = -110712922;    float vSSErBNjHf83649634 = -764952253;    float vSSErBNjHf37570474 = -872397895;    float vSSErBNjHf57775205 = -889158566;    float vSSErBNjHf62892417 = 52112190;    float vSSErBNjHf3664110 = -47723654;    float vSSErBNjHf37835472 = -344832948;    float vSSErBNjHf90287502 = -474869004;    float vSSErBNjHf29450191 = -372318127;    float vSSErBNjHf40418095 = -969215602;    float vSSErBNjHf3527981 = -764792726;    float vSSErBNjHf59552319 = -500700926;    float vSSErBNjHf91466039 = -746362634;    float vSSErBNjHf40346214 = -837661471;    float vSSErBNjHf3724876 = -328351222;    float vSSErBNjHf38200063 = -592775750;    float vSSErBNjHf63058312 = -831010509;    float vSSErBNjHf72368391 = -185731930;    float vSSErBNjHf50030212 = 199735;    float vSSErBNjHf44297088 = -213971256;    float vSSErBNjHf77923228 = -590807730;     vSSErBNjHf297817 = vSSErBNjHf47204739;     vSSErBNjHf47204739 = vSSErBNjHf11218287;     vSSErBNjHf11218287 = vSSErBNjHf23160381;     vSSErBNjHf23160381 = vSSErBNjHf13490710;     vSSErBNjHf13490710 = vSSErBNjHf54730140;     vSSErBNjHf54730140 = vSSErBNjHf20609903;     vSSErBNjHf20609903 = vSSErBNjHf15519622;     vSSErBNjHf15519622 = vSSErBNjHf29702452;     vSSErBNjHf29702452 = vSSErBNjHf24007635;     vSSErBNjHf24007635 = vSSErBNjHf45062574;     vSSErBNjHf45062574 = vSSErBNjHf54374604;     vSSErBNjHf54374604 = vSSErBNjHf18791371;     vSSErBNjHf18791371 = vSSErBNjHf83554570;     vSSErBNjHf83554570 = vSSErBNjHf50295271;     vSSErBNjHf50295271 = vSSErBNjHf8630834;     vSSErBNjHf8630834 = vSSErBNjHf80203805;     vSSErBNjHf80203805 = vSSErBNjHf4900755;     vSSErBNjHf4900755 = vSSErBNjHf47817226;     vSSErBNjHf47817226 = vSSErBNjHf33520720;     vSSErBNjHf33520720 = vSSErBNjHf39558230;     vSSErBNjHf39558230 = vSSErBNjHf1493928;     vSSErBNjHf1493928 = vSSErBNjHf27788725;     vSSErBNjHf27788725 = vSSErBNjHf26855769;     vSSErBNjHf26855769 = vSSErBNjHf62430562;     vSSErBNjHf62430562 = vSSErBNjHf35048566;     vSSErBNjHf35048566 = vSSErBNjHf64896800;     vSSErBNjHf64896800 = vSSErBNjHf56498032;     vSSErBNjHf56498032 = vSSErBNjHf67279529;     vSSErBNjHf67279529 = vSSErBNjHf85504521;     vSSErBNjHf85504521 = vSSErBNjHf31310033;     vSSErBNjHf31310033 = vSSErBNjHf8994772;     vSSErBNjHf8994772 = vSSErBNjHf76708310;     vSSErBNjHf76708310 = vSSErBNjHf17138988;     vSSErBNjHf17138988 = vSSErBNjHf2331870;     vSSErBNjHf2331870 = vSSErBNjHf78968333;     vSSErBNjHf78968333 = vSSErBNjHf75828558;     vSSErBNjHf75828558 = vSSErBNjHf1076034;     vSSErBNjHf1076034 = vSSErBNjHf82167019;     vSSErBNjHf82167019 = vSSErBNjHf28033403;     vSSErBNjHf28033403 = vSSErBNjHf27170183;     vSSErBNjHf27170183 = vSSErBNjHf20608483;     vSSErBNjHf20608483 = vSSErBNjHf94228142;     vSSErBNjHf94228142 = vSSErBNjHf36994690;     vSSErBNjHf36994690 = vSSErBNjHf13991030;     vSSErBNjHf13991030 = vSSErBNjHf14865591;     vSSErBNjHf14865591 = vSSErBNjHf51398932;     vSSErBNjHf51398932 = vSSErBNjHf27326327;     vSSErBNjHf27326327 = vSSErBNjHf98722826;     vSSErBNjHf98722826 = vSSErBNjHf4387113;     vSSErBNjHf4387113 = vSSErBNjHf81840412;     vSSErBNjHf81840412 = vSSErBNjHf93474560;     vSSErBNjHf93474560 = vSSErBNjHf18707270;     vSSErBNjHf18707270 = vSSErBNjHf47258120;     vSSErBNjHf47258120 = vSSErBNjHf76720893;     vSSErBNjHf76720893 = vSSErBNjHf98803888;     vSSErBNjHf98803888 = vSSErBNjHf19416014;     vSSErBNjHf19416014 = vSSErBNjHf84362518;     vSSErBNjHf84362518 = vSSErBNjHf60729819;     vSSErBNjHf60729819 = vSSErBNjHf78442144;     vSSErBNjHf78442144 = vSSErBNjHf89833339;     vSSErBNjHf89833339 = vSSErBNjHf64111870;     vSSErBNjHf64111870 = vSSErBNjHf48240092;     vSSErBNjHf48240092 = vSSErBNjHf44197930;     vSSErBNjHf44197930 = vSSErBNjHf92697602;     vSSErBNjHf92697602 = vSSErBNjHf36067802;     vSSErBNjHf36067802 = vSSErBNjHf77666293;     vSSErBNjHf77666293 = vSSErBNjHf1652383;     vSSErBNjHf1652383 = vSSErBNjHf81222701;     vSSErBNjHf81222701 = vSSErBNjHf71326938;     vSSErBNjHf71326938 = vSSErBNjHf32802276;     vSSErBNjHf32802276 = vSSErBNjHf79127771;     vSSErBNjHf79127771 = vSSErBNjHf22733735;     vSSErBNjHf22733735 = vSSErBNjHf19783823;     vSSErBNjHf19783823 = vSSErBNjHf6350538;     vSSErBNjHf6350538 = vSSErBNjHf18949747;     vSSErBNjHf18949747 = vSSErBNjHf7265786;     vSSErBNjHf7265786 = vSSErBNjHf90794034;     vSSErBNjHf90794034 = vSSErBNjHf12864739;     vSSErBNjHf12864739 = vSSErBNjHf47564971;     vSSErBNjHf47564971 = vSSErBNjHf83649634;     vSSErBNjHf83649634 = vSSErBNjHf37570474;     vSSErBNjHf37570474 = vSSErBNjHf57775205;     vSSErBNjHf57775205 = vSSErBNjHf62892417;     vSSErBNjHf62892417 = vSSErBNjHf3664110;     vSSErBNjHf3664110 = vSSErBNjHf37835472;     vSSErBNjHf37835472 = vSSErBNjHf90287502;     vSSErBNjHf90287502 = vSSErBNjHf29450191;     vSSErBNjHf29450191 = vSSErBNjHf40418095;     vSSErBNjHf40418095 = vSSErBNjHf3527981;     vSSErBNjHf3527981 = vSSErBNjHf59552319;     vSSErBNjHf59552319 = vSSErBNjHf91466039;     vSSErBNjHf91466039 = vSSErBNjHf40346214;     vSSErBNjHf40346214 = vSSErBNjHf3724876;     vSSErBNjHf3724876 = vSSErBNjHf38200063;     vSSErBNjHf38200063 = vSSErBNjHf63058312;     vSSErBNjHf63058312 = vSSErBNjHf72368391;     vSSErBNjHf72368391 = vSSErBNjHf50030212;     vSSErBNjHf50030212 = vSSErBNjHf44297088;     vSSErBNjHf44297088 = vSSErBNjHf77923228;     vSSErBNjHf77923228 = vSSErBNjHf297817;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void cgrkgFIOGC43873380() {     float oxmUbYGQZy25883094 = -15840831;    float oxmUbYGQZy43601882 = -708265740;    float oxmUbYGQZy44097463 = -295321653;    float oxmUbYGQZy68882311 = -705968122;    float oxmUbYGQZy82832714 = -259489085;    float oxmUbYGQZy71739416 = -25141960;    float oxmUbYGQZy25930747 = -804122127;    float oxmUbYGQZy30529746 = -292523972;    float oxmUbYGQZy55031744 = 53759370;    float oxmUbYGQZy43166017 = -699078917;    float oxmUbYGQZy59396127 = -303508753;    float oxmUbYGQZy89692260 = -28867136;    float oxmUbYGQZy95372148 = 22227213;    float oxmUbYGQZy75114287 = -829710962;    float oxmUbYGQZy6564160 = -945828352;    float oxmUbYGQZy16351877 = -861299950;    float oxmUbYGQZy80001921 = -618616481;    float oxmUbYGQZy26016659 = -577452928;    float oxmUbYGQZy9281947 = -237101837;    float oxmUbYGQZy94682186 = -370955948;    float oxmUbYGQZy40567496 = -958116490;    float oxmUbYGQZy2997035 = -889355797;    float oxmUbYGQZy31552523 = -370514933;    float oxmUbYGQZy28569811 = -4207053;    float oxmUbYGQZy17333701 = -437975327;    float oxmUbYGQZy64537703 = -109751942;    float oxmUbYGQZy47284710 = -139216004;    float oxmUbYGQZy20396833 = 79435224;    float oxmUbYGQZy75156741 = -338872492;    float oxmUbYGQZy38827013 = -432695092;    float oxmUbYGQZy53356667 = -266252113;    float oxmUbYGQZy46184704 = -644204525;    float oxmUbYGQZy97895362 = -936354724;    float oxmUbYGQZy70726059 = -671788357;    float oxmUbYGQZy3736858 = -487413501;    float oxmUbYGQZy83760183 = -44660777;    float oxmUbYGQZy25473943 = -474376622;    float oxmUbYGQZy76648720 = -514542340;    float oxmUbYGQZy23090598 = -453954942;    float oxmUbYGQZy36817077 = -359504156;    float oxmUbYGQZy74321463 = -837019076;    float oxmUbYGQZy64618073 = -504033885;    float oxmUbYGQZy43428362 = -54637702;    float oxmUbYGQZy7787970 = -559299167;    float oxmUbYGQZy5971906 = -807132465;    float oxmUbYGQZy81265913 = -82313800;    float oxmUbYGQZy51167386 = -812818008;    float oxmUbYGQZy35439098 = -894187822;    float oxmUbYGQZy49534147 = 98579796;    float oxmUbYGQZy58197107 = 97286015;    float oxmUbYGQZy91976659 = -624720479;    float oxmUbYGQZy20733140 = -220851314;    float oxmUbYGQZy36780873 = -363438236;    float oxmUbYGQZy16157029 = -331279242;    float oxmUbYGQZy3305885 = -21518201;    float oxmUbYGQZy22886059 = -126485035;    float oxmUbYGQZy12049360 = -237750808;    float oxmUbYGQZy15527652 = -191114600;    float oxmUbYGQZy51548610 = -167992795;    float oxmUbYGQZy18295012 = -49737144;    float oxmUbYGQZy24454707 = -885925956;    float oxmUbYGQZy5533915 = -783557351;    float oxmUbYGQZy55373004 = -953651480;    float oxmUbYGQZy16204732 = -513545539;    float oxmUbYGQZy89809350 = -332826805;    float oxmUbYGQZy13211424 = -659304229;    float oxmUbYGQZy91796897 = -92512413;    float oxmUbYGQZy24646090 = -305984431;    float oxmUbYGQZy71377430 = -242297461;    float oxmUbYGQZy22803976 = -801167576;    float oxmUbYGQZy90877933 = -286923329;    float oxmUbYGQZy3353202 = -4074142;    float oxmUbYGQZy2926061 = -23497987;    float oxmUbYGQZy72464870 = -877597682;    float oxmUbYGQZy20360723 = -533936873;    float oxmUbYGQZy75949422 = -354082605;    float oxmUbYGQZy59568673 = -734718095;    float oxmUbYGQZy23764554 = -811215766;    float oxmUbYGQZy22597905 = -197074589;    float oxmUbYGQZy36067788 = -255661527;    float oxmUbYGQZy13370317 = -296933934;    float oxmUbYGQZy11845612 = -245028183;    float oxmUbYGQZy70862685 = 80855428;    float oxmUbYGQZy16959634 = -336158508;    float oxmUbYGQZy46850353 = -807974613;    float oxmUbYGQZy32623527 = 54599201;    float oxmUbYGQZy9403832 = -180766289;    float oxmUbYGQZy81738333 = -505075482;    float oxmUbYGQZy67420174 = -550270156;    float oxmUbYGQZy80850798 = -260928467;    float oxmUbYGQZy71710824 = -806909970;    float oxmUbYGQZy9946292 = -183262022;    float oxmUbYGQZy25100111 = -246549545;    float oxmUbYGQZy4795586 = -304217799;    float oxmUbYGQZy12362370 = -473578200;    float oxmUbYGQZy68787549 = 46538275;    float oxmUbYGQZy9245069 = -550382406;    float oxmUbYGQZy27223630 = -541092164;    float oxmUbYGQZy17978620 = -126472363;    float oxmUbYGQZy92760482 = -15840831;     oxmUbYGQZy25883094 = oxmUbYGQZy43601882;     oxmUbYGQZy43601882 = oxmUbYGQZy44097463;     oxmUbYGQZy44097463 = oxmUbYGQZy68882311;     oxmUbYGQZy68882311 = oxmUbYGQZy82832714;     oxmUbYGQZy82832714 = oxmUbYGQZy71739416;     oxmUbYGQZy71739416 = oxmUbYGQZy25930747;     oxmUbYGQZy25930747 = oxmUbYGQZy30529746;     oxmUbYGQZy30529746 = oxmUbYGQZy55031744;     oxmUbYGQZy55031744 = oxmUbYGQZy43166017;     oxmUbYGQZy43166017 = oxmUbYGQZy59396127;     oxmUbYGQZy59396127 = oxmUbYGQZy89692260;     oxmUbYGQZy89692260 = oxmUbYGQZy95372148;     oxmUbYGQZy95372148 = oxmUbYGQZy75114287;     oxmUbYGQZy75114287 = oxmUbYGQZy6564160;     oxmUbYGQZy6564160 = oxmUbYGQZy16351877;     oxmUbYGQZy16351877 = oxmUbYGQZy80001921;     oxmUbYGQZy80001921 = oxmUbYGQZy26016659;     oxmUbYGQZy26016659 = oxmUbYGQZy9281947;     oxmUbYGQZy9281947 = oxmUbYGQZy94682186;     oxmUbYGQZy94682186 = oxmUbYGQZy40567496;     oxmUbYGQZy40567496 = oxmUbYGQZy2997035;     oxmUbYGQZy2997035 = oxmUbYGQZy31552523;     oxmUbYGQZy31552523 = oxmUbYGQZy28569811;     oxmUbYGQZy28569811 = oxmUbYGQZy17333701;     oxmUbYGQZy17333701 = oxmUbYGQZy64537703;     oxmUbYGQZy64537703 = oxmUbYGQZy47284710;     oxmUbYGQZy47284710 = oxmUbYGQZy20396833;     oxmUbYGQZy20396833 = oxmUbYGQZy75156741;     oxmUbYGQZy75156741 = oxmUbYGQZy38827013;     oxmUbYGQZy38827013 = oxmUbYGQZy53356667;     oxmUbYGQZy53356667 = oxmUbYGQZy46184704;     oxmUbYGQZy46184704 = oxmUbYGQZy97895362;     oxmUbYGQZy97895362 = oxmUbYGQZy70726059;     oxmUbYGQZy70726059 = oxmUbYGQZy3736858;     oxmUbYGQZy3736858 = oxmUbYGQZy83760183;     oxmUbYGQZy83760183 = oxmUbYGQZy25473943;     oxmUbYGQZy25473943 = oxmUbYGQZy76648720;     oxmUbYGQZy76648720 = oxmUbYGQZy23090598;     oxmUbYGQZy23090598 = oxmUbYGQZy36817077;     oxmUbYGQZy36817077 = oxmUbYGQZy74321463;     oxmUbYGQZy74321463 = oxmUbYGQZy64618073;     oxmUbYGQZy64618073 = oxmUbYGQZy43428362;     oxmUbYGQZy43428362 = oxmUbYGQZy7787970;     oxmUbYGQZy7787970 = oxmUbYGQZy5971906;     oxmUbYGQZy5971906 = oxmUbYGQZy81265913;     oxmUbYGQZy81265913 = oxmUbYGQZy51167386;     oxmUbYGQZy51167386 = oxmUbYGQZy35439098;     oxmUbYGQZy35439098 = oxmUbYGQZy49534147;     oxmUbYGQZy49534147 = oxmUbYGQZy58197107;     oxmUbYGQZy58197107 = oxmUbYGQZy91976659;     oxmUbYGQZy91976659 = oxmUbYGQZy20733140;     oxmUbYGQZy20733140 = oxmUbYGQZy36780873;     oxmUbYGQZy36780873 = oxmUbYGQZy16157029;     oxmUbYGQZy16157029 = oxmUbYGQZy3305885;     oxmUbYGQZy3305885 = oxmUbYGQZy22886059;     oxmUbYGQZy22886059 = oxmUbYGQZy12049360;     oxmUbYGQZy12049360 = oxmUbYGQZy15527652;     oxmUbYGQZy15527652 = oxmUbYGQZy51548610;     oxmUbYGQZy51548610 = oxmUbYGQZy18295012;     oxmUbYGQZy18295012 = oxmUbYGQZy24454707;     oxmUbYGQZy24454707 = oxmUbYGQZy5533915;     oxmUbYGQZy5533915 = oxmUbYGQZy55373004;     oxmUbYGQZy55373004 = oxmUbYGQZy16204732;     oxmUbYGQZy16204732 = oxmUbYGQZy89809350;     oxmUbYGQZy89809350 = oxmUbYGQZy13211424;     oxmUbYGQZy13211424 = oxmUbYGQZy91796897;     oxmUbYGQZy91796897 = oxmUbYGQZy24646090;     oxmUbYGQZy24646090 = oxmUbYGQZy71377430;     oxmUbYGQZy71377430 = oxmUbYGQZy22803976;     oxmUbYGQZy22803976 = oxmUbYGQZy90877933;     oxmUbYGQZy90877933 = oxmUbYGQZy3353202;     oxmUbYGQZy3353202 = oxmUbYGQZy2926061;     oxmUbYGQZy2926061 = oxmUbYGQZy72464870;     oxmUbYGQZy72464870 = oxmUbYGQZy20360723;     oxmUbYGQZy20360723 = oxmUbYGQZy75949422;     oxmUbYGQZy75949422 = oxmUbYGQZy59568673;     oxmUbYGQZy59568673 = oxmUbYGQZy23764554;     oxmUbYGQZy23764554 = oxmUbYGQZy22597905;     oxmUbYGQZy22597905 = oxmUbYGQZy36067788;     oxmUbYGQZy36067788 = oxmUbYGQZy13370317;     oxmUbYGQZy13370317 = oxmUbYGQZy11845612;     oxmUbYGQZy11845612 = oxmUbYGQZy70862685;     oxmUbYGQZy70862685 = oxmUbYGQZy16959634;     oxmUbYGQZy16959634 = oxmUbYGQZy46850353;     oxmUbYGQZy46850353 = oxmUbYGQZy32623527;     oxmUbYGQZy32623527 = oxmUbYGQZy9403832;     oxmUbYGQZy9403832 = oxmUbYGQZy81738333;     oxmUbYGQZy81738333 = oxmUbYGQZy67420174;     oxmUbYGQZy67420174 = oxmUbYGQZy80850798;     oxmUbYGQZy80850798 = oxmUbYGQZy71710824;     oxmUbYGQZy71710824 = oxmUbYGQZy9946292;     oxmUbYGQZy9946292 = oxmUbYGQZy25100111;     oxmUbYGQZy25100111 = oxmUbYGQZy4795586;     oxmUbYGQZy4795586 = oxmUbYGQZy12362370;     oxmUbYGQZy12362370 = oxmUbYGQZy68787549;     oxmUbYGQZy68787549 = oxmUbYGQZy9245069;     oxmUbYGQZy9245069 = oxmUbYGQZy27223630;     oxmUbYGQZy27223630 = oxmUbYGQZy17978620;     oxmUbYGQZy17978620 = oxmUbYGQZy92760482;     oxmUbYGQZy92760482 = oxmUbYGQZy25883094;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void nfcwSooWpj65250995() {     float JBGBYqqbOv86654598 = -565270304;    float JBGBYqqbOv33972781 = -997430334;    float JBGBYqqbOv20872293 = -831539187;    float JBGBYqqbOv67392033 = -902819163;    float JBGBYqqbOv26179874 = -452574196;    float JBGBYqqbOv77331016 = -418789031;    float JBGBYqqbOv7520417 = -144979777;    float JBGBYqqbOv9464740 = 20033883;    float JBGBYqqbOv7448651 = -861126666;    float JBGBYqqbOv67027662 = -206855664;    float JBGBYqqbOv98117712 = -806302912;    float JBGBYqqbOv84280016 = -659697427;    float JBGBYqqbOv45398582 = -221204180;    float JBGBYqqbOv51224395 = -974053108;    float JBGBYqqbOv32530660 = -443412150;    float JBGBYqqbOv47624806 = -464459058;    float JBGBYqqbOv73669688 = -608761423;    float JBGBYqqbOv90666398 = -306540039;    float JBGBYqqbOv72332389 = -928682482;    float JBGBYqqbOv92866906 = 26774987;    float JBGBYqqbOv63295076 = -281687096;    float JBGBYqqbOv40770647 = -963729621;    float JBGBYqqbOv3613147 = -703775840;    float JBGBYqqbOv13990554 = 74447142;    float JBGBYqqbOv56785967 = -84084812;    float JBGBYqqbOv30500325 = 7883950;    float JBGBYqqbOv47734412 = -594722486;    float JBGBYqqbOv86752957 = 5454410;    float JBGBYqqbOv81186674 = -941500072;    float JBGBYqqbOv1878059 = -540923927;    float JBGBYqqbOv97304745 = -728445576;    float JBGBYqqbOv74786936 = -765147869;    float JBGBYqqbOv75262187 = -285485708;    float JBGBYqqbOv60212516 = -103450931;    float JBGBYqqbOv99715666 = -244009866;    float JBGBYqqbOv39812639 = -506682481;    float JBGBYqqbOv81440365 = -278439112;    float JBGBYqqbOv23716172 = -159977370;    float JBGBYqqbOv47470501 = -829827040;    float JBGBYqqbOv48305409 = -491251978;    float JBGBYqqbOv35950088 = 85156872;    float JBGBYqqbOv33443189 = -281708250;    float JBGBYqqbOv12495523 = 24052396;    float JBGBYqqbOv4190110 = -52321771;    float JBGBYqqbOv77908434 = -601548217;    float JBGBYqqbOv48538710 = -136319531;    float JBGBYqqbOv85419672 = -958650929;    float JBGBYqqbOv66823348 = -881735727;    float JBGBYqqbOv1552643 = -986887381;    float JBGBYqqbOv15950423 = -229744088;    float JBGBYqqbOv2790878 = -124229652;    float JBGBYqqbOv20925010 = -536643617;    float JBGBYqqbOv16757334 = -995143281;    float JBGBYqqbOv69541666 = -547635871;    float JBGBYqqbOv1955919 = -17958664;    float JBGBYqqbOv45883951 = -601540683;    float JBGBYqqbOv30359635 = -193654494;    float JBGBYqqbOv6881740 = -805986330;    float JBGBYqqbOv10606066 = -718734352;    float JBGBYqqbOv95679548 = -360458146;    float JBGBYqqbOv29596604 = -824066545;    float JBGBYqqbOv20767459 = -50434187;    float JBGBYqqbOv28278066 = -38466046;    float JBGBYqqbOv5570592 = -220202740;    float JBGBYqqbOv69722916 = -478410088;    float JBGBYqqbOv23330776 = 58844957;    float JBGBYqqbOv9017829 = -274211719;    float JBGBYqqbOv85186066 = -17753249;    float JBGBYqqbOv51508729 = -630043243;    float JBGBYqqbOv92718021 = -936729670;    float JBGBYqqbOv66184440 = -86019947;    float JBGBYqqbOv49953516 = -348784053;    float JBGBYqqbOv43195898 = -476712999;    float JBGBYqqbOv24026981 = -337430504;    float JBGBYqqbOv56916818 = 41618114;    float JBGBYqqbOv29851888 = -999978847;    float JBGBYqqbOv28275125 = -887782017;    float JBGBYqqbOv99423037 = -551454070;    float JBGBYqqbOv36082119 = -324004641;    float JBGBYqqbOv8247258 = -947765281;    float JBGBYqqbOv45080653 = -33465121;    float JBGBYqqbOv80911064 = -712986760;    float JBGBYqqbOv85200315 = -7658210;    float JBGBYqqbOv65236251 = -611755985;    float JBGBYqqbOv99087181 = -316694276;    float JBGBYqqbOv76379736 = -91801960;    float JBGBYqqbOv58029603 = -770004588;    float JBGBYqqbOv5720521 = -737849837;    float JBGBYqqbOv58256597 = 14507733;    float JBGBYqqbOv53831716 = -642469183;    float JBGBYqqbOv9453004 = -213027987;    float JBGBYqqbOv74558626 = -472452782;    float JBGBYqqbOv13110106 = -441243019;    float JBGBYqqbOv51790952 = -369368895;    float JBGBYqqbOv18708805 = -667185433;    float JBGBYqqbOv15182630 = -864408941;    float JBGBYqqbOv5165123 = -143242205;    float JBGBYqqbOv6924931 = -755744865;    float JBGBYqqbOv34467193 = -573911683;    float JBGBYqqbOv54577658 = -565270304;     JBGBYqqbOv86654598 = JBGBYqqbOv33972781;     JBGBYqqbOv33972781 = JBGBYqqbOv20872293;     JBGBYqqbOv20872293 = JBGBYqqbOv67392033;     JBGBYqqbOv67392033 = JBGBYqqbOv26179874;     JBGBYqqbOv26179874 = JBGBYqqbOv77331016;     JBGBYqqbOv77331016 = JBGBYqqbOv7520417;     JBGBYqqbOv7520417 = JBGBYqqbOv9464740;     JBGBYqqbOv9464740 = JBGBYqqbOv7448651;     JBGBYqqbOv7448651 = JBGBYqqbOv67027662;     JBGBYqqbOv67027662 = JBGBYqqbOv98117712;     JBGBYqqbOv98117712 = JBGBYqqbOv84280016;     JBGBYqqbOv84280016 = JBGBYqqbOv45398582;     JBGBYqqbOv45398582 = JBGBYqqbOv51224395;     JBGBYqqbOv51224395 = JBGBYqqbOv32530660;     JBGBYqqbOv32530660 = JBGBYqqbOv47624806;     JBGBYqqbOv47624806 = JBGBYqqbOv73669688;     JBGBYqqbOv73669688 = JBGBYqqbOv90666398;     JBGBYqqbOv90666398 = JBGBYqqbOv72332389;     JBGBYqqbOv72332389 = JBGBYqqbOv92866906;     JBGBYqqbOv92866906 = JBGBYqqbOv63295076;     JBGBYqqbOv63295076 = JBGBYqqbOv40770647;     JBGBYqqbOv40770647 = JBGBYqqbOv3613147;     JBGBYqqbOv3613147 = JBGBYqqbOv13990554;     JBGBYqqbOv13990554 = JBGBYqqbOv56785967;     JBGBYqqbOv56785967 = JBGBYqqbOv30500325;     JBGBYqqbOv30500325 = JBGBYqqbOv47734412;     JBGBYqqbOv47734412 = JBGBYqqbOv86752957;     JBGBYqqbOv86752957 = JBGBYqqbOv81186674;     JBGBYqqbOv81186674 = JBGBYqqbOv1878059;     JBGBYqqbOv1878059 = JBGBYqqbOv97304745;     JBGBYqqbOv97304745 = JBGBYqqbOv74786936;     JBGBYqqbOv74786936 = JBGBYqqbOv75262187;     JBGBYqqbOv75262187 = JBGBYqqbOv60212516;     JBGBYqqbOv60212516 = JBGBYqqbOv99715666;     JBGBYqqbOv99715666 = JBGBYqqbOv39812639;     JBGBYqqbOv39812639 = JBGBYqqbOv81440365;     JBGBYqqbOv81440365 = JBGBYqqbOv23716172;     JBGBYqqbOv23716172 = JBGBYqqbOv47470501;     JBGBYqqbOv47470501 = JBGBYqqbOv48305409;     JBGBYqqbOv48305409 = JBGBYqqbOv35950088;     JBGBYqqbOv35950088 = JBGBYqqbOv33443189;     JBGBYqqbOv33443189 = JBGBYqqbOv12495523;     JBGBYqqbOv12495523 = JBGBYqqbOv4190110;     JBGBYqqbOv4190110 = JBGBYqqbOv77908434;     JBGBYqqbOv77908434 = JBGBYqqbOv48538710;     JBGBYqqbOv48538710 = JBGBYqqbOv85419672;     JBGBYqqbOv85419672 = JBGBYqqbOv66823348;     JBGBYqqbOv66823348 = JBGBYqqbOv1552643;     JBGBYqqbOv1552643 = JBGBYqqbOv15950423;     JBGBYqqbOv15950423 = JBGBYqqbOv2790878;     JBGBYqqbOv2790878 = JBGBYqqbOv20925010;     JBGBYqqbOv20925010 = JBGBYqqbOv16757334;     JBGBYqqbOv16757334 = JBGBYqqbOv69541666;     JBGBYqqbOv69541666 = JBGBYqqbOv1955919;     JBGBYqqbOv1955919 = JBGBYqqbOv45883951;     JBGBYqqbOv45883951 = JBGBYqqbOv30359635;     JBGBYqqbOv30359635 = JBGBYqqbOv6881740;     JBGBYqqbOv6881740 = JBGBYqqbOv10606066;     JBGBYqqbOv10606066 = JBGBYqqbOv95679548;     JBGBYqqbOv95679548 = JBGBYqqbOv29596604;     JBGBYqqbOv29596604 = JBGBYqqbOv20767459;     JBGBYqqbOv20767459 = JBGBYqqbOv28278066;     JBGBYqqbOv28278066 = JBGBYqqbOv5570592;     JBGBYqqbOv5570592 = JBGBYqqbOv69722916;     JBGBYqqbOv69722916 = JBGBYqqbOv23330776;     JBGBYqqbOv23330776 = JBGBYqqbOv9017829;     JBGBYqqbOv9017829 = JBGBYqqbOv85186066;     JBGBYqqbOv85186066 = JBGBYqqbOv51508729;     JBGBYqqbOv51508729 = JBGBYqqbOv92718021;     JBGBYqqbOv92718021 = JBGBYqqbOv66184440;     JBGBYqqbOv66184440 = JBGBYqqbOv49953516;     JBGBYqqbOv49953516 = JBGBYqqbOv43195898;     JBGBYqqbOv43195898 = JBGBYqqbOv24026981;     JBGBYqqbOv24026981 = JBGBYqqbOv56916818;     JBGBYqqbOv56916818 = JBGBYqqbOv29851888;     JBGBYqqbOv29851888 = JBGBYqqbOv28275125;     JBGBYqqbOv28275125 = JBGBYqqbOv99423037;     JBGBYqqbOv99423037 = JBGBYqqbOv36082119;     JBGBYqqbOv36082119 = JBGBYqqbOv8247258;     JBGBYqqbOv8247258 = JBGBYqqbOv45080653;     JBGBYqqbOv45080653 = JBGBYqqbOv80911064;     JBGBYqqbOv80911064 = JBGBYqqbOv85200315;     JBGBYqqbOv85200315 = JBGBYqqbOv65236251;     JBGBYqqbOv65236251 = JBGBYqqbOv99087181;     JBGBYqqbOv99087181 = JBGBYqqbOv76379736;     JBGBYqqbOv76379736 = JBGBYqqbOv58029603;     JBGBYqqbOv58029603 = JBGBYqqbOv5720521;     JBGBYqqbOv5720521 = JBGBYqqbOv58256597;     JBGBYqqbOv58256597 = JBGBYqqbOv53831716;     JBGBYqqbOv53831716 = JBGBYqqbOv9453004;     JBGBYqqbOv9453004 = JBGBYqqbOv74558626;     JBGBYqqbOv74558626 = JBGBYqqbOv13110106;     JBGBYqqbOv13110106 = JBGBYqqbOv51790952;     JBGBYqqbOv51790952 = JBGBYqqbOv18708805;     JBGBYqqbOv18708805 = JBGBYqqbOv15182630;     JBGBYqqbOv15182630 = JBGBYqqbOv5165123;     JBGBYqqbOv5165123 = JBGBYqqbOv6924931;     JBGBYqqbOv6924931 = JBGBYqqbOv34467193;     JBGBYqqbOv34467193 = JBGBYqqbOv54577658;     JBGBYqqbOv54577658 = JBGBYqqbOv86654598;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void JSlnyVJeuX35376671() {     float UBhDurEHuZ54101634 = -165314438;    float UBhDurEHuZ29168972 = -604734037;    float UBhDurEHuZ98044526 = -568154569;    float UBhDurEHuZ61687939 = -912583021;    float UBhDurEHuZ85302547 = -148470578;    float UBhDurEHuZ10052 = -625430369;    float UBhDurEHuZ81281542 = -188008053;    float UBhDurEHuZ96144905 = -120875289;    float UBhDurEHuZ7887708 = -56092059;    float UBhDurEHuZ59238839 = -652937695;    float UBhDurEHuZ83895784 = -486873427;    float UBhDurEHuZ64703557 = -517975969;    float UBhDurEHuZ47506286 = 93131333;    float UBhDurEHuZ39970684 = -573418833;    float UBhDurEHuZ40889177 = -294806761;    float UBhDurEHuZ91252863 = -312714361;    float UBhDurEHuZ73400510 = -926521148;    float UBhDurEHuZ18820938 = -628243186;    float UBhDurEHuZ54285351 = -505980958;    float UBhDurEHuZ41082195 = -305810847;    float UBhDurEHuZ97974097 = -530620138;    float UBhDurEHuZ42774790 = -790040193;    float UBhDurEHuZ41964877 = -762565314;    float UBhDurEHuZ16275944 = -104018164;    float UBhDurEHuZ29990153 = -240746335;    float UBhDurEHuZ36485841 = -878050105;    float UBhDurEHuZ90918290 = -382473332;    float UBhDurEHuZ71951358 = -667428567;    float UBhDurEHuZ25022957 = -889891873;    float UBhDurEHuZ72974713 = -786136676;    float UBhDurEHuZ60033591 = -66641618;    float UBhDurEHuZ24373513 = -763542314;    float UBhDurEHuZ3511591 = -515913891;    float UBhDurEHuZ31661944 = -911644227;    float UBhDurEHuZ34922317 = -812591081;    float UBhDurEHuZ79535106 = -463475436;    float UBhDurEHuZ80967546 = -919121705;    float UBhDurEHuZ24479754 = 41736196;    float UBhDurEHuZ68701938 = -340944803;    float UBhDurEHuZ26683641 = -384545736;    float UBhDurEHuZ65485130 = -314923381;    float UBhDurEHuZ92122641 = -593759588;    float UBhDurEHuZ78095815 = -380756113;    float UBhDurEHuZ98581147 = -310209236;    float UBhDurEHuZ33882936 = -153576374;    float UBhDurEHuZ37072473 = -466382915;    float UBhDurEHuZ51777611 = 98057257;    float UBhDurEHuZ44307043 = -405979522;    float UBhDurEHuZ69301069 = -386455683;    float UBhDurEHuZ87697082 = -393774958;    float UBhDurEHuZ82972540 = -455774455;    float UBhDurEHuZ23936449 = -40749190;    float UBhDurEHuZ7522139 = 80991987;    float UBhDurEHuZ61406878 = -601054247;    float UBhDurEHuZ37402574 = -651412554;    float UBhDurEHuZ11326845 = -375274245;    float UBhDurEHuZ87204095 = -842168723;    float UBhDurEHuZ81768583 = -364136405;    float UBhDurEHuZ31697787 = -571836686;    float UBhDurEHuZ48816706 = -270420474;    float UBhDurEHuZ9091761 = -142957037;    float UBhDurEHuZ9330185 = -520579486;    float UBhDurEHuZ71121948 = -230983417;    float UBhDurEHuZ34912995 = -269955384;    float UBhDurEHuZ99205247 = -486296078;    float UBhDurEHuZ59522271 = -723331114;    float UBhDurEHuZ61191967 = 97937921;    float UBhDurEHuZ15844342 = 4775559;    float UBhDurEHuZ5048367 = -760827752;    float UBhDurEHuZ61354071 = -831331325;    float UBhDurEHuZ10285317 = -393592657;    float UBhDurEHuZ48920756 = -868257345;    float UBhDurEHuZ50118999 = -187298384;    float UBhDurEHuZ27601710 = -21435222;    float UBhDurEHuZ75597065 = -990887467;    float UBhDurEHuZ5851456 = -936860550;    float UBhDurEHuZ64678974 = -309284081;    float UBhDurEHuZ43383729 = -352356079;    float UBhDurEHuZ82393007 = -950441791;    float UBhDurEHuZ92917680 = -774363421;    float UBhDurEHuZ84708230 = -876107362;    float UBhDurEHuZ46611248 = -976493811;    float UBhDurEHuZ2650289 = -180972884;    float UBhDurEHuZ37325875 = -396116915;    float UBhDurEHuZ90002172 = -230362222;    float UBhDurEHuZ36097143 = 74107572;    float UBhDurEHuZ16851375 = -744534302;    float UBhDurEHuZ42104712 = -914859645;    float UBhDurEHuZ94259370 = -160231673;    float UBhDurEHuZ23595473 = -337316837;    float UBhDurEHuZ92331010 = -621306713;    float UBhDurEHuZ99198962 = -454985300;    float UBhDurEHuZ92781967 = -386427118;    float UBhDurEHuZ19885233 = 29475670;    float UBhDurEHuZ17591881 = -141588700;    float UBhDurEHuZ56154945 = -794343895;    float UBhDurEHuZ21000693 = -262776172;    float UBhDurEHuZ43182821 = -10800729;    float UBhDurEHuZ99375900 = -823913158;    float UBhDurEHuZ74360664 = -165314438;     UBhDurEHuZ54101634 = UBhDurEHuZ29168972;     UBhDurEHuZ29168972 = UBhDurEHuZ98044526;     UBhDurEHuZ98044526 = UBhDurEHuZ61687939;     UBhDurEHuZ61687939 = UBhDurEHuZ85302547;     UBhDurEHuZ85302547 = UBhDurEHuZ10052;     UBhDurEHuZ10052 = UBhDurEHuZ81281542;     UBhDurEHuZ81281542 = UBhDurEHuZ96144905;     UBhDurEHuZ96144905 = UBhDurEHuZ7887708;     UBhDurEHuZ7887708 = UBhDurEHuZ59238839;     UBhDurEHuZ59238839 = UBhDurEHuZ83895784;     UBhDurEHuZ83895784 = UBhDurEHuZ64703557;     UBhDurEHuZ64703557 = UBhDurEHuZ47506286;     UBhDurEHuZ47506286 = UBhDurEHuZ39970684;     UBhDurEHuZ39970684 = UBhDurEHuZ40889177;     UBhDurEHuZ40889177 = UBhDurEHuZ91252863;     UBhDurEHuZ91252863 = UBhDurEHuZ73400510;     UBhDurEHuZ73400510 = UBhDurEHuZ18820938;     UBhDurEHuZ18820938 = UBhDurEHuZ54285351;     UBhDurEHuZ54285351 = UBhDurEHuZ41082195;     UBhDurEHuZ41082195 = UBhDurEHuZ97974097;     UBhDurEHuZ97974097 = UBhDurEHuZ42774790;     UBhDurEHuZ42774790 = UBhDurEHuZ41964877;     UBhDurEHuZ41964877 = UBhDurEHuZ16275944;     UBhDurEHuZ16275944 = UBhDurEHuZ29990153;     UBhDurEHuZ29990153 = UBhDurEHuZ36485841;     UBhDurEHuZ36485841 = UBhDurEHuZ90918290;     UBhDurEHuZ90918290 = UBhDurEHuZ71951358;     UBhDurEHuZ71951358 = UBhDurEHuZ25022957;     UBhDurEHuZ25022957 = UBhDurEHuZ72974713;     UBhDurEHuZ72974713 = UBhDurEHuZ60033591;     UBhDurEHuZ60033591 = UBhDurEHuZ24373513;     UBhDurEHuZ24373513 = UBhDurEHuZ3511591;     UBhDurEHuZ3511591 = UBhDurEHuZ31661944;     UBhDurEHuZ31661944 = UBhDurEHuZ34922317;     UBhDurEHuZ34922317 = UBhDurEHuZ79535106;     UBhDurEHuZ79535106 = UBhDurEHuZ80967546;     UBhDurEHuZ80967546 = UBhDurEHuZ24479754;     UBhDurEHuZ24479754 = UBhDurEHuZ68701938;     UBhDurEHuZ68701938 = UBhDurEHuZ26683641;     UBhDurEHuZ26683641 = UBhDurEHuZ65485130;     UBhDurEHuZ65485130 = UBhDurEHuZ92122641;     UBhDurEHuZ92122641 = UBhDurEHuZ78095815;     UBhDurEHuZ78095815 = UBhDurEHuZ98581147;     UBhDurEHuZ98581147 = UBhDurEHuZ33882936;     UBhDurEHuZ33882936 = UBhDurEHuZ37072473;     UBhDurEHuZ37072473 = UBhDurEHuZ51777611;     UBhDurEHuZ51777611 = UBhDurEHuZ44307043;     UBhDurEHuZ44307043 = UBhDurEHuZ69301069;     UBhDurEHuZ69301069 = UBhDurEHuZ87697082;     UBhDurEHuZ87697082 = UBhDurEHuZ82972540;     UBhDurEHuZ82972540 = UBhDurEHuZ23936449;     UBhDurEHuZ23936449 = UBhDurEHuZ7522139;     UBhDurEHuZ7522139 = UBhDurEHuZ61406878;     UBhDurEHuZ61406878 = UBhDurEHuZ37402574;     UBhDurEHuZ37402574 = UBhDurEHuZ11326845;     UBhDurEHuZ11326845 = UBhDurEHuZ87204095;     UBhDurEHuZ87204095 = UBhDurEHuZ81768583;     UBhDurEHuZ81768583 = UBhDurEHuZ31697787;     UBhDurEHuZ31697787 = UBhDurEHuZ48816706;     UBhDurEHuZ48816706 = UBhDurEHuZ9091761;     UBhDurEHuZ9091761 = UBhDurEHuZ9330185;     UBhDurEHuZ9330185 = UBhDurEHuZ71121948;     UBhDurEHuZ71121948 = UBhDurEHuZ34912995;     UBhDurEHuZ34912995 = UBhDurEHuZ99205247;     UBhDurEHuZ99205247 = UBhDurEHuZ59522271;     UBhDurEHuZ59522271 = UBhDurEHuZ61191967;     UBhDurEHuZ61191967 = UBhDurEHuZ15844342;     UBhDurEHuZ15844342 = UBhDurEHuZ5048367;     UBhDurEHuZ5048367 = UBhDurEHuZ61354071;     UBhDurEHuZ61354071 = UBhDurEHuZ10285317;     UBhDurEHuZ10285317 = UBhDurEHuZ48920756;     UBhDurEHuZ48920756 = UBhDurEHuZ50118999;     UBhDurEHuZ50118999 = UBhDurEHuZ27601710;     UBhDurEHuZ27601710 = UBhDurEHuZ75597065;     UBhDurEHuZ75597065 = UBhDurEHuZ5851456;     UBhDurEHuZ5851456 = UBhDurEHuZ64678974;     UBhDurEHuZ64678974 = UBhDurEHuZ43383729;     UBhDurEHuZ43383729 = UBhDurEHuZ82393007;     UBhDurEHuZ82393007 = UBhDurEHuZ92917680;     UBhDurEHuZ92917680 = UBhDurEHuZ84708230;     UBhDurEHuZ84708230 = UBhDurEHuZ46611248;     UBhDurEHuZ46611248 = UBhDurEHuZ2650289;     UBhDurEHuZ2650289 = UBhDurEHuZ37325875;     UBhDurEHuZ37325875 = UBhDurEHuZ90002172;     UBhDurEHuZ90002172 = UBhDurEHuZ36097143;     UBhDurEHuZ36097143 = UBhDurEHuZ16851375;     UBhDurEHuZ16851375 = UBhDurEHuZ42104712;     UBhDurEHuZ42104712 = UBhDurEHuZ94259370;     UBhDurEHuZ94259370 = UBhDurEHuZ23595473;     UBhDurEHuZ23595473 = UBhDurEHuZ92331010;     UBhDurEHuZ92331010 = UBhDurEHuZ99198962;     UBhDurEHuZ99198962 = UBhDurEHuZ92781967;     UBhDurEHuZ92781967 = UBhDurEHuZ19885233;     UBhDurEHuZ19885233 = UBhDurEHuZ17591881;     UBhDurEHuZ17591881 = UBhDurEHuZ56154945;     UBhDurEHuZ56154945 = UBhDurEHuZ21000693;     UBhDurEHuZ21000693 = UBhDurEHuZ43182821;     UBhDurEHuZ43182821 = UBhDurEHuZ99375900;     UBhDurEHuZ99375900 = UBhDurEHuZ74360664;     UBhDurEHuZ74360664 = UBhDurEHuZ54101634;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void pfZvTJyUIk75516116() {     float PbmsukULOE99155081 = -3478750;    float PbmsukULOE78589979 = -306089810;    float PbmsukULOE47760694 = -22244720;    float PbmsukULOE26057018 = -736480177;    float PbmsukULOE55091068 = -821665282;    float PbmsukULOE42611402 = -670896140;    float PbmsukULOE31434266 = -113585490;    float PbmsukULOE76405263 = -595365134;    float PbmsukULOE93903797 = -180507483;    float PbmsukULOE56325944 = -993085264;    float PbmsukULOE52452602 = -130291614;    float PbmsukULOE3515827 = -960987581;    float PbmsukULOE14458723 = -95474309;    float PbmsukULOE39946441 = 9771148;    float PbmsukULOE57684526 = -481436510;    float PbmsukULOE65189555 = -112097772;    float PbmsukULOE79160739 = -786615624;    float PbmsukULOE63999593 = -895275265;    float PbmsukULOE15384952 = -566159576;    float PbmsukULOE82854964 = -997786679;    float PbmsukULOE11439435 = -498532244;    float PbmsukULOE59259979 = -621576336;    float PbmsukULOE13901681 = -4232038;    float PbmsukULOE35711655 = -699411135;    float PbmsukULOE96096781 = -102542587;    float PbmsukULOE70742439 = -128295865;    float PbmsukULOE57234330 = -713437399;    float PbmsukULOE86641833 = 39175921;    float PbmsukULOE74645126 = -40096869;    float PbmsukULOE11004058 = -786484932;    float PbmsukULOE11884311 = -810614741;    float PbmsukULOE1142757 = -501687166;    float PbmsukULOE36174746 = -418942795;    float PbmsukULOE44005522 = -172392405;    float PbmsukULOE76257641 = -476729799;    float PbmsukULOE20392894 = -184638760;    float PbmsukULOE98996382 = -826509724;    float PbmsukULOE41534915 = -984187444;    float PbmsukULOE76938842 = -163697950;    float PbmsukULOE56749051 = -851047152;    float PbmsukULOE54118468 = -299769866;    float PbmsukULOE47991365 = -241694318;    float PbmsukULOE98429275 = -357164292;    float PbmsukULOE52759966 = -127697495;    float PbmsukULOE5892224 = -369720454;    float PbmsukULOE57933922 = -426261874;    float PbmsukULOE33535945 = -948104927;    float PbmsukULOE52575643 = -782449683;    float PbmsukULOE61247980 = -500071149;    float PbmsukULOE82405420 = -2810457;    float PbmsukULOE67544357 = -10797988;    float PbmsukULOE67643888 = -596181229;    float PbmsukULOE95420888 = -163015523;    float PbmsukULOE3235816 = -910711664;    float PbmsukULOE64076682 = -901061607;    float PbmsukULOE39895102 = -381902415;    float PbmsukULOE64688298 = -201857772;    float PbmsukULOE12049040 = -322833585;    float PbmsukULOE29960237 = -533937591;    float PbmsukULOE84348629 = -593369417;    float PbmsukULOE85377071 = -957458742;    float PbmsukULOE44792432 = -52761411;    float PbmsukULOE1760137 = -455268266;    float PbmsukULOE82899739 = -394022551;    float PbmsukULOE44441633 = -82470524;    float PbmsukULOE51309846 = -628604448;    float PbmsukULOE67341081 = -442044787;    float PbmsukULOE70453200 = -923081905;    float PbmsukULOE63688800 = -513499054;    float PbmsukULOE37291633 = -196797750;    float PbmsukULOE66193173 = -285588048;    float PbmsukULOE37625824 = -802428180;    float PbmsukULOE87060751 = -631577315;    float PbmsukULOE58635900 = -715112424;    float PbmsukULOE28736496 = -598016813;    float PbmsukULOE63448070 = -156837926;    float PbmsukULOE60830703 = -164412045;    float PbmsukULOE61141715 = -876534543;    float PbmsukULOE29819432 = -229690682;    float PbmsukULOE38162859 = -676280713;    float PbmsukULOE37206494 = -180190939;    float PbmsukULOE4658687 = -930987716;    float PbmsukULOE25393853 = -460752931;    float PbmsukULOE92239706 = 62713587;    float PbmsukULOE43459701 = -675686944;    float PbmsukULOE44240422 = -114433513;    float PbmsukULOE5721868 = -238671644;    float PbmsukULOE32938930 = -508231131;    float PbmsukULOE79928840 = -271330798;    float PbmsukULOE36362539 = 5172616;    float PbmsukULOE55704595 = -982780988;    float PbmsukULOE86947342 = -403676140;    float PbmsukULOE11574679 = -350249854;    float PbmsukULOE92590213 = -570328534;    float PbmsukULOE71371979 = -893588411;    float PbmsukULOE9326036 = -147008456;    float PbmsukULOE46231228 = -786426053;    float PbmsukULOE15529537 = -963141741;    float PbmsukULOE8318333 = 54773028;    float PbmsukULOE54582377 = -3478750;     PbmsukULOE99155081 = PbmsukULOE78589979;     PbmsukULOE78589979 = PbmsukULOE47760694;     PbmsukULOE47760694 = PbmsukULOE26057018;     PbmsukULOE26057018 = PbmsukULOE55091068;     PbmsukULOE55091068 = PbmsukULOE42611402;     PbmsukULOE42611402 = PbmsukULOE31434266;     PbmsukULOE31434266 = PbmsukULOE76405263;     PbmsukULOE76405263 = PbmsukULOE93903797;     PbmsukULOE93903797 = PbmsukULOE56325944;     PbmsukULOE56325944 = PbmsukULOE52452602;     PbmsukULOE52452602 = PbmsukULOE3515827;     PbmsukULOE3515827 = PbmsukULOE14458723;     PbmsukULOE14458723 = PbmsukULOE39946441;     PbmsukULOE39946441 = PbmsukULOE57684526;     PbmsukULOE57684526 = PbmsukULOE65189555;     PbmsukULOE65189555 = PbmsukULOE79160739;     PbmsukULOE79160739 = PbmsukULOE63999593;     PbmsukULOE63999593 = PbmsukULOE15384952;     PbmsukULOE15384952 = PbmsukULOE82854964;     PbmsukULOE82854964 = PbmsukULOE11439435;     PbmsukULOE11439435 = PbmsukULOE59259979;     PbmsukULOE59259979 = PbmsukULOE13901681;     PbmsukULOE13901681 = PbmsukULOE35711655;     PbmsukULOE35711655 = PbmsukULOE96096781;     PbmsukULOE96096781 = PbmsukULOE70742439;     PbmsukULOE70742439 = PbmsukULOE57234330;     PbmsukULOE57234330 = PbmsukULOE86641833;     PbmsukULOE86641833 = PbmsukULOE74645126;     PbmsukULOE74645126 = PbmsukULOE11004058;     PbmsukULOE11004058 = PbmsukULOE11884311;     PbmsukULOE11884311 = PbmsukULOE1142757;     PbmsukULOE1142757 = PbmsukULOE36174746;     PbmsukULOE36174746 = PbmsukULOE44005522;     PbmsukULOE44005522 = PbmsukULOE76257641;     PbmsukULOE76257641 = PbmsukULOE20392894;     PbmsukULOE20392894 = PbmsukULOE98996382;     PbmsukULOE98996382 = PbmsukULOE41534915;     PbmsukULOE41534915 = PbmsukULOE76938842;     PbmsukULOE76938842 = PbmsukULOE56749051;     PbmsukULOE56749051 = PbmsukULOE54118468;     PbmsukULOE54118468 = PbmsukULOE47991365;     PbmsukULOE47991365 = PbmsukULOE98429275;     PbmsukULOE98429275 = PbmsukULOE52759966;     PbmsukULOE52759966 = PbmsukULOE5892224;     PbmsukULOE5892224 = PbmsukULOE57933922;     PbmsukULOE57933922 = PbmsukULOE33535945;     PbmsukULOE33535945 = PbmsukULOE52575643;     PbmsukULOE52575643 = PbmsukULOE61247980;     PbmsukULOE61247980 = PbmsukULOE82405420;     PbmsukULOE82405420 = PbmsukULOE67544357;     PbmsukULOE67544357 = PbmsukULOE67643888;     PbmsukULOE67643888 = PbmsukULOE95420888;     PbmsukULOE95420888 = PbmsukULOE3235816;     PbmsukULOE3235816 = PbmsukULOE64076682;     PbmsukULOE64076682 = PbmsukULOE39895102;     PbmsukULOE39895102 = PbmsukULOE64688298;     PbmsukULOE64688298 = PbmsukULOE12049040;     PbmsukULOE12049040 = PbmsukULOE29960237;     PbmsukULOE29960237 = PbmsukULOE84348629;     PbmsukULOE84348629 = PbmsukULOE85377071;     PbmsukULOE85377071 = PbmsukULOE44792432;     PbmsukULOE44792432 = PbmsukULOE1760137;     PbmsukULOE1760137 = PbmsukULOE82899739;     PbmsukULOE82899739 = PbmsukULOE44441633;     PbmsukULOE44441633 = PbmsukULOE51309846;     PbmsukULOE51309846 = PbmsukULOE67341081;     PbmsukULOE67341081 = PbmsukULOE70453200;     PbmsukULOE70453200 = PbmsukULOE63688800;     PbmsukULOE63688800 = PbmsukULOE37291633;     PbmsukULOE37291633 = PbmsukULOE66193173;     PbmsukULOE66193173 = PbmsukULOE37625824;     PbmsukULOE37625824 = PbmsukULOE87060751;     PbmsukULOE87060751 = PbmsukULOE58635900;     PbmsukULOE58635900 = PbmsukULOE28736496;     PbmsukULOE28736496 = PbmsukULOE63448070;     PbmsukULOE63448070 = PbmsukULOE60830703;     PbmsukULOE60830703 = PbmsukULOE61141715;     PbmsukULOE61141715 = PbmsukULOE29819432;     PbmsukULOE29819432 = PbmsukULOE38162859;     PbmsukULOE38162859 = PbmsukULOE37206494;     PbmsukULOE37206494 = PbmsukULOE4658687;     PbmsukULOE4658687 = PbmsukULOE25393853;     PbmsukULOE25393853 = PbmsukULOE92239706;     PbmsukULOE92239706 = PbmsukULOE43459701;     PbmsukULOE43459701 = PbmsukULOE44240422;     PbmsukULOE44240422 = PbmsukULOE5721868;     PbmsukULOE5721868 = PbmsukULOE32938930;     PbmsukULOE32938930 = PbmsukULOE79928840;     PbmsukULOE79928840 = PbmsukULOE36362539;     PbmsukULOE36362539 = PbmsukULOE55704595;     PbmsukULOE55704595 = PbmsukULOE86947342;     PbmsukULOE86947342 = PbmsukULOE11574679;     PbmsukULOE11574679 = PbmsukULOE92590213;     PbmsukULOE92590213 = PbmsukULOE71371979;     PbmsukULOE71371979 = PbmsukULOE9326036;     PbmsukULOE9326036 = PbmsukULOE46231228;     PbmsukULOE46231228 = PbmsukULOE15529537;     PbmsukULOE15529537 = PbmsukULOE8318333;     PbmsukULOE8318333 = PbmsukULOE54582377;     PbmsukULOE54582377 = PbmsukULOE99155081;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void urhREaZLAk54362313() {     float ODsHxThsef18064827 = -377897190;    float ODsHxThsef70161830 = -143428479;    float ODsHxThsef80242466 = -624308409;    float ODsHxThsef75992763 = -930890254;    float ODsHxThsef8657559 = -265776296;    float ODsHxThsef42533243 = 87117123;    float ODsHxThsef44583654 = 6313930;    float ODsHxThsef83670216 = -522579987;    float ODsHxThsef71210939 = -196652171;    float ODsHxThsef7134795 = -389341504;    float ODsHxThsef19729670 = -162943144;    float ODsHxThsef52997697 = 22751764;    float ODsHxThsef38958230 = -417489580;    float ODsHxThsef18869977 = -509729567;    float ODsHxThsef31561397 = -16171655;    float ODsHxThsef60555470 = -303193053;    float ODsHxThsef72895800 = -147320634;    float ODsHxThsef21610699 = -818936588;    float ODsHxThsef57947153 = -263415602;    float ODsHxThsef93985861 = -241909286;    float ODsHxThsef497261 = -34869590;    float ODsHxThsef96532556 = -189372517;    float ODsHxThsef51374371 = -322795577;    float ODsHxThsef20561050 = -301140613;    float ODsHxThsef17248001 = -259486691;    float ODsHxThsef60208682 = -889176459;    float ODsHxThsef96888063 = -947006169;    float ODsHxThsef31698359 = -691584149;    float ODsHxThsef44715988 = -930626499;    float ODsHxThsef56280940 = -558410581;    float ODsHxThsef15150178 = -613259195;    float ODsHxThsef17348345 = -898031899;    float ODsHxThsef6479220 = 14533267;    float ODsHxThsef15629622 = 47993345;    float ODsHxThsef38434788 = -366180860;    float ODsHxThsef41514732 = -107462226;    float ODsHxThsef5081010 = -470401566;    float ODsHxThsef63411471 = -680050866;    float ODsHxThsef21010886 = -386790608;    float ODsHxThsef98642825 = -459471534;    float ODsHxThsef33363332 = -652573855;    float ODsHxThsef2146617 = -216355848;    float ODsHxThsef51096364 = 97727934;    float ODsHxThsef25564346 = -931248233;    float ODsHxThsef13835127 = -551129167;    float ODsHxThsef3073278 = -672751759;    float ODsHxThsef1198747 = 16885106;    float ODsHxThsef14588970 = -338936639;    float ODsHxThsef96329369 = -85646250;    float ODsHxThsef22222070 = -13832841;    float ODsHxThsef8313160 = -527420961;    float ODsHxThsef92082898 = -485947138;    float ODsHxThsef2706148 = -238754385;    float ODsHxThsef33654151 = -288713700;    float ODsHxThsef53865052 = -739138598;    float ODsHxThsef21532271 = -88524673;    float ODsHxThsef18787459 = -820632902;    float ODsHxThsef59681416 = -223167796;    float ODsHxThsef58744762 = -571403564;    float ODsHxThsef48448877 = -376599838;    float ODsHxThsef45645179 = 34123292;    float ODsHxThsef12885296 = -302101922;    float ODsHxThsef38954228 = -591953489;    float ODsHxThsef14929999 = -638241591;    float ODsHxThsef91984617 = -776082309;    float ODsHxThsef2381326 = -264911246;    float ODsHxThsef46518477 = -991781503;    float ODsHxThsef23328608 = -365482925;    float ODsHxThsef80435189 = -43548708;    float ODsHxThsef90046665 = -908709430;    float ODsHxThsef55474461 = -832791488;    float ODsHxThsef9484330 = -467269768;    float ODsHxThsef599814 = -332145981;    float ODsHxThsef59304328 = -803944068;    float ODsHxThsef60622530 = -589335432;    float ODsHxThsef98350643 = -818513742;    float ODsHxThsef45436192 = -187100451;    float ODsHxThsef25810026 = -391547345;    float ODsHxThsef6725924 = -750011446;    float ODsHxThsef14174723 = -586734932;    float ODsHxThsef59009936 = -806061565;    float ODsHxThsef82299093 = -508069531;    float ODsHxThsef35368989 = -505937899;    float ODsHxThsef22493918 = -816793658;    float ODsHxThsef47967781 = 69010380;    float ODsHxThsef23067280 = -27312057;    float ODsHxThsef14642197 = -559277514;    float ODsHxThsef72825069 = -696753034;    float ODsHxThsef61764569 = -212868058;    float ODsHxThsef16902518 = -177656187;    float ODsHxThsef22727274 = -286829324;    float ODsHxThsef45399593 = -147233770;    float ODsHxThsef4666709 = -8647303;    float ODsHxThsef72562008 = 89809229;    float ODsHxThsef52997646 = -393594826;    float ODsHxThsef20478037 = -250471934;    float ODsHxThsef63192388 = -624402360;    float ODsHxThsef36166365 = -264030476;    float ODsHxThsef33579729 = -55165924;    float ODsHxThsef11453802 = -377897190;     ODsHxThsef18064827 = ODsHxThsef70161830;     ODsHxThsef70161830 = ODsHxThsef80242466;     ODsHxThsef80242466 = ODsHxThsef75992763;     ODsHxThsef75992763 = ODsHxThsef8657559;     ODsHxThsef8657559 = ODsHxThsef42533243;     ODsHxThsef42533243 = ODsHxThsef44583654;     ODsHxThsef44583654 = ODsHxThsef83670216;     ODsHxThsef83670216 = ODsHxThsef71210939;     ODsHxThsef71210939 = ODsHxThsef7134795;     ODsHxThsef7134795 = ODsHxThsef19729670;     ODsHxThsef19729670 = ODsHxThsef52997697;     ODsHxThsef52997697 = ODsHxThsef38958230;     ODsHxThsef38958230 = ODsHxThsef18869977;     ODsHxThsef18869977 = ODsHxThsef31561397;     ODsHxThsef31561397 = ODsHxThsef60555470;     ODsHxThsef60555470 = ODsHxThsef72895800;     ODsHxThsef72895800 = ODsHxThsef21610699;     ODsHxThsef21610699 = ODsHxThsef57947153;     ODsHxThsef57947153 = ODsHxThsef93985861;     ODsHxThsef93985861 = ODsHxThsef497261;     ODsHxThsef497261 = ODsHxThsef96532556;     ODsHxThsef96532556 = ODsHxThsef51374371;     ODsHxThsef51374371 = ODsHxThsef20561050;     ODsHxThsef20561050 = ODsHxThsef17248001;     ODsHxThsef17248001 = ODsHxThsef60208682;     ODsHxThsef60208682 = ODsHxThsef96888063;     ODsHxThsef96888063 = ODsHxThsef31698359;     ODsHxThsef31698359 = ODsHxThsef44715988;     ODsHxThsef44715988 = ODsHxThsef56280940;     ODsHxThsef56280940 = ODsHxThsef15150178;     ODsHxThsef15150178 = ODsHxThsef17348345;     ODsHxThsef17348345 = ODsHxThsef6479220;     ODsHxThsef6479220 = ODsHxThsef15629622;     ODsHxThsef15629622 = ODsHxThsef38434788;     ODsHxThsef38434788 = ODsHxThsef41514732;     ODsHxThsef41514732 = ODsHxThsef5081010;     ODsHxThsef5081010 = ODsHxThsef63411471;     ODsHxThsef63411471 = ODsHxThsef21010886;     ODsHxThsef21010886 = ODsHxThsef98642825;     ODsHxThsef98642825 = ODsHxThsef33363332;     ODsHxThsef33363332 = ODsHxThsef2146617;     ODsHxThsef2146617 = ODsHxThsef51096364;     ODsHxThsef51096364 = ODsHxThsef25564346;     ODsHxThsef25564346 = ODsHxThsef13835127;     ODsHxThsef13835127 = ODsHxThsef3073278;     ODsHxThsef3073278 = ODsHxThsef1198747;     ODsHxThsef1198747 = ODsHxThsef14588970;     ODsHxThsef14588970 = ODsHxThsef96329369;     ODsHxThsef96329369 = ODsHxThsef22222070;     ODsHxThsef22222070 = ODsHxThsef8313160;     ODsHxThsef8313160 = ODsHxThsef92082898;     ODsHxThsef92082898 = ODsHxThsef2706148;     ODsHxThsef2706148 = ODsHxThsef33654151;     ODsHxThsef33654151 = ODsHxThsef53865052;     ODsHxThsef53865052 = ODsHxThsef21532271;     ODsHxThsef21532271 = ODsHxThsef18787459;     ODsHxThsef18787459 = ODsHxThsef59681416;     ODsHxThsef59681416 = ODsHxThsef58744762;     ODsHxThsef58744762 = ODsHxThsef48448877;     ODsHxThsef48448877 = ODsHxThsef45645179;     ODsHxThsef45645179 = ODsHxThsef12885296;     ODsHxThsef12885296 = ODsHxThsef38954228;     ODsHxThsef38954228 = ODsHxThsef14929999;     ODsHxThsef14929999 = ODsHxThsef91984617;     ODsHxThsef91984617 = ODsHxThsef2381326;     ODsHxThsef2381326 = ODsHxThsef46518477;     ODsHxThsef46518477 = ODsHxThsef23328608;     ODsHxThsef23328608 = ODsHxThsef80435189;     ODsHxThsef80435189 = ODsHxThsef90046665;     ODsHxThsef90046665 = ODsHxThsef55474461;     ODsHxThsef55474461 = ODsHxThsef9484330;     ODsHxThsef9484330 = ODsHxThsef599814;     ODsHxThsef599814 = ODsHxThsef59304328;     ODsHxThsef59304328 = ODsHxThsef60622530;     ODsHxThsef60622530 = ODsHxThsef98350643;     ODsHxThsef98350643 = ODsHxThsef45436192;     ODsHxThsef45436192 = ODsHxThsef25810026;     ODsHxThsef25810026 = ODsHxThsef6725924;     ODsHxThsef6725924 = ODsHxThsef14174723;     ODsHxThsef14174723 = ODsHxThsef59009936;     ODsHxThsef59009936 = ODsHxThsef82299093;     ODsHxThsef82299093 = ODsHxThsef35368989;     ODsHxThsef35368989 = ODsHxThsef22493918;     ODsHxThsef22493918 = ODsHxThsef47967781;     ODsHxThsef47967781 = ODsHxThsef23067280;     ODsHxThsef23067280 = ODsHxThsef14642197;     ODsHxThsef14642197 = ODsHxThsef72825069;     ODsHxThsef72825069 = ODsHxThsef61764569;     ODsHxThsef61764569 = ODsHxThsef16902518;     ODsHxThsef16902518 = ODsHxThsef22727274;     ODsHxThsef22727274 = ODsHxThsef45399593;     ODsHxThsef45399593 = ODsHxThsef4666709;     ODsHxThsef4666709 = ODsHxThsef72562008;     ODsHxThsef72562008 = ODsHxThsef52997646;     ODsHxThsef52997646 = ODsHxThsef20478037;     ODsHxThsef20478037 = ODsHxThsef63192388;     ODsHxThsef63192388 = ODsHxThsef36166365;     ODsHxThsef36166365 = ODsHxThsef33579729;     ODsHxThsef33579729 = ODsHxThsef11453802;     ODsHxThsef11453802 = ODsHxThsef18064827;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void GGVYPtWrck15767468() {     float heYnzBTHpg34049154 = -303567019;    float heYnzBTHpg68982361 = -620697214;    float heYnzBTHpg2105163 = -595475483;    float heYnzBTHpg14648830 = -756007892;    float heYnzBTHpg73336414 = -213458047;    float heYnzBTHpg87969472 = 15821184;    float heYnzBTHpg78956517 = -199642041;    float heYnzBTHpg49765594 = -877183479;    float heYnzBTHpg94781911 = -770438269;    float heYnzBTHpg40748298 = -785249327;    float heYnzBTHpg24008746 = -591432645;    float heYnzBTHpg64362909 = -677544665;    float heYnzBTHpg18674130 = -566803283;    float heYnzBTHpg17439020 = -288960302;    float heYnzBTHpg74401561 = -184225731;    float heYnzBTHpg52445669 = -908608377;    float heYnzBTHpg78622382 = -322135075;    float heYnzBTHpg20308672 = -438681560;    float heYnzBTHpg79290874 = -820756529;    float heYnzBTHpg79285541 = -562958347;    float heYnzBTHpg80797475 = -996398327;    float heYnzBTHpg63268264 = -274197481;    float heYnzBTHpg90605141 = -121810985;    float heYnzBTHpg40282435 = 43658252;    float heYnzBTHpg42505153 = -415865633;    float heYnzBTHpg82713469 = -800163976;    float heYnzBTHpg43602088 = -288939091;    float heYnzBTHpg57038633 = -206590032;    float heYnzBTHpg62317693 = 63119530;    float heYnzBTHpg53197367 = -176910431;    float heYnzBTHpg37342003 = -587006824;    float heYnzBTHpg315910 = -498476057;    float heYnzBTHpg92673550 = -879799160;    float heYnzBTHpg86904378 = -688778995;    float heYnzBTHpg46670943 = -513892229;    float heYnzBTHpg99837828 = -98224669;    float heYnzBTHpg98050743 = 92125090;    float heYnzBTHpg43062080 = -580760311;    float heYnzBTHpg19401719 = -285933475;    float heYnzBTHpg13505515 = -637634670;    float heYnzBTHpg13188551 = 69628;    float heYnzBTHpg65350271 = -865796996;    float heYnzBTHpg29629861 = -66781309;    float heYnzBTHpg41542044 = -643472425;    float heYnzBTHpg17841226 = -573776767;    float heYnzBTHpg35001448 = 13611359;    float heYnzBTHpg66251823 = 65311446;    float heYnzBTHpg7543033 = -930937274;    float heYnzBTHpg96744833 = -399207753;    float heYnzBTHpg25898740 = -330872198;    float heYnzBTHpg27907684 = -673887595;    float heYnzBTHpg73666767 = -704392374;    float heYnzBTHpg76950498 = -210744986;    float heYnzBTHpg86966239 = 82451585;    float heYnzBTHpg34969993 = 32030614;    float heYnzBTHpg70780889 = 70630462;    float heYnzBTHpg78377219 = -398886230;    float heYnzBTHpg61822728 = -539133735;    float heYnzBTHpg72143677 = -240142260;    float heYnzBTHpg90622944 = -413294072;    float heYnzBTHpg44367385 = -695239725;    float heYnzBTHpg21917884 = -993052010;    float heYnzBTHpg87447901 = -840303009;    float heYnzBTHpg41584544 = -493527839;    float heYnzBTHpg3406295 = -98242504;    float heYnzBTHpg23692837 = 7043411;    float heYnzBTHpg71689358 = -797745506;    float heYnzBTHpg31769751 = -878024288;    float heYnzBTHpg70768076 = -775068073;    float heYnzBTHpg74563733 = 13998938;    float heYnzBTHpg54394926 = -900733468;    float heYnzBTHpg35560303 = -741374764;    float heYnzBTHpg906954 = -52748086;    float heYnzBTHpg65785359 = -83121860;    float heYnzBTHpg66096991 = -463027975;    float heYnzBTHpg15447204 = -30601332;    float heYnzBTHpg33638403 = -107416173;    float heYnzBTHpg49063098 = -478338560;    float heYnzBTHpg22441209 = -382564981;    float heYnzBTHpg7503705 = -329476993;    float heYnzBTHpg16461647 = -765475422;    float heYnzBTHpg36059055 = -358001817;    float heYnzBTHpg60293800 = -807382280;    float heYnzBTHpg36418953 = -606008273;    float heYnzBTHpg25289683 = -503022837;    float heYnzBTHpg63675235 = -882614450;    float heYnzBTHpg23365412 = -187731071;    float heYnzBTHpg5707312 = -862250745;    float heYnzBTHpg51934386 = -620809609;    float heYnzBTHpg75890053 = -484522691;    float heYnzBTHpg21460609 = -699338440;    float heYnzBTHpg36228015 = -368741175;    float heYnzBTHpg70918402 = -240618052;    float heYnzBTHpg28778775 = -872639404;    float heYnzBTHpg69138129 = -942394945;    float heYnzBTHpg91270666 = -6878363;    float heYnzBTHpg77902369 = 74506013;    float heYnzBTHpg88045317 = -573253470;    float heYnzBTHpg38135749 = -445229922;    float heYnzBTHpg94148389 = -303567019;     heYnzBTHpg34049154 = heYnzBTHpg68982361;     heYnzBTHpg68982361 = heYnzBTHpg2105163;     heYnzBTHpg2105163 = heYnzBTHpg14648830;     heYnzBTHpg14648830 = heYnzBTHpg73336414;     heYnzBTHpg73336414 = heYnzBTHpg87969472;     heYnzBTHpg87969472 = heYnzBTHpg78956517;     heYnzBTHpg78956517 = heYnzBTHpg49765594;     heYnzBTHpg49765594 = heYnzBTHpg94781911;     heYnzBTHpg94781911 = heYnzBTHpg40748298;     heYnzBTHpg40748298 = heYnzBTHpg24008746;     heYnzBTHpg24008746 = heYnzBTHpg64362909;     heYnzBTHpg64362909 = heYnzBTHpg18674130;     heYnzBTHpg18674130 = heYnzBTHpg17439020;     heYnzBTHpg17439020 = heYnzBTHpg74401561;     heYnzBTHpg74401561 = heYnzBTHpg52445669;     heYnzBTHpg52445669 = heYnzBTHpg78622382;     heYnzBTHpg78622382 = heYnzBTHpg20308672;     heYnzBTHpg20308672 = heYnzBTHpg79290874;     heYnzBTHpg79290874 = heYnzBTHpg79285541;     heYnzBTHpg79285541 = heYnzBTHpg80797475;     heYnzBTHpg80797475 = heYnzBTHpg63268264;     heYnzBTHpg63268264 = heYnzBTHpg90605141;     heYnzBTHpg90605141 = heYnzBTHpg40282435;     heYnzBTHpg40282435 = heYnzBTHpg42505153;     heYnzBTHpg42505153 = heYnzBTHpg82713469;     heYnzBTHpg82713469 = heYnzBTHpg43602088;     heYnzBTHpg43602088 = heYnzBTHpg57038633;     heYnzBTHpg57038633 = heYnzBTHpg62317693;     heYnzBTHpg62317693 = heYnzBTHpg53197367;     heYnzBTHpg53197367 = heYnzBTHpg37342003;     heYnzBTHpg37342003 = heYnzBTHpg315910;     heYnzBTHpg315910 = heYnzBTHpg92673550;     heYnzBTHpg92673550 = heYnzBTHpg86904378;     heYnzBTHpg86904378 = heYnzBTHpg46670943;     heYnzBTHpg46670943 = heYnzBTHpg99837828;     heYnzBTHpg99837828 = heYnzBTHpg98050743;     heYnzBTHpg98050743 = heYnzBTHpg43062080;     heYnzBTHpg43062080 = heYnzBTHpg19401719;     heYnzBTHpg19401719 = heYnzBTHpg13505515;     heYnzBTHpg13505515 = heYnzBTHpg13188551;     heYnzBTHpg13188551 = heYnzBTHpg65350271;     heYnzBTHpg65350271 = heYnzBTHpg29629861;     heYnzBTHpg29629861 = heYnzBTHpg41542044;     heYnzBTHpg41542044 = heYnzBTHpg17841226;     heYnzBTHpg17841226 = heYnzBTHpg35001448;     heYnzBTHpg35001448 = heYnzBTHpg66251823;     heYnzBTHpg66251823 = heYnzBTHpg7543033;     heYnzBTHpg7543033 = heYnzBTHpg96744833;     heYnzBTHpg96744833 = heYnzBTHpg25898740;     heYnzBTHpg25898740 = heYnzBTHpg27907684;     heYnzBTHpg27907684 = heYnzBTHpg73666767;     heYnzBTHpg73666767 = heYnzBTHpg76950498;     heYnzBTHpg76950498 = heYnzBTHpg86966239;     heYnzBTHpg86966239 = heYnzBTHpg34969993;     heYnzBTHpg34969993 = heYnzBTHpg70780889;     heYnzBTHpg70780889 = heYnzBTHpg78377219;     heYnzBTHpg78377219 = heYnzBTHpg61822728;     heYnzBTHpg61822728 = heYnzBTHpg72143677;     heYnzBTHpg72143677 = heYnzBTHpg90622944;     heYnzBTHpg90622944 = heYnzBTHpg44367385;     heYnzBTHpg44367385 = heYnzBTHpg21917884;     heYnzBTHpg21917884 = heYnzBTHpg87447901;     heYnzBTHpg87447901 = heYnzBTHpg41584544;     heYnzBTHpg41584544 = heYnzBTHpg3406295;     heYnzBTHpg3406295 = heYnzBTHpg23692837;     heYnzBTHpg23692837 = heYnzBTHpg71689358;     heYnzBTHpg71689358 = heYnzBTHpg31769751;     heYnzBTHpg31769751 = heYnzBTHpg70768076;     heYnzBTHpg70768076 = heYnzBTHpg74563733;     heYnzBTHpg74563733 = heYnzBTHpg54394926;     heYnzBTHpg54394926 = heYnzBTHpg35560303;     heYnzBTHpg35560303 = heYnzBTHpg906954;     heYnzBTHpg906954 = heYnzBTHpg65785359;     heYnzBTHpg65785359 = heYnzBTHpg66096991;     heYnzBTHpg66096991 = heYnzBTHpg15447204;     heYnzBTHpg15447204 = heYnzBTHpg33638403;     heYnzBTHpg33638403 = heYnzBTHpg49063098;     heYnzBTHpg49063098 = heYnzBTHpg22441209;     heYnzBTHpg22441209 = heYnzBTHpg7503705;     heYnzBTHpg7503705 = heYnzBTHpg16461647;     heYnzBTHpg16461647 = heYnzBTHpg36059055;     heYnzBTHpg36059055 = heYnzBTHpg60293800;     heYnzBTHpg60293800 = heYnzBTHpg36418953;     heYnzBTHpg36418953 = heYnzBTHpg25289683;     heYnzBTHpg25289683 = heYnzBTHpg63675235;     heYnzBTHpg63675235 = heYnzBTHpg23365412;     heYnzBTHpg23365412 = heYnzBTHpg5707312;     heYnzBTHpg5707312 = heYnzBTHpg51934386;     heYnzBTHpg51934386 = heYnzBTHpg75890053;     heYnzBTHpg75890053 = heYnzBTHpg21460609;     heYnzBTHpg21460609 = heYnzBTHpg36228015;     heYnzBTHpg36228015 = heYnzBTHpg70918402;     heYnzBTHpg70918402 = heYnzBTHpg28778775;     heYnzBTHpg28778775 = heYnzBTHpg69138129;     heYnzBTHpg69138129 = heYnzBTHpg91270666;     heYnzBTHpg91270666 = heYnzBTHpg77902369;     heYnzBTHpg77902369 = heYnzBTHpg88045317;     heYnzBTHpg88045317 = heYnzBTHpg38135749;     heYnzBTHpg38135749 = heYnzBTHpg94148389;     heYnzBTHpg94148389 = heYnzBTHpg34049154;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void zFrTcHDKtN83170973() {     float JKcNaGdVgV59348746 = -131767875;    float JKcNaGdVgV23225815 = -14500453;    float JKcNaGdVgV44119940 = -280283169;    float JKcNaGdVgV11094919 = -772789523;    float JKcNaGdVgV78078508 = -137654955;    float JKcNaGdVgV26949065 = -614343615;    float JKcNaGdVgV86983452 = -204846891;    float JKcNaGdVgV4997129 = -328746118;    float JKcNaGdVgV11161540 = -624285038;    float JKcNaGdVgV42986257 = 98047182;    float JKcNaGdVgV65189807 = -111163219;    float JKcNaGdVgV86965870 = -915210910;    float JKcNaGdVgV94171745 = -301539120;    float JKcNaGdVgV48096704 = -47245142;    float JKcNaGdVgV32517763 = -203810217;    float JKcNaGdVgV49306393 = -441547179;    float JKcNaGdVgV28159733 = -524534603;    float JKcNaGdVgV31199286 = -888483846;    float JKcNaGdVgV82647526 = -231738286;    float JKcNaGdVgV27780569 = -962715250;    float JKcNaGdVgV49777042 = -83626992;    float JKcNaGdVgV54212883 = -181918778;    float JKcNaGdVgV65897178 = -635355393;    float JKcNaGdVgV19210449 = -228703993;    float JKcNaGdVgV30824847 = -891377626;    float JKcNaGdVgV71126074 = -810363134;    float JKcNaGdVgV24074380 = -439760858;    float JKcNaGdVgV53473384 = -228732649;    float JKcNaGdVgV47036304 = -157553878;    float JKcNaGdVgV62894741 = -701494843;    float JKcNaGdVgV29532207 = -171406269;    float JKcNaGdVgV60542838 = -530091509;    float JKcNaGdVgV28727211 = -485222599;    float JKcNaGdVgV47208084 = -909111222;    float JKcNaGdVgV41557374 = -838016193;    float JKcNaGdVgV89985818 = -505212560;    float JKcNaGdVgV28488085 = -46548116;    float JKcNaGdVgV78749486 = -234065119;    float JKcNaGdVgV84018253 = -236292130;    float JKcNaGdVgV4468101 = -522983318;    float JKcNaGdVgV17076903 = -584443307;    float JKcNaGdVgV16205582 = -336510234;    float JKcNaGdVgV29880364 = -453170933;    float JKcNaGdVgV16276642 = -846091506;    float JKcNaGdVgV57797400 = -388200161;    float JKcNaGdVgV37168853 = -725560081;    float JKcNaGdVgV36554530 = -559096360;    float JKcNaGdVgV71968132 = -869481298;    float JKcNaGdVgV63187442 = -948465772;    float JKcNaGdVgV99213312 = -440925257;    float JKcNaGdVgV84469917 = -556230225;    float JKcNaGdVgV19467680 = -470823827;    float JKcNaGdVgV39202506 = -870512494;    float JKcNaGdVgV44859572 = 93763753;    float JKcNaGdVgV33393931 = -231718260;    float JKcNaGdVgV5135864 = -949849097;    float JKcNaGdVgV57328636 = -379145061;    float JKcNaGdVgV24909492 = 48420823;    float JKcNaGdVgV80270072 = -881411898;    float JKcNaGdVgV6952434 = -327291822;    float JKcNaGdVgV2874686 = -74582758;    float JKcNaGdVgV33510069 = -976114242;    float JKcNaGdVgV57960825 = -71192241;    float JKcNaGdVgV48266798 = -922790195;    float JKcNaGdVgV13454051 = -730546549;    float JKcNaGdVgV4646969 = -581071710;    float JKcNaGdVgV58238659 = -329988311;    float JKcNaGdVgV46963662 = -392427899;    float JKcNaGdVgV6539330 = -209228949;    float JKcNaGdVgV42531944 = -698597658;    float JKcNaGdVgV20818308 = -294999064;    float JKcNaGdVgV49410246 = -190469485;    float JKcNaGdVgV47181033 = -552191716;    float JKcNaGdVgV78179426 = -708754968;    float JKcNaGdVgV10703667 = -278271943;    float JKcNaGdVgV33571460 = -747116759;    float JKcNaGdVgV24332520 = -728747845;    float JKcNaGdVgV49620537 = -789263887;    float JKcNaGdVgV61413048 = -840503832;    float JKcNaGdVgV93655994 = -65817545;    float JKcNaGdVgV34571545 = -151266775;    float JKcNaGdVgV52106247 = -570279560;    float JKcNaGdVgV90285941 = -280266877;    float JKcNaGdVgV47822992 = -716628621;    float JKcNaGdVgV78424824 = -45264619;    float JKcNaGdVgV10064528 = -700582443;    float JKcNaGdVgV21340332 = -659579016;    float JKcNaGdVgV83867639 = -478986352;    float JKcNaGdVgV13814153 = -577392963;    float JKcNaGdVgV36421511 = -888167096;    float JKcNaGdVgV32657183 = -26067500;    float JKcNaGdVgV3578593 = 5031061;    float JKcNaGdVgV98479414 = -352653222;    float JKcNaGdVgV77065819 = -909000308;    float JKcNaGdVgV1593415 = -348400561;    float JKcNaGdVgV83566834 = -608329065;    float JKcNaGdVgV58244757 = -165317993;    float JKcNaGdVgV81613565 = -530380738;    float JKcNaGdVgV2822592 = -15544958;    float JKcNaGdVgV53150432 = -131767875;     JKcNaGdVgV59348746 = JKcNaGdVgV23225815;     JKcNaGdVgV23225815 = JKcNaGdVgV44119940;     JKcNaGdVgV44119940 = JKcNaGdVgV11094919;     JKcNaGdVgV11094919 = JKcNaGdVgV78078508;     JKcNaGdVgV78078508 = JKcNaGdVgV26949065;     JKcNaGdVgV26949065 = JKcNaGdVgV86983452;     JKcNaGdVgV86983452 = JKcNaGdVgV4997129;     JKcNaGdVgV4997129 = JKcNaGdVgV11161540;     JKcNaGdVgV11161540 = JKcNaGdVgV42986257;     JKcNaGdVgV42986257 = JKcNaGdVgV65189807;     JKcNaGdVgV65189807 = JKcNaGdVgV86965870;     JKcNaGdVgV86965870 = JKcNaGdVgV94171745;     JKcNaGdVgV94171745 = JKcNaGdVgV48096704;     JKcNaGdVgV48096704 = JKcNaGdVgV32517763;     JKcNaGdVgV32517763 = JKcNaGdVgV49306393;     JKcNaGdVgV49306393 = JKcNaGdVgV28159733;     JKcNaGdVgV28159733 = JKcNaGdVgV31199286;     JKcNaGdVgV31199286 = JKcNaGdVgV82647526;     JKcNaGdVgV82647526 = JKcNaGdVgV27780569;     JKcNaGdVgV27780569 = JKcNaGdVgV49777042;     JKcNaGdVgV49777042 = JKcNaGdVgV54212883;     JKcNaGdVgV54212883 = JKcNaGdVgV65897178;     JKcNaGdVgV65897178 = JKcNaGdVgV19210449;     JKcNaGdVgV19210449 = JKcNaGdVgV30824847;     JKcNaGdVgV30824847 = JKcNaGdVgV71126074;     JKcNaGdVgV71126074 = JKcNaGdVgV24074380;     JKcNaGdVgV24074380 = JKcNaGdVgV53473384;     JKcNaGdVgV53473384 = JKcNaGdVgV47036304;     JKcNaGdVgV47036304 = JKcNaGdVgV62894741;     JKcNaGdVgV62894741 = JKcNaGdVgV29532207;     JKcNaGdVgV29532207 = JKcNaGdVgV60542838;     JKcNaGdVgV60542838 = JKcNaGdVgV28727211;     JKcNaGdVgV28727211 = JKcNaGdVgV47208084;     JKcNaGdVgV47208084 = JKcNaGdVgV41557374;     JKcNaGdVgV41557374 = JKcNaGdVgV89985818;     JKcNaGdVgV89985818 = JKcNaGdVgV28488085;     JKcNaGdVgV28488085 = JKcNaGdVgV78749486;     JKcNaGdVgV78749486 = JKcNaGdVgV84018253;     JKcNaGdVgV84018253 = JKcNaGdVgV4468101;     JKcNaGdVgV4468101 = JKcNaGdVgV17076903;     JKcNaGdVgV17076903 = JKcNaGdVgV16205582;     JKcNaGdVgV16205582 = JKcNaGdVgV29880364;     JKcNaGdVgV29880364 = JKcNaGdVgV16276642;     JKcNaGdVgV16276642 = JKcNaGdVgV57797400;     JKcNaGdVgV57797400 = JKcNaGdVgV37168853;     JKcNaGdVgV37168853 = JKcNaGdVgV36554530;     JKcNaGdVgV36554530 = JKcNaGdVgV71968132;     JKcNaGdVgV71968132 = JKcNaGdVgV63187442;     JKcNaGdVgV63187442 = JKcNaGdVgV99213312;     JKcNaGdVgV99213312 = JKcNaGdVgV84469917;     JKcNaGdVgV84469917 = JKcNaGdVgV19467680;     JKcNaGdVgV19467680 = JKcNaGdVgV39202506;     JKcNaGdVgV39202506 = JKcNaGdVgV44859572;     JKcNaGdVgV44859572 = JKcNaGdVgV33393931;     JKcNaGdVgV33393931 = JKcNaGdVgV5135864;     JKcNaGdVgV5135864 = JKcNaGdVgV57328636;     JKcNaGdVgV57328636 = JKcNaGdVgV24909492;     JKcNaGdVgV24909492 = JKcNaGdVgV80270072;     JKcNaGdVgV80270072 = JKcNaGdVgV6952434;     JKcNaGdVgV6952434 = JKcNaGdVgV2874686;     JKcNaGdVgV2874686 = JKcNaGdVgV33510069;     JKcNaGdVgV33510069 = JKcNaGdVgV57960825;     JKcNaGdVgV57960825 = JKcNaGdVgV48266798;     JKcNaGdVgV48266798 = JKcNaGdVgV13454051;     JKcNaGdVgV13454051 = JKcNaGdVgV4646969;     JKcNaGdVgV4646969 = JKcNaGdVgV58238659;     JKcNaGdVgV58238659 = JKcNaGdVgV46963662;     JKcNaGdVgV46963662 = JKcNaGdVgV6539330;     JKcNaGdVgV6539330 = JKcNaGdVgV42531944;     JKcNaGdVgV42531944 = JKcNaGdVgV20818308;     JKcNaGdVgV20818308 = JKcNaGdVgV49410246;     JKcNaGdVgV49410246 = JKcNaGdVgV47181033;     JKcNaGdVgV47181033 = JKcNaGdVgV78179426;     JKcNaGdVgV78179426 = JKcNaGdVgV10703667;     JKcNaGdVgV10703667 = JKcNaGdVgV33571460;     JKcNaGdVgV33571460 = JKcNaGdVgV24332520;     JKcNaGdVgV24332520 = JKcNaGdVgV49620537;     JKcNaGdVgV49620537 = JKcNaGdVgV61413048;     JKcNaGdVgV61413048 = JKcNaGdVgV93655994;     JKcNaGdVgV93655994 = JKcNaGdVgV34571545;     JKcNaGdVgV34571545 = JKcNaGdVgV52106247;     JKcNaGdVgV52106247 = JKcNaGdVgV90285941;     JKcNaGdVgV90285941 = JKcNaGdVgV47822992;     JKcNaGdVgV47822992 = JKcNaGdVgV78424824;     JKcNaGdVgV78424824 = JKcNaGdVgV10064528;     JKcNaGdVgV10064528 = JKcNaGdVgV21340332;     JKcNaGdVgV21340332 = JKcNaGdVgV83867639;     JKcNaGdVgV83867639 = JKcNaGdVgV13814153;     JKcNaGdVgV13814153 = JKcNaGdVgV36421511;     JKcNaGdVgV36421511 = JKcNaGdVgV32657183;     JKcNaGdVgV32657183 = JKcNaGdVgV3578593;     JKcNaGdVgV3578593 = JKcNaGdVgV98479414;     JKcNaGdVgV98479414 = JKcNaGdVgV77065819;     JKcNaGdVgV77065819 = JKcNaGdVgV1593415;     JKcNaGdVgV1593415 = JKcNaGdVgV83566834;     JKcNaGdVgV83566834 = JKcNaGdVgV58244757;     JKcNaGdVgV58244757 = JKcNaGdVgV81613565;     JKcNaGdVgV81613565 = JKcNaGdVgV2822592;     JKcNaGdVgV2822592 = JKcNaGdVgV53150432;     JKcNaGdVgV53150432 = JKcNaGdVgV59348746;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ySvlDRUoej62789469() {     float fxihbFkOdw58777379 = -938103385;    float fxihbFkOdw38918435 = -491151376;    float fxihbFkOdw62391144 = -44975471;    float fxihbFkOdw12543237 = -791706997;    float fxihbFkOdw48878687 = -992204197;    float fxihbFkOdw70889696 = -464711207;    float fxihbFkOdw92395634 = -150714176;    float fxihbFkOdw85439950 = -670507639;    float fxihbFkOdw93262212 = -439530487;    float fxihbFkOdw9145412 = -766236753;    float fxihbFkOdw18884821 = -729768593;    float fxihbFkOdw61536482 = -503125585;    float fxihbFkOdw92005421 = -242514064;    float fxihbFkOdw26292640 = -714766233;    float fxihbFkOdw36212390 = -465887275;    float fxihbFkOdw27585753 = -835041828;    float fxihbFkOdw27638200 = -452694071;    float fxihbFkOdw10748706 = -755533694;    float fxihbFkOdw66431389 = -787754084;    float fxihbFkOdw2447692 = -713350303;    float fxihbFkOdw85717643 = -634684760;    float fxihbFkOdw33095909 = -257895512;    float fxihbFkOdw8953657 = -474259998;    float fxihbFkOdw73638391 = 44269476;    float fxihbFkOdw97657956 = -507409327;    float fxihbFkOdw88973011 = -601860366;    float fxihbFkOdw20243145 = -509778122;    float fxihbFkOdw18545285 = -913693417;    float fxihbFkOdw719104 = -126312991;    float fxihbFkOdw75644509 = -832844544;    float fxihbFkOdw69819346 = -882911099;    float fxihbFkOdw6616831 = -45730747;    float fxihbFkOdw58460429 = 99572797;    float fxihbFkOdw60641351 = -137485731;    float fxihbFkOdw28520260 = -83392297;    float fxihbFkOdw60698099 = -283998910;    float fxihbFkOdw90071996 = -462870639;    float fxihbFkOdw98978927 = -943245083;    float fxihbFkOdw31404165 = -320332795;    float fxihbFkOdw68825924 = -453739976;    float fxihbFkOdw30551046 = -603348798;    float fxihbFkOdw29897023 = -459859703;    float fxihbFkOdw31980931 = -68737418;    float fxihbFkOdw24159280 = -314498470;    float fxihbFkOdw53747997 = -139004714;    float fxihbFkOdw8703019 = -58807887;    float fxihbFkOdw77623037 = -642974249;    float fxihbFkOdw84592791 = -360203652;    float fxihbFkOdw94450018 = -747629358;    float fxihbFkOdw38222466 = -964985070;    float fxihbFkOdw77321889 = -923598281;    float fxihbFkOdw56552343 = -747528374;    float fxihbFkOdw27559316 = 45749589;    float fxihbFkOdw22848420 = -353484349;    float fxihbFkOdw77071825 = -909035171;    float fxihbFkOdw25681470 = -580207873;    float fxihbFkOdw29964779 = 83108621;    float fxihbFkOdw88752752 = 10755052;    float fxihbFkOdw14885281 = -184297671;    float fxihbFkOdw59905676 = -290343832;    float fxihbFkOdw50646551 = -954933085;    float fxihbFkOdw73850350 = -237020759;    float fxihbFkOdw84720846 = -444194649;    float fxihbFkOdw17617703 = -606685943;    float fxihbFkOdw39326066 = -883325655;    float fxihbFkOdw12267991 = -584037846;    float fxihbFkOdw3076054 = -502698383;    float fxihbFkOdw31364071 = -5028333;    float fxihbFkOdw97772379 = -531373937;    float fxihbFkOdw75514291 = -81888366;    float fxihbFkOdw37513757 = -272171189;    float fxihbFkOdw28659272 = -509448988;    float fxihbFkOdw79344541 = -335200900;    float fxihbFkOdw97605464 = -234014109;    float fxihbFkOdw71896646 = -10001506;    float fxihbFkOdw55820621 = -74825058;    float fxihbFkOdw1114979 = -89158095;    float fxihbFkOdw84794377 = -59761529;    float fxihbFkOdw19890395 = -816725810;    float fxihbFkOdw88954938 = -348601441;    float fxihbFkOdw11349974 = -958886118;    float fxihbFkOdw35650354 = -49574471;    float fxihbFkOdw24095266 = -66064059;    float fxihbFkOdw62496637 = -161327922;    float fxihbFkOdw98322619 = -909246264;    float fxihbFkOdw13267003 = -35382726;    float fxihbFkOdw79057514 = 8519664;    float fxihbFkOdw35612009 = -546942854;    float fxihbFkOdw83569525 = -228450561;    float fxihbFkOdw2838791 = -503184425;    float fxihbFkOdw30733321 = -267107531;    float fxihbFkOdw1319245 = -373625692;    float fxihbFkOdw84093647 = -658947413;    float fxihbFkOdw71498488 = 70011036;    float fxihbFkOdw18179373 = -498806891;    float fxihbFkOdw56700695 = -266328039;    float fxihbFkOdw45176176 = 84334945;    float fxihbFkOdw14363228 = -462051476;    float fxihbFkOdw84833213 = -431172816;    float fxihbFkOdw41480006 = -938103385;     fxihbFkOdw58777379 = fxihbFkOdw38918435;     fxihbFkOdw38918435 = fxihbFkOdw62391144;     fxihbFkOdw62391144 = fxihbFkOdw12543237;     fxihbFkOdw12543237 = fxihbFkOdw48878687;     fxihbFkOdw48878687 = fxihbFkOdw70889696;     fxihbFkOdw70889696 = fxihbFkOdw92395634;     fxihbFkOdw92395634 = fxihbFkOdw85439950;     fxihbFkOdw85439950 = fxihbFkOdw93262212;     fxihbFkOdw93262212 = fxihbFkOdw9145412;     fxihbFkOdw9145412 = fxihbFkOdw18884821;     fxihbFkOdw18884821 = fxihbFkOdw61536482;     fxihbFkOdw61536482 = fxihbFkOdw92005421;     fxihbFkOdw92005421 = fxihbFkOdw26292640;     fxihbFkOdw26292640 = fxihbFkOdw36212390;     fxihbFkOdw36212390 = fxihbFkOdw27585753;     fxihbFkOdw27585753 = fxihbFkOdw27638200;     fxihbFkOdw27638200 = fxihbFkOdw10748706;     fxihbFkOdw10748706 = fxihbFkOdw66431389;     fxihbFkOdw66431389 = fxihbFkOdw2447692;     fxihbFkOdw2447692 = fxihbFkOdw85717643;     fxihbFkOdw85717643 = fxihbFkOdw33095909;     fxihbFkOdw33095909 = fxihbFkOdw8953657;     fxihbFkOdw8953657 = fxihbFkOdw73638391;     fxihbFkOdw73638391 = fxihbFkOdw97657956;     fxihbFkOdw97657956 = fxihbFkOdw88973011;     fxihbFkOdw88973011 = fxihbFkOdw20243145;     fxihbFkOdw20243145 = fxihbFkOdw18545285;     fxihbFkOdw18545285 = fxihbFkOdw719104;     fxihbFkOdw719104 = fxihbFkOdw75644509;     fxihbFkOdw75644509 = fxihbFkOdw69819346;     fxihbFkOdw69819346 = fxihbFkOdw6616831;     fxihbFkOdw6616831 = fxihbFkOdw58460429;     fxihbFkOdw58460429 = fxihbFkOdw60641351;     fxihbFkOdw60641351 = fxihbFkOdw28520260;     fxihbFkOdw28520260 = fxihbFkOdw60698099;     fxihbFkOdw60698099 = fxihbFkOdw90071996;     fxihbFkOdw90071996 = fxihbFkOdw98978927;     fxihbFkOdw98978927 = fxihbFkOdw31404165;     fxihbFkOdw31404165 = fxihbFkOdw68825924;     fxihbFkOdw68825924 = fxihbFkOdw30551046;     fxihbFkOdw30551046 = fxihbFkOdw29897023;     fxihbFkOdw29897023 = fxihbFkOdw31980931;     fxihbFkOdw31980931 = fxihbFkOdw24159280;     fxihbFkOdw24159280 = fxihbFkOdw53747997;     fxihbFkOdw53747997 = fxihbFkOdw8703019;     fxihbFkOdw8703019 = fxihbFkOdw77623037;     fxihbFkOdw77623037 = fxihbFkOdw84592791;     fxihbFkOdw84592791 = fxihbFkOdw94450018;     fxihbFkOdw94450018 = fxihbFkOdw38222466;     fxihbFkOdw38222466 = fxihbFkOdw77321889;     fxihbFkOdw77321889 = fxihbFkOdw56552343;     fxihbFkOdw56552343 = fxihbFkOdw27559316;     fxihbFkOdw27559316 = fxihbFkOdw22848420;     fxihbFkOdw22848420 = fxihbFkOdw77071825;     fxihbFkOdw77071825 = fxihbFkOdw25681470;     fxihbFkOdw25681470 = fxihbFkOdw29964779;     fxihbFkOdw29964779 = fxihbFkOdw88752752;     fxihbFkOdw88752752 = fxihbFkOdw14885281;     fxihbFkOdw14885281 = fxihbFkOdw59905676;     fxihbFkOdw59905676 = fxihbFkOdw50646551;     fxihbFkOdw50646551 = fxihbFkOdw73850350;     fxihbFkOdw73850350 = fxihbFkOdw84720846;     fxihbFkOdw84720846 = fxihbFkOdw17617703;     fxihbFkOdw17617703 = fxihbFkOdw39326066;     fxihbFkOdw39326066 = fxihbFkOdw12267991;     fxihbFkOdw12267991 = fxihbFkOdw3076054;     fxihbFkOdw3076054 = fxihbFkOdw31364071;     fxihbFkOdw31364071 = fxihbFkOdw97772379;     fxihbFkOdw97772379 = fxihbFkOdw75514291;     fxihbFkOdw75514291 = fxihbFkOdw37513757;     fxihbFkOdw37513757 = fxihbFkOdw28659272;     fxihbFkOdw28659272 = fxihbFkOdw79344541;     fxihbFkOdw79344541 = fxihbFkOdw97605464;     fxihbFkOdw97605464 = fxihbFkOdw71896646;     fxihbFkOdw71896646 = fxihbFkOdw55820621;     fxihbFkOdw55820621 = fxihbFkOdw1114979;     fxihbFkOdw1114979 = fxihbFkOdw84794377;     fxihbFkOdw84794377 = fxihbFkOdw19890395;     fxihbFkOdw19890395 = fxihbFkOdw88954938;     fxihbFkOdw88954938 = fxihbFkOdw11349974;     fxihbFkOdw11349974 = fxihbFkOdw35650354;     fxihbFkOdw35650354 = fxihbFkOdw24095266;     fxihbFkOdw24095266 = fxihbFkOdw62496637;     fxihbFkOdw62496637 = fxihbFkOdw98322619;     fxihbFkOdw98322619 = fxihbFkOdw13267003;     fxihbFkOdw13267003 = fxihbFkOdw79057514;     fxihbFkOdw79057514 = fxihbFkOdw35612009;     fxihbFkOdw35612009 = fxihbFkOdw83569525;     fxihbFkOdw83569525 = fxihbFkOdw2838791;     fxihbFkOdw2838791 = fxihbFkOdw30733321;     fxihbFkOdw30733321 = fxihbFkOdw1319245;     fxihbFkOdw1319245 = fxihbFkOdw84093647;     fxihbFkOdw84093647 = fxihbFkOdw71498488;     fxihbFkOdw71498488 = fxihbFkOdw18179373;     fxihbFkOdw18179373 = fxihbFkOdw56700695;     fxihbFkOdw56700695 = fxihbFkOdw45176176;     fxihbFkOdw45176176 = fxihbFkOdw14363228;     fxihbFkOdw14363228 = fxihbFkOdw84833213;     fxihbFkOdw84833213 = fxihbFkOdw41480006;     fxihbFkOdw41480006 = fxihbFkOdw58777379;}
// Junk Finished
